
Force Feedback Yoke.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000484  0800fed0  0800fed0  0001fed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010354  08010354  0003033c  2**0
                  CONTENTS
  4 .ARM          00000000  08010354  08010354  0003033c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010354  08010354  0003033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010354  08010354  00020354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010358  08010358  00020358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0801035c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003033c  2**0
                  CONTENTS
 10 .bss          00000bdc  20000340  20000340  00030340  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000f1c  20000f1c  00030340  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003033c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021f20  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b86  00000000  00000000  0005228c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a60  00000000  00000000  00056e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001840  00000000  00000000  00058878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000077bc  00000000  00000000  0005a0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023c43  00000000  00000000  00061874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1dd0  00000000  00000000  000854b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00147287  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007de8  00000000  00000000  001472d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000340 	.word	0x20000340
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800feb4 	.word	0x0800feb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000344 	.word	0x20000344
 80001cc:	0800feb4 	.word	0x0800feb4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_frsub>:
 8000ba8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bac:	e002      	b.n	8000bb4 <__addsf3>
 8000bae:	bf00      	nop

08000bb0 <__aeabi_fsub>:
 8000bb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bb4 <__addsf3>:
 8000bb4:	0042      	lsls	r2, r0, #1
 8000bb6:	bf1f      	itttt	ne
 8000bb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bbc:	ea92 0f03 	teqne	r2, r3
 8000bc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc8:	d06a      	beq.n	8000ca0 <__addsf3+0xec>
 8000bca:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd2:	bfc1      	itttt	gt
 8000bd4:	18d2      	addgt	r2, r2, r3
 8000bd6:	4041      	eorgt	r1, r0
 8000bd8:	4048      	eorgt	r0, r1
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	bfb8      	it	lt
 8000bde:	425b      	neglt	r3, r3
 8000be0:	2b19      	cmp	r3, #25
 8000be2:	bf88      	it	hi
 8000be4:	4770      	bxhi	lr
 8000be6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bfe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4249      	negne	r1, r1
 8000c06:	ea92 0f03 	teq	r2, r3
 8000c0a:	d03f      	beq.n	8000c8c <__addsf3+0xd8>
 8000c0c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c10:	fa41 fc03 	asr.w	ip, r1, r3
 8000c14:	eb10 000c 	adds.w	r0, r0, ip
 8000c18:	f1c3 0320 	rsb	r3, r3, #32
 8000c1c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c20:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	d502      	bpl.n	8000c2c <__addsf3+0x78>
 8000c26:	4249      	negs	r1, r1
 8000c28:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c2c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c30:	d313      	bcc.n	8000c5a <__addsf3+0xa6>
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d306      	bcc.n	8000c46 <__addsf3+0x92>
 8000c38:	0840      	lsrs	r0, r0, #1
 8000c3a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c3e:	f102 0201 	add.w	r2, r2, #1
 8000c42:	2afe      	cmp	r2, #254	; 0xfe
 8000c44:	d251      	bcs.n	8000cea <__addsf3+0x136>
 8000c46:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	ea40 0003 	orr.w	r0, r0, r3
 8000c58:	4770      	bx	lr
 8000c5a:	0049      	lsls	r1, r1, #1
 8000c5c:	eb40 0000 	adc.w	r0, r0, r0
 8000c60:	3a01      	subs	r2, #1
 8000c62:	bf28      	it	cs
 8000c64:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c68:	d2ed      	bcs.n	8000c46 <__addsf3+0x92>
 8000c6a:	fab0 fc80 	clz	ip, r0
 8000c6e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c72:	ebb2 020c 	subs.w	r2, r2, ip
 8000c76:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7a:	bfaa      	itet	ge
 8000c7c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c80:	4252      	neglt	r2, r2
 8000c82:	4318      	orrge	r0, r3
 8000c84:	bfbc      	itt	lt
 8000c86:	40d0      	lsrlt	r0, r2
 8000c88:	4318      	orrlt	r0, r3
 8000c8a:	4770      	bx	lr
 8000c8c:	f092 0f00 	teq	r2, #0
 8000c90:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c94:	bf06      	itte	eq
 8000c96:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c9a:	3201      	addeq	r2, #1
 8000c9c:	3b01      	subne	r3, #1
 8000c9e:	e7b5      	b.n	8000c0c <__addsf3+0x58>
 8000ca0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cae:	d021      	beq.n	8000cf4 <__addsf3+0x140>
 8000cb0:	ea92 0f03 	teq	r2, r3
 8000cb4:	d004      	beq.n	8000cc0 <__addsf3+0x10c>
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	bf08      	it	eq
 8000cbc:	4608      	moveq	r0, r1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea90 0f01 	teq	r0, r1
 8000cc4:	bf1c      	itt	ne
 8000cc6:	2000      	movne	r0, #0
 8000cc8:	4770      	bxne	lr
 8000cca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cce:	d104      	bne.n	8000cda <__addsf3+0x126>
 8000cd0:	0040      	lsls	r0, r0, #1
 8000cd2:	bf28      	it	cs
 8000cd4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	4770      	bx	lr
 8000cda:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cde:	bf3c      	itt	cc
 8000ce0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bxcc	lr
 8000ce6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf8:	bf16      	itet	ne
 8000cfa:	4608      	movne	r0, r1
 8000cfc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d00:	4601      	movne	r1, r0
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	bf06      	itte	eq
 8000d06:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0a:	ea90 0f01 	teqeq	r0, r1
 8000d0e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d12:	4770      	bx	lr

08000d14 <__aeabi_ui2f>:
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e004      	b.n	8000d24 <__aeabi_i2f+0x8>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_i2f>:
 8000d1c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d20:	bf48      	it	mi
 8000d22:	4240      	negmi	r0, r0
 8000d24:	ea5f 0c00 	movs.w	ip, r0
 8000d28:	bf08      	it	eq
 8000d2a:	4770      	bxeq	lr
 8000d2c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d30:	4601      	mov	r1, r0
 8000d32:	f04f 0000 	mov.w	r0, #0
 8000d36:	e01c      	b.n	8000d72 <__aeabi_l2f+0x2a>

08000d38 <__aeabi_ul2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f04f 0300 	mov.w	r3, #0
 8000d44:	e00a      	b.n	8000d5c <__aeabi_l2f+0x14>
 8000d46:	bf00      	nop

08000d48 <__aeabi_l2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__aeabi_l2f+0x14>
 8000d56:	4240      	negs	r0, r0
 8000d58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d5c:	ea5f 0c01 	movs.w	ip, r1
 8000d60:	bf02      	ittt	eq
 8000d62:	4684      	moveq	ip, r0
 8000d64:	4601      	moveq	r1, r0
 8000d66:	2000      	moveq	r0, #0
 8000d68:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d6c:	bf08      	it	eq
 8000d6e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d72:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d76:	fabc f28c 	clz	r2, ip
 8000d7a:	3a08      	subs	r2, #8
 8000d7c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d80:	db10      	blt.n	8000da4 <__aeabi_l2f+0x5c>
 8000d82:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d86:	4463      	add	r3, ip
 8000d88:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d8c:	f1c2 0220 	rsb	r2, r2, #32
 8000d90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d94:	fa20 f202 	lsr.w	r2, r0, r2
 8000d98:	eb43 0002 	adc.w	r0, r3, r2
 8000d9c:	bf08      	it	eq
 8000d9e:	f020 0001 	biceq.w	r0, r0, #1
 8000da2:	4770      	bx	lr
 8000da4:	f102 0220 	add.w	r2, r2, #32
 8000da8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dac:	f1c2 0220 	rsb	r2, r2, #32
 8000db0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db4:	fa21 f202 	lsr.w	r2, r1, r2
 8000db8:	eb43 0002 	adc.w	r0, r3, r2
 8000dbc:	bf08      	it	eq
 8000dbe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc2:	4770      	bx	lr

08000dc4 <FFBInit>:
 */

#include "force_feedback_controller.h"
#include "utilities.h"

void FFBInit(FFBController_t *ffb) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	ffb->constantGain = 0;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f04f 0200 	mov.w	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
	ffb->periodicGain = 0;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
	ffb->springGain = 165;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <FFBInit+0x4c>)
 8000de0:	611a      	str	r2, [r3, #16]
	ffb->damperGain = 2;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de8:	615a      	str	r2, [r3, #20]

	ffb->gain = 1;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000df0:	605a      	str	r2, [r3, #4]
	ffb->motorKtConstant = 0.0265;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <FFBInit+0x50>)
 8000df6:	601a      	str	r2, [r3, #0]
	ffb->minimumSpringForce = 0.01;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <FFBInit+0x54>)
 8000dfc:	619a      	str	r2, [r3, #24]
	ffb->lockAngle = 90;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <FFBInit+0x58>)
 8000e02:	61da      	str	r2, [r3, #28]
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	43250000 	.word	0x43250000
 8000e14:	3cd91687 	.word	0x3cd91687
 8000e18:	3c23d70a 	.word	0x3c23d70a
 8000e1c:	42b40000 	.word	0x42b40000

08000e20 <FFBComputeSpringForce>:
float FFBComputeConstantForce(FFBController_t *ffb, float amount) {
	return ffb->constantGain * amount;
}

float FFBComputeSpringForce(FFBController_t *ffb, float measuredAngle,
		float setPointAngle, float strength) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60f8      	str	r0, [r7, #12]
 8000e28:	ed87 0a02 	vstr	s0, [r7, #8]
 8000e2c:	edc7 0a01 	vstr	s1, [r7, #4]
 8000e30:	ed87 1a00 	vstr	s2, [r7]

	float constrainedStrength = ConstrainFloat(strength, -1.0f, 1.0f);
 8000e34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000e38:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8000e3c:	ed97 0a00 	vldr	s0, [r7]
 8000e40:	f000 fa0f 	bl	8001262 <ConstrainFloat>
 8000e44:	ed87 0a04 	vstr	s0, [r7, #16]

	float force = ffb->springGain * (setPointAngle - measuredAngle) *
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	ed93 7a04 	vldr	s14, [r3, #16]
 8000e4e:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e52:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e56:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e5a:	ee27 7a27 	vmul.f32	s14, s14, s15
			ffb->gain * constrainedStrength;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	edd3 7a01 	vldr	s15, [r3, #4]
	float force = ffb->springGain * (setPointAngle - measuredAngle) *
 8000e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e68:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e70:	edc7 7a05 	vstr	s15, [r7, #20]

	//add/subtract minimum spring force based on force direction
	if(force < 0) {
 8000e74:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	d509      	bpl.n	8000e96 <FFBComputeSpringForce+0x76>
		force -= ffb->minimumSpringForce;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e88:	ed97 7a05 	vldr	s14, [r7, #20]
 8000e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e90:	edc7 7a05 	vstr	s15, [r7, #20]
 8000e94:	e00f      	b.n	8000eb6 <FFBComputeSpringForce+0x96>
	}
	else if (force > 0) {
 8000e96:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea2:	dd08      	ble.n	8000eb6 <FFBComputeSpringForce+0x96>
		force += ffb->minimumSpringForce;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	edd3 7a06 	vldr	s15, [r3, #24]
 8000eaa:	ed97 7a05 	vldr	s14, [r7, #20]
 8000eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb2:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return force;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	ee07 3a90 	vmov	s15, r3
}
 8000ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec0:	3718      	adds	r7, #24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <PIDInit>:

#include "pid.h"

static float Abs(float x);

void PIDInit(PID_t *pid) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
//	pid->kP = 292;//350;//250;//180;//35;
//	pid->kI = 100;//20;//60;//20;//20;//3;//7;
//	pid->kD = 0.5;//2.2;

	pid->kP = 200;//250;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <PIDInit+0x38>)
 8000ed4:	601a      	str	r2, [r3, #0]
	pid->kI = 400;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <PIDInit+0x3c>)
 8000eda:	605a      	str	r2, [r3, #4]
	pid->kD = 0.8;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <PIDInit+0x40>)
 8000ee0:	609a      	str	r2, [r3, #8]

	pid->integral = 0;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
	pid->preError = 0;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
}
 8000ef2:	bf00      	nop
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	43480000 	.word	0x43480000
 8000f04:	43c80000 	.word	0x43c80000
 8000f08:	3f4ccccd 	.word	0x3f4ccccd

08000f0c <ComputePID>:

float ComputePID(PID_t *pid, float setPoint, float actual) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f18:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setPoint - actual;
 8000f1c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f20:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f28:	edc7 7a06 	vstr	s15, [r7, #24]

	//integrate only if error is large enough
	if(Abs(error) > PID_EPSILON) {
 8000f2c:	ed97 0a06 	vldr	s0, [r7, #24]
 8000f30:	f000 f892 	bl	8001058 <Abs>
 8000f34:	eef0 7a40 	vmov.f32	s15, s0
 8000f38:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001030 <ComputePID+0x124>
 8000f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f44:	dd0d      	ble.n	8000f62 <ComputePID+0x56>
		pid->integral += error*PID_DT;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f50:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001034 <ComputePID+0x128>
 8000f54:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	edc3 7a03 	vstr	s15, [r3, #12]
	}
	//constrain integral
	if(pid->integral > PID_I_MAX) {
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f68:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8001038 <ComputePID+0x12c>
 8000f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f74:	dd03      	ble.n	8000f7e <ComputePID+0x72>
		pid->integral = PID_I_MAX;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4a30      	ldr	r2, [pc, #192]	; (800103c <ComputePID+0x130>)
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	e00c      	b.n	8000f98 <ComputePID+0x8c>
	}
	else if(pid->integral < PID_I_MIN) {
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f84:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001040 <ComputePID+0x134>
 8000f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f90:	d502      	bpl.n	8000f98 <ComputePID+0x8c>
		pid->integral = PID_I_MIN;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4a2b      	ldr	r2, [pc, #172]	; (8001044 <ComputePID+0x138>)
 8000f96:	60da      	str	r2, [r3, #12]
	}

	float derivative = (error - pid->preError)/PID_DT;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f9e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fa2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fa6:	eddf 6a23 	vldr	s13, [pc, #140]	; 8001034 <ComputePID+0x128>
 8000faa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fae:	edc7 7a05 	vstr	s15, [r7, #20]

	float output = pid->kP*error + pid->kI*pid->integral + pid->kD*derivative;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	ed93 7a00 	vldr	s14, [r3]
 8000fb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	edd3 6a02 	vldr	s13, [r3, #8]
 8000fda:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fe6:	edc7 7a07 	vstr	s15, [r7, #28]
	//constrain PID output
	if(output > PID_MAX) {
 8000fea:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fee:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001048 <ComputePID+0x13c>
 8000ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffa:	dd02      	ble.n	8001002 <ComputePID+0xf6>
		output = PID_MAX;
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <ComputePID+0x140>)
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	e00a      	b.n	8001018 <ComputePID+0x10c>
	}
	else if(output < PID_MIN) {
 8001002:	edd7 7a07 	vldr	s15, [r7, #28]
 8001006:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001050 <ComputePID+0x144>
 800100a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001012:	d501      	bpl.n	8001018 <ComputePID+0x10c>
		output = PID_MIN;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <ComputePID+0x148>)
 8001016:	61fb      	str	r3, [r7, #28]
	}

	//update previous error for derivative calculation
	pid->preError = error;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	611a      	str	r2, [r3, #16]

	return output;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	ee07 3a90 	vmov	s15, r3
}
 8001024:	eeb0 0a67 	vmov.f32	s0, s15
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	3f19999a 	.word	0x3f19999a
 8001034:	3c23d70a 	.word	0x3c23d70a
 8001038:	447a0000 	.word	0x447a0000
 800103c:	447a0000 	.word	0x447a0000
 8001040:	c47a0000 	.word	0xc47a0000
 8001044:	c47a0000 	.word	0xc47a0000
 8001048:	4515f000 	.word	0x4515f000
 800104c:	4515f000 	.word	0x4515f000
 8001050:	c515f000 	.word	0xc515f000
 8001054:	c515f000 	.word	0xc515f000

08001058 <Abs>:

static float Abs(float x) {
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	ed87 0a01 	vstr	s0, [r7, #4]
	if(x < 0) {
 8001062:	edd7 7a01 	vldr	s15, [r7, #4]
 8001066:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106e:	d504      	bpl.n	800107a <Abs+0x22>
		return -x;
 8001070:	edd7 7a01 	vldr	s15, [r7, #4]
 8001074:	eef1 7a67 	vneg.f32	s15, s15
 8001078:	e001      	b.n	800107e <Abs+0x26>
	}
	else{
		return x;
 800107a:	edd7 7a01 	vldr	s15, [r7, #4]
	}
}
 800107e:	eeb0 0a67 	vmov.f32	s0, s15
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <RotaryEncInit>:
#include "rotary_encoder.h"
#include "utilities.h"

static float RotaryEncCalcSpeed(RotaryEncoder_t *encoder, float deltaTimeMs);

void RotaryEncInit(RotaryEncoder_t *encoder) {
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	encoder->prevHardCount = 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	809a      	strh	r2, [r3, #4]
	encoder->count32 = 0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
	encoder->speed = 0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	60da      	str	r2, [r3, #12]
	encoder->prevSpeedCount = 0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
	encoder->dtCounter = 0;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
	encoder->prevDt = 0;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <RotaryEncSetCount>:

void RotaryEncSetCount(RotaryEncoder_t *encoder, int32_t count) {
 80010c6:	b480      	push	{r7}
 80010c8:	b083      	sub	sp, #12
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
	encoder->count32 = count;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	683a      	ldr	r2, [r7, #0]
 80010d4:	601a      	str	r2, [r3, #0]
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <RotaryEncGetCount>:

int32_t RotaryEncGetCount(RotaryEncoder_t *encoder) {
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	return encoder->count32;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <RotaryEncGetSpeed>:

float RotaryEncGetSpeed(RotaryEncoder_t *encoder) {
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	return encoder->speed;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	ee07 3a90 	vmov	s15, r3
}
 800110a:	eeb0 0a67 	vmov.f32	s0, s15
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <RotaryEncUpdate>:


void RotaryEncUpdate(RotaryEncoder_t *encoder, uint16_t newCount,
		float deltaTimeMs) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	460b      	mov	r3, r1
 8001122:	ed87 0a01 	vstr	s0, [r7, #4]
 8001126:	817b      	strh	r3, [r7, #10]

	//for speed calculation
	int32_t prevCount32 = encoder->count32;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61fb      	str	r3, [r7, #28]

	//find change in count
	int32_t deltaCount = (int32_t)newCount - encoder->prevHardCount;
 800112e:	897b      	ldrh	r3, [r7, #10]
 8001130:	68fa      	ldr	r2, [r7, #12]
 8001132:	8892      	ldrh	r2, [r2, #4]
 8001134:	1a9b      	subs	r3, r3, r2
 8001136:	61bb      	str	r3, [r7, #24]

	//newCount did not wrap around
	if(Abs(deltaCount) < ENC_COUNT_WRAP_THRESHOLD) {
 8001138:	69b8      	ldr	r0, [r7, #24]
 800113a:	f000 f8bb 	bl	80012b4 <Abs>
 800113e:	4603      	mov	r3, r0
 8001140:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8001144:	4293      	cmp	r3, r2
 8001146:	dc06      	bgt.n	8001156 <RotaryEncUpdate+0x3e>
		encoder->count32 += deltaCount;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	441a      	add	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	e01d      	b.n	8001192 <RotaryEncUpdate+0x7a>
	}
	//newCount wrapped around
	else {
		//newCount underflow
		if(encoder->prevHardCount < newCount){
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	889b      	ldrh	r3, [r3, #4]
 800115a:	897a      	ldrh	r2, [r7, #10]
 800115c:	429a      	cmp	r2, r3
 800115e:	d90d      	bls.n	800117c <RotaryEncUpdate+0x64>
			encoder->count32 -= (int32_t)0xFFFF + encoder->prevHardCount -
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	889b      	ldrh	r3, [r3, #4]
 8001168:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800116c:	33ff      	adds	r3, #255	; 0xff
 800116e:	8979      	ldrh	r1, [r7, #10]
 8001170:	1a5b      	subs	r3, r3, r1
					newCount + 1;
 8001172:	3301      	adds	r3, #1
			encoder->count32 -= (int32_t)0xFFFF + encoder->prevHardCount -
 8001174:	1ad2      	subs	r2, r2, r3
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e00a      	b.n	8001192 <RotaryEncUpdate+0x7a>
		}
		//newCount overflow
		else {
			encoder->count32 += (int32_t)0xFFFF - encoder->prevHardCount + 1 +
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	889b      	ldrh	r3, [r3, #4]
 8001184:	f5c3 3180 	rsb	r1, r3, #65536	; 0x10000
 8001188:	897b      	ldrh	r3, [r7, #10]
 800118a:	440b      	add	r3, r1
 800118c:	441a      	add	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	601a      	str	r2, [r3, #0]

	//TODO: switch to UnwrapAtThreshold16 function
//	encoder->count32 += UnwrapAtThreshold16(newCount, encoder->prevHardCount,
//			ENC_COUNT_WRAP_THRESHOLD);

	int32_t speedDeltaCount = encoder->count32 - encoder->prevSpeedCount;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	617b      	str	r3, [r7, #20]
	encoder->dtCounter += ENC_UPDATE_TIME_STEP;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	1d5a      	adds	r2, r3, #5
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	611a      	str	r2, [r3, #16]
	if(Abs(speedDeltaCount) >= ENC_UPDATE_SPEED_MIN_COUNT_DELTA &&
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f000 f883 	bl	80012b4 <Abs>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	dd23      	ble.n	80011fc <RotaryEncUpdate+0xe4>
			encoder->dtCounter >=
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	691b      	ldr	r3, [r3, #16]
	if(Abs(speedDeltaCount) >= ENC_UPDATE_SPEED_MIN_COUNT_DELTA &&
 80011b8:	2b4f      	cmp	r3, #79	; 0x4f
 80011ba:	d91f      	bls.n	80011fc <RotaryEncUpdate+0xe4>
			ENC_UPDATE_TIME_STEP*ENC_UPDATE_SPEED_SAMPLES) {

		//calculate and update speed
		encoder->speed = speedDeltaCount /
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	ee07 3a90 	vmov	s15, r3
 80011c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
				(encoder->dtCounter * ENC_UPDATE_MS_SCALE);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800122c <RotaryEncUpdate+0x114>
 80011d6:	ee27 7a87 	vmul.f32	s14, s15, s14
		encoder->speed = speedDeltaCount /
 80011da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	edc3 7a03 	vstr	s15, [r3, #12]
		encoder->prevDt = encoder->dtCounter;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	615a      	str	r2, [r3, #20]
		encoder->dtCounter = 0;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	611a      	str	r2, [r3, #16]
		encoder->prevSpeedCount = encoder->count32;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	e00f      	b.n	800121c <RotaryEncUpdate+0x104>
	}
	else if(encoder->dtCounter >= 500) {
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001204:	d30a      	bcc.n	800121c <RotaryEncUpdate+0x104>
		encoder->speed = 0;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
		encoder->prevSpeedCount = encoder->count32;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	609a      	str	r2, [r3, #8]
		encoder->dtCounter = 0;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
//	}



	//update previous hardware count
	encoder->prevHardCount = newCount;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	897a      	ldrh	r2, [r7, #10]
 8001220:	809a      	strh	r2, [r3, #4]
}
 8001222:	bf00      	nop
 8001224:	3720      	adds	r7, #32
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	3dcccccd 	.word	0x3dcccccd

08001230 <Constrain>:
 *      Author: Jennyston
 */

#include "utilities.h"

int32_t Constrain(int32_t value, int32_t min, int32_t max) {
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
	if(value < min) {
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	429a      	cmp	r2, r3
 8001242:	da01      	bge.n	8001248 <Constrain+0x18>
		return min;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	e006      	b.n	8001256 <Constrain+0x26>
	}
	else if(value > max) {
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	429a      	cmp	r2, r3
 800124e:	dd01      	ble.n	8001254 <Constrain+0x24>
		return max;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	e000      	b.n	8001256 <Constrain+0x26>
	}
	else {
		return value;
 8001254:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <ConstrainFloat>:

float ConstrainFloat(float value, float min, float max) {
 8001262:	b480      	push	{r7}
 8001264:	b085      	sub	sp, #20
 8001266:	af00      	add	r7, sp, #0
 8001268:	ed87 0a03 	vstr	s0, [r7, #12]
 800126c:	edc7 0a02 	vstr	s1, [r7, #8]
 8001270:	ed87 1a01 	vstr	s2, [r7, #4]
	if(value < min) {
 8001274:	ed97 7a03 	vldr	s14, [r7, #12]
 8001278:	edd7 7a02 	vldr	s15, [r7, #8]
 800127c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001284:	d501      	bpl.n	800128a <ConstrainFloat+0x28>
		return min;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	e00b      	b.n	80012a2 <ConstrainFloat+0x40>
	}
	else if(value > max) {
 800128a:	ed97 7a03 	vldr	s14, [r7, #12]
 800128e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129a:	dd01      	ble.n	80012a0 <ConstrainFloat+0x3e>
		return max;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	e000      	b.n	80012a2 <ConstrainFloat+0x40>
	}
	else {
		return value;
 80012a0:	68fb      	ldr	r3, [r7, #12]
	}
}
 80012a2:	ee07 3a90 	vmov	s15, r3
 80012a6:	eeb0 0a67 	vmov.f32	s0, s15
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <Abs>:
			return 0xFFFF - (int32_t)currentCount + newCount + 1;
		}
	}
}

int32_t Abs(int32_t x) {
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	return x > 0 ? x : -x;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	bfb8      	it	lt
 80012c2:	425b      	neglt	r3, r3
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012d8:	1d39      	adds	r1, r7, #4
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	2201      	movs	r2, #1
 80012e0:	4803      	ldr	r0, [pc, #12]	; (80012f0 <__io_putchar+0x20>)
 80012e2:	f007 f939 	bl	8008558 <HAL_UART_Transmit>
  return ch;
 80012e6:	687b      	ldr	r3, [r7, #4]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000544 	.word	0x20000544

080012f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80012f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
	if(htim == &htim6) {
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a2a      	ldr	r2, [pc, #168]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d143      	bne.n	800138e <HAL_TIM_PeriodElapsedCallback+0x9a>
		RotaryEncUpdate(&encoder, __HAL_TIM_GET_COUNTER(&htim4), 0.5);
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130c:	b29b      	uxth	r3, r3
 800130e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8001312:	4619      	mov	r1, r3
 8001314:	4827      	ldr	r0, [pc, #156]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001316:	f7ff feff 	bl	8001118 <RotaryEncUpdate>
		encoderBuffer[encoderBufferEnd] = RotaryEncGetCount(&encoder);
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800131c:	681e      	ldr	r6, [r3, #0]
 800131e:	4825      	ldr	r0, [pc, #148]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001320:	f7ff fedf 	bl	80010e2 <RotaryEncGetCount>
 8001324:	4603      	mov	r3, r0
 8001326:	4a25      	ldr	r2, [pc, #148]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001328:	f842 3026 	str.w	r3, [r2, r6, lsl #2]

		// Add new value, subtract old value
		encoderAccumulator += encoderBuffer[encoderBufferEnd] -
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a22      	ldr	r2, [pc, #136]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001332:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
				encoderBuffer[encoderBufferStart];
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4920      	ldr	r1, [pc, #128]	; (80013bc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800133c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
		encoderAccumulator += encoderBuffer[encoderBufferEnd] -
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	17da      	asrs	r2, r3, #31
 8001344:	461c      	mov	r4, r3
 8001346:	4615      	mov	r5, r2
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	eb14 0802 	adds.w	r8, r4, r2
 8001352:	eb45 0903 	adc.w	r9, r5, r3
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001358:	e9c3 8900 	strd	r8, r9, [r3]

		encoderBufferStart++;
 800135c:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001364:	6013      	str	r3, [r2, #0]
		if(encoderBufferStart == ENCODER_BUFFER_SIZE) {
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d102      	bne.n	8001374 <HAL_TIM_PeriodElapsedCallback+0x80>
			encoderBufferStart = 0;
 800136e:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
		}

		encoderBufferEnd++;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	3301      	adds	r3, #1
 800137a:	4a0f      	ldr	r2, [pc, #60]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800137c:	6013      	str	r3, [r2, #0]
		if(encoderBufferEnd == ENCODER_BUFFER_SIZE) {
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2b05      	cmp	r3, #5
 8001384:	d10c      	bne.n	80013a0 <HAL_TIM_PeriodElapsedCallback+0xac>
			encoderBufferEnd = 0;
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
	}
	else if(htim == &htim7) {
		MotorControllerUpdate(&controller, 2);
		//testCurrent = MotorControllerGetCurrent(&controller);
	}
}
 800138c:	e008      	b.n	80013a0 <HAL_TIM_PeriodElapsedCallback+0xac>
	else if(htim == &htim7) {
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d104      	bne.n	80013a0 <HAL_TIM_PeriodElapsedCallback+0xac>
		MotorControllerUpdate(&controller, 2);
 8001396:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800139a:	480c      	ldr	r0, [pc, #48]	; (80013cc <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800139c:	f000 fd6c 	bl	8001e78 <MotorControllerUpdate>
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013aa:	bf00      	nop
 80013ac:	200004ac 	.word	0x200004ac
 80013b0:	20000460 	.word	0x20000460
 80013b4:	200005cc 	.word	0x200005cc
 80013b8:	200005fc 	.word	0x200005fc
 80013bc:	200005e4 	.word	0x200005e4
 80013c0:	200005f8 	.word	0x200005f8
 80013c4:	20000600 	.word	0x20000600
 80013c8:	200004f8 	.word	0x200004f8
 80013cc:	20000680 	.word	0x20000680

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b09b      	sub	sp, #108	; 0x6c
 80013d4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d6:	f001 fba7 	bl	8002b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013da:	f000 fa0b 	bl	80017f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013de:	f000 fc6d 	bl	8001cbc <MX_GPIO_Init>
  MX_I2C1_Init();
 80013e2:	f000 fa6d 	bl	80018c0 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013e6:	f000 faa9 	bl	800193c <MX_SPI1_Init>
  MX_TIM4_Init();
 80013ea:	f000 fb75 	bl	8001ad8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80013ee:	f000 fc35 	bl	8001c5c <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80013f2:	f00b fb75 	bl	800cae0 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80013f6:	f000 fadf 	bl	80019b8 <MX_TIM1_Init>
  MX_TIM6_Init();
 80013fa:	f000 fbc3 	bl	8001b84 <MX_TIM6_Init>
  MX_TIM7_Init();
 80013fe:	f000 fbf7 	bl	8001bf0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  GameHID_t gameHID = {
 8001402:	2300      	movs	r3, #0
 8001404:	873b      	strh	r3, [r7, #56]	; 0x38
 8001406:	2300      	movs	r3, #0
 8001408:	877b      	strh	r3, [r7, #58]	; 0x3a
 800140a:	2300      	movs	r3, #0
 800140c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		  .joyX = 0,
		  .joyY = 0,
		  .joyB1 = 0
  };

  PIDInit(&positionPid);
 8001410:	489b      	ldr	r0, [pc, #620]	; (8001680 <main+0x2b0>)
 8001412:	f7ff fd59 	bl	8000ec8 <PIDInit>
  RotaryEncInit(&encoder);
 8001416:	489b      	ldr	r0, [pc, #620]	; (8001684 <main+0x2b4>)
 8001418:	f7ff fe38 	bl	800108c <RotaryEncInit>


  encoderAccumulator = 0;
 800141c:	499a      	ldr	r1, [pc, #616]	; (8001688 <main+0x2b8>)
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	e9c1 2300 	strd	r2, r3, [r1]
  encoderBufferStart = 0;
 800142a:	4b98      	ldr	r3, [pc, #608]	; (800168c <main+0x2bc>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
  encoderBufferEnd = ENCODER_NUM_SAMPLES;
 8001430:	4b97      	ldr	r3, [pc, #604]	; (8001690 <main+0x2c0>)
 8001432:	2204      	movs	r2, #4
 8001434:	601a      	str	r2, [r3, #0]

  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001436:	213c      	movs	r1, #60	; 0x3c
 8001438:	4896      	ldr	r0, [pc, #600]	; (8001694 <main+0x2c4>)
 800143a:	f006 f8ad 	bl	8007598 <HAL_TIM_Encoder_Start>

  PIDInit(&currentPid);
 800143e:	4896      	ldr	r0, [pc, #600]	; (8001698 <main+0x2c8>)
 8001440:	f7ff fd42 	bl	8000ec8 <PIDInit>
  currentPid.kP = 3580;
 8001444:	4b94      	ldr	r3, [pc, #592]	; (8001698 <main+0x2c8>)
 8001446:	4a95      	ldr	r2, [pc, #596]	; (800169c <main+0x2cc>)
 8001448:	601a      	str	r2, [r3, #0]
  currentPid.kI = 0;
 800144a:	4b93      	ldr	r3, [pc, #588]	; (8001698 <main+0x2c8>)
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
  currentPid.kD = 0;
 8001452:	4b91      	ldr	r3, [pc, #580]	; (8001698 <main+0x2c8>)
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  CurrentSenseInit(&currentSense, &hi2c1);
 800145a:	4991      	ldr	r1, [pc, #580]	; (80016a0 <main+0x2d0>)
 800145c:	4891      	ldr	r0, [pc, #580]	; (80016a4 <main+0x2d4>)
 800145e:	f001 f8c5 	bl	80025ec <CurrentSenseInit>

  GPIO_t gpioMotorReverse;
  GPIOInit(&gpioMotorReverse, MOTOR_FORWARD_GPIO_Port, MOTOR_FORWARD_Pin);
 8001462:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146a:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800146e:	4618      	mov	r0, r3
 8001470:	f001 faf3 	bl	8002a5a <GPIOInit>

  GPIO_t gpioMotorForward;
  GPIOInit(&gpioMotorForward, MOTOR_REVERSE_GPIO_Port, MOTOR_REVERSE_Pin);
 8001474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001478:	f44f 7280 	mov.w	r2, #256	; 0x100
 800147c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001480:	4618      	mov	r0, r3
 8001482:	f001 faea 	bl	8002a5a <GPIOInit>

  MotorInit(&motor, &htim1, TIM_CHANNEL_3, gpioMotorReverse, gpioMotorForward);
 8001486:	aa01      	add	r2, sp, #4
 8001488:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800148c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001490:	e882 0003 	stmia.w	r2, {r0, r1}
 8001494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149a:	2208      	movs	r2, #8
 800149c:	4982      	ldr	r1, [pc, #520]	; (80016a8 <main+0x2d8>)
 800149e:	4883      	ldr	r0, [pc, #524]	; (80016ac <main+0x2dc>)
 80014a0:	f001 f99a 	bl	80027d8 <MotorInit>
  //MotorSetOffset(&motor, MOTOR_OFFSET);
  MotorStartPWM(&motor);
 80014a4:	4881      	ldr	r0, [pc, #516]	; (80016ac <main+0x2dc>)
 80014a6:	f001 f9c3 	bl	8002830 <MotorStartPWM>

  FFBInit(&ffb);
 80014aa:	4881      	ldr	r0, [pc, #516]	; (80016b0 <main+0x2e0>)
 80014ac:	f7ff fc8a 	bl	8000dc4 <FFBInit>

  HAL_TIM_Base_Start_IT(&htim1);
 80014b0:	487d      	ldr	r0, [pc, #500]	; (80016a8 <main+0x2d8>)
 80014b2:	f005 fe09 	bl	80070c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 80014b6:	487f      	ldr	r0, [pc, #508]	; (80016b4 <main+0x2e4>)
 80014b8:	f005 fe06 	bl	80070c8 <HAL_TIM_Base_Start_IT>

  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET){}
 80014bc:	bf00      	nop
 80014be:	2101      	movs	r1, #1
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c4:	f001 fe46 	bl	8003154 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f7      	beq.n	80014be <main+0xee>

  //Home motor
  GPIO_t homeSensorGpio;
  GPIOInit(&homeSensorGpio, HOME_SENSOR_GPIO_Port, HOME_SENSOR_Pin);
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	2202      	movs	r2, #2
 80014d4:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80014d8:	4618      	mov	r0, r3
 80014da:	f001 fabe 	bl	8002a5a <GPIOInit>
  HomeSensorInit(&homeSensor, homeSensorGpio);
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014e6:	4874      	ldr	r0, [pc, #464]	; (80016b8 <main+0x2e8>)
 80014e8:	f001 f824 	bl	8002534 <HomeSensorInit>
  HomeSensorHome(&homeSensor, &motor);
 80014ec:	496f      	ldr	r1, [pc, #444]	; (80016ac <main+0x2dc>)
 80014ee:	4872      	ldr	r0, [pc, #456]	; (80016b8 <main+0x2e8>)
 80014f0:	f001 f834 	bl	800255c <HomeSensorHome>
//  while(1) {
//	  printf("%d\r\n", (int)RotaryEncGetCount(&encoder));
//  }

  //Reset encoder count after homing
  HAL_Delay(500);
 80014f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014f8:	f001 fb7c 	bl	8002bf4 <HAL_Delay>
  RotaryEncSetCount(&encoder, ENCODER_HOME_OFFSET);
 80014fc:	f46f 71a8 	mvn.w	r1, #336	; 0x150
 8001500:	4860      	ldr	r0, [pc, #384]	; (8001684 <main+0x2b4>)
 8001502:	f7ff fde0 	bl	80010c6 <RotaryEncSetCount>

  printf("Homing complete\r\n");
 8001506:	486d      	ldr	r0, [pc, #436]	; (80016bc <main+0x2ec>)
 8001508:	f00c fc22 	bl	800dd50 <puts>

  MotorControllerInit_t controllerInit = {
 800150c:	f107 0308 	add.w	r3, r7, #8
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	4b63      	ldr	r3, [pc, #396]	; (80016ac <main+0x2dc>)
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b58      	ldr	r3, [pc, #352]	; (8001684 <main+0x2b4>)
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <main+0x2d4>)
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	4b55      	ldr	r3, [pc, #340]	; (8001680 <main+0x2b0>)
 800152c:	61bb      	str	r3, [r7, #24]
 800152e:	4b5a      	ldr	r3, [pc, #360]	; (8001698 <main+0x2c8>)
 8001530:	61fb      	str	r3, [r7, #28]
		  .encoder = &encoder,
		  .currentSensor = &currentSense,
		  .positionPid = &positionPid,
		  .currentPid = &currentPid,
  };
  MotorControllerInit(&controller, controllerInit);
 8001532:	466c      	mov	r4, sp
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800153c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001546:	485e      	ldr	r0, [pc, #376]	; (80016c0 <main+0x2f0>)
 8001548:	f000 fc5f 	bl	8001e0a <MotorControllerInit>
  HAL_TIM_Base_Start_IT(&htim7);
 800154c:	485d      	ldr	r0, [pc, #372]	; (80016c4 <main+0x2f4>)
 800154e:	f005 fdbb 	bl	80070c8 <HAL_TIM_Base_Start_IT>
//
//	  MotorControllerSetPower(&controller, motorPower);
//  }

  MotorLogger_t mLogger;
  MotorLoggerInit(&mLogger, &controller);
 8001552:	1d3b      	adds	r3, r7, #4
 8001554:	495a      	ldr	r1, [pc, #360]	; (80016c0 <main+0x2f0>)
 8001556:	4618      	mov	r0, r3
 8001558:	f001 faae 	bl	8002ab8 <MotorLoggerInit>
//	  txBuffer[i] = i;
//  }
//  bool withinBounds = true;
//  float prevMotorPower = 0.0f;

  bool endStopEntered = false;
 800155c:	2300      	movs	r3, #0
 800155e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  bool endStopExited = true;
 8001562:	2301      	movs	r3, #1
 8001564:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  while(1) {
	  //Remove when running with USB
//	  flag_rx = 1;
	  if(flag_rx == 1){
 8001568:	4b57      	ldr	r3, [pc, #348]	; (80016c8 <main+0x2f8>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	f040 8116 	bne.w	800179e <main+0x3ce>

		  flag_rx = 0;
 8001572:	4b55      	ldr	r3, [pc, #340]	; (80016c8 <main+0x2f8>)
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]
//				  ((report_buffer[1] & 0xFF) << 8) |
//				  ((report_buffer[2] & 0xFF) << 16) |
//				  ((report_buffer[3] & 0xFF) << 24));

		  //TODO: Add support for multiple force types
		  int32_t reportId = (int32_t)(report_buffer[0] & 0xff);
 8001578:	4b54      	ldr	r3, [pc, #336]	; (80016cc <main+0x2fc>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	64fb      	str	r3, [r7, #76]	; 0x4c

		  float *strength = (float *)report_buffer;
 800157e:	4b53      	ldr	r3, [pc, #332]	; (80016cc <main+0x2fc>)
 8001580:	64bb      	str	r3, [r7, #72]	; 0x48

		  angle = (RotaryEncGetCount(&encoder)/200.0f) * 90.0f;
 8001582:	4840      	ldr	r0, [pc, #256]	; (8001684 <main+0x2b4>)
 8001584:	f7ff fdad 	bl	80010e2 <RotaryEncGetCount>
 8001588:	ee07 0a90 	vmov	s15, r0
 800158c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001590:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80016d0 <main+0x300>
 8001594:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001598:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80016d4 <main+0x304>
 800159c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015a0:	4b4d      	ldr	r3, [pc, #308]	; (80016d8 <main+0x308>)
 80015a2:	edc3 7a00 	vstr	s15, [r3]
		  float motorPower = -FFBComputeSpringForce(&ffb,
 80015a6:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <main+0x308>)
 80015a8:	edd3 7a00 	vldr	s15, [r3]
 80015ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80015ae:	ed93 7a00 	vldr	s14, [r3]
 80015b2:	eeb0 1a47 	vmov.f32	s2, s14
 80015b6:	eddf 0a49 	vldr	s1, [pc, #292]	; 80016dc <main+0x30c>
 80015ba:	eeb0 0a67 	vmov.f32	s0, s15
 80015be:	483c      	ldr	r0, [pc, #240]	; (80016b0 <main+0x2e0>)
 80015c0:	f7ff fc2e 	bl	8000e20 <FFBComputeSpringForce>
 80015c4:	eef0 7a40 	vmov.f32	s15, s0
 80015c8:	eef1 7a67 	vneg.f32	s15, s15
 80015cc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
				  angle, 0.0f, *strength);

		  avgAngle = ((((float)encoderAccumulator)/ENCODER_NUM_SAMPLES)/
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <main+0x2b8>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fbb5 	bl	8000d48 <__aeabi_l2f>
 80015de:	ee06 0a90 	vmov	s13, r0
 80015e2:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80015e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015ea:	eddf 6a39 	vldr	s13, [pc, #228]	; 80016d0 <main+0x300>
 80015ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
				  200.0f) * 90.0f;
 80015f2:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80016d4 <main+0x304>
 80015f6:	ee67 7a87 	vmul.f32	s15, s15, s14
		  avgAngle = ((((float)encoderAccumulator)/ENCODER_NUM_SAMPLES)/
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <main+0x310>)
 80015fc:	edc3 7a00 	vstr	s15, [r3]

		  if(angle > 90.0f || angle < -90.0f) {
 8001600:	4b35      	ldr	r3, [pc, #212]	; (80016d8 <main+0x308>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80016d4 <main+0x304>
 800160a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800160e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001612:	dc0a      	bgt.n	800162a <main+0x25a>
 8001614:	4b30      	ldr	r3, [pc, #192]	; (80016d8 <main+0x308>)
 8001616:	edd3 7a00 	vldr	s15, [r3]
 800161a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80016e4 <main+0x314>
 800161e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001626:	f140 8080 	bpl.w	800172a <main+0x35a>
			  float speed = (RotaryEncGetSpeed(&encoder)/200.0f) * 90.0f;
 800162a:	4816      	ldr	r0, [pc, #88]	; (8001684 <main+0x2b4>)
 800162c:	f7ff fd65 	bl	80010fa <RotaryEncGetSpeed>
 8001630:	eeb0 7a40 	vmov.f32	s14, s0
 8001634:	eddf 6a26 	vldr	s13, [pc, #152]	; 80016d0 <main+0x300>
 8001638:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80016d4 <main+0x304>
 8001640:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001644:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
			  derivativeTerm = speed * endStopKd;
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <main+0x318>)
 800164a:	ed93 7a00 	vldr	s14, [r3]
 800164e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001656:	4b25      	ldr	r3, [pc, #148]	; (80016ec <main+0x31c>)
 8001658:	edc3 7a00 	vstr	s15, [r3]
//			  }
//			  else if(derivativeTerm < 0 && angle < 0) {
//				  //derivativeTerm = 0;
//			  }

			  float error = angle > 90.0f ? angle - 89.5f : angle + 89.5f;
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <main+0x308>)
 800165e:	edd3 7a00 	vldr	s15, [r3]
 8001662:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80016d4 <main+0x304>
 8001666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166e:	dd41      	ble.n	80016f4 <main+0x324>
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <main+0x308>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80016f0 <main+0x320>
 800167a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800167e:	e040      	b.n	8001702 <main+0x332>
 8001680:	2000060c 	.word	0x2000060c
 8001684:	200005cc 	.word	0x200005cc
 8001688:	20000600 	.word	0x20000600
 800168c:	200005f8 	.word	0x200005f8
 8001690:	200005fc 	.word	0x200005fc
 8001694:	20000460 	.word	0x20000460
 8001698:	20000620 	.word	0x20000620
 800169c:	455fc000 	.word	0x455fc000
 80016a0:	2000035c 	.word	0x2000035c
 80016a4:	20000608 	.word	0x20000608
 80016a8:	20000414 	.word	0x20000414
 80016ac:	20000634 	.word	0x20000634
 80016b0:	20000658 	.word	0x20000658
 80016b4:	200004ac 	.word	0x200004ac
 80016b8:	20000678 	.word	0x20000678
 80016bc:	0800fed0 	.word	0x0800fed0
 80016c0:	20000680 	.word	0x20000680
 80016c4:	200004f8 	.word	0x200004f8
 80016c8:	20000725 	.word	0x20000725
 80016cc:	200006e4 	.word	0x200006e4
 80016d0:	43480000 	.word	0x43480000
 80016d4:	42b40000 	.word	0x42b40000
 80016d8:	2000072c 	.word	0x2000072c
 80016dc:	00000000 	.word	0x00000000
 80016e0:	20000728 	.word	0x20000728
 80016e4:	c2b40000 	.word	0xc2b40000
 80016e8:	20000004 	.word	0x20000004
 80016ec:	20000654 	.word	0x20000654
 80016f0:	42b30000 	.word	0x42b30000
 80016f4:	4b31      	ldr	r3, [pc, #196]	; (80017bc <main+0x3ec>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80017c0 <main+0x3f0>
 80016fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001702:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

			  motorPower = UINT16_MAX * (error * endStopKp +
 8001706:	4b2f      	ldr	r3, [pc, #188]	; (80017c4 <main+0x3f4>)
 8001708:	ed93 7a00 	vldr	s14, [r3]
 800170c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001714:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <main+0x3f8>)
 8001716:	edd3 7a00 	vldr	s15, [r3]
 800171a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80017cc <main+0x3fc>
 8001722:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001726:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
					   derivativeTerm);
		  }

		  motorPower = ConstrainFloat(motorPower, -UINT16_MAX, UINT16_MAX);
 800172a:	ed9f 1a28 	vldr	s2, [pc, #160]	; 80017cc <main+0x3fc>
 800172e:	eddf 0a28 	vldr	s1, [pc, #160]	; 80017d0 <main+0x400>
 8001732:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8001736:	f7ff fd94 	bl	8001262 <ConstrainFloat>
 800173a:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54

		  MotorControllerSetPower(&controller, (int32_t)motorPower);
 800173e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001746:	ee17 1a90 	vmov	r1, s15
 800174a:	4822      	ldr	r0, [pc, #136]	; (80017d4 <main+0x404>)
 800174c:	f000 fb81 	bl	8001e52 <MotorControllerSetPower>

		  // Prepare and send aileron axis
		  int16_t aileron = (int16_t)Constrain(((
				  RotaryEncGetCount(&encoder)/200.0f) *
 8001750:	4821      	ldr	r0, [pc, #132]	; (80017d8 <main+0x408>)
 8001752:	f7ff fcc6 	bl	80010e2 <RotaryEncGetCount>
 8001756:	ee07 0a90 	vmov	s15, r0
 800175a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80017dc <main+0x40c>
 8001762:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001766:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80017e0 <main+0x410>
 800176a:	ee67 7a87 	vmul.f32	s15, s15, s14
		  int16_t aileron = (int16_t)Constrain(((
 800176e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001772:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001776:	491b      	ldr	r1, [pc, #108]	; (80017e4 <main+0x414>)
 8001778:	ee17 0a90 	vmov	r0, s15
 800177c:	f7ff fd58 	bl	8001230 <Constrain>
 8001780:	4603      	mov	r3, r0
 8001782:	87fb      	strh	r3, [r7, #62]	; 0x3e
				  32767), -32767, 32767);
		  uint8_t reportTest[3] = {1, aileron, 0};
 8001784:	2301      	movs	r3, #1
 8001786:	703b      	strb	r3, [r7, #0]
 8001788:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800178a:	b2db      	uxtb	r3, r3
 800178c:	707b      	strb	r3, [r7, #1]
 800178e:	2300      	movs	r3, #0
 8001790:	70bb      	strb	r3, [r7, #2]
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reportTest, 3);
 8001792:	463b      	mov	r3, r7
 8001794:	2203      	movs	r2, #3
 8001796:	4619      	mov	r1, r3
 8001798:	4813      	ldr	r0, [pc, #76]	; (80017e8 <main+0x418>)
 800179a:	f00a f839 	bl	800b810 <USBD_CUSTOM_HID_SendReport>

		  //USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, (uint8_t *)&aileron, 2);
	  }

	  if(flag == 1) {
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <main+0x41c>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	f47f aee0 	bne.w	8001568 <main+0x198>
		  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, txBuffer, 64);
 80017a8:	2240      	movs	r2, #64	; 0x40
 80017aa:	4911      	ldr	r1, [pc, #68]	; (80017f0 <main+0x420>)
 80017ac:	480e      	ldr	r0, [pc, #56]	; (80017e8 <main+0x418>)
 80017ae:	f00a f82f 	bl	800b810 <USBD_CUSTOM_HID_SendReport>

		  flag = 0;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <main+0x41c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]
	  if(flag_rx == 1){
 80017b8:	e6d6      	b.n	8001568 <main+0x198>
 80017ba:	bf00      	nop
 80017bc:	2000072c 	.word	0x2000072c
 80017c0:	42b30000 	.word	0x42b30000
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000654 	.word	0x20000654
 80017cc:	477fff00 	.word	0x477fff00
 80017d0:	c77fff00 	.word	0xc77fff00
 80017d4:	20000680 	.word	0x20000680
 80017d8:	200005cc 	.word	0x200005cc
 80017dc:	43480000 	.word	0x43480000
 80017e0:	46fffe00 	.word	0x46fffe00
 80017e4:	ffff8001 	.word	0xffff8001
 80017e8:	20000740 	.word	0x20000740
 80017ec:	20000724 	.word	0x20000724
 80017f0:	200006a4 	.word	0x200006a4

080017f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b09e      	sub	sp, #120	; 0x78
 80017f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80017fe:	2228      	movs	r2, #40	; 0x28
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f00b fdc4 	bl	800d390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001808:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001818:	463b      	mov	r3, r7
 800181a:	223c      	movs	r2, #60	; 0x3c
 800181c:	2100      	movs	r1, #0
 800181e:	4618      	mov	r0, r3
 8001820:	f00b fdb6 	bl	800d390 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001824:	2303      	movs	r3, #3
 8001826:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001828:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800182c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800182e:	2300      	movs	r3, #0
 8001830:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001832:	2301      	movs	r3, #1
 8001834:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001836:	2310      	movs	r3, #16
 8001838:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183a:	2302      	movs	r3, #2
 800183c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800183e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001842:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001844:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001848:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800184a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800184e:	4618      	mov	r0, r3
 8001850:	f003 ff14 	bl	800567c <HAL_RCC_OscConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800185a:	f000 fad1 	bl	8001e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185e:	230f      	movs	r3, #15
 8001860:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001862:	2302      	movs	r3, #2
 8001864:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001866:	2300      	movs	r3, #0
 8001868:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800186a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800186e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001874:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001878:	2101      	movs	r1, #1
 800187a:	4618      	mov	r0, r3
 800187c:	f004 ff3c 	bl	80066f8 <HAL_RCC_ClockConfig>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001886:	f000 fabb 	bl	8001e00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <SystemClock_Config+0xc8>)
 800188c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8001896:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800189c:	2300      	movs	r3, #0
 800189e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a0:	463b      	mov	r3, r7
 80018a2:	4618      	mov	r0, r3
 80018a4:	f005 f95e 	bl	8006b64 <HAL_RCCEx_PeriphCLKConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80018ae:	f000 faa7 	bl	8001e00 <Error_Handler>
  }
}
 80018b2:	bf00      	nop
 80018b4:	3778      	adds	r7, #120	; 0x78
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	00021021 	.word	0x00021021

080018c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <MX_I2C1_Init+0x74>)
 80018c6:	4a1c      	ldr	r2, [pc, #112]	; (8001938 <MX_I2C1_Init+0x78>)
 80018c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80018ca:	4b1a      	ldr	r3, [pc, #104]	; (8001934 <MX_I2C1_Init+0x74>)
 80018cc:	f240 220b 	movw	r2, #523	; 0x20b
 80018d0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018d2:	4b18      	ldr	r3, [pc, #96]	; (8001934 <MX_I2C1_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <MX_I2C1_Init+0x74>)
 80018da:	2201      	movs	r2, #1
 80018dc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <MX_I2C1_Init+0x74>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <MX_I2C1_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <MX_I2C1_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <MX_I2C1_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <MX_I2C1_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018fc:	480d      	ldr	r0, [pc, #52]	; (8001934 <MX_I2C1_Init+0x74>)
 80018fe:	f001 fc59 	bl	80031b4 <HAL_I2C_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001908:	f000 fa7a 	bl	8001e00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800190c:	2100      	movs	r1, #0
 800190e:	4809      	ldr	r0, [pc, #36]	; (8001934 <MX_I2C1_Init+0x74>)
 8001910:	f002 f95c 	bl	8003bcc <HAL_I2CEx_ConfigAnalogFilter>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800191a:	f000 fa71 	bl	8001e00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800191e:	2100      	movs	r1, #0
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <MX_I2C1_Init+0x74>)
 8001922:	f002 f99e 	bl	8003c62 <HAL_I2CEx_ConfigDigitalFilter>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800192c:	f000 fa68 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	2000035c 	.word	0x2000035c
 8001938:	40005400 	.word	0x40005400

0800193c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001940:	4b1b      	ldr	r3, [pc, #108]	; (80019b0 <MX_SPI1_Init+0x74>)
 8001942:	4a1c      	ldr	r2, [pc, #112]	; (80019b4 <MX_SPI1_Init+0x78>)
 8001944:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <MX_SPI1_Init+0x74>)
 8001948:	f44f 7282 	mov.w	r2, #260	; 0x104
 800194c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800194e:	4b18      	ldr	r3, [pc, #96]	; (80019b0 <MX_SPI1_Init+0x74>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001954:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_SPI1_Init+0x74>)
 8001956:	f44f 7240 	mov.w	r2, #768	; 0x300
 800195a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_SPI1_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_SPI1_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001968:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_SPI1_Init+0x74>)
 800196a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_SPI1_Init+0x74>)
 8001972:	2208      	movs	r2, #8
 8001974:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_SPI1_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_SPI1_Init+0x74>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_SPI1_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_SPI1_Init+0x74>)
 800198a:	2207      	movs	r2, #7
 800198c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_SPI1_Init+0x74>)
 8001990:	2200      	movs	r2, #0
 8001992:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_SPI1_Init+0x74>)
 8001996:	2208      	movs	r2, #8
 8001998:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_SPI1_Init+0x74>)
 800199c:	f005 fa92 	bl	8006ec4 <HAL_SPI_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019a6:	f000 fa2b 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200003b0 	.word	0x200003b0
 80019b4:	40013000 	.word	0x40013000

080019b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b096      	sub	sp, #88	; 0x58
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
 80019da:	615a      	str	r2, [r3, #20]
 80019dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	222c      	movs	r2, #44	; 0x2c
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00b fcd3 	bl	800d390 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ea:	4b39      	ldr	r3, [pc, #228]	; (8001ad0 <MX_TIM1_Init+0x118>)
 80019ec:	4a39      	ldr	r2, [pc, #228]	; (8001ad4 <MX_TIM1_Init+0x11c>)
 80019ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019f0:	4b37      	ldr	r3, [pc, #220]	; (8001ad0 <MX_TIM1_Init+0x118>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f6:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <MX_TIM1_Init+0x118>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 80019fc:	4b34      	ldr	r3, [pc, #208]	; (8001ad0 <MX_TIM1_Init+0x118>)
 80019fe:	f640 125f 	movw	r2, #2399	; 0x95f
 8001a02:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a04:	4b32      	ldr	r3, [pc, #200]	; (8001ad0 <MX_TIM1_Init+0x118>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a0a:	4b31      	ldr	r3, [pc, #196]	; (8001ad0 <MX_TIM1_Init+0x118>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a10:	4b2f      	ldr	r3, [pc, #188]	; (8001ad0 <MX_TIM1_Init+0x118>)
 8001a12:	2280      	movs	r2, #128	; 0x80
 8001a14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a16:	482e      	ldr	r0, [pc, #184]	; (8001ad0 <MX_TIM1_Init+0x118>)
 8001a18:	f005 fbc0 	bl	800719c <HAL_TIM_PWM_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a22:	f000 f9ed 	bl	8001e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a36:	4619      	mov	r1, r3
 8001a38:	4825      	ldr	r0, [pc, #148]	; (8001ad0 <MX_TIM1_Init+0x118>)
 8001a3a:	f006 fc23 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a44:	f000 f9dc 	bl	8001e00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a48:	2360      	movs	r3, #96	; 0x60
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a50:	2300      	movs	r3, #0
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a54:	2300      	movs	r3, #0
 8001a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a68:	2208      	movs	r2, #8
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4818      	ldr	r0, [pc, #96]	; (8001ad0 <MX_TIM1_Init+0x118>)
 8001a6e:	f005 ff41 	bl	80078f4 <HAL_TIM_PWM_ConfigChannel>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001a78:	f000 f9c2 	bl	8001e00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <MX_TIM1_Init+0x118>)
 8001ab2:	f006 fc67 	bl	8008384 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001abc:	f000 f9a0 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <MX_TIM1_Init+0x118>)
 8001ac2:	f000 fb9b 	bl	80021fc <HAL_TIM_MspPostInit>

}
 8001ac6:	bf00      	nop
 8001ac8:	3758      	adds	r7, #88	; 0x58
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000414 	.word	0x20000414
 8001ad4:	40012c00 	.word	0x40012c00

08001ad8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	2224      	movs	r2, #36	; 0x24
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f00b fc52 	bl	800d390 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	463b      	mov	r3, r7
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001af6:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <MX_TIM4_Init+0xa4>)
 8001af8:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <MX_TIM4_Init+0xa8>)
 8001afa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001afc:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <MX_TIM4_Init+0xa4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <MX_TIM4_Init+0xa4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <MX_TIM4_Init+0xa4>)
 8001b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b0e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <MX_TIM4_Init+0xa4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <MX_TIM4_Init+0xa4>)
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b24:	2301      	movs	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 4;
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b34:	2301      	movs	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 4;
 8001b3c:	2304      	movs	r3, #4
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	4619      	mov	r1, r3
 8001b46:	480d      	ldr	r0, [pc, #52]	; (8001b7c <MX_TIM4_Init+0xa4>)
 8001b48:	f005 fc80 	bl	800744c <HAL_TIM_Encoder_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001b52:	f000 f955 	bl	8001e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b5e:	463b      	mov	r3, r7
 8001b60:	4619      	mov	r1, r3
 8001b62:	4806      	ldr	r0, [pc, #24]	; (8001b7c <MX_TIM4_Init+0xa4>)
 8001b64:	f006 fb8e 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001b6e:	f000 f947 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	3730      	adds	r7, #48	; 0x30
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000460 	.word	0x20000460
 8001b80:	40000800 	.word	0x40000800

08001b84 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <MX_TIM6_Init+0x64>)
 8001b96:	4a15      	ldr	r2, [pc, #84]	; (8001bec <MX_TIM6_Init+0x68>)
 8001b98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24-1;
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <MX_TIM6_Init+0x64>)
 8001b9c:	2217      	movs	r2, #23
 8001b9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <MX_TIM6_Init+0x64>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <MX_TIM6_Init+0x64>)
 8001ba8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bae:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <MX_TIM6_Init+0x64>)
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001bb4:	480c      	ldr	r0, [pc, #48]	; (8001be8 <MX_TIM6_Init+0x64>)
 8001bb6:	f005 fa30 	bl	800701a <HAL_TIM_Base_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001bc0:	f000 f91e 	bl	8001e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_TIM6_Init+0x64>)
 8001bd2:	f006 fb57 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001bdc:	f000 f910 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200004ac 	.word	0x200004ac
 8001bec:	40001000 	.word	0x40001000

08001bf0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <MX_TIM7_Init+0x64>)
 8001c02:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <MX_TIM7_Init+0x68>)
 8001c04:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48-1;
 8001c06:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_TIM7_Init+0x64>)
 8001c08:	222f      	movs	r2, #47	; 0x2f
 8001c0a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	; (8001c54 <MX_TIM7_Init+0x64>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2000-1;
 8001c12:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_TIM7_Init+0x64>)
 8001c14:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001c18:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <MX_TIM7_Init+0x64>)
 8001c1c:	2280      	movs	r2, #128	; 0x80
 8001c1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c20:	480c      	ldr	r0, [pc, #48]	; (8001c54 <MX_TIM7_Init+0x64>)
 8001c22:	f005 f9fa 	bl	800701a <HAL_TIM_Base_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c2c:	f000 f8e8 	bl	8001e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c38:	1d3b      	adds	r3, r7, #4
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_TIM7_Init+0x64>)
 8001c3e:	f006 fb21 	bl	8008284 <HAL_TIMEx_MasterConfigSynchronization>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c48:	f000 f8da 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	3710      	adds	r7, #16
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200004f8 	.word	0x200004f8
 8001c58:	40001400 	.word	0x40001400

08001c5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_USART1_UART_Init+0x58>)
 8001c62:	4a15      	ldr	r2, [pc, #84]	; (8001cb8 <MX_USART1_UART_Init+0x5c>)
 8001c64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <MX_USART1_UART_Init+0x58>)
 8001c68:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001c6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_USART1_UART_Init+0x58>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_USART1_UART_Init+0x58>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_USART1_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_USART1_UART_Init+0x58>)
 8001c82:	220c      	movs	r2, #12
 8001c84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <MX_USART1_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_USART1_UART_Init+0x58>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <MX_USART1_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_USART1_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_USART1_UART_Init+0x58>)
 8001ca0:	f006 fc0c 	bl	80084bc <HAL_UART_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001caa:	f000 f8a9 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000544 	.word	0x20000544
 8001cb8:	40013800 	.word	0x40013800

08001cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	; 0x30
 8001cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
 8001cd0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cd2:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	4a48      	ldr	r2, [pc, #288]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001cd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cdc:	6153      	str	r3, [r2, #20]
 8001cde:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce6:	61bb      	str	r3, [r7, #24]
 8001ce8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	4a42      	ldr	r2, [pc, #264]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cf4:	6153      	str	r3, [r2, #20]
 8001cf6:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cfe:	617b      	str	r3, [r7, #20]
 8001d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d02:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	4a3c      	ldr	r2, [pc, #240]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001d08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d0c:	6153      	str	r3, [r2, #20]
 8001d0e:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b37      	ldr	r3, [pc, #220]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	4a36      	ldr	r2, [pc, #216]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d24:	6153      	str	r3, [r2, #20]
 8001d26:	4b34      	ldr	r3, [pc, #208]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d32:	4b31      	ldr	r3, [pc, #196]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	4a30      	ldr	r2, [pc, #192]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d3c:	6153      	str	r3, [r2, #20]
 8001d3e:	4b2e      	ldr	r3, [pc, #184]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001d40:	695b      	ldr	r3, [r3, #20]
 8001d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4a:	4b2b      	ldr	r3, [pc, #172]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4a2a      	ldr	r2, [pc, #168]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d54:	6153      	str	r3, [r2, #20]
 8001d56:	4b28      	ldr	r3, [pc, #160]	; (8001df8 <MX_GPIO_Init+0x13c>)
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5e:	607b      	str	r3, [r7, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001d62:	2200      	movs	r2, #0
 8001d64:	f64f 7108 	movw	r1, #65288	; 0xff08
 8001d68:	4824      	ldr	r0, [pc, #144]	; (8001dfc <MX_GPIO_Init+0x140>)
 8001d6a:	f001 fa0b 	bl	8003184 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_REVERSE_Pin|MOTOR_FORWARD_Pin, GPIO_PIN_RESET);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001d74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d78:	f001 fa04 	bl	8003184 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8001d7c:	2337      	movs	r3, #55	; 0x37
 8001d7e:	61fb      	str	r3, [r7, #28]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d80:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001d84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d8a:	f107 031c 	add.w	r3, r7, #28
 8001d8e:	4619      	mov	r1, r3
 8001d90:	481a      	ldr	r0, [pc, #104]	; (8001dfc <MX_GPIO_Init+0x140>)
 8001d92:	f001 f865 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8001d96:	f64f 7308 	movw	r3, #65288	; 0xff08
 8001d9a:	61fb      	str	r3, [r7, #28]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	4813      	ldr	r0, [pc, #76]	; (8001dfc <MX_GPIO_Init+0x140>)
 8001db0:	f001 f856 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin HOME_SENSOR_Pin */
  GPIO_InitStruct.Pin = B1_Pin|HOME_SENSOR_Pin;
 8001db4:	2303      	movs	r3, #3
 8001db6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dca:	f001 f849 	bl	8002e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_REVERSE_Pin MOTOR_FORWARD_Pin */
  GPIO_InitStruct.Pin = MOTOR_REVERSE_Pin|MOTOR_FORWARD_Pin;
 8001dce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	4619      	mov	r1, r3
 8001de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001dea:	f001 f839 	bl	8002e60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dee:	bf00      	nop
 8001df0:	3730      	adds	r7, #48	; 0x30
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	48001000 	.word	0x48001000

08001e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e04:	b672      	cpsid	i
}
 8001e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <Error_Handler+0x8>

08001e0a <MotorControllerInit>:

static void MotorControllerCurrentUpdate(MotorController_t *controller,
		float deltaTime);

void MotorControllerInit(MotorController_t *controller,
		MotorControllerInit_t init) {
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	b4b0      	push	{r4, r5, r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	f107 001c 	add.w	r0, r7, #28
 8001e18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	controller->init = init;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	461d      	mov	r5, r3
 8001e20:	f107 041c 	add.w	r4, r7, #28
 8001e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e2c:	e885 0003 	stmia.w	r5, {r0, r1}
//	controller->init.encoder = encoder;
//
//	controller->init.positionPid = positionPid;
//	controller->init.currentPid = currentPid;

	controller->mode = MOTOR_CONTROL_POWER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2020 	strb.w	r2, [r3, #32]
	controller->currentSetPoint = 0;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	61da      	str	r2, [r3, #28]
	controller->positionSetPoint = 0;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bcb0      	pop	{r4, r5, r7}
 8001e4e:	b004      	add	sp, #16
 8001e50:	4770      	bx	lr

08001e52 <MotorControllerSetPower>:

void MotorControllerSetPower(MotorController_t *controller, int32_t power) {
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
	controller->mode = MOTOR_CONTROL_POWER;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2020 	strb.w	r2, [r3, #32]
	MotorSetPower(controller->init.motor, power);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6839      	ldr	r1, [r7, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fdc3 	bl	80029f6 <MotorSetPower>
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <MotorControllerUpdate>:

float MotorControllerGetSpeed(MotorController_t *controller) {
	return RotaryEncGetSpeed(controller->init.encoder);
}

void MotorControllerUpdate(MotorController_t *controller, float deltaTime) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	ed87 0a00 	vstr	s0, [r7]
	if(controller->mode == MOTOR_CONTROL_POSITION) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d105      	bne.n	8001e9a <MotorControllerUpdate+0x22>
		MotorControllerPositionUpdate(controller, deltaTime);
 8001e8e:	ed97 0a00 	vldr	s0, [r7]
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f80f 	bl	8001eb6 <MotorControllerPositionUpdate>
	}
	else if(controller->mode == MOTOR_CONTROL_CURRENT) {
		MotorControllerCurrentUpdate(controller, deltaTime);
	}
}
 8001e98:	e009      	b.n	8001eae <MotorControllerUpdate+0x36>
	else if(controller->mode == MOTOR_CONTROL_CURRENT) {
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d104      	bne.n	8001eae <MotorControllerUpdate+0x36>
		MotorControllerCurrentUpdate(controller, deltaTime);
 8001ea4:	ed97 0a00 	vldr	s0, [r7]
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f811 	bl	8001ed0 <MotorControllerCurrentUpdate>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <MotorControllerPositionUpdate>:

//TODO: implement
static void MotorControllerPositionUpdate(MotorController_t *controller,
		float deltaTime) {
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
 8001ebe:	ed87 0a00 	vstr	s0, [r7]

}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
	...

08001ed0 <MotorControllerCurrentUpdate>:

static void MotorControllerCurrentUpdate(MotorController_t *controller,
		float deltaTime) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	ed87 0a00 	vstr	s0, [r7]
	float actualCurrent = CurrentSenseGetCurrent(
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fba5 	bl	8002630 <CurrentSenseGetCurrent>
 8001ee6:	ed87 0a03 	vstr	s0, [r7, #12]
			controller->init.currentSensor);

	//determine actual current direction
	if(MotorGetDirection(controller->init.motor) == DIR_FORWARD) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 fceb 	bl	80028ca <MotorGetDirection>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d00d      	beq.n	8001f16 <MotorControllerCurrentUpdate+0x46>
		//do nothing
	}
	else if(MotorGetDirection(controller->init.motor) == DIR_REVERSE) {
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 fce3 	bl	80028ca <MotorGetDirection>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d105      	bne.n	8001f16 <MotorControllerCurrentUpdate+0x46>
		//flip actual current direction
		actualCurrent *= -1;
 8001f0a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f0e:	eef1 7a67 	vneg.f32	s15, s15
 8001f12:	edc7 7a03 	vstr	s15, [r7, #12]
	}

	//calculate PID for motor output power
	int32_t motorPower = ComputePID(controller->init.currentPid,
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f20:	edd7 0a03 	vldr	s1, [r7, #12]
 8001f24:	eeb0 0a67 	vmov.f32	s0, s15
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f7fe ffef 	bl	8000f0c <ComputePID>
 8001f2e:	eef0 7a40 	vmov.f32	s15, s0
 8001f32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f36:	ee17 3a90 	vmov	r3, s15
 8001f3a:	60bb      	str	r3, [r7, #8]
			controller->currentSetPoint, actualCurrent);
	MotorSetPower(controller->init.motor, motorPower);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68b9      	ldr	r1, [r7, #8]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fd57 	bl	80029f6 <MotorSetPower>

	testCurrent = actualCurrent;
 8001f48:	4a03      	ldr	r2, [pc, #12]	; (8001f58 <MotorControllerCurrentUpdate+0x88>)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6013      	str	r3, [r2, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000730 	.word	0x20000730

08001f5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <HAL_MspInit+0x44>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	4a0e      	ldr	r2, [pc, #56]	; (8001fa0 <HAL_MspInit+0x44>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6193      	str	r3, [r2, #24]
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_MspInit+0x44>)
 8001f70:	699b      	ldr	r3, [r3, #24]
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_MspInit+0x44>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <HAL_MspInit+0x44>)
 8001f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f84:	61d3      	str	r3, [r2, #28]
 8001f86:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_MspInit+0x44>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f92:	2007      	movs	r0, #7
 8001f94:	f000 ff22 	bl	8002ddc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <HAL_I2C_MspInit+0x7c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d127      	bne.n	8002016 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <HAL_I2C_MspInit+0x80>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	4a16      	ldr	r2, [pc, #88]	; (8002024 <HAL_I2C_MspInit+0x80>)
 8001fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd0:	6153      	str	r3, [r2, #20]
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_I2C_MspInit+0x80>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001fde:	23c0      	movs	r3, #192	; 0xc0
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fe2:	2312      	movs	r3, #18
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fea:	2303      	movs	r3, #3
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	480b      	ldr	r0, [pc, #44]	; (8002028 <HAL_I2C_MspInit+0x84>)
 8001ffa:	f000 ff31 	bl	8002e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_I2C_MspInit+0x80>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <HAL_I2C_MspInit+0x80>)
 8002004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002008:	61d3      	str	r3, [r2, #28]
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_I2C_MspInit+0x80>)
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002016:	bf00      	nop
 8002018:	3728      	adds	r7, #40	; 0x28
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40005400 	.word	0x40005400
 8002024:	40021000 	.word	0x40021000
 8002028:	48000400 	.word	0x48000400

0800202c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a17      	ldr	r2, [pc, #92]	; (80020a8 <HAL_SPI_MspInit+0x7c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d128      	bne.n	80020a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800204e:	4b17      	ldr	r3, [pc, #92]	; (80020ac <HAL_SPI_MspInit+0x80>)
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	4a16      	ldr	r2, [pc, #88]	; (80020ac <HAL_SPI_MspInit+0x80>)
 8002054:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002058:	6193      	str	r3, [r2, #24]
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <HAL_SPI_MspInit+0x80>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <HAL_SPI_MspInit+0x80>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4a10      	ldr	r2, [pc, #64]	; (80020ac <HAL_SPI_MspInit+0x80>)
 800206c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002070:	6153      	str	r3, [r2, #20]
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <HAL_SPI_MspInit+0x80>)
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800207e:	23e0      	movs	r3, #224	; 0xe0
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002082:	2302      	movs	r3, #2
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800208e:	2305      	movs	r3, #5
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209c:	f000 fee0 	bl	8002e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020a0:	bf00      	nop
 80020a2:	3728      	adds	r7, #40	; 0x28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40013000 	.word	0x40013000
 80020ac:	40021000 	.word	0x40021000

080020b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <HAL_TIM_PWM_MspInit+0x38>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d10b      	bne.n	80020da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020c2:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_TIM_PWM_MspInit+0x3c>)
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	4a09      	ldr	r2, [pc, #36]	; (80020ec <HAL_TIM_PWM_MspInit+0x3c>)
 80020c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020cc:	6193      	str	r3, [r2, #24]
 80020ce:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_TIM_PWM_MspInit+0x3c>)
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40012c00 	.word	0x40012c00
 80020ec:	40021000 	.word	0x40021000

080020f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08a      	sub	sp, #40	; 0x28
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0314 	add.w	r3, r7, #20
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a17      	ldr	r2, [pc, #92]	; (800216c <HAL_TIM_Encoder_MspInit+0x7c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d128      	bne.n	8002164 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002112:	4b17      	ldr	r3, [pc, #92]	; (8002170 <HAL_TIM_Encoder_MspInit+0x80>)
 8002114:	69db      	ldr	r3, [r3, #28]
 8002116:	4a16      	ldr	r2, [pc, #88]	; (8002170 <HAL_TIM_Encoder_MspInit+0x80>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	61d3      	str	r3, [r2, #28]
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <HAL_TIM_Encoder_MspInit+0x80>)
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_TIM_Encoder_MspInit+0x80>)
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	4a10      	ldr	r2, [pc, #64]	; (8002170 <HAL_TIM_Encoder_MspInit+0x80>)
 8002130:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002134:	6153      	str	r3, [r2, #20]
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_TIM_Encoder_MspInit+0x80>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002142:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002148:	2302      	movs	r3, #2
 800214a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	2300      	movs	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002154:	2302      	movs	r3, #2
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	4619      	mov	r1, r3
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <HAL_TIM_Encoder_MspInit+0x84>)
 8002160:	f000 fe7e 	bl	8002e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002164:	bf00      	nop
 8002166:	3728      	adds	r7, #40	; 0x28
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40000800 	.word	0x40000800
 8002170:	40021000 	.word	0x40021000
 8002174:	48000c00 	.word	0x48000c00

08002178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <HAL_TIM_Base_MspInit+0x78>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d114      	bne.n	80021b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_TIM_Base_MspInit+0x7c>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a19      	ldr	r2, [pc, #100]	; (80021f4 <HAL_TIM_Base_MspInit+0x7c>)
 8002190:	f043 0310 	orr.w	r3, r3, #16
 8002194:	61d3      	str	r3, [r2, #28]
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_TIM_Base_MspInit+0x7c>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 0310 	and.w	r3, r3, #16
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	2036      	movs	r0, #54	; 0x36
 80021a8:	f000 fe23 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021ac:	2036      	movs	r0, #54	; 0x36
 80021ae:	f000 fe3c 	bl	8002e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80021b2:	e018      	b.n	80021e6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM7)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0f      	ldr	r2, [pc, #60]	; (80021f8 <HAL_TIM_Base_MspInit+0x80>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d113      	bne.n	80021e6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_TIM_Base_MspInit+0x7c>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4a0c      	ldr	r2, [pc, #48]	; (80021f4 <HAL_TIM_Base_MspInit+0x7c>)
 80021c4:	f043 0320 	orr.w	r3, r3, #32
 80021c8:	61d3      	str	r3, [r2, #28]
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <HAL_TIM_Base_MspInit+0x7c>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	2037      	movs	r0, #55	; 0x37
 80021dc:	f000 fe09 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80021e0:	2037      	movs	r0, #55	; 0x37
 80021e2:	f000 fe22 	bl	8002e2a <HAL_NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40001000 	.word	0x40001000
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40001400 	.word	0x40001400

080021fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 030c 	add.w	r3, r7, #12
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a12      	ldr	r2, [pc, #72]	; (8002264 <HAL_TIM_MspPostInit+0x68>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d11d      	bne.n	800225a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	4b12      	ldr	r3, [pc, #72]	; (8002268 <HAL_TIM_MspPostInit+0x6c>)
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4a11      	ldr	r2, [pc, #68]	; (8002268 <HAL_TIM_MspPostInit+0x6c>)
 8002224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002228:	6153      	str	r3, [r2, #20]
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_TIM_MspPostInit+0x6c>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8002236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800223a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223c:	2302      	movs	r3, #2
 800223e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002244:	2300      	movs	r3, #0
 8002246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002248:	2306      	movs	r3, #6
 800224a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	4619      	mov	r1, r3
 8002252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002256:	f000 fe03 	bl	8002e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800225a:	bf00      	nop
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40021000 	.word	0x40021000

0800226c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a17      	ldr	r2, [pc, #92]	; (80022e8 <HAL_UART_MspInit+0x7c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d127      	bne.n	80022de <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800228e:	4b17      	ldr	r3, [pc, #92]	; (80022ec <HAL_UART_MspInit+0x80>)
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	4a16      	ldr	r2, [pc, #88]	; (80022ec <HAL_UART_MspInit+0x80>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6193      	str	r3, [r2, #24]
 800229a:	4b14      	ldr	r3, [pc, #80]	; (80022ec <HAL_UART_MspInit+0x80>)
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_UART_MspInit+0x80>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	4a10      	ldr	r2, [pc, #64]	; (80022ec <HAL_UART_MspInit+0x80>)
 80022ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022b0:	6153      	str	r3, [r2, #20]
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <HAL_UART_MspInit+0x80>)
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80022be:	2330      	movs	r3, #48	; 0x30
 80022c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022ce:	2307      	movs	r3, #7
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	4619      	mov	r1, r3
 80022d8:	4805      	ldr	r0, [pc, #20]	; (80022f0 <HAL_UART_MspInit+0x84>)
 80022da:	f000 fdc1 	bl	8002e60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022de:	bf00      	nop
 80022e0:	3728      	adds	r7, #40	; 0x28
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40021000 	.word	0x40021000
 80022f0:	48000800 	.word	0x48000800

080022f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <NMI_Handler+0x4>

080022fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022fa:	b480      	push	{r7}
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fe:	e7fe      	b.n	80022fe <HardFault_Handler+0x4>

08002300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002304:	e7fe      	b.n	8002304 <MemManage_Handler+0x4>

08002306 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002306:	b480      	push	{r7}
 8002308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800230a:	e7fe      	b.n	800230a <BusFault_Handler+0x4>

0800230c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <UsageFault_Handler+0x4>

08002312 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002340:	f000 fc38 	bl	8002bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}

08002348 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 800234e:	f001 fdcc 	bl	8003eea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000c04 	.word	0x20000c04

0800235c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <TIM6_DAC_IRQHandler+0x10>)
 8002362:	f005 f9a7 	bl	80076b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200004ac 	.word	0x200004ac

08002370 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <TIM7_IRQHandler+0x10>)
 8002376:	f005 f99d 	bl	80076b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	200004f8 	.word	0x200004f8

08002384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return 1;
 8002388:	2301      	movs	r3, #1
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_kill>:

int _kill(int pid, int sig)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800239e:	f00a ffcd 	bl	800d33c <__errno>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2216      	movs	r2, #22
 80023a6:	601a      	str	r2, [r3, #0]
  return -1;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_exit>:

void _exit (int status)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ffe7 	bl	8002394 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023c6:	e7fe      	b.n	80023c6 <_exit+0x12>

080023c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	e00a      	b.n	80023f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023da:	f3af 8000 	nop.w
 80023de:	4601      	mov	r1, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	60ba      	str	r2, [r7, #8]
 80023e6:	b2ca      	uxtb	r2, r1
 80023e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dbf0      	blt.n	80023da <_read+0x12>
  }

  return len;
 80023f8:	687b      	ldr	r3, [r7, #4]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e009      	b.n	8002428 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	60ba      	str	r2, [r7, #8]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe ff57 	bl	80012d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3301      	adds	r3, #1
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	429a      	cmp	r2, r3
 800242e:	dbf1      	blt.n	8002414 <_write+0x12>
  }
  return len;
 8002430:	687b      	ldr	r3, [r7, #4]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <_close>:

int _close(int file)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002442:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002452:	b480      	push	{r7}
 8002454:	b083      	sub	sp, #12
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002462:	605a      	str	r2, [r3, #4]
  return 0;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr

08002472 <_isatty>:

int _isatty(int file)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800247a:	2301      	movs	r3, #1
}
 800247c:	4618      	mov	r0, r3
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002488:	b480      	push	{r7}
 800248a:	b085      	sub	sp, #20
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3714      	adds	r7, #20
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <_sbrk+0x5c>)
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <_sbrk+0x60>)
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b8:	4b13      	ldr	r3, [pc, #76]	; (8002508 <_sbrk+0x64>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <_sbrk+0x64>)
 80024c2:	4a12      	ldr	r2, [pc, #72]	; (800250c <_sbrk+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c6:	4b10      	ldr	r3, [pc, #64]	; (8002508 <_sbrk+0x64>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4413      	add	r3, r2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d207      	bcs.n	80024e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d4:	f00a ff32 	bl	800d33c <__errno>
 80024d8:	4603      	mov	r3, r0
 80024da:	220c      	movs	r2, #12
 80024dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024de:	f04f 33ff 	mov.w	r3, #4294967295
 80024e2:	e009      	b.n	80024f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e4:	4b08      	ldr	r3, [pc, #32]	; (8002508 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <_sbrk+0x64>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	4a05      	ldr	r2, [pc, #20]	; (8002508 <_sbrk+0x64>)
 80024f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f6:	68fb      	ldr	r3, [r7, #12]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	2000a000 	.word	0x2000a000
 8002504:	00000400 	.word	0x00000400
 8002508:	20000734 	.word	0x20000734
 800250c:	20000f20 	.word	0x20000f20

08002510 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <SystemInit+0x20>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <SystemInit+0x20>)
 800251c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002520:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000ed00 	.word	0xe000ed00

08002534 <HomeSensorInit>:
 *      Author: Jennyston
 */

#include "devices/home_sensor.h"

void HomeSensorInit(HomeSensor_t *homeSensor, GPIO_t gpio) {
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	e883 0006 	stmia.w	r3, {r1, r2}
	homeSensor->gpio = gpio;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	461a      	mov	r2, r3
 8002546:	1d3b      	adds	r3, r7, #4
 8002548:	e893 0003 	ldmia.w	r3, {r0, r1}
 800254c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HomeSensorHome>:

void HomeSensorHome(HomeSensor_t *homeSensor, Motor_t *motor) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
//	//get motor spinning
//	MotorSetPower(motor, HOME_MOTOR_MAX_SPEED);
//	HAL_Delay(1000);

	//run motor at max speed and find home position
	MotorSetPower(motor, HOME_MOTOR_MAX_SPEED);
 8002566:	f44f 61af 	mov.w	r1, #1400	; 0x578
 800256a:	6838      	ldr	r0, [r7, #0]
 800256c:	f000 fa43 	bl	80029f6 <MotorSetPower>
	while(GPIOGetState(&(homeSensor->gpio)) == GPIO_LOW) {
 8002570:	bf00      	nop
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fa83 	bl	8002a80 <GPIOGetState>
 800257a:	4603      	mov	r3, r0
 800257c:	2b01      	cmp	r3, #1
 800257e:	d0f8      	beq.n	8002572 <HomeSensorHome+0x16>
		//wait (do nothing)
	}

	//dead time
	MotorSetPower(motor, 0);
 8002580:	2100      	movs	r1, #0
 8002582:	6838      	ldr	r0, [r7, #0]
 8002584:	f000 fa37 	bl	80029f6 <MotorSetPower>
	HAL_Delay(500);
 8002588:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800258c:	f000 fb32 	bl	8002bf4 <HAL_Delay>

	//home position has been found, back off slowly
	MotorSetPower(motor, -HOME_MOTOR_MIN_SPEED);
 8002590:	4915      	ldr	r1, [pc, #84]	; (80025e8 <HomeSensorHome+0x8c>)
 8002592:	6838      	ldr	r0, [r7, #0]
 8002594:	f000 fa2f 	bl	80029f6 <MotorSetPower>
	while(GPIOGetState(&(homeSensor->gpio)) == GPIO_HIGH) {
 8002598:	bf00      	nop
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fa6f 	bl	8002a80 <GPIOGetState>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d0f8      	beq.n	800259a <HomeSensorHome+0x3e>
		//wait (do nothing)
	}
	HAL_Delay(250);
 80025a8:	20fa      	movs	r0, #250	; 0xfa
 80025aa:	f000 fb23 	bl	8002bf4 <HAL_Delay>

	//dead time
	MotorSetPower(motor, 0);
 80025ae:	2100      	movs	r1, #0
 80025b0:	6838      	ldr	r0, [r7, #0]
 80025b2:	f000 fa20 	bl	80029f6 <MotorSetPower>
	HAL_Delay(500);
 80025b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025ba:	f000 fb1b 	bl	8002bf4 <HAL_Delay>

	//move forward back to home position slowly
	MotorSetPower(motor, HOME_MOTOR_MIN_SPEED);
 80025be:	f240 414c 	movw	r1, #1100	; 0x44c
 80025c2:	6838      	ldr	r0, [r7, #0]
 80025c4:	f000 fa17 	bl	80029f6 <MotorSetPower>
	while(GPIOGetState(&(homeSensor->gpio)) == GPIO_LOW) {
 80025c8:	bf00      	nop
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 fa57 	bl	8002a80 <GPIOGetState>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d0f8      	beq.n	80025ca <HomeSensorHome+0x6e>
		//wait (do nothing)
	}

	MotorSetPower(motor, 0);
 80025d8:	2100      	movs	r1, #0
 80025da:	6838      	ldr	r0, [r7, #0]
 80025dc:	f000 fa0b 	bl	80029f6 <MotorSetPower>

	//done
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	fffffbb4 	.word	0xfffffbb4

080025ec <CurrentSenseInit>:

//private function forward declarations
static void Ina219WriteRegister(Ina219_t *cSense, Ina219Reg reg, uint16_t data);
static uint16_t Ina219ReadRegister(Ina219_t *cSense, Ina219Reg reg);

void CurrentSenseInit(Ina219_t *cSense, I2C_HandleTypeDef *hi2c) {
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
	cSense->hi2c = hi2c;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	601a      	str	r2, [r3, #0]

	//uint16_t test = Ina219ReadRegister(cSense, INA219_CONFIG);

	//Soft reset INA219
	Ina219WriteRegister(cSense, INA219_CONFIG, 0b1000000000000000);
 80025fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002600:	2100      	movs	r1, #0
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f840 	bl	8002688 <Ina219WriteRegister>
	HAL_Delay(5);
 8002608:	2005      	movs	r0, #5
 800260a:	f000 faf3 	bl	8002bf4 <HAL_Delay>
	 * PGA: +/- 320mV
	 * BADC: 12-bit
	 * SADC: 2 samples
	 * Operating Mode: Shunt and bus, continuous
	 */
	Ina219WriteRegister(cSense, INA219_CONFIG, 0b0001100111001111);
 800260e:	f641 12cf 	movw	r2, #6607	; 0x19cf
 8002612:	2100      	movs	r1, #0
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f837 	bl	8002688 <Ina219WriteRegister>

	//Calibration
	Ina219WriteRegister(cSense, INA219_CALIBRATION, 4096);
 800261a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800261e:	2105      	movs	r1, #5
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f831 	bl	8002688 <Ina219WriteRegister>

}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <CurrentSenseGetCurrent>:

float CurrentSenseGetCurrent(Ina219_t *cSense) {
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]

	//Ensure sensor calibration did not reset as recommended by Adafruit
	//Ina219WriteRegister(cSense, INA219_CALIBRATION, 4096);

	//Ina219WriteRegister(cSense, INA219_CONFIG, 0b0001100110011111);
	Ina219WriteRegister(cSense, INA219_CONFIG, 0b0001100111001111);
 8002638:	f641 12cf 	movw	r2, #6607	; 0x19cf
 800263c:	2100      	movs	r1, #0
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f822 	bl	8002688 <Ina219WriteRegister>


	//Calibration
	Ina219WriteRegister(cSense, INA219_CALIBRATION, 4096);
 8002644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002648:	2105      	movs	r1, #5
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f000 f81c 	bl	8002688 <Ina219WriteRegister>

	uint16_t rawData = Ina219ReadRegister(cSense, INA219_CURRENT);
 8002650:	2104      	movs	r1, #4
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f869 	bl	800272a <Ina219ReadRegister>
 8002658:	4603      	mov	r3, r0
 800265a:	81bb      	strh	r3, [r7, #12]
	int16_t data = *(int16_t *)&rawData;
 800265c:	f107 030c 	add.w	r3, r7, #12
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	81fb      	strh	r3, [r7, #14]
	return data * 0.0001f;
 8002664:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002668:	ee07 3a90 	vmov	s15, r3
 800266c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002670:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8002684 <CurrentSenseGetCurrent+0x54>
 8002674:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002678:	eeb0 0a67 	vmov.f32	s0, s15
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	38d1b717 	.word	0x38d1b717

08002688 <Ina219WriteRegister>:

static void Ina219WriteRegister(Ina219_t *cSense, Ina219Reg reg,
		uint16_t data) {
 8002688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800268c:	b089      	sub	sp, #36	; 0x24
 800268e:	af02      	add	r7, sp, #8
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	460b      	mov	r3, r1
 8002694:	70fb      	strb	r3, [r7, #3]
 8002696:	4613      	mov	r3, r2
 8002698:	803b      	strh	r3, [r7, #0]
 800269a:	466b      	mov	r3, sp
 800269c:	461e      	mov	r6, r3
	//Prepare data for transmit
	const uint8_t TX_DATA_LENGTH = 3;
 800269e:	2303      	movs	r3, #3
 80026a0:	74fb      	strb	r3, [r7, #19]
	uint8_t txData[TX_DATA_LENGTH];
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	3b01      	subs	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2200      	movs	r2, #0
 80026ac:	4698      	mov	r8, r3
 80026ae:	4691      	mov	r9, r2
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	2200      	movs	r2, #0
 80026c8:	461c      	mov	r4, r3
 80026ca:	4615      	mov	r5, r2
 80026cc:	f04f 0200 	mov.w	r2, #0
 80026d0:	f04f 0300 	mov.w	r3, #0
 80026d4:	00eb      	lsls	r3, r5, #3
 80026d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026da:	00e2      	lsls	r2, r4, #3
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	3307      	adds	r3, #7
 80026e0:	08db      	lsrs	r3, r3, #3
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	ebad 0d03 	sub.w	sp, sp, r3
 80026e8:	ab02      	add	r3, sp, #8
 80026ea:	3300      	adds	r3, #0
 80026ec:	60fb      	str	r3, [r7, #12]
	txData[0] = (uint8_t)reg;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	701a      	strb	r2, [r3, #0]
	txData[1] = (uint8_t)((data >> 8) & 0xFF);
 80026f4:	883b      	ldrh	r3, [r7, #0]
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	705a      	strb	r2, [r3, #1]
	txData[2] = (uint8_t)(data & 0xFF);
 8002700:	883b      	ldrh	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	709a      	strb	r2, [r3, #2]

	//Transmit register address with provided data
	HAL_I2C_Master_Transmit(cSense->hi2c, INA219_ADDR, txData, TX_DATA_LENGTH,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	b29b      	uxth	r3, r3
 8002710:	f04f 32ff 	mov.w	r2, #4294967295
 8002714:	9200      	str	r2, [sp, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	2180      	movs	r1, #128	; 0x80
 800271a:	f000 fddb 	bl	80032d4 <HAL_I2C_Master_Transmit>
 800271e:	46b5      	mov	sp, r6
			HAL_MAX_DELAY);
}
 8002720:	bf00      	nop
 8002722:	371c      	adds	r7, #28
 8002724:	46bd      	mov	sp, r7
 8002726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800272a <Ina219ReadRegister>:

static uint16_t Ina219ReadRegister(Ina219_t *cSense, Ina219Reg reg) {
 800272a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af02      	add	r7, sp, #8
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	70fb      	strb	r3, [r7, #3]
 8002738:	466b      	mov	r3, sp
 800273a:	461e      	mov	r6, r3
	const int RX_DATA_LENGTH = 2;
 800273c:	2302      	movs	r3, #2
 800273e:	613b      	str	r3, [r7, #16]
	uint8_t buffer[RX_DATA_LENGTH];
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	3b01      	subs	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2200      	movs	r2, #0
 800274a:	4698      	mov	r8, r3
 800274c:	4691      	mov	r9, r2
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	f04f 0300 	mov.w	r3, #0
 8002756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800275a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800275e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2200      	movs	r2, #0
 8002766:	461c      	mov	r4, r3
 8002768:	4615      	mov	r5, r2
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	00eb      	lsls	r3, r5, #3
 8002774:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002778:	00e2      	lsls	r2, r4, #3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	3307      	adds	r3, #7
 800277e:	08db      	lsrs	r3, r3, #3
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	ebad 0d03 	sub.w	sp, sp, r3
 8002786:	ab02      	add	r3, sp, #8
 8002788:	3300      	adds	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(cSense->hi2c, INA219_ADDR, (uint8_t *)&reg, 1,
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6818      	ldr	r0, [r3, #0]
 8002790:	1cfa      	adds	r2, r7, #3
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	2301      	movs	r3, #1
 800279a:	2180      	movs	r1, #128	; 0x80
 800279c:	f000 fd9a 	bl	80032d4 <HAL_I2C_Master_Transmit>
			HAL_MAX_DELAY);
	HAL_I2C_Master_Receive(cSense->hi2c, INA219_ADDR, buffer, RX_DATA_LENGTH,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	9200      	str	r2, [sp, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	f000 fe83 	bl	80034bc <HAL_I2C_Master_Receive>
			HAL_MAX_DELAY);

	//Convert 2*8-bit data to 16-bit
	uint16_t data = (((uint16_t)buffer[0])<< 8) | (buffer[1] & 0xFF);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b21a      	sxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	785b      	ldrb	r3, [r3, #1]
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	817b      	strh	r3, [r7, #10]

	return data;
 80027ca:	897b      	ldrh	r3, [r7, #10]
 80027cc:	46b5      	mov	sp, r6
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080027d8 <MotorInit>:
#include "devices/motor.h"

static int32_t Abs(int32_t x);

void MotorInit(Motor_t *motor, TIM_HandleTypeDef *htim, uint32_t pwmCh,
		GPIO_t reverseGpio, GPIO_t forwardGpio) {
 80027d8:	b082      	sub	sp, #8
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	61fb      	str	r3, [r7, #28]
	motor->htim = htim;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	601a      	str	r2, [r3, #0]
	motor->pwmCh = pwmCh;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	605a      	str	r2, [r3, #4]
	motor->reverseGpio = reverseGpio;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3310      	adds	r3, #16
 80027f8:	f107 021c 	add.w	r2, r7, #28
 80027fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002800:	e883 0003 	stmia.w	r3, {r0, r1}
	motor->forwardGpio = forwardGpio;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3308      	adds	r3, #8
 8002808:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800280c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002810:	e883 0003 	stmia.w	r3, {r0, r1}
	motor->offset = 0;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	839a      	strh	r2, [r3, #28]
	MotorSetDirection(motor, DIR_STOP);
 800281a:	2101      	movs	r1, #1
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 f81b 	bl	8002858 <MotorSetDirection>
}
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800282c:	b002      	add	sp, #8
 800282e:	4770      	bx	lr

08002830 <MotorStartPWM>:

void MotorStartPWM(Motor_t *motor) {
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	//make sure motor is stopped
	MotorSetDirection(motor, DIR_STOP);
 8002838:	2101      	movs	r1, #1
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f80c 	bl	8002858 <MotorSetDirection>

	HAL_TIM_PWM_Start(motor->htim, motor->pwmCh);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4619      	mov	r1, r3
 800284a:	4610      	mov	r0, r2
 800284c:	f004 fcfe 	bl	800724c <HAL_TIM_PWM_Start>
}
 8002850:	bf00      	nop
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <MotorSetDirection>:

uint16_t MotorGetOffset(Motor_t *motor) {
	return motor->offset;
}

void MotorSetDirection(Motor_t *motor, MotorDirection_t dir) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	70fb      	strb	r3, [r7, #3]

	//Set appropriate GPIO based on requested direction
	switch(dir) {
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d012      	beq.n	8002890 <MotorSetDirection+0x38>
 800286a:	2b02      	cmp	r3, #2
 800286c:	d121      	bne.n	80028b2 <MotorSetDirection+0x5a>
	case DIR_FORWARD:
		HAL_GPIO_WritePin(motor->forwardGpio.port, motor->forwardGpio.pin,
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6898      	ldr	r0, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	899b      	ldrh	r3, [r3, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	4619      	mov	r1, r3
 800287a:	f000 fc83 	bl	8003184 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->reverseGpio.port, motor->reverseGpio.pin,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6918      	ldr	r0, [r3, #16]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	8a9b      	ldrh	r3, [r3, #20]
 8002886:	2200      	movs	r2, #0
 8002888:	4619      	mov	r1, r3
 800288a:	f000 fc7b 	bl	8003184 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		break;
 800288e:	e011      	b.n	80028b4 <MotorSetDirection+0x5c>
	case DIR_REVERSE:
		HAL_GPIO_WritePin(motor->forwardGpio.port, motor->forwardGpio.pin,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6898      	ldr	r0, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	899b      	ldrh	r3, [r3, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	4619      	mov	r1, r3
 800289c:	f000 fc72 	bl	8003184 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(motor->reverseGpio.port, motor->reverseGpio.pin,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6918      	ldr	r0, [r3, #16]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8a9b      	ldrh	r3, [r3, #20]
 80028a8:	2201      	movs	r2, #1
 80028aa:	4619      	mov	r1, r3
 80028ac:	f000 fc6a 	bl	8003184 <HAL_GPIO_WritePin>
				GPIO_PIN_SET);
		break;
 80028b0:	e000      	b.n	80028b4 <MotorSetDirection+0x5c>
	default:
		break;
 80028b2:	bf00      	nop
	}

	motor->direction = dir;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	761a      	strb	r2, [r3, #24]

	MotorSetSpeed(motor, 0);
 80028ba:	2100      	movs	r1, #0
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 f810 	bl	80028e2 <MotorSetSpeed>
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <MotorGetDirection>:

MotorDirection_t MotorGetDirection(Motor_t *motor) {
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
	return motor->direction;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	7e1b      	ldrb	r3, [r3, #24]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <MotorSetSpeed>:


void MotorSetSpeed(Motor_t *motor, uint16_t speed) {
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	807b      	strh	r3, [r7, #2]
	motor->speed = speed;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	887a      	ldrh	r2, [r7, #2]
 80028f2:	835a      	strh	r2, [r3, #26]

	if(motor->speed > 0) {
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	8b5b      	ldrh	r3, [r3, #26]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d03e      	beq.n	800297a <MotorSetSpeed+0x98>
		uint32_t pwmVal = (uint32_t)motor->speed + motor->offset;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8b5b      	ldrh	r3, [r3, #26]
 8002900:	461a      	mov	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8b9b      	ldrh	r3, [r3, #28]
 8002906:	4413      	add	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, pwmVal);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d105      	bne.n	800291e <MotorSetSpeed+0x3c>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else {
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
	}
}
 800291c:	e065      	b.n	80029ea <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, pwmVal);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b04      	cmp	r3, #4
 8002924:	d105      	bne.n	8002932 <MotorSetSpeed+0x50>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6393      	str	r3, [r2, #56]	; 0x38
 8002930:	e05b      	b.n	80029ea <MotorSetSpeed+0x108>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b08      	cmp	r3, #8
 8002938:	d105      	bne.n	8002946 <MotorSetSpeed+0x64>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002944:	e051      	b.n	80029ea <MotorSetSpeed+0x108>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b0c      	cmp	r3, #12
 800294c:	d105      	bne.n	800295a <MotorSetSpeed+0x78>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6413      	str	r3, [r2, #64]	; 0x40
 8002958:	e047      	b.n	80029ea <MotorSetSpeed+0x108>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b10      	cmp	r3, #16
 8002960:	d105      	bne.n	800296e <MotorSetSpeed+0x8c>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6593      	str	r3, [r2, #88]	; 0x58
 800296c:	e03d      	b.n	80029ea <MotorSetSpeed+0x108>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002978:	e037      	b.n	80029ea <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <MotorSetSpeed+0xac>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2200      	movs	r2, #0
 800298a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800298c:	e02d      	b.n	80029ea <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b04      	cmp	r3, #4
 8002994:	d105      	bne.n	80029a2 <MotorSetSpeed+0xc0>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2300      	movs	r3, #0
 800299e:	6393      	str	r3, [r2, #56]	; 0x38
}
 80029a0:	e023      	b.n	80029ea <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d105      	bne.n	80029b6 <MotorSetSpeed+0xd4>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2300      	movs	r3, #0
 80029b2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80029b4:	e019      	b.n	80029ea <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d105      	bne.n	80029ca <MotorSetSpeed+0xe8>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	2300      	movs	r3, #0
 80029c6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80029c8:	e00f      	b.n	80029ea <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b10      	cmp	r3, #16
 80029d0:	d105      	bne.n	80029de <MotorSetSpeed+0xfc>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	2300      	movs	r3, #0
 80029da:	6593      	str	r3, [r2, #88]	; 0x58
}
 80029dc:	e005      	b.n	80029ea <MotorSetSpeed+0x108>
		__HAL_TIM_SET_COMPARE(motor->htim, motor->pwmCh, 0);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	2300      	movs	r3, #0
 80029e6:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80029e8:	e7ff      	b.n	80029ea <MotorSetSpeed+0x108>
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <MotorSetPower>:

uint16_t MotorGetSpeed(Motor_t *motor) {
	return motor->speed;
}

void MotorSetPower(Motor_t *motor, int32_t power) {
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b082      	sub	sp, #8
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
	//determine direction based on sign of power
	if(power < 0) {
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	da04      	bge.n	8002a10 <MotorSetPower+0x1a>
		MotorSetDirection(motor, DIR_REVERSE);
 8002a06:	2100      	movs	r1, #0
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ff25 	bl	8002858 <MotorSetDirection>
 8002a0e:	e006      	b.n	8002a1e <MotorSetPower+0x28>
	}
	else if(power > 0) {
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	dd03      	ble.n	8002a1e <MotorSetPower+0x28>
		MotorSetDirection(motor, DIR_FORWARD);
 8002a16:	2102      	movs	r1, #2
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff ff1d 	bl	8002858 <MotorSetDirection>
	}

	MotorSetSpeed(motor, (uint16_t)Abs(power));
 8002a1e:	6838      	ldr	r0, [r7, #0]
 8002a20:	f000 f80a 	bl	8002a38 <Abs>
 8002a24:	4603      	mov	r3, r0
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7ff ff59 	bl	80028e2 <MotorSetSpeed>
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <Abs>:

static int32_t Abs(int32_t x) {
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
	if(x < 0) {
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	da02      	bge.n	8002a4c <Abs+0x14>
		return x * -1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	425b      	negs	r3, r3
 8002a4a:	e000      	b.n	8002a4e <Abs+0x16>
	}
	else {
		return x;
 8002a4c:	687b      	ldr	r3, [r7, #4]
	}
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <GPIOInit>:
 *      Author: Jennyston
 */

#include "peripherals/gpio.h"

void GPIOInit(GPIO_t *gpio, GPIO_TypeDef *port, uint16_t pin) {
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	4613      	mov	r3, r2
 8002a66:	80fb      	strh	r3, [r7, #6]
	gpio->port = port;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	601a      	str	r2, [r3, #0]
	gpio->pin = pin;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	88fa      	ldrh	r2, [r7, #6]
 8002a72:	809a      	strh	r2, [r3, #4]
//	gpio->hcomp = NULL;
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <GPIOGetState>:
//	gpio->port = NULL;
//	gpio->pin = 0;
//	gpio->hcomp = hcomp;
//}

GPIOState GPIOGetState(GPIO_t *gpio) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
	if(gpio->port != NULL) {
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00e      	beq.n	8002aae <GPIOGetState+0x2e>
		return HAL_GPIO_ReadPin(gpio->port, gpio->pin) == GPIO_PIN_SET ?
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	889b      	ldrh	r3, [r3, #4]
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 fb5a 	bl	8003154 <HAL_GPIO_ReadPin>
 8002aa0:	4603      	mov	r3, r0
				GPIO_HIGH : GPIO_LOW;
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	bf14      	ite	ne
 8002aa6:	2301      	movne	r3, #1
 8002aa8:	2300      	moveq	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	e000      	b.n	8002ab0 <GPIOGetState+0x30>
//	else if (gpio->hcomp != NULL) {
//		return HAL_COMP_GetOutputLevel(gpio->hcomp) == COMP_OUTPUTLEVEL_HIGH ?
//				GPIO_HIGH : GPIO_LOW;
//	}
	else {
		return GPIO_LOW;
 8002aae:	2301      	movs	r3, #1
	}
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <MotorLoggerInit>:
 */

#include <stdio.h>
#include <testing/motor_logger.h>

void MotorLoggerInit(MotorLogger_t *mLogger, MotorController_t *controller) {
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
	mLogger->controller = controller;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	601a      	str	r2, [r3, #0]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b0c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ad8:	f7ff fd1a 	bl	8002510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002adc:	480c      	ldr	r0, [pc, #48]	; (8002b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ade:	490d      	ldr	r1, [pc, #52]	; (8002b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ae0:	4a0d      	ldr	r2, [pc, #52]	; (8002b18 <LoopForever+0xe>)
  movs r3, #0
 8002ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ae4:	e002      	b.n	8002aec <LoopCopyDataInit>

08002ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aea:	3304      	adds	r3, #4

08002aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af0:	d3f9      	bcc.n	8002ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002af2:	4a0a      	ldr	r2, [pc, #40]	; (8002b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002af4:	4c0a      	ldr	r4, [pc, #40]	; (8002b20 <LoopForever+0x16>)
  movs r3, #0
 8002af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002af8:	e001      	b.n	8002afe <LoopFillZerobss>

08002afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002afc:	3204      	adds	r2, #4

08002afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b00:	d3fb      	bcc.n	8002afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b02:	f00a fc21 	bl	800d348 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b06:	f7fe fc63 	bl	80013d0 <main>

08002b0a <LoopForever>:

LoopForever:
    b LoopForever
 8002b0a:	e7fe      	b.n	8002b0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002b0c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8002b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b14:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8002b18:	0801035c 	.word	0x0801035c
  ldr r2, =_sbss
 8002b1c:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8002b20:	20000f1c 	.word	0x20000f1c

08002b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b24:	e7fe      	b.n	8002b24 <ADC1_2_IRQHandler>
	...

08002b28 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <HAL_Init+0x28>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a07      	ldr	r2, [pc, #28]	; (8002b50 <HAL_Init+0x28>)
 8002b32:	f043 0310 	orr.w	r3, r3, #16
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b38:	2003      	movs	r0, #3
 8002b3a:	f000 f94f 	bl	8002ddc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f000 f808 	bl	8002b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b44:	f7ff fa0a 	bl	8001f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40022000 	.word	0x40022000

08002b54 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b5c:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <HAL_InitTick+0x54>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_InitTick+0x58>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4619      	mov	r1, r3
 8002b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 f967 	bl	8002e46 <HAL_SYSTICK_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00e      	b.n	8002ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b0f      	cmp	r3, #15
 8002b86:	d80a      	bhi.n	8002b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	f000 f92f 	bl	8002df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b94:	4a06      	ldr	r2, [pc, #24]	; (8002bb0 <HAL_InitTick+0x5c>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e000      	b.n	8002ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000008 	.word	0x20000008
 8002bac:	20000010 	.word	0x20000010
 8002bb0:	2000000c 	.word	0x2000000c

08002bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_IncTick+0x20>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b06      	ldr	r3, [pc, #24]	; (8002bd8 <HAL_IncTick+0x24>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <HAL_IncTick+0x24>)
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000010 	.word	0x20000010
 8002bd8:	20000738 	.word	0x20000738

08002bdc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return uwTick;  
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_GetTick+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000738 	.word	0x20000738

08002bf4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff ffee 	bl	8002bdc <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d005      	beq.n	8002c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <HAL_Delay+0x44>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002c1a:	bf00      	nop
 8002c1c:	f7ff ffde 	bl	8002bdc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d8f7      	bhi.n	8002c1c <HAL_Delay+0x28>
  {
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000010 	.word	0x20000010

08002c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6e:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <__NVIC_GetPriorityGrouping+0x18>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	f003 0307 	and.w	r3, r3, #7
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db0b      	blt.n	8002cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	f003 021f 	and.w	r2, r3, #31
 8002cb8:	4907      	ldr	r1, [pc, #28]	; (8002cd8 <__NVIC_EnableIRQ+0x38>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	e000e100 	.word	0xe000e100

08002cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	6039      	str	r1, [r7, #0]
 8002ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	db0a      	blt.n	8002d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	490c      	ldr	r1, [pc, #48]	; (8002d28 <__NVIC_SetPriority+0x4c>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	0112      	lsls	r2, r2, #4
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	440b      	add	r3, r1
 8002d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d04:	e00a      	b.n	8002d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <__NVIC_SetPriority+0x50>)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	3b04      	subs	r3, #4
 8002d14:	0112      	lsls	r2, r2, #4
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	440b      	add	r3, r1
 8002d1a:	761a      	strb	r2, [r3, #24]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000e100 	.word	0xe000e100
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f1c3 0307 	rsb	r3, r3, #7
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	bf28      	it	cs
 8002d4e:	2304      	movcs	r3, #4
 8002d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d902      	bls.n	8002d60 <NVIC_EncodePriority+0x30>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3b03      	subs	r3, #3
 8002d5e:	e000      	b.n	8002d62 <NVIC_EncodePriority+0x32>
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	f04f 32ff 	mov.w	r2, #4294967295
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	401a      	ands	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d78:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	43d9      	mvns	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	4313      	orrs	r3, r2
         );
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3724      	adds	r7, #36	; 0x24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da8:	d301      	bcc.n	8002dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00f      	b.n	8002dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <SysTick_Config+0x40>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002db6:	210f      	movs	r1, #15
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	f7ff ff8e 	bl	8002cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <SysTick_Config+0x40>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <SysTick_Config+0x40>)
 8002dc8:	2207      	movs	r2, #7
 8002dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	e000e010 	.word	0xe000e010

08002ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ff29 	bl	8002c3c <__NVIC_SetPriorityGrouping>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e04:	f7ff ff3e 	bl	8002c84 <__NVIC_GetPriorityGrouping>
 8002e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f7ff ff8e 	bl	8002d30 <NVIC_EncodePriority>
 8002e14:	4602      	mov	r2, r0
 8002e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff5d 	bl	8002cdc <__NVIC_SetPriority>
}
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	4603      	mov	r3, r0
 8002e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff ff31 	bl	8002ca0 <__NVIC_EnableIRQ>
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f7ff ffa2 	bl	8002d98 <SysTick_Config>
 8002e54:	4603      	mov	r3, r0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6e:	e154      	b.n	800311a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	2101      	movs	r1, #1
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 8146 	beq.w	8003114 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0303 	and.w	r3, r3, #3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d005      	beq.n	8002ea0 <HAL_GPIO_Init+0x40>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d130      	bne.n	8002f02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	693a      	ldr	r2, [r7, #16]
 8002ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	f003 0201 	and.w	r2, r3, #1
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d017      	beq.n	8002f3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	2203      	movs	r2, #3
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	693a      	ldr	r2, [r7, #16]
 8002f22:	4013      	ands	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d123      	bne.n	8002f92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	08da      	lsrs	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3208      	adds	r2, #8
 8002f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	220f      	movs	r2, #15
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43db      	mvns	r3, r3
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	08da      	lsrs	r2, r3, #3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3208      	adds	r2, #8
 8002f8c:	6939      	ldr	r1, [r7, #16]
 8002f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0203 	and.w	r2, r3, #3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 80a0 	beq.w	8003114 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd4:	4b58      	ldr	r3, [pc, #352]	; (8003138 <HAL_GPIO_Init+0x2d8>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	4a57      	ldr	r2, [pc, #348]	; (8003138 <HAL_GPIO_Init+0x2d8>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	6193      	str	r3, [r2, #24]
 8002fe0:	4b55      	ldr	r3, [pc, #340]	; (8003138 <HAL_GPIO_Init+0x2d8>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fec:	4a53      	ldr	r2, [pc, #332]	; (800313c <HAL_GPIO_Init+0x2dc>)
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	220f      	movs	r2, #15
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003016:	d019      	beq.n	800304c <HAL_GPIO_Init+0x1ec>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a49      	ldr	r2, [pc, #292]	; (8003140 <HAL_GPIO_Init+0x2e0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <HAL_GPIO_Init+0x1e8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a48      	ldr	r2, [pc, #288]	; (8003144 <HAL_GPIO_Init+0x2e4>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00d      	beq.n	8003044 <HAL_GPIO_Init+0x1e4>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a47      	ldr	r2, [pc, #284]	; (8003148 <HAL_GPIO_Init+0x2e8>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d007      	beq.n	8003040 <HAL_GPIO_Init+0x1e0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a46      	ldr	r2, [pc, #280]	; (800314c <HAL_GPIO_Init+0x2ec>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d101      	bne.n	800303c <HAL_GPIO_Init+0x1dc>
 8003038:	2304      	movs	r3, #4
 800303a:	e008      	b.n	800304e <HAL_GPIO_Init+0x1ee>
 800303c:	2305      	movs	r3, #5
 800303e:	e006      	b.n	800304e <HAL_GPIO_Init+0x1ee>
 8003040:	2303      	movs	r3, #3
 8003042:	e004      	b.n	800304e <HAL_GPIO_Init+0x1ee>
 8003044:	2302      	movs	r3, #2
 8003046:	e002      	b.n	800304e <HAL_GPIO_Init+0x1ee>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <HAL_GPIO_Init+0x1ee>
 800304c:	2300      	movs	r3, #0
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	f002 0203 	and.w	r2, r2, #3
 8003054:	0092      	lsls	r2, r2, #2
 8003056:	4093      	lsls	r3, r2
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800305e:	4937      	ldr	r1, [pc, #220]	; (800313c <HAL_GPIO_Init+0x2dc>)
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	089b      	lsrs	r3, r3, #2
 8003064:	3302      	adds	r3, #2
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800306c:	4b38      	ldr	r3, [pc, #224]	; (8003150 <HAL_GPIO_Init+0x2f0>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	43db      	mvns	r3, r3
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003090:	4a2f      	ldr	r2, [pc, #188]	; (8003150 <HAL_GPIO_Init+0x2f0>)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003096:	4b2e      	ldr	r3, [pc, #184]	; (8003150 <HAL_GPIO_Init+0x2f0>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	43db      	mvns	r3, r3
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4013      	ands	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030ba:	4a25      	ldr	r2, [pc, #148]	; (8003150 <HAL_GPIO_Init+0x2f0>)
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030c0:	4b23      	ldr	r3, [pc, #140]	; (8003150 <HAL_GPIO_Init+0x2f0>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030e4:	4a1a      	ldr	r2, [pc, #104]	; (8003150 <HAL_GPIO_Init+0x2f0>)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030ea:	4b19      	ldr	r3, [pc, #100]	; (8003150 <HAL_GPIO_Init+0x2f0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	43db      	mvns	r3, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_GPIO_Init+0x2f0>)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	3301      	adds	r3, #1
 8003118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
 8003124:	2b00      	cmp	r3, #0
 8003126:	f47f aea3 	bne.w	8002e70 <HAL_GPIO_Init+0x10>
  }
}
 800312a:	bf00      	nop
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40021000 	.word	0x40021000
 800313c:	40010000 	.word	0x40010000
 8003140:	48000400 	.word	0x48000400
 8003144:	48000800 	.word	0x48000800
 8003148:	48000c00 	.word	0x48000c00
 800314c:	48001000 	.word	0x48001000
 8003150:	40010400 	.word	0x40010400

08003154 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	887b      	ldrh	r3, [r7, #2]
 8003166:	4013      	ands	r3, r2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800316c:	2301      	movs	r3, #1
 800316e:	73fb      	strb	r3, [r7, #15]
 8003170:	e001      	b.n	8003176 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	807b      	strh	r3, [r7, #2]
 8003190:	4613      	mov	r3, r2
 8003192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003194:	787b      	ldrb	r3, [r7, #1]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800319a:	887a      	ldrh	r2, [r7, #2]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031a0:	e002      	b.n	80031a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031a2:	887a      	ldrh	r2, [r7, #2]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e081      	b.n	80032ca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fe fee2 	bl	8001fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f022 0201 	bic.w	r2, r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003204:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003214:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d107      	bne.n	800322e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689a      	ldr	r2, [r3, #8]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	e006      	b.n	800323c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800323a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d104      	bne.n	800324e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800324c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6812      	ldr	r2, [r2, #0]
 8003258:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800325c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003260:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003270:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	69d9      	ldr	r1, [r3, #28]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1a      	ldr	r2, [r3, #32]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
	...

080032d4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	461a      	mov	r2, r3
 80032e0:	460b      	mov	r3, r1
 80032e2:	817b      	strh	r3, [r7, #10]
 80032e4:	4613      	mov	r3, r2
 80032e6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	f040 80da 	bne.w	80034aa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_I2C_Master_Transmit+0x30>
 8003300:	2302      	movs	r3, #2
 8003302:	e0d3      	b.n	80034ac <HAL_I2C_Master_Transmit+0x1d8>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800330c:	f7ff fc66 	bl	8002bdc <HAL_GetTick>
 8003310:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	2319      	movs	r3, #25
 8003318:	2201      	movs	r2, #1
 800331a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f9e6 	bl	80036f0 <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e0be      	b.n	80034ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2221      	movs	r2, #33	; 0x21
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2210      	movs	r2, #16
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	893a      	ldrh	r2, [r7, #8]
 800334e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335a:	b29b      	uxth	r3, r3
 800335c:	2bff      	cmp	r3, #255	; 0xff
 800335e:	d90e      	bls.n	800337e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	22ff      	movs	r2, #255	; 0xff
 8003364:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336a:	b2da      	uxtb	r2, r3
 800336c:	8979      	ldrh	r1, [r7, #10]
 800336e:	4b51      	ldr	r3, [pc, #324]	; (80034b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 fbf6 	bl	8003b68 <I2C_TransferConfig>
 800337c:	e06c      	b.n	8003458 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338c:	b2da      	uxtb	r2, r3
 800338e:	8979      	ldrh	r1, [r7, #10]
 8003390:	4b48      	ldr	r3, [pc, #288]	; (80034b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 fbe5 	bl	8003b68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800339e:	e05b      	b.n	8003458 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	6a39      	ldr	r1, [r7, #32]
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 f9f2 	bl	800378e <I2C_WaitOnTXISFlagUntilTimeout>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e07b      	b.n	80034ac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	781a      	ldrb	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	1c5a      	adds	r2, r3, #1
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d034      	beq.n	8003458 <HAL_I2C_Master_Transmit+0x184>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d130      	bne.n	8003458 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2180      	movs	r1, #128	; 0x80
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 f975 	bl	80036f0 <I2C_WaitOnFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e04d      	b.n	80034ac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	2bff      	cmp	r3, #255	; 0xff
 8003418:	d90e      	bls.n	8003438 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	22ff      	movs	r2, #255	; 0xff
 800341e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	b2da      	uxtb	r2, r3
 8003426:	8979      	ldrh	r1, [r7, #10]
 8003428:	2300      	movs	r3, #0
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fb99 	bl	8003b68 <I2C_TransferConfig>
 8003436:	e00f      	b.n	8003458 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003446:	b2da      	uxtb	r2, r3
 8003448:	8979      	ldrh	r1, [r7, #10]
 800344a:	2300      	movs	r3, #0
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fb88 	bl	8003b68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d19e      	bne.n	80033a0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003462:	697a      	ldr	r2, [r7, #20]
 8003464:	6a39      	ldr	r1, [r7, #32]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f9d8 	bl	800381c <I2C_WaitOnSTOPFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e01a      	b.n	80034ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2220      	movs	r2, #32
 800347c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6859      	ldr	r1, [r3, #4]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <HAL_I2C_Master_Transmit+0x1e4>)
 800348a:	400b      	ands	r3, r1
 800348c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2220      	movs	r2, #32
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80034aa:	2302      	movs	r3, #2
  }
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	80002000 	.word	0x80002000
 80034b8:	fe00e800 	.word	0xfe00e800

080034bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	461a      	mov	r2, r3
 80034c8:	460b      	mov	r3, r1
 80034ca:	817b      	strh	r3, [r7, #10]
 80034cc:	4613      	mov	r3, r2
 80034ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b20      	cmp	r3, #32
 80034da:	f040 80db 	bne.w	8003694 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_I2C_Master_Receive+0x30>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e0d4      	b.n	8003696 <HAL_I2C_Master_Receive+0x1da>
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80034f4:	f7ff fb72 	bl	8002bdc <HAL_GetTick>
 80034f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	2319      	movs	r3, #25
 8003500:	2201      	movs	r2, #1
 8003502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f000 f8f2 	bl	80036f0 <I2C_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0bf      	b.n	8003696 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2222      	movs	r2, #34	; 0x22
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2210      	movs	r2, #16
 8003522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	893a      	ldrh	r2, [r7, #8]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	2bff      	cmp	r3, #255	; 0xff
 8003546:	d90e      	bls.n	8003566 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	22ff      	movs	r2, #255	; 0xff
 800354c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003552:	b2da      	uxtb	r2, r3
 8003554:	8979      	ldrh	r1, [r7, #10]
 8003556:	4b52      	ldr	r3, [pc, #328]	; (80036a0 <HAL_I2C_Master_Receive+0x1e4>)
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fb02 	bl	8003b68 <I2C_TransferConfig>
 8003564:	e06d      	b.n	8003642 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003574:	b2da      	uxtb	r2, r3
 8003576:	8979      	ldrh	r1, [r7, #10]
 8003578:	4b49      	ldr	r3, [pc, #292]	; (80036a0 <HAL_I2C_Master_Receive+0x1e4>)
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 faf1 	bl	8003b68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003586:	e05c      	b.n	8003642 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	6a39      	ldr	r1, [r7, #32]
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 f989 	bl	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e07c      	b.n	8003696 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	1c5a      	adds	r2, r3, #1
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d034      	beq.n	8003642 <HAL_I2C_Master_Receive+0x186>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d130      	bne.n	8003642 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	2200      	movs	r2, #0
 80035e8:	2180      	movs	r1, #128	; 0x80
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f000 f880 	bl	80036f0 <I2C_WaitOnFlagUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e04d      	b.n	8003696 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2bff      	cmp	r3, #255	; 0xff
 8003602:	d90e      	bls.n	8003622 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	22ff      	movs	r2, #255	; 0xff
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360e:	b2da      	uxtb	r2, r3
 8003610:	8979      	ldrh	r1, [r7, #10]
 8003612:	2300      	movs	r3, #0
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 faa4 	bl	8003b68 <I2C_TransferConfig>
 8003620:	e00f      	b.n	8003642 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003630:	b2da      	uxtb	r2, r3
 8003632:	8979      	ldrh	r1, [r7, #10]
 8003634:	2300      	movs	r3, #0
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 fa93 	bl	8003b68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d19d      	bne.n	8003588 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	6a39      	ldr	r1, [r7, #32]
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f8e3 	bl	800381c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e01a      	b.n	8003696 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2220      	movs	r2, #32
 8003666:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6859      	ldr	r1, [r3, #4]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_I2C_Master_Receive+0x1e8>)
 8003674:	400b      	ands	r3, r1
 8003676:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e000      	b.n	8003696 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003694:	2302      	movs	r3, #2
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	80002400 	.word	0x80002400
 80036a4:	fe00e800 	.word	0xfe00e800

080036a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d103      	bne.n	80036c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d007      	beq.n	80036e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	619a      	str	r2, [r3, #24]
  }
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003700:	e031      	b.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003708:	d02d      	beq.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7ff fa67 	bl	8002bdc <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x30>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d122      	bne.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699a      	ldr	r2, [r3, #24]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	4013      	ands	r3, r2
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	429a      	cmp	r2, r3
 800372e:	bf0c      	ite	eq
 8003730:	2301      	moveq	r3, #1
 8003732:	2300      	movne	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	461a      	mov	r2, r3
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	429a      	cmp	r2, r3
 800373c:	d113      	bne.n	8003766 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003742:	f043 0220 	orr.w	r2, r3, #32
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e00f      	b.n	8003786 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4013      	ands	r3, r2
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	429a      	cmp	r2, r3
 8003774:	bf0c      	ite	eq
 8003776:	2301      	moveq	r3, #1
 8003778:	2300      	movne	r3, #0
 800377a:	b2db      	uxtb	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	429a      	cmp	r2, r3
 8003782:	d0be      	beq.n	8003702 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800379a:	e033      	b.n	8003804 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	68b9      	ldr	r1, [r7, #8]
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f901 	bl	80039a8 <I2C_IsErrorOccurred>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e031      	b.n	8003814 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b6:	d025      	beq.n	8003804 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b8:	f7ff fa10 	bl	8002bdc <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d302      	bcc.n	80037ce <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d11a      	bne.n	8003804 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	f003 0302 	and.w	r3, r3, #2
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d013      	beq.n	8003804 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	f043 0220 	orr.w	r2, r3, #32
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e007      	b.n	8003814 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b02      	cmp	r3, #2
 8003810:	d1c4      	bne.n	800379c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003828:	e02f      	b.n	800388a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 f8ba 	bl	80039a8 <I2C_IsErrorOccurred>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e02d      	b.n	800389a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7ff f9cd 	bl	8002bdc <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11a      	bne.n	800388a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	f003 0320 	and.w	r3, r3, #32
 800385e:	2b20      	cmp	r3, #32
 8003860:	d013      	beq.n	800388a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	f043 0220 	orr.w	r2, r3, #32
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e007      	b.n	800389a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	f003 0320 	and.w	r3, r3, #32
 8003894:	2b20      	cmp	r3, #32
 8003896:	d1c8      	bne.n	800382a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038b0:	e06b      	b.n	800398a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	68b9      	ldr	r1, [r7, #8]
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 f876 	bl	80039a8 <I2C_IsErrorOccurred>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e069      	b.n	800399a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	2b20      	cmp	r3, #32
 80038d2:	d138      	bne.n	8003946 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b04      	cmp	r3, #4
 80038e0:	d105      	bne.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80038ea:	2300      	movs	r3, #0
 80038ec:	e055      	b.n	800399a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b10      	cmp	r3, #16
 80038fa:	d107      	bne.n	800390c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2210      	movs	r2, #16
 8003902:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2204      	movs	r2, #4
 8003908:	645a      	str	r2, [r3, #68]	; 0x44
 800390a:	e002      	b.n	8003912 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2220      	movs	r2, #32
 8003918:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b1f      	ldr	r3, [pc, #124]	; (80039a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003926:	400b      	ands	r3, r1
 8003928:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e029      	b.n	800399a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003946:	f7ff f949 	bl	8002bdc <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	429a      	cmp	r2, r3
 8003954:	d302      	bcc.n	800395c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d116      	bne.n	800398a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	f003 0304 	and.w	r3, r3, #4
 8003966:	2b04      	cmp	r3, #4
 8003968:	d00f      	beq.n	800398a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396e:	f043 0220 	orr.w	r2, r3, #32
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e007      	b.n	800399a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b04      	cmp	r3, #4
 8003996:	d18c      	bne.n	80038b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	fe00e800 	.word	0xfe00e800

080039a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08a      	sub	sp, #40	; 0x28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d068      	beq.n	8003aa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2210      	movs	r2, #16
 80039da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039dc:	e049      	b.n	8003a72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e4:	d045      	beq.n	8003a72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039e6:	f7ff f8f9 	bl	8002bdc <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d302      	bcc.n	80039fc <I2C_IsErrorOccurred+0x54>
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d13a      	bne.n	8003a72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1e:	d121      	bne.n	8003a64 <I2C_IsErrorOccurred+0xbc>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a26:	d01d      	beq.n	8003a64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d01a      	beq.n	8003a64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a3e:	f7ff f8cd 	bl	8002bdc <HAL_GetTick>
 8003a42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a44:	e00e      	b.n	8003a64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a46:	f7ff f8c9 	bl	8002bdc <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b19      	cmp	r3, #25
 8003a52:	d907      	bls.n	8003a64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	f043 0320 	orr.w	r3, r3, #32
 8003a5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003a62:	e006      	b.n	8003a72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d1e9      	bne.n	8003a46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d003      	beq.n	8003a88 <I2C_IsErrorOccurred+0xe0>
 8003a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0aa      	beq.n	80039de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d103      	bne.n	8003a98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2220      	movs	r2, #32
 8003a96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	f043 0304 	orr.w	r3, r3, #4
 8003a9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00b      	beq.n	8003ad0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ac8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	f043 0308 	orr.w	r3, r3, #8
 8003ae0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003aea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00b      	beq.n	8003b14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	f043 0302 	orr.w	r3, r3, #2
 8003b02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01c      	beq.n	8003b56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f7ff fdc3 	bl	80036a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6859      	ldr	r1, [r3, #4]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <I2C_IsErrorOccurred+0x1bc>)
 8003b2e:	400b      	ands	r3, r1
 8003b30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2220      	movs	r2, #32
 8003b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003b56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3728      	adds	r7, #40	; 0x28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	fe00e800 	.word	0xfe00e800

08003b68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	817b      	strh	r3, [r7, #10]
 8003b76:	4613      	mov	r3, r2
 8003b78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b7a:	897b      	ldrh	r3, [r7, #10]
 8003b7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b80:	7a7b      	ldrb	r3, [r7, #9]
 8003b82:	041b      	lsls	r3, r3, #16
 8003b84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b8e:	6a3b      	ldr	r3, [r7, #32]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	0d5b      	lsrs	r3, r3, #21
 8003ba2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <I2C_TransferConfig+0x60>)
 8003ba8:	430b      	orrs	r3, r1
 8003baa:	43db      	mvns	r3, r3
 8003bac:	ea02 0103 	and.w	r1, r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	03ff63ff 	.word	0x03ff63ff

08003bcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b20      	cmp	r3, #32
 8003be0:	d138      	bne.n	8003c54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e032      	b.n	8003c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2224      	movs	r2, #36	; 0x24
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 0201 	bic.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2220      	movs	r2, #32
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	e000      	b.n	8003c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c54:	2302      	movs	r3, #2
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b085      	sub	sp, #20
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d139      	bne.n	8003cec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c82:	2302      	movs	r3, #2
 8003c84:	e033      	b.n	8003cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2224      	movs	r2, #36	; 0x24
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 0201 	bic.w	r2, r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	021b      	lsls	r3, r3, #8
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	e000      	b.n	8003cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
  }
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cfc:	b08b      	sub	sp, #44	; 0x2c
 8003cfe:	af06      	add	r7, sp, #24
 8003d00:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0c4      	b.n	8003e96 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d106      	bne.n	8003d26 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f009 f853 	bl	800cdcc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2203      	movs	r2, #3
 8003d2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f005 f89a 	bl	8008e6c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
 8003d3c:	e040      	b.n	8003dc0 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d3e:	7bfb      	ldrb	r3, [r7, #15]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	4613      	mov	r3, r2
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4413      	add	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3301      	adds	r3, #1
 8003d50:	2201      	movs	r2, #1
 8003d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	440b      	add	r3, r1
 8003d64:	7bfa      	ldrb	r2, [r7, #15]
 8003d66:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	1c5a      	adds	r2, r3, #1
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	00db      	lsls	r3, r3, #3
 8003d76:	440b      	add	r3, r1
 8003d78:	3303      	adds	r3, #3
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d7e:	7bfa      	ldrb	r2, [r7, #15]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	440b      	add	r3, r1
 8003d8c:	3338      	adds	r3, #56	; 0x38
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d92:	7bfa      	ldrb	r2, [r7, #15]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	440b      	add	r3, r1
 8003da0:	333c      	adds	r3, #60	; 0x3c
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003da6:	7bfa      	ldrb	r2, [r7, #15]
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	440b      	add	r3, r1
 8003db4:	3340      	adds	r3, #64	; 0x40
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
 8003dc0:	7bfa      	ldrb	r2, [r7, #15]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d3b9      	bcc.n	8003d3e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dca:	2300      	movs	r3, #0
 8003dcc:	73fb      	strb	r3, [r7, #15]
 8003dce:	e044      	b.n	8003e5a <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	440b      	add	r3, r1
 8003dde:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003de2:	2200      	movs	r2, #0
 8003de4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003de6:	7bfa      	ldrb	r2, [r7, #15]
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	440b      	add	r3, r1
 8003df4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003dfc:	7bfa      	ldrb	r2, [r7, #15]
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	4613      	mov	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	4413      	add	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	440b      	add	r3, r1
 8003e0a:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003e0e:	2200      	movs	r2, #0
 8003e10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e12:	7bfa      	ldrb	r2, [r7, #15]
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	440b      	add	r3, r1
 8003e20:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003e24:	2200      	movs	r2, #0
 8003e26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e28:	7bfa      	ldrb	r2, [r7, #15]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	440b      	add	r3, r1
 8003e36:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e3e:	7bfa      	ldrb	r2, [r7, #15]
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	440b      	add	r3, r1
 8003e4c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	3301      	adds	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
 8003e5a:	7bfa      	ldrb	r2, [r7, #15]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d3b5      	bcc.n	8003dd0 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	687e      	ldr	r6, [r7, #4]
 8003e6c:	466d      	mov	r5, sp
 8003e6e:	f106 0410 	add.w	r4, r6, #16
 8003e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	602b      	str	r3, [r5, #0]
 8003e7a:	1d33      	adds	r3, r6, #4
 8003e7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e7e:	6838      	ldr	r0, [r7, #0]
 8003e80:	f005 f80f 	bl	8008ea2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3714      	adds	r7, #20
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e9e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_PCD_Start+0x16>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e016      	b.n	8003ee2 <HAL_PCD_Start+0x44>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f004 ffbc 	bl	8008e3e <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003ec6:	2101      	movs	r1, #1
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f009 f9ff 	bl	800d2cc <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f007 fa7b 	bl	800b3ce <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3708      	adds	r7, #8
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f007 fa74 	bl	800b3e4 <USB_ReadInterrupts>
 8003efc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fa9a 	bl	8004442 <PCD_EP_ISR_Handler>

    return;
 8003f0e:	e0bd      	b.n	800408c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d013      	beq.n	8003f42 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f2c:	b292      	uxth	r2, r2
 8003f2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f008 ffeb 	bl	800cf0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003f38:	2100      	movs	r1, #0
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f8a9 	bl	8004092 <HAL_PCD_SetAddress>

    return;
 8003f40:	e0a4      	b.n	800408c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00c      	beq.n	8003f66 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f5e:	b292      	uxth	r2, r2
 8003f60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f64:	e092      	b.n	800408c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00c      	beq.n	8003f8a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f82:	b292      	uxth	r2, r2
 8003f84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f88:	e080      	b.n	800408c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d027      	beq.n	8003fe4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0204 	bic.w	r2, r2, #4
 8003fa6:	b292      	uxth	r2, r2
 8003fa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0208 	bic.w	r2, r2, #8
 8003fbe:	b292      	uxth	r2, r2
 8003fc0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f008 ffdb 	bl	800cf80 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fdc:	b292      	uxth	r2, r2
 8003fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003fe2:	e053      	b.n	800408c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d027      	beq.n	800403e <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0208 	orr.w	r2, r2, #8
 8004000:	b292      	uxth	r2, r2
 8004002:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800400e:	b29a      	uxth	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004018:	b292      	uxth	r2, r2
 800401a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004026:	b29a      	uxth	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f042 0204 	orr.w	r2, r2, #4
 8004030:	b292      	uxth	r2, r2
 8004032:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f008 ff88 	bl	800cf4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800403c:	e026      	b.n	800408c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00f      	beq.n	8004068 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004050:	b29a      	uxth	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800405a:	b292      	uxth	r2, r2
 800405c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f008 ff46 	bl	800cef2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004066:	e011      	b.n	800408c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004084:	b292      	uxth	r2, r2
 8004086:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800408a:	bf00      	nop
  }
}
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	460b      	mov	r3, r1
 800409c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_PCD_SetAddress+0x1a>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e013      	b.n	80040d4 <HAL_PCD_SetAddress+0x42>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	4611      	mov	r1, r2
 80040c4:	4618      	mov	r0, r3
 80040c6:	f007 f96e 	bl	800b3a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	4608      	mov	r0, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	461a      	mov	r2, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	70fb      	strb	r3, [r7, #3]
 80040ee:	460b      	mov	r3, r1
 80040f0:	803b      	strh	r3, [r7, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	da0e      	bge.n	8004120 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	4413      	add	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	705a      	strb	r2, [r3, #1]
 800411e:	e00e      	b.n	800413e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	f003 0207 	and.w	r2, r3, #7
 8004126:	4613      	mov	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4413      	add	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	4413      	add	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	b2da      	uxtb	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800414a:	883a      	ldrh	r2, [r7, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	78ba      	ldrb	r2, [r7, #2]
 8004154:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004156:	78bb      	ldrb	r3, [r7, #2]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d102      	bne.n	8004162 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004168:	2b01      	cmp	r3, #1
 800416a:	d101      	bne.n	8004170 <HAL_PCD_EP_Open+0x94>
 800416c:	2302      	movs	r3, #2
 800416e:	e00e      	b.n	800418e <HAL_PCD_EP_Open+0xb2>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68f9      	ldr	r1, [r7, #12]
 800417e:	4618      	mov	r0, r3
 8004180:	f004 feb0 	bl	8008ee4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800418c:	7afb      	ldrb	r3, [r7, #11]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b084      	sub	sp, #16
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	460b      	mov	r3, r1
 80041a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	da0e      	bge.n	80041c8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041aa:	78fb      	ldrb	r3, [r7, #3]
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	705a      	strb	r2, [r3, #1]
 80041c6:	e00e      	b.n	80041e6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041c8:	78fb      	ldrb	r3, [r7, #3]
 80041ca:	f003 0207 	and.w	r2, r3, #7
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_PCD_EP_Close+0x6a>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e00e      	b.n	800421e <HAL_PCD_EP_Close+0x88>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68f9      	ldr	r1, [r7, #12]
 800420e:	4618      	mov	r0, r3
 8004210:	f005 fa2c 	bl	800966c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	460b      	mov	r3, r1
 8004234:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004236:	7afb      	ldrb	r3, [r7, #11]
 8004238:	f003 0207 	and.w	r2, r3, #7
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2200      	movs	r2, #0
 800425e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	2200      	movs	r2, #0
 8004264:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004266:	7afb      	ldrb	r3, [r7, #11]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	b2da      	uxtb	r2, r3
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6979      	ldr	r1, [r7, #20]
 8004278:	4618      	mov	r0, r3
 800427a:	f005 fbe4 	bl	8009a46 <USB_EPStartXfer>

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	460b      	mov	r3, r1
 8004296:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004298:	7afb      	ldrb	r3, [r7, #11]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4413      	add	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	2200      	movs	r2, #0
 80042cc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2201      	movs	r2, #1
 80042d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d4:	7afb      	ldrb	r3, [r7, #11]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6979      	ldr	r1, [r7, #20]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f005 fbad 	bl	8009a46 <USB_EPStartXfer>

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	460b      	mov	r3, r1
 8004300:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004302:	78fb      	ldrb	r3, [r7, #3]
 8004304:	f003 0207 	and.w	r2, r3, #7
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	429a      	cmp	r2, r3
 800430e:	d901      	bls.n	8004314 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e03e      	b.n	8004392 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004318:	2b00      	cmp	r3, #0
 800431a:	da0e      	bge.n	800433a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4413      	add	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	705a      	strb	r2, [r3, #1]
 8004338:	e00c      	b.n	8004354 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	4413      	add	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	b2da      	uxtb	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_PCD_EP_SetStall+0x7e>
 8004370:	2302      	movs	r3, #2
 8004372:	e00e      	b.n	8004392 <HAL_PCD_EP_SetStall+0x9c>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68f9      	ldr	r1, [r7, #12]
 8004382:	4618      	mov	r0, r3
 8004384:	f006 ff10 	bl	800b1a8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}

0800439a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
 80043a2:	460b      	mov	r3, r1
 80043a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043a6:	78fb      	ldrb	r3, [r7, #3]
 80043a8:	f003 020f 	and.w	r2, r3, #15
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d901      	bls.n	80043b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e040      	b.n	800443a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	da0e      	bge.n	80043de <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c0:	78fb      	ldrb	r3, [r7, #3]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	4613      	mov	r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	4413      	add	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	705a      	strb	r2, [r3, #1]
 80043dc:	e00e      	b.n	80043fc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043de:	78fb      	ldrb	r3, [r7, #3]
 80043e0:	f003 0207 	and.w	r2, r3, #7
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4413      	add	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004402:	78fb      	ldrb	r3, [r7, #3]
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	b2da      	uxtb	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004414:	2b01      	cmp	r3, #1
 8004416:	d101      	bne.n	800441c <HAL_PCD_EP_ClrStall+0x82>
 8004418:	2302      	movs	r3, #2
 800441a:	e00e      	b.n	800443a <HAL_PCD_EP_ClrStall+0xa0>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68f9      	ldr	r1, [r7, #12]
 800442a:	4618      	mov	r0, r3
 800442c:	f006 ff0d 	bl	800b24a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b096      	sub	sp, #88	; 0x58
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800444a:	e3bf      	b.n	8004bcc <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004454:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004458:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800445c:	b2db      	uxtb	r3, r3
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8004466:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 8179 	bne.w	8004762 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004470:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004474:	f003 0310 	and.w	r3, r3, #16
 8004478:	2b00      	cmp	r3, #0
 800447a:	d152      	bne.n	8004522 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	b29b      	uxth	r3, r3
 8004484:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800448c:	81fb      	strh	r3, [r7, #14]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	89fb      	ldrh	r3, [r7, #14]
 8004494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449c:	b29b      	uxth	r3, r3
 800449e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	3328      	adds	r3, #40	; 0x28
 80044a4:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	461a      	mov	r2, r3
 80044b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	3302      	adds	r3, #2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80044d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	441a      	add	r2, r3
 80044dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044de:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80044e0:	2100      	movs	r1, #0
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f008 fceb 	bl	800cebe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 836b 	beq.w	8004bcc <PCD_EP_ISR_Handler+0x78a>
 80044f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f040 8366 	bne.w	8004bcc <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004506:	b2db      	uxtb	r3, r3
 8004508:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800450c:	b2da      	uxtb	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	b292      	uxth	r2, r2
 8004514:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004520:	e354      	b.n	8004bcc <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004528:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004534:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453c:	2b00      	cmp	r3, #0
 800453e:	d034      	beq.n	80045aa <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004548:	b29b      	uxth	r3, r3
 800454a:	461a      	mov	r2, r3
 800454c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4413      	add	r3, r2
 8004554:	3306      	adds	r3, #6
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6812      	ldr	r2, [r2, #0]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004562:	881b      	ldrh	r3, [r3, #0]
 8004564:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800456a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8004576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004578:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800457a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800457e:	b29b      	uxth	r3, r3
 8004580:	f006 ff86 	bl	800b490 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29a      	uxth	r2, r3
 800458c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004590:	4013      	ands	r3, r2
 8004592:	823b      	strh	r3, [r7, #16]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	8a3a      	ldrh	r2, [r7, #16]
 800459a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800459e:	b292      	uxth	r2, r2
 80045a0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f008 fc5e 	bl	800ce64 <HAL_PCD_SetupStageCallback>
 80045a8:	e310      	b.n	8004bcc <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80045aa:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f280 830c 	bge.w	8004bcc <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80045c0:	4013      	ands	r3, r2
 80045c2:	83fb      	strh	r3, [r7, #30]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	8bfa      	ldrh	r2, [r7, #30]
 80045ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80045ce:	b292      	uxth	r2, r2
 80045d0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045da:	b29b      	uxth	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	4413      	add	r3, r2
 80045e6:	3306      	adds	r3, #6
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	4413      	add	r3, r2
 80045f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80045fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d019      	beq.n	800463a <PCD_EP_ISR_Handler+0x1f8>
 8004606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d015      	beq.n	800463a <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004614:	6959      	ldr	r1, [r3, #20]
 8004616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004618:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800461a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800461e:	b29b      	uxth	r3, r3
 8004620:	f006 ff36 	bl	800b490 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	441a      	add	r2, r3
 800462e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004630:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004632:	2100      	movs	r1, #0
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f008 fc27 	bl	800ce88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004644:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464c:	2b00      	cmp	r3, #0
 800464e:	f040 82bd 	bne.w	8004bcc <PCD_EP_ISR_Handler+0x78a>
 8004652:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004656:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800465a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800465e:	f000 82b5 	beq.w	8004bcc <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004670:	b29b      	uxth	r3, r3
 8004672:	461a      	mov	r2, r3
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	4413      	add	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	b29b      	uxth	r3, r3
 8004688:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800468c:	b29a      	uxth	r2, r3
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	801a      	strh	r2, [r3, #0]
 8004692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b3e      	cmp	r3, #62	; 0x3e
 8004698:	d91d      	bls.n	80046d6 <PCD_EP_ISR_Handler+0x294>
 800469a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	647b      	str	r3, [r7, #68]	; 0x44
 80046a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <PCD_EP_ISR_Handler+0x272>
 80046ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b0:	3b01      	subs	r3, #1
 80046b2:	647b      	str	r3, [r7, #68]	; 0x44
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046bc:	b29b      	uxth	r3, r3
 80046be:	029b      	lsls	r3, r3, #10
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	4313      	orrs	r3, r2
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	e026      	b.n	8004724 <PCD_EP_ISR_Handler+0x2e2>
 80046d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <PCD_EP_ISR_Handler+0x2b2>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	801a      	strh	r2, [r3, #0]
 80046f2:	e017      	b.n	8004724 <PCD_EP_ISR_Handler+0x2e2>
 80046f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	085b      	lsrs	r3, r3, #1
 80046fa:	647b      	str	r3, [r7, #68]	; 0x44
 80046fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	f003 0301 	and.w	r3, r3, #1
 8004704:	2b00      	cmp	r3, #0
 8004706:	d002      	beq.n	800470e <PCD_EP_ISR_Handler+0x2cc>
 8004708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470a:	3301      	adds	r3, #1
 800470c:	647b      	str	r3, [r7, #68]	; 0x44
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	881b      	ldrh	r3, [r3, #0]
 8004712:	b29a      	uxth	r2, r3
 8004714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004716:	b29b      	uxth	r3, r3
 8004718:	029b      	lsls	r3, r3, #10
 800471a:	b29b      	uxth	r3, r3
 800471c:	4313      	orrs	r3, r2
 800471e:	b29a      	uxth	r2, r3
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	b29b      	uxth	r3, r3
 800472c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004734:	827b      	strh	r3, [r7, #18]
 8004736:	8a7b      	ldrh	r3, [r7, #18]
 8004738:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800473c:	827b      	strh	r3, [r7, #18]
 800473e:	8a7b      	ldrh	r3, [r7, #18]
 8004740:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004744:	827b      	strh	r3, [r7, #18]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	8a7b      	ldrh	r3, [r7, #18]
 800474c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004750:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004754:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800475c:	b29b      	uxth	r3, r3
 800475e:	8013      	strh	r3, [r2, #0]
 8004760:	e234      	b.n	8004bcc <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	461a      	mov	r2, r3
 8004768:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	881b      	ldrh	r3, [r3, #0]
 8004772:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004776:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800477a:	2b00      	cmp	r3, #0
 800477c:	f280 80fc 	bge.w	8004978 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29a      	uxth	r2, r3
 8004792:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004796:	4013      	ands	r3, r2
 8004798:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	4413      	add	r3, r2
 80047aa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80047ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047b2:	b292      	uxth	r2, r2
 80047b4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80047b6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	4413      	add	r3, r2
 80047ca:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80047cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ce:	7b1b      	ldrb	r3, [r3, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d125      	bne.n	8004820 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047dc:	b29b      	uxth	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4413      	add	r3, r2
 80047e8:	3306      	adds	r3, #6
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	6812      	ldr	r2, [r2, #0]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047fc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004800:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004804:	2b00      	cmp	r3, #0
 8004806:	f000 8092 	beq.w	800492e <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004810:	6959      	ldr	r1, [r3, #20]
 8004812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004814:	88da      	ldrh	r2, [r3, #6]
 8004816:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800481a:	f006 fe39 	bl	800b490 <USB_ReadPMA>
 800481e:	e086      	b.n	800492e <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004822:	78db      	ldrb	r3, [r3, #3]
 8004824:	2b02      	cmp	r3, #2
 8004826:	d10a      	bne.n	800483e <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004828:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800482c:	461a      	mov	r2, r3
 800482e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f9d9 	bl	8004be8 <HAL_PCD_EP_DB_Receive>
 8004836:	4603      	mov	r3, r0
 8004838:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800483c:	e077      	b.n	800492e <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	461a      	mov	r2, r3
 8004844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29b      	uxth	r3, r3
 8004850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004858:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	461a      	mov	r2, r3
 8004862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	441a      	add	r2, r3
 800486a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800486e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800487e:	b29b      	uxth	r3, r3
 8004880:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d024      	beq.n	80048e6 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	461a      	mov	r2, r3
 80048a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	00db      	lsls	r3, r3, #3
 80048ae:	4413      	add	r3, r2
 80048b0:	3302      	adds	r3, #2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048c4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80048c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d02e      	beq.n	800492e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6818      	ldr	r0, [r3, #0]
 80048d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d6:	6959      	ldr	r1, [r3, #20]
 80048d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048da:	891a      	ldrh	r2, [r3, #8]
 80048dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80048e0:	f006 fdd6 	bl	800b490 <USB_ReadPMA>
 80048e4:	e023      	b.n	800492e <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	461a      	mov	r2, r3
 80048f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	3306      	adds	r3, #6
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800490e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004912:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004920:	6959      	ldr	r1, [r3, #20]
 8004922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004924:	895a      	ldrh	r2, [r3, #10]
 8004926:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800492a:	f006 fdb1 	bl	800b490 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800492e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004930:	69da      	ldr	r2, [r3, #28]
 8004932:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004936:	441a      	add	r2, r3
 8004938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800493a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800493c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800493e:	695a      	ldr	r2, [r3, #20]
 8004940:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004944:	441a      	add	r2, r3
 8004946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004948:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800494a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <PCD_EP_ISR_Handler+0x51c>
 8004952:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	429a      	cmp	r2, r3
 800495c:	d206      	bcs.n	800496c <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800495e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f008 fa8f 	bl	800ce88 <HAL_PCD_DataOutStageCallback>
 800496a:	e005      	b.n	8004978 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004972:	4618      	mov	r0, r3
 8004974:	f005 f867 	bl	8009a46 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004978:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800497c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8123 	beq.w	8004bcc <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8004986:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	4413      	add	r3, r2
 8004998:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80049b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	441a      	add	r2, r3
 80049c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80049ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80049d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d8:	78db      	ldrb	r3, [r3, #3]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	f040 80a2 	bne.w	8004b24 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80049e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e2:	2200      	movs	r2, #0
 80049e4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80049e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e8:	7b1b      	ldrb	r3, [r3, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8093 	beq.w	8004b16 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80049f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d046      	beq.n	8004a8a <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049fe:	785b      	ldrb	r3, [r3, #1]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d126      	bne.n	8004a52 <PCD_EP_ISR_Handler+0x610>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	461a      	mov	r2, r3
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	4413      	add	r3, r2
 8004a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	011a      	lsls	r2, r3, #4
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	4413      	add	r3, r2
 8004a26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a2a:	623b      	str	r3, [r7, #32]
 8004a2c:	6a3b      	ldr	r3, [r7, #32]
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	801a      	strh	r2, [r3, #0]
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	881b      	ldrh	r3, [r3, #0]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	801a      	strh	r2, [r3, #0]
 8004a50:	e061      	b.n	8004b16 <PCD_EP_ISR_Handler+0x6d4>
 8004a52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a54:	785b      	ldrb	r3, [r3, #1]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d15d      	bne.n	8004b16 <PCD_EP_ISR_Handler+0x6d4>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a6e:	4413      	add	r3, r2
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	011a      	lsls	r2, r3, #4
 8004a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a80:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a84:	2200      	movs	r2, #0
 8004a86:	801a      	strh	r2, [r3, #0]
 8004a88:	e045      	b.n	8004b16 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a92:	785b      	ldrb	r3, [r3, #1]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d126      	bne.n	8004ae6 <PCD_EP_ISR_Handler+0x6a4>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aac:	4413      	add	r3, r2
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	011a      	lsls	r2, r3, #4
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab8:	4413      	add	r3, r2
 8004aba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004abe:	633b      	str	r3, [r7, #48]	; 0x30
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ace:	801a      	strh	r2, [r3, #0]
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	801a      	strh	r2, [r3, #0]
 8004ae4:	e017      	b.n	8004b16 <PCD_EP_ISR_Handler+0x6d4>
 8004ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d113      	bne.n	8004b16 <PCD_EP_ISR_Handler+0x6d4>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	461a      	mov	r2, r3
 8004afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afc:	4413      	add	r3, r2
 8004afe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	011a      	lsls	r2, r3, #4
 8004b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b08:	4413      	add	r3, r2
 8004b0a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	2200      	movs	r2, #0
 8004b14:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f008 f9ce 	bl	800cebe <HAL_PCD_DataInStageCallback>
 8004b22:	e053      	b.n	8004bcc <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004b24:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d146      	bne.n	8004bbe <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	4413      	add	r3, r2
 8004b44:	3302      	adds	r3, #2
 8004b46:	005b      	lsls	r3, r3, #1
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b52:	881b      	ldrh	r3, [r3, #0]
 8004b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b58:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b5e:	699a      	ldr	r2, [r3, #24]
 8004b60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d907      	bls.n	8004b78 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8004b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6a:	699a      	ldr	r2, [r3, #24]
 8004b6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b70:	1ad2      	subs	r2, r2, r3
 8004b72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b74:	619a      	str	r2, [r3, #24]
 8004b76:	e002      	b.n	8004b7e <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8004b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b80:	699b      	ldr	r3, [r3, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d106      	bne.n	8004b94 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f008 f996 	bl	800cebe <HAL_PCD_DataInStageCallback>
 8004b92:	e01b      	b.n	8004bcc <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b96:	695a      	ldr	r2, [r3, #20]
 8004b98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b9c:	441a      	add	r2, r3
 8004b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004baa:	441a      	add	r2, r3
 8004bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bae:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f004 ff45 	bl	8009a46 <USB_EPStartXfer>
 8004bbc:	e006      	b.n	8004bcc <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004bbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f91b 	bl	8004e02 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	b21b      	sxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f6ff ac37 	blt.w	800444c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3758      	adds	r7, #88	; 0x58
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004bf6:	88fb      	ldrh	r3, [r7, #6]
 8004bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d07e      	beq.n	8004cfe <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4413      	add	r3, r2
 8004c14:	3302      	adds	r3, #2
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c28:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	8b7b      	ldrh	r3, [r7, #26]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d306      	bcc.n	8004c42 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	699a      	ldr	r2, [r3, #24]
 8004c38:	8b7b      	ldrh	r3, [r7, #26]
 8004c3a:	1ad2      	subs	r2, r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	619a      	str	r2, [r3, #24]
 8004c40:	e002      	b.n	8004c48 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2200      	movs	r2, #0
 8004c46:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d123      	bne.n	8004c98 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	833b      	strh	r3, [r7, #24]
 8004c6c:	8b3b      	ldrh	r3, [r7, #24]
 8004c6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c72:	833b      	strh	r3, [r7, #24]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	8b3b      	ldrh	r3, [r7, #24]
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01f      	beq.n	8004ce2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbc:	82fb      	strh	r3, [r7, #22]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	441a      	add	r2, r3
 8004ccc:	8afb      	ldrh	r3, [r7, #22]
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ce2:	8b7b      	ldrh	r3, [r7, #26]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 8087 	beq.w	8004df8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6818      	ldr	r0, [r3, #0]
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	6959      	ldr	r1, [r3, #20]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	891a      	ldrh	r2, [r3, #8]
 8004cf6:	8b7b      	ldrh	r3, [r7, #26]
 8004cf8:	f006 fbca 	bl	800b490 <USB_ReadPMA>
 8004cfc:	e07c      	b.n	8004df8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	461a      	mov	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	4413      	add	r3, r2
 8004d12:	3306      	adds	r3, #6
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d26:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	8b7b      	ldrh	r3, [r7, #26]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d306      	bcc.n	8004d40 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	8b7b      	ldrh	r3, [r7, #26]
 8004d38:	1ad2      	subs	r2, r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	619a      	str	r2, [r3, #24]
 8004d3e:	e002      	b.n	8004d46 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	2200      	movs	r2, #0
 8004d44:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d123      	bne.n	8004d96 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d68:	83fb      	strh	r3, [r7, #30]
 8004d6a:	8bfb      	ldrh	r3, [r7, #30]
 8004d6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d70:	83fb      	strh	r3, [r7, #30]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	461a      	mov	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	441a      	add	r2, r3
 8004d80:	8bfb      	ldrh	r3, [r7, #30]
 8004d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d11f      	bne.n	8004de0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	461a      	mov	r2, r3
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dba:	83bb      	strh	r3, [r7, #28]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	441a      	add	r2, r3
 8004dca:	8bbb      	ldrh	r3, [r7, #28]
 8004dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004dd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ddc:	b29b      	uxth	r3, r3
 8004dde:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004de0:	8b7b      	ldrh	r3, [r7, #26]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d008      	beq.n	8004df8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	6959      	ldr	r1, [r3, #20]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	895a      	ldrh	r2, [r3, #10]
 8004df2:	8b7b      	ldrh	r3, [r7, #26]
 8004df4:	f006 fb4c 	bl	800b490 <USB_ReadPMA>
    }
  }

  return count;
 8004df8:	8b7b      	ldrh	r3, [r7, #26]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b0a4      	sub	sp, #144	; 0x90
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004e10:	88fb      	ldrh	r3, [r7, #6]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 81dd 	beq.w	80051d6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	461a      	mov	r2, r3
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	4413      	add	r3, r2
 8004e30:	3302      	adds	r3, #2
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e44:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	699a      	ldr	r2, [r3, #24]
 8004e4c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d907      	bls.n	8004e64 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	699a      	ldr	r2, [r3, #24]
 8004e58:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004e5c:	1ad2      	subs	r2, r2, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	619a      	str	r2, [r3, #24]
 8004e62:	e002      	b.n	8004e6a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f040 80b9 	bne.w	8004fe6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d126      	bne.n	8004eca <HAL_PCD_EP_DB_Transmit+0xc8>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	4413      	add	r3, r2
 8004e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	011a      	lsls	r2, r3, #4
 8004e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	881b      	ldrh	r3, [r3, #0]
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eae:	b29a      	uxth	r2, r3
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	801a      	strh	r2, [r3, #0]
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	801a      	strh	r2, [r3, #0]
 8004ec8:	e01a      	b.n	8004f00 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	785b      	ldrb	r3, [r3, #1]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d116      	bne.n	8004f00 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee6:	4413      	add	r3, r2
 8004ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	781b      	ldrb	r3, [r3, #0]
 8004eee:	011a      	lsls	r2, r3, #4
 8004ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ef8:	633b      	str	r3, [r7, #48]	; 0x30
 8004efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efc:	2200      	movs	r2, #0
 8004efe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	785b      	ldrb	r3, [r3, #1]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d126      	bne.n	8004f5c <HAL_PCD_EP_DB_Transmit+0x15a>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	461a      	mov	r2, r3
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	011a      	lsls	r2, r3, #4
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	801a      	strh	r2, [r3, #0]
 8004f5a:	e017      	b.n	8004f8c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d113      	bne.n	8004f8c <HAL_PCD_EP_DB_Transmit+0x18a>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	4413      	add	r3, r2
 8004f74:	627b      	str	r3, [r7, #36]	; 0x24
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	011a      	lsls	r2, r3, #4
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	4413      	add	r3, r2
 8004f80:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f84:	623b      	str	r3, [r7, #32]
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	4619      	mov	r1, r3
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f007 ff93 	bl	800cebe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f98:	88fb      	ldrh	r3, [r7, #6]
 8004f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 82fc 	beq.w	800559c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fbe:	82fb      	strh	r3, [r7, #22]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	441a      	add	r2, r3
 8004fce:	8afb      	ldrh	r3, [r7, #22]
 8004fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	8013      	strh	r3, [r2, #0]
 8004fe4:	e2da      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004fe6:	88fb      	ldrh	r3, [r7, #6]
 8004fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d021      	beq.n	8005034 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	4413      	add	r3, r2
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	b29b      	uxth	r3, r3
 8005002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800500a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	441a      	add	r2, r3
 800501c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005020:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005024:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005028:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800502c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005030:	b29b      	uxth	r3, r3
 8005032:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800503a:	2b01      	cmp	r3, #1
 800503c:	f040 82ae 	bne.w	800559c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	695a      	ldr	r2, [r3, #20]
 8005044:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005048:	441a      	add	r2, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	69da      	ldr	r2, [r3, #28]
 8005052:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005056:	441a      	add	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	6a1a      	ldr	r2, [r3, #32]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	429a      	cmp	r2, r3
 8005066:	d30b      	bcc.n	8005080 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	6a1a      	ldr	r2, [r3, #32]
 8005074:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005078:	1ad2      	subs	r2, r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	621a      	str	r2, [r3, #32]
 800507e:	e017      	b.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d108      	bne.n	800509a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005088:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800508c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005098:	e00a      	b.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d165      	bne.n	8005184 <HAL_PCD_EP_DB_Transmit+0x382>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	461a      	mov	r2, r3
 80050ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050cc:	4413      	add	r3, r2
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	011a      	lsls	r2, r3, #4
 80050d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d8:	4413      	add	r3, r2
 80050da:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050de:	63bb      	str	r3, [r7, #56]	; 0x38
 80050e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e2:	881b      	ldrh	r3, [r3, #0]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	801a      	strh	r2, [r3, #0]
 80050f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050f4:	2b3e      	cmp	r3, #62	; 0x3e
 80050f6:	d91d      	bls.n	8005134 <HAL_PCD_EP_DB_Transmit+0x332>
 80050f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8005100:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005104:	f003 031f 	and.w	r3, r3, #31
 8005108:	2b00      	cmp	r3, #0
 800510a:	d102      	bne.n	8005112 <HAL_PCD_EP_DB_Transmit+0x310>
 800510c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800510e:	3b01      	subs	r3, #1
 8005110:	64bb      	str	r3, [r7, #72]	; 0x48
 8005112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005114:	881b      	ldrh	r3, [r3, #0]
 8005116:	b29a      	uxth	r2, r3
 8005118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800511a:	b29b      	uxth	r3, r3
 800511c:	029b      	lsls	r3, r3, #10
 800511e:	b29b      	uxth	r3, r3
 8005120:	4313      	orrs	r3, r2
 8005122:	b29b      	uxth	r3, r3
 8005124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800512c:	b29a      	uxth	r2, r3
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	801a      	strh	r2, [r3, #0]
 8005132:	e044      	b.n	80051be <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005134:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10a      	bne.n	8005152 <HAL_PCD_EP_DB_Transmit+0x350>
 800513c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513e:	881b      	ldrh	r3, [r3, #0]
 8005140:	b29b      	uxth	r3, r3
 8005142:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005146:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514a:	b29a      	uxth	r2, r3
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	801a      	strh	r2, [r3, #0]
 8005150:	e035      	b.n	80051be <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005152:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	64bb      	str	r3, [r7, #72]	; 0x48
 800515a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_PCD_EP_DB_Transmit+0x36a>
 8005166:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005168:	3301      	adds	r3, #1
 800516a:	64bb      	str	r3, [r7, #72]	; 0x48
 800516c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516e:	881b      	ldrh	r3, [r3, #0]
 8005170:	b29a      	uxth	r2, r3
 8005172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005174:	b29b      	uxth	r3, r3
 8005176:	029b      	lsls	r3, r3, #10
 8005178:	b29b      	uxth	r3, r3
 800517a:	4313      	orrs	r3, r2
 800517c:	b29a      	uxth	r2, r3
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	e01c      	b.n	80051be <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d118      	bne.n	80051be <HAL_PCD_EP_DB_Transmit+0x3bc>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	647b      	str	r3, [r7, #68]	; 0x44
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519a:	b29b      	uxth	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a0:	4413      	add	r3, r2
 80051a2:	647b      	str	r3, [r7, #68]	; 0x44
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	011a      	lsls	r2, r3, #4
 80051aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ac:	4413      	add	r3, r2
 80051ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051b2:	643b      	str	r3, [r7, #64]	; 0x40
 80051b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051bc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	6959      	ldr	r1, [r3, #20]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	891a      	ldrh	r2, [r3, #8]
 80051ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f006 f918 	bl	800b404 <USB_WritePMA>
 80051d4:	e1e2      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051de:	b29b      	uxth	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	4413      	add	r3, r2
 80051ea:	3306      	adds	r3, #6
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051fe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800520a:	429a      	cmp	r2, r3
 800520c:	d307      	bcc.n	800521e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	619a      	str	r2, [r3, #24]
 800521c:	e002      	b.n	8005224 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2200      	movs	r2, #0
 8005222:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	f040 80c0 	bne.w	80053ae <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	785b      	ldrb	r3, [r3, #1]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d126      	bne.n	8005284 <HAL_PCD_EP_DB_Transmit+0x482>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005244:	b29b      	uxth	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800524a:	4413      	add	r3, r2
 800524c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	011a      	lsls	r2, r3, #4
 8005254:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005256:	4413      	add	r3, r2
 8005258:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800525c:	67bb      	str	r3, [r7, #120]	; 0x78
 800525e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	b29b      	uxth	r3, r3
 8005264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005268:	b29a      	uxth	r2, r3
 800526a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	b29b      	uxth	r3, r3
 8005274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800527c:	b29a      	uxth	r2, r3
 800527e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	e01a      	b.n	80052ba <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	785b      	ldrb	r3, [r3, #1]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d116      	bne.n	80052ba <HAL_PCD_EP_DB_Transmit+0x4b8>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	667b      	str	r3, [r7, #100]	; 0x64
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529a:	b29b      	uxth	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052a0:	4413      	add	r3, r2
 80052a2:	667b      	str	r3, [r7, #100]	; 0x64
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	011a      	lsls	r2, r3, #4
 80052aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052ac:	4413      	add	r3, r2
 80052ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052b2:	663b      	str	r3, [r7, #96]	; 0x60
 80052b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052b6:	2200      	movs	r2, #0
 80052b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	677b      	str	r3, [r7, #116]	; 0x74
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d12b      	bne.n	8005320 <HAL_PCD_EP_DB_Transmit+0x51e>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052dc:	4413      	add	r3, r2
 80052de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	011a      	lsls	r2, r3, #4
 80052e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052e8:	4413      	add	r3, r2
 80052ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052fe:	b29a      	uxth	r2, r3
 8005300:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005304:	801a      	strh	r2, [r3, #0]
 8005306:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005316:	b29a      	uxth	r2, r3
 8005318:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800531c:	801a      	strh	r2, [r3, #0]
 800531e:	e017      	b.n	8005350 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	785b      	ldrb	r3, [r3, #1]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d113      	bne.n	8005350 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005330:	b29b      	uxth	r3, r3
 8005332:	461a      	mov	r2, r3
 8005334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005336:	4413      	add	r3, r2
 8005338:	677b      	str	r3, [r7, #116]	; 0x74
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	011a      	lsls	r2, r3, #4
 8005340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005342:	4413      	add	r3, r2
 8005344:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005348:	673b      	str	r3, [r7, #112]	; 0x70
 800534a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800534c:	2200      	movs	r2, #0
 800534e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	4619      	mov	r1, r3
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f007 fdb1 	bl	800cebe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800535c:	88fb      	ldrh	r3, [r7, #6]
 800535e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005362:	2b00      	cmp	r3, #0
 8005364:	f040 811a 	bne.w	800559c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	b29b      	uxth	r3, r3
 800537a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	441a      	add	r2, r3
 8005394:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800539c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	8013      	strh	r3, [r2, #0]
 80053ac:	e0f6      	b.n	800559c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d121      	bne.n	80053fc <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	461a      	mov	r2, r3
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	441a      	add	r2, r3
 80053e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80053f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005402:	2b01      	cmp	r3, #1
 8005404:	f040 80ca 	bne.w	800559c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	695a      	ldr	r2, [r3, #20]
 800540c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005410:	441a      	add	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800541e:	441a      	add	r2, r3
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	6a1a      	ldr	r2, [r3, #32]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	429a      	cmp	r2, r3
 800542e:	d30b      	bcc.n	8005448 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	6a1a      	ldr	r2, [r3, #32]
 800543c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005440:	1ad2      	subs	r2, r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	621a      	str	r2, [r3, #32]
 8005446:	e017      	b.n	8005478 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	6a1b      	ldr	r3, [r3, #32]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d108      	bne.n	8005462 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005450:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005454:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005460:	e00a      	b.n	8005478 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2200      	movs	r2, #0
 800546e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	657b      	str	r3, [r7, #84]	; 0x54
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d165      	bne.n	8005552 <HAL_PCD_EP_DB_Transmit+0x750>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005494:	b29b      	uxth	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800549a:	4413      	add	r3, r2
 800549c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	011a      	lsls	r2, r3, #4
 80054a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a6:	4413      	add	r3, r2
 80054a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80054ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054bc:	801a      	strh	r2, [r3, #0]
 80054be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054c2:	2b3e      	cmp	r3, #62	; 0x3e
 80054c4:	d91d      	bls.n	8005502 <HAL_PCD_EP_DB_Transmit+0x700>
 80054c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054ca:	095b      	lsrs	r3, r3, #5
 80054cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80054ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054d2:	f003 031f 	and.w	r3, r3, #31
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <HAL_PCD_EP_DB_Transmit+0x6de>
 80054da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054dc:	3b01      	subs	r3, #1
 80054de:	66bb      	str	r3, [r7, #104]	; 0x68
 80054e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	029b      	lsls	r3, r3, #10
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	4313      	orrs	r3, r2
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054fa:	b29a      	uxth	r2, r3
 80054fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054fe:	801a      	strh	r2, [r3, #0]
 8005500:	e041      	b.n	8005586 <HAL_PCD_EP_DB_Transmit+0x784>
 8005502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10a      	bne.n	8005520 <HAL_PCD_EP_DB_Transmit+0x71e>
 800550a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	b29b      	uxth	r3, r3
 8005510:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005514:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005518:	b29a      	uxth	r2, r3
 800551a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	e032      	b.n	8005586 <HAL_PCD_EP_DB_Transmit+0x784>
 8005520:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005524:	085b      	lsrs	r3, r3, #1
 8005526:	66bb      	str	r3, [r7, #104]	; 0x68
 8005528:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_PCD_EP_DB_Transmit+0x738>
 8005534:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005536:	3301      	adds	r3, #1
 8005538:	66bb      	str	r3, [r7, #104]	; 0x68
 800553a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800553c:	881b      	ldrh	r3, [r3, #0]
 800553e:	b29a      	uxth	r2, r3
 8005540:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005542:	b29b      	uxth	r3, r3
 8005544:	029b      	lsls	r3, r3, #10
 8005546:	b29b      	uxth	r3, r3
 8005548:	4313      	orrs	r3, r2
 800554a:	b29a      	uxth	r2, r3
 800554c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800554e:	801a      	strh	r2, [r3, #0]
 8005550:	e019      	b.n	8005586 <HAL_PCD_EP_DB_Transmit+0x784>
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	785b      	ldrb	r3, [r3, #1]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d115      	bne.n	8005586 <HAL_PCD_EP_DB_Transmit+0x784>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005562:	b29b      	uxth	r3, r3
 8005564:	461a      	mov	r2, r3
 8005566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005568:	4413      	add	r3, r2
 800556a:	657b      	str	r3, [r7, #84]	; 0x54
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	011a      	lsls	r2, r3, #4
 8005572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005574:	4413      	add	r3, r2
 8005576:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800557a:	653b      	str	r3, [r7, #80]	; 0x50
 800557c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005580:	b29a      	uxth	r2, r3
 8005582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005584:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6818      	ldr	r0, [r3, #0]
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	6959      	ldr	r1, [r3, #20]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	895a      	ldrh	r2, [r3, #10]
 8005592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005596:	b29b      	uxth	r3, r3
 8005598:	f005 ff34 	bl	800b404 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055b6:	82bb      	strh	r3, [r7, #20]
 80055b8:	8abb      	ldrh	r3, [r7, #20]
 80055ba:	f083 0310 	eor.w	r3, r3, #16
 80055be:	82bb      	strh	r3, [r7, #20]
 80055c0:	8abb      	ldrh	r3, [r7, #20]
 80055c2:	f083 0320 	eor.w	r3, r3, #32
 80055c6:	82bb      	strh	r3, [r7, #20]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	461a      	mov	r2, r3
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	441a      	add	r2, r3
 80055d6:	8abb      	ldrh	r3, [r7, #20]
 80055d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3790      	adds	r7, #144	; 0x90
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}

080055f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b087      	sub	sp, #28
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	60f8      	str	r0, [r7, #12]
 80055fe:	607b      	str	r3, [r7, #4]
 8005600:	460b      	mov	r3, r1
 8005602:	817b      	strh	r3, [r7, #10]
 8005604:	4613      	mov	r3, r2
 8005606:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005608:	897b      	ldrh	r3, [r7, #10]
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	b29b      	uxth	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00b      	beq.n	800562c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005614:	897b      	ldrh	r3, [r7, #10]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	1c5a      	adds	r2, r3, #1
 800561c:	4613      	mov	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4413      	add	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e009      	b.n	8005640 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800562c:	897a      	ldrh	r2, [r7, #10]
 800562e:	4613      	mov	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005640:	893b      	ldrh	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	2200      	movs	r2, #0
 800564a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	b29a      	uxth	r2, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	80da      	strh	r2, [r3, #6]
 8005654:	e00b      	b.n	800566e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2201      	movs	r2, #1
 800565a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	b29a      	uxth	r2, r3
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	0c1b      	lsrs	r3, r3, #16
 8005668:	b29a      	uxth	r2, r3
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	371c      	adds	r7, #28
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8005682:	af00      	add	r7, sp, #0
 8005684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005688:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800568c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800568e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005692:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d102      	bne.n	80056a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	f001 b823 	b.w	80066e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80056a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f000 817d 	beq.w	80059b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80056b8:	4bbc      	ldr	r3, [pc, #752]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f003 030c 	and.w	r3, r3, #12
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d00c      	beq.n	80056de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056c4:	4bb9      	ldr	r3, [pc, #740]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 030c 	and.w	r3, r3, #12
 80056cc:	2b08      	cmp	r3, #8
 80056ce:	d15c      	bne.n	800578a <HAL_RCC_OscConfig+0x10e>
 80056d0:	4bb6      	ldr	r3, [pc, #728]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056dc:	d155      	bne.n	800578a <HAL_RCC_OscConfig+0x10e>
 80056de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056e2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80056ea:	fa93 f3a3 	rbit	r3, r3
 80056ee:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80056f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f6:	fab3 f383 	clz	r3, r3
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	f043 0301 	orr.w	r3, r3, #1
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b01      	cmp	r3, #1
 8005708:	d102      	bne.n	8005710 <HAL_RCC_OscConfig+0x94>
 800570a:	4ba8      	ldr	r3, [pc, #672]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	e015      	b.n	800573c <HAL_RCC_OscConfig+0xc0>
 8005710:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005714:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005718:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800571c:	fa93 f3a3 	rbit	r3, r3
 8005720:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8005724:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005728:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800572c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8005730:	fa93 f3a3 	rbit	r3, r3
 8005734:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8005738:	4b9c      	ldr	r3, [pc, #624]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005740:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8005744:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8005748:	fa92 f2a2 	rbit	r2, r2
 800574c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8005750:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8005754:	fab2 f282 	clz	r2, r2
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	f042 0220 	orr.w	r2, r2, #32
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	f002 021f 	and.w	r2, r2, #31
 8005764:	2101      	movs	r1, #1
 8005766:	fa01 f202 	lsl.w	r2, r1, r2
 800576a:	4013      	ands	r3, r2
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 811f 	beq.w	80059b0 <HAL_RCC_OscConfig+0x334>
 8005772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f040 8116 	bne.w	80059b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f000 bfaf 	b.w	80066e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800578a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800578e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800579a:	d106      	bne.n	80057aa <HAL_RCC_OscConfig+0x12e>
 800579c:	4b83      	ldr	r3, [pc, #524]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a82      	ldr	r2, [pc, #520]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80057a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a6:	6013      	str	r3, [r2, #0]
 80057a8:	e036      	b.n	8005818 <HAL_RCC_OscConfig+0x19c>
 80057aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057ae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10c      	bne.n	80057d4 <HAL_RCC_OscConfig+0x158>
 80057ba:	4b7c      	ldr	r3, [pc, #496]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a7b      	ldr	r2, [pc, #492]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80057c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c4:	6013      	str	r3, [r2, #0]
 80057c6:	4b79      	ldr	r3, [pc, #484]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a78      	ldr	r2, [pc, #480]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80057cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	e021      	b.n	8005818 <HAL_RCC_OscConfig+0x19c>
 80057d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80057d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057e4:	d10c      	bne.n	8005800 <HAL_RCC_OscConfig+0x184>
 80057e6:	4b71      	ldr	r3, [pc, #452]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a70      	ldr	r2, [pc, #448]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80057ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	4b6e      	ldr	r3, [pc, #440]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a6d      	ldr	r2, [pc, #436]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80057f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e00b      	b.n	8005818 <HAL_RCC_OscConfig+0x19c>
 8005800:	4b6a      	ldr	r3, [pc, #424]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a69      	ldr	r2, [pc, #420]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 8005806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800580a:	6013      	str	r3, [r2, #0]
 800580c:	4b67      	ldr	r3, [pc, #412]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a66      	ldr	r2, [pc, #408]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 8005812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005816:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005818:	4b64      	ldr	r3, [pc, #400]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	f023 020f 	bic.w	r2, r3, #15
 8005820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	495f      	ldr	r1, [pc, #380]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 800582e:	4313      	orrs	r3, r2
 8005830:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005836:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d059      	beq.n	80058f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005842:	f7fd f9cb 	bl	8002bdc <HAL_GetTick>
 8005846:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584a:	e00a      	b.n	8005862 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800584c:	f7fd f9c6 	bl	8002bdc <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b64      	cmp	r3, #100	; 0x64
 800585a:	d902      	bls.n	8005862 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	f000 bf43 	b.w	80066e8 <HAL_RCC_OscConfig+0x106c>
 8005862:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005866:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800586a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800586e:	fa93 f3a3 	rbit	r3, r3
 8005872:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8005876:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587a:	fab3 f383 	clz	r3, r3
 800587e:	b2db      	uxtb	r3, r3
 8005880:	095b      	lsrs	r3, r3, #5
 8005882:	b2db      	uxtb	r3, r3
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	b2db      	uxtb	r3, r3
 800588a:	2b01      	cmp	r3, #1
 800588c:	d102      	bne.n	8005894 <HAL_RCC_OscConfig+0x218>
 800588e:	4b47      	ldr	r3, [pc, #284]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	e015      	b.n	80058c0 <HAL_RCC_OscConfig+0x244>
 8005894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005898:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800589c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80058a0:	fa93 f3a3 	rbit	r3, r3
 80058a4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80058a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058ac:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80058b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80058b4:	fa93 f3a3 	rbit	r3, r3
 80058b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80058bc:	4b3b      	ldr	r3, [pc, #236]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058c4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80058c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80058cc:	fa92 f2a2 	rbit	r2, r2
 80058d0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80058d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80058d8:	fab2 f282 	clz	r2, r2
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	f042 0220 	orr.w	r2, r2, #32
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	f002 021f 	and.w	r2, r2, #31
 80058e8:	2101      	movs	r1, #1
 80058ea:	fa01 f202 	lsl.w	r2, r1, r2
 80058ee:	4013      	ands	r3, r2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d0ab      	beq.n	800584c <HAL_RCC_OscConfig+0x1d0>
 80058f4:	e05d      	b.n	80059b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f6:	f7fd f971 	bl	8002bdc <HAL_GetTick>
 80058fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058fe:	e00a      	b.n	8005916 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005900:	f7fd f96c 	bl	8002bdc <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b64      	cmp	r3, #100	; 0x64
 800590e:	d902      	bls.n	8005916 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	f000 bee9 	b.w	80066e8 <HAL_RCC_OscConfig+0x106c>
 8005916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800591a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8005922:	fa93 f3a3 	rbit	r3, r3
 8005926:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800592a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800592e:	fab3 f383 	clz	r3, r3
 8005932:	b2db      	uxtb	r3, r3
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	b2db      	uxtb	r3, r3
 8005938:	f043 0301 	orr.w	r3, r3, #1
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b01      	cmp	r3, #1
 8005940:	d102      	bne.n	8005948 <HAL_RCC_OscConfig+0x2cc>
 8005942:	4b1a      	ldr	r3, [pc, #104]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	e015      	b.n	8005974 <HAL_RCC_OscConfig+0x2f8>
 8005948:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800594c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005950:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8005954:	fa93 f3a3 	rbit	r3, r3
 8005958:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800595c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005960:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005964:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8005968:	fa93 f3a3 	rbit	r3, r3
 800596c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8005970:	4b0e      	ldr	r3, [pc, #56]	; (80059ac <HAL_RCC_OscConfig+0x330>)
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005978:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800597c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8005980:	fa92 f2a2 	rbit	r2, r2
 8005984:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8005988:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800598c:	fab2 f282 	clz	r2, r2
 8005990:	b2d2      	uxtb	r2, r2
 8005992:	f042 0220 	orr.w	r2, r2, #32
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	f002 021f 	and.w	r2, r2, #31
 800599c:	2101      	movs	r1, #1
 800599e:	fa01 f202 	lsl.w	r2, r1, r2
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1ab      	bne.n	8005900 <HAL_RCC_OscConfig+0x284>
 80059a8:	e003      	b.n	80059b2 <HAL_RCC_OscConfig+0x336>
 80059aa:	bf00      	nop
 80059ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80059b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 817d 	beq.w	8005cc2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80059c8:	4ba6      	ldr	r3, [pc, #664]	; (8005c64 <HAL_RCC_OscConfig+0x5e8>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f003 030c 	and.w	r3, r3, #12
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00b      	beq.n	80059ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80059d4:	4ba3      	ldr	r3, [pc, #652]	; (8005c64 <HAL_RCC_OscConfig+0x5e8>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f003 030c 	and.w	r3, r3, #12
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d172      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x44a>
 80059e0:	4ba0      	ldr	r3, [pc, #640]	; (8005c64 <HAL_RCC_OscConfig+0x5e8>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d16c      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x44a>
 80059ec:	2302      	movs	r3, #2
 80059ee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80059f6:	fa93 f3a3 	rbit	r3, r3
 80059fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80059fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a02:	fab3 f383 	clz	r3, r3
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	f043 0301 	orr.w	r3, r3, #1
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d102      	bne.n	8005a1c <HAL_RCC_OscConfig+0x3a0>
 8005a16:	4b93      	ldr	r3, [pc, #588]	; (8005c64 <HAL_RCC_OscConfig+0x5e8>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	e013      	b.n	8005a44 <HAL_RCC_OscConfig+0x3c8>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a22:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8005a26:	fa93 f3a3 	rbit	r3, r3
 8005a2a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005a2e:	2302      	movs	r3, #2
 8005a30:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005a34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005a38:	fa93 f3a3 	rbit	r3, r3
 8005a3c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8005a40:	4b88      	ldr	r3, [pc, #544]	; (8005c64 <HAL_RCC_OscConfig+0x5e8>)
 8005a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a44:	2202      	movs	r2, #2
 8005a46:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8005a4a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8005a4e:	fa92 f2a2 	rbit	r2, r2
 8005a52:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8005a56:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8005a5a:	fab2 f282 	clz	r2, r2
 8005a5e:	b2d2      	uxtb	r2, r2
 8005a60:	f042 0220 	orr.w	r2, r2, #32
 8005a64:	b2d2      	uxtb	r2, r2
 8005a66:	f002 021f 	and.w	r2, r2, #31
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <HAL_RCC_OscConfig+0x410>
 8005a76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d002      	beq.n	8005a8c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	f000 be2e 	b.w	80066e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a8c:	4b75      	ldr	r3, [pc, #468]	; (8005c64 <HAL_RCC_OscConfig+0x5e8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005a98:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	21f8      	movs	r1, #248	; 0xf8
 8005aa2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005aa6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8005aaa:	fa91 f1a1 	rbit	r1, r1
 8005aae:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8005ab2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8005ab6:	fab1 f181 	clz	r1, r1
 8005aba:	b2c9      	uxtb	r1, r1
 8005abc:	408b      	lsls	r3, r1
 8005abe:	4969      	ldr	r1, [pc, #420]	; (8005c64 <HAL_RCC_OscConfig+0x5e8>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ac4:	e0fd      	b.n	8005cc2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005aca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 8088 	beq.w	8005be8 <HAL_RCC_OscConfig+0x56c>
 8005ad8:	2301      	movs	r3, #1
 8005ada:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ade:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8005ae2:	fa93 f3a3 	rbit	r3, r3
 8005ae6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8005aea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aee:	fab3 f383 	clz	r3, r3
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	461a      	mov	r2, r3
 8005b00:	2301      	movs	r3, #1
 8005b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b04:	f7fd f86a 	bl	8002bdc <HAL_GetTick>
 8005b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b0c:	e00a      	b.n	8005b24 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b0e:	f7fd f865 	bl	8002bdc <HAL_GetTick>
 8005b12:	4602      	mov	r2, r0
 8005b14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d902      	bls.n	8005b24 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	f000 bde2 	b.w	80066e8 <HAL_RCC_OscConfig+0x106c>
 8005b24:	2302      	movs	r3, #2
 8005b26:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b2a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8005b2e:	fa93 f3a3 	rbit	r3, r3
 8005b32:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8005b36:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b3a:	fab3 f383 	clz	r3, r3
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f043 0301 	orr.w	r3, r3, #1
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d102      	bne.n	8005b54 <HAL_RCC_OscConfig+0x4d8>
 8005b4e:	4b45      	ldr	r3, [pc, #276]	; (8005c64 <HAL_RCC_OscConfig+0x5e8>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	e013      	b.n	8005b7c <HAL_RCC_OscConfig+0x500>
 8005b54:	2302      	movs	r3, #2
 8005b56:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b5a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8005b5e:	fa93 f3a3 	rbit	r3, r3
 8005b62:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005b66:	2302      	movs	r3, #2
 8005b68:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005b6c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8005b70:	fa93 f3a3 	rbit	r3, r3
 8005b74:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8005b78:	4b3a      	ldr	r3, [pc, #232]	; (8005c64 <HAL_RCC_OscConfig+0x5e8>)
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8005b82:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005b86:	fa92 f2a2 	rbit	r2, r2
 8005b8a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8005b8e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8005b92:	fab2 f282 	clz	r2, r2
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	f042 0220 	orr.w	r2, r2, #32
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	f002 021f 	and.w	r2, r2, #31
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d0af      	beq.n	8005b0e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bae:	4b2d      	ldr	r3, [pc, #180]	; (8005c64 <HAL_RCC_OscConfig+0x5e8>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	21f8      	movs	r1, #248	; 0xf8
 8005bc4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005bcc:	fa91 f1a1 	rbit	r1, r1
 8005bd0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8005bd4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8005bd8:	fab1 f181 	clz	r1, r1
 8005bdc:	b2c9      	uxtb	r1, r1
 8005bde:	408b      	lsls	r3, r1
 8005be0:	4920      	ldr	r1, [pc, #128]	; (8005c64 <HAL_RCC_OscConfig+0x5e8>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	600b      	str	r3, [r1, #0]
 8005be6:	e06c      	b.n	8005cc2 <HAL_RCC_OscConfig+0x646>
 8005be8:	2301      	movs	r3, #1
 8005bea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005bf2:	fa93 f3a3 	rbit	r3, r3
 8005bf6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8005bfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bfe:	fab3 f383 	clz	r3, r3
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005c08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	461a      	mov	r2, r3
 8005c10:	2300      	movs	r3, #0
 8005c12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c14:	f7fc ffe2 	bl	8002bdc <HAL_GetTick>
 8005c18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c1c:	e00a      	b.n	8005c34 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c1e:	f7fc ffdd 	bl	8002bdc <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d902      	bls.n	8005c34 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	f000 bd5a 	b.w	80066e8 <HAL_RCC_OscConfig+0x106c>
 8005c34:	2302      	movs	r3, #2
 8005c36:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c3a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005c3e:	fa93 f3a3 	rbit	r3, r3
 8005c42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8005c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c4a:	fab3 f383 	clz	r3, r3
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d104      	bne.n	8005c68 <HAL_RCC_OscConfig+0x5ec>
 8005c5e:	4b01      	ldr	r3, [pc, #4]	; (8005c64 <HAL_RCC_OscConfig+0x5e8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	e015      	b.n	8005c90 <HAL_RCC_OscConfig+0x614>
 8005c64:	40021000 	.word	0x40021000
 8005c68:	2302      	movs	r3, #2
 8005c6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c72:	fa93 f3a3 	rbit	r3, r3
 8005c76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005c80:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005c84:	fa93 f3a3 	rbit	r3, r3
 8005c88:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005c8c:	4bc8      	ldr	r3, [pc, #800]	; (8005fb0 <HAL_RCC_OscConfig+0x934>)
 8005c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c90:	2202      	movs	r2, #2
 8005c92:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8005c96:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005c9a:	fa92 f2a2 	rbit	r2, r2
 8005c9e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8005ca2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005ca6:	fab2 f282 	clz	r2, r2
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	f042 0220 	orr.w	r2, r2, #32
 8005cb0:	b2d2      	uxtb	r2, r2
 8005cb2:	f002 021f 	and.w	r2, r2, #31
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1ad      	bne.n	8005c1e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8110 	beq.w	8005ef8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005cdc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d079      	beq.n	8005ddc <HAL_RCC_OscConfig+0x760>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cf2:	fa93 f3a3 	rbit	r3, r3
 8005cf6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8005cfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cfe:	fab3 f383 	clz	r3, r3
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	4bab      	ldr	r3, [pc, #684]	; (8005fb4 <HAL_RCC_OscConfig+0x938>)
 8005d08:	4413      	add	r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2301      	movs	r3, #1
 8005d10:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d12:	f7fc ff63 	bl	8002bdc <HAL_GetTick>
 8005d16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d1a:	e00a      	b.n	8005d32 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d1c:	f7fc ff5e 	bl	8002bdc <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005d26:	1ad3      	subs	r3, r2, r3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d902      	bls.n	8005d32 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	f000 bcdb 	b.w	80066e8 <HAL_RCC_OscConfig+0x106c>
 8005d32:	2302      	movs	r3, #2
 8005d34:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d3c:	fa93 f3a3 	rbit	r3, r3
 8005d40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d48:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005d4c:	2202      	movs	r2, #2
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d54:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	fa93 f2a3 	rbit	r2, r3
 8005d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d70:	2202      	movs	r2, #2
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	fa93 f2a3 	rbit	r2, r3
 8005d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d86:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005d8a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d8c:	4b88      	ldr	r3, [pc, #544]	; (8005fb0 <HAL_RCC_OscConfig+0x934>)
 8005d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005d94:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005d98:	2102      	movs	r1, #2
 8005d9a:	6019      	str	r1, [r3, #0]
 8005d9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005da0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	fa93 f1a3 	rbit	r1, r3
 8005daa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005db2:	6019      	str	r1, [r3, #0]
  return result;
 8005db4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005db8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	fab3 f383 	clz	r3, r3
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	f003 031f 	and.w	r3, r3, #31
 8005dce:	2101      	movs	r1, #1
 8005dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0a0      	beq.n	8005d1c <HAL_RCC_OscConfig+0x6a0>
 8005dda:	e08d      	b.n	8005ef8 <HAL_RCC_OscConfig+0x87c>
 8005ddc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005de0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005de4:	2201      	movs	r2, #1
 8005de6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	fa93 f2a3 	rbit	r2, r3
 8005df6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005dfa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005dfe:	601a      	str	r2, [r3, #0]
  return result;
 8005e00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e04:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005e08:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e0a:	fab3 f383 	clz	r3, r3
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	4b68      	ldr	r3, [pc, #416]	; (8005fb4 <HAL_RCC_OscConfig+0x938>)
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	461a      	mov	r2, r3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e1e:	f7fc fedd 	bl	8002bdc <HAL_GetTick>
 8005e22:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e26:	e00a      	b.n	8005e3e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e28:	f7fc fed8 	bl	8002bdc <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d902      	bls.n	8005e3e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	f000 bc55 	b.w	80066e8 <HAL_RCC_OscConfig+0x106c>
 8005e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e42:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005e46:	2202      	movs	r2, #2
 8005e48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e4e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	fa93 f2a3 	rbit	r2, r3
 8005e58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e5c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005e60:	601a      	str	r2, [r3, #0]
 8005e62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e66:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e72:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	fa93 f2a3 	rbit	r2, r3
 8005e7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e8e:	2202      	movs	r2, #2
 8005e90:	601a      	str	r2, [r3, #0]
 8005e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005e96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	fa93 f2a3 	rbit	r2, r3
 8005ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ea4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8005ea8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eaa:	4b41      	ldr	r3, [pc, #260]	; (8005fb0 <HAL_RCC_OscConfig+0x934>)
 8005eac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005eb2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005eb6:	2102      	movs	r1, #2
 8005eb8:	6019      	str	r1, [r3, #0]
 8005eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ebe:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	fa93 f1a3 	rbit	r1, r3
 8005ec8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ecc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005ed0:	6019      	str	r1, [r3, #0]
  return result;
 8005ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005ed6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	fab3 f383 	clz	r3, r3
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	2101      	movs	r1, #1
 8005eee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d197      	bne.n	8005e28 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005efc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	f000 81a1 	beq.w	8006250 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f14:	4b26      	ldr	r3, [pc, #152]	; (8005fb0 <HAL_RCC_OscConfig+0x934>)
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d116      	bne.n	8005f4e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f20:	4b23      	ldr	r3, [pc, #140]	; (8005fb0 <HAL_RCC_OscConfig+0x934>)
 8005f22:	69db      	ldr	r3, [r3, #28]
 8005f24:	4a22      	ldr	r2, [pc, #136]	; (8005fb0 <HAL_RCC_OscConfig+0x934>)
 8005f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f2a:	61d3      	str	r3, [r2, #28]
 8005f2c:	4b20      	ldr	r3, [pc, #128]	; (8005fb0 <HAL_RCC_OscConfig+0x934>)
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f38:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f42:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8005f46:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4e:	4b1a      	ldr	r3, [pc, #104]	; (8005fb8 <HAL_RCC_OscConfig+0x93c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d11a      	bne.n	8005f90 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f5a:	4b17      	ldr	r3, [pc, #92]	; (8005fb8 <HAL_RCC_OscConfig+0x93c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a16      	ldr	r2, [pc, #88]	; (8005fb8 <HAL_RCC_OscConfig+0x93c>)
 8005f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f66:	f7fc fe39 	bl	8002bdc <HAL_GetTick>
 8005f6a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6e:	e009      	b.n	8005f84 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f70:	f7fc fe34 	bl	8002bdc <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b64      	cmp	r3, #100	; 0x64
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e3b1      	b.n	80066e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <HAL_RCC_OscConfig+0x93c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0ef      	beq.n	8005f70 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005f94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d10d      	bne.n	8005fbc <HAL_RCC_OscConfig+0x940>
 8005fa0:	4b03      	ldr	r3, [pc, #12]	; (8005fb0 <HAL_RCC_OscConfig+0x934>)
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	4a02      	ldr	r2, [pc, #8]	; (8005fb0 <HAL_RCC_OscConfig+0x934>)
 8005fa6:	f043 0301 	orr.w	r3, r3, #1
 8005faa:	6213      	str	r3, [r2, #32]
 8005fac:	e03c      	b.n	8006028 <HAL_RCC_OscConfig+0x9ac>
 8005fae:	bf00      	nop
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	10908120 	.word	0x10908120
 8005fb8:	40007000 	.word	0x40007000
 8005fbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fc0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10c      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x96a>
 8005fcc:	4bc1      	ldr	r3, [pc, #772]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	4ac0      	ldr	r2, [pc, #768]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8005fd2:	f023 0301 	bic.w	r3, r3, #1
 8005fd6:	6213      	str	r3, [r2, #32]
 8005fd8:	4bbe      	ldr	r3, [pc, #760]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	4abd      	ldr	r2, [pc, #756]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8005fde:	f023 0304 	bic.w	r3, r3, #4
 8005fe2:	6213      	str	r3, [r2, #32]
 8005fe4:	e020      	b.n	8006028 <HAL_RCC_OscConfig+0x9ac>
 8005fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8005fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	d10c      	bne.n	8006010 <HAL_RCC_OscConfig+0x994>
 8005ff6:	4bb7      	ldr	r3, [pc, #732]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	4ab6      	ldr	r2, [pc, #728]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8005ffc:	f043 0304 	orr.w	r3, r3, #4
 8006000:	6213      	str	r3, [r2, #32]
 8006002:	4bb4      	ldr	r3, [pc, #720]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	4ab3      	ldr	r2, [pc, #716]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8006008:	f043 0301 	orr.w	r3, r3, #1
 800600c:	6213      	str	r3, [r2, #32]
 800600e:	e00b      	b.n	8006028 <HAL_RCC_OscConfig+0x9ac>
 8006010:	4bb0      	ldr	r3, [pc, #704]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	4aaf      	ldr	r2, [pc, #700]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8006016:	f023 0301 	bic.w	r3, r3, #1
 800601a:	6213      	str	r3, [r2, #32]
 800601c:	4bad      	ldr	r3, [pc, #692]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	4aac      	ldr	r2, [pc, #688]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8006022:	f023 0304 	bic.w	r3, r3, #4
 8006026:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800602c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8081 	beq.w	800613c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800603a:	f7fc fdcf 	bl	8002bdc <HAL_GetTick>
 800603e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006042:	e00b      	b.n	800605c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006044:	f7fc fdca 	bl	8002bdc <HAL_GetTick>
 8006048:	4602      	mov	r2, r0
 800604a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	f241 3288 	movw	r2, #5000	; 0x1388
 8006054:	4293      	cmp	r3, r2
 8006056:	d901      	bls.n	800605c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e345      	b.n	80066e8 <HAL_RCC_OscConfig+0x106c>
 800605c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006060:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006064:	2202      	movs	r2, #2
 8006066:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800606c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	fa93 f2a3 	rbit	r2, r3
 8006076:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800607a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800607e:	601a      	str	r2, [r3, #0]
 8006080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006084:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006088:	2202      	movs	r2, #2
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006090:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	fa93 f2a3 	rbit	r2, r3
 800609a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800609e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80060a2:	601a      	str	r2, [r3, #0]
  return result;
 80060a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060a8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80060ac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060ae:	fab3 f383 	clz	r3, r3
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	095b      	lsrs	r3, r3, #5
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	f043 0302 	orr.w	r3, r3, #2
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d102      	bne.n	80060c8 <HAL_RCC_OscConfig+0xa4c>
 80060c2:	4b84      	ldr	r3, [pc, #528]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	e013      	b.n	80060f0 <HAL_RCC_OscConfig+0xa74>
 80060c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80060d0:	2202      	movs	r2, #2
 80060d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060d8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	fa93 f2a3 	rbit	r2, r3
 80060e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80060e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	4b79      	ldr	r3, [pc, #484]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80060f4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80060f8:	2102      	movs	r1, #2
 80060fa:	6011      	str	r1, [r2, #0]
 80060fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006100:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8006104:	6812      	ldr	r2, [r2, #0]
 8006106:	fa92 f1a2 	rbit	r1, r2
 800610a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800610e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8006112:	6011      	str	r1, [r2, #0]
  return result;
 8006114:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006118:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800611c:	6812      	ldr	r2, [r2, #0]
 800611e:	fab2 f282 	clz	r2, r2
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	f002 021f 	and.w	r2, r2, #31
 800612e:	2101      	movs	r1, #1
 8006130:	fa01 f202 	lsl.w	r2, r1, r2
 8006134:	4013      	ands	r3, r2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d084      	beq.n	8006044 <HAL_RCC_OscConfig+0x9c8>
 800613a:	e07f      	b.n	800623c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800613c:	f7fc fd4e 	bl	8002bdc <HAL_GetTick>
 8006140:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006144:	e00b      	b.n	800615e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006146:	f7fc fd49 	bl	8002bdc <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	f241 3288 	movw	r2, #5000	; 0x1388
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e2c4      	b.n	80066e8 <HAL_RCC_OscConfig+0x106c>
 800615e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006162:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006166:	2202      	movs	r2, #2
 8006168:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800616e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	fa93 f2a3 	rbit	r2, r3
 8006178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800617c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006186:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800618a:	2202      	movs	r2, #2
 800618c:	601a      	str	r2, [r3, #0]
 800618e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006192:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	fa93 f2a3 	rbit	r2, r3
 800619c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80061a4:	601a      	str	r2, [r3, #0]
  return result;
 80061a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061aa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80061ae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061b0:	fab3 f383 	clz	r3, r3
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	f043 0302 	orr.w	r3, r3, #2
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d102      	bne.n	80061ca <HAL_RCC_OscConfig+0xb4e>
 80061c4:	4b43      	ldr	r3, [pc, #268]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	e013      	b.n	80061f2 <HAL_RCC_OscConfig+0xb76>
 80061ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80061d2:	2202      	movs	r2, #2
 80061d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061da:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	fa93 f2a3 	rbit	r2, r3
 80061e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80061e8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	4b39      	ldr	r3, [pc, #228]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80061f6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80061fa:	2102      	movs	r1, #2
 80061fc:	6011      	str	r1, [r2, #0]
 80061fe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006202:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	fa92 f1a2 	rbit	r1, r2
 800620c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006210:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8006214:	6011      	str	r1, [r2, #0]
  return result;
 8006216:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800621a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800621e:	6812      	ldr	r2, [r2, #0]
 8006220:	fab2 f282 	clz	r2, r2
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	f002 021f 	and.w	r2, r2, #31
 8006230:	2101      	movs	r1, #1
 8006232:	fa01 f202 	lsl.w	r2, r1, r2
 8006236:	4013      	ands	r3, r2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d184      	bne.n	8006146 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800623c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8006240:	2b01      	cmp	r3, #1
 8006242:	d105      	bne.n	8006250 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006244:	4b23      	ldr	r3, [pc, #140]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	4a22      	ldr	r2, [pc, #136]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 800624a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800624e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006254:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 8242 	beq.w	80066e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006262:	4b1c      	ldr	r3, [pc, #112]	; (80062d4 <HAL_RCC_OscConfig+0xc58>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 030c 	and.w	r3, r3, #12
 800626a:	2b08      	cmp	r3, #8
 800626c:	f000 8213 	beq.w	8006696 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006274:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	2b02      	cmp	r3, #2
 800627e:	f040 8162 	bne.w	8006546 <HAL_RCC_OscConfig+0xeca>
 8006282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006286:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800628a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800628e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006294:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	fa93 f2a3 	rbit	r2, r3
 800629e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062a2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80062a6:	601a      	str	r2, [r3, #0]
  return result;
 80062a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062ac:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80062b0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062b2:	fab3 f383 	clz	r3, r3
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	461a      	mov	r2, r3
 80062c4:	2300      	movs	r3, #0
 80062c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c8:	f7fc fc88 	bl	8002bdc <HAL_GetTick>
 80062cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062d0:	e00c      	b.n	80062ec <HAL_RCC_OscConfig+0xc70>
 80062d2:	bf00      	nop
 80062d4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062d8:	f7fc fc80 	bl	8002bdc <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e1fd      	b.n	80066e8 <HAL_RCC_OscConfig+0x106c>
 80062ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062f0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80062f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80062fe:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	fa93 f2a3 	rbit	r2, r3
 8006308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800630c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8006310:	601a      	str	r2, [r3, #0]
  return result;
 8006312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006316:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800631a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800631c:	fab3 f383 	clz	r3, r3
 8006320:	b2db      	uxtb	r3, r3
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	b2db      	uxtb	r3, r3
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b01      	cmp	r3, #1
 800632e:	d102      	bne.n	8006336 <HAL_RCC_OscConfig+0xcba>
 8006330:	4bb0      	ldr	r3, [pc, #704]	; (80065f4 <HAL_RCC_OscConfig+0xf78>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	e027      	b.n	8006386 <HAL_RCC_OscConfig+0xd0a>
 8006336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800633a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800633e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006348:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	fa93 f2a3 	rbit	r2, r3
 8006352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006356:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800635a:	601a      	str	r2, [r3, #0]
 800635c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006360:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006364:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800636e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	fa93 f2a3 	rbit	r2, r3
 8006378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800637c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	4b9c      	ldr	r3, [pc, #624]	; (80065f4 <HAL_RCC_OscConfig+0xf78>)
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800638a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800638e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006392:	6011      	str	r1, [r2, #0]
 8006394:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006398:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800639c:	6812      	ldr	r2, [r2, #0]
 800639e:	fa92 f1a2 	rbit	r1, r2
 80063a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063a6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80063aa:	6011      	str	r1, [r2, #0]
  return result;
 80063ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80063b0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80063b4:	6812      	ldr	r2, [r2, #0]
 80063b6:	fab2 f282 	clz	r2, r2
 80063ba:	b2d2      	uxtb	r2, r2
 80063bc:	f042 0220 	orr.w	r2, r2, #32
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	f002 021f 	and.w	r2, r2, #31
 80063c6:	2101      	movs	r1, #1
 80063c8:	fa01 f202 	lsl.w	r2, r1, r2
 80063cc:	4013      	ands	r3, r2
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d182      	bne.n	80062d8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063d2:	4b88      	ldr	r3, [pc, #544]	; (80065f4 <HAL_RCC_OscConfig+0xf78>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80063da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80063e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	430b      	orrs	r3, r1
 80063f4:	497f      	ldr	r1, [pc, #508]	; (80065f4 <HAL_RCC_OscConfig+0xf78>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	604b      	str	r3, [r1, #4]
 80063fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80063fe:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006402:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006406:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800640c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	fa93 f2a3 	rbit	r2, r3
 8006416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800641a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800641e:	601a      	str	r2, [r3, #0]
  return result;
 8006420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006424:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8006428:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800642a:	fab3 f383 	clz	r3, r3
 800642e:	b2db      	uxtb	r3, r3
 8006430:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006434:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	461a      	mov	r2, r3
 800643c:	2301      	movs	r3, #1
 800643e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006440:	f7fc fbcc 	bl	8002bdc <HAL_GetTick>
 8006444:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006448:	e009      	b.n	800645e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800644a:	f7fc fbc7 	bl	8002bdc <HAL_GetTick>
 800644e:	4602      	mov	r2, r0
 8006450:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e144      	b.n	80066e8 <HAL_RCC_OscConfig+0x106c>
 800645e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006462:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006466:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800646a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006470:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	fa93 f2a3 	rbit	r2, r3
 800647a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800647e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8006482:	601a      	str	r2, [r3, #0]
  return result;
 8006484:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006488:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800648c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800648e:	fab3 f383 	clz	r3, r3
 8006492:	b2db      	uxtb	r3, r3
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	b2db      	uxtb	r3, r3
 8006498:	f043 0301 	orr.w	r3, r3, #1
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d102      	bne.n	80064a8 <HAL_RCC_OscConfig+0xe2c>
 80064a2:	4b54      	ldr	r3, [pc, #336]	; (80065f4 <HAL_RCC_OscConfig+0xf78>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	e027      	b.n	80064f8 <HAL_RCC_OscConfig+0xe7c>
 80064a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ac:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80064b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ba:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	fa93 f2a3 	rbit	r2, r3
 80064c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064c8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064d2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80064d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064e0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	fa93 f2a3 	rbit	r2, r3
 80064ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80064ee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	4b3f      	ldr	r3, [pc, #252]	; (80065f4 <HAL_RCC_OscConfig+0xf78>)
 80064f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80064fc:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8006500:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006504:	6011      	str	r1, [r2, #0]
 8006506:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800650a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800650e:	6812      	ldr	r2, [r2, #0]
 8006510:	fa92 f1a2 	rbit	r1, r2
 8006514:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006518:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800651c:	6011      	str	r1, [r2, #0]
  return result;
 800651e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006522:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	fab2 f282 	clz	r2, r2
 800652c:	b2d2      	uxtb	r2, r2
 800652e:	f042 0220 	orr.w	r2, r2, #32
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	f002 021f 	and.w	r2, r2, #31
 8006538:	2101      	movs	r1, #1
 800653a:	fa01 f202 	lsl.w	r2, r1, r2
 800653e:	4013      	ands	r3, r2
 8006540:	2b00      	cmp	r3, #0
 8006542:	d082      	beq.n	800644a <HAL_RCC_OscConfig+0xdce>
 8006544:	e0cf      	b.n	80066e6 <HAL_RCC_OscConfig+0x106a>
 8006546:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800654a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800654e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006552:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006558:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	fa93 f2a3 	rbit	r2, r3
 8006562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006566:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800656a:	601a      	str	r2, [r3, #0]
  return result;
 800656c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006570:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8006574:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006576:	fab3 f383 	clz	r3, r3
 800657a:	b2db      	uxtb	r3, r3
 800657c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006580:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	461a      	mov	r2, r3
 8006588:	2300      	movs	r3, #0
 800658a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800658c:	f7fc fb26 	bl	8002bdc <HAL_GetTick>
 8006590:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006594:	e009      	b.n	80065aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006596:	f7fc fb21 	bl	8002bdc <HAL_GetTick>
 800659a:	4602      	mov	r2, r0
 800659c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d901      	bls.n	80065aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e09e      	b.n	80066e8 <HAL_RCC_OscConfig+0x106c>
 80065aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065ae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80065b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80065b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065bc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	fa93 f2a3 	rbit	r2, r3
 80065c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065ca:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80065ce:	601a      	str	r2, [r3, #0]
  return result;
 80065d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065d4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80065d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80065da:	fab3 f383 	clz	r3, r3
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	095b      	lsrs	r3, r3, #5
 80065e2:	b2db      	uxtb	r3, r3
 80065e4:	f043 0301 	orr.w	r3, r3, #1
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d104      	bne.n	80065f8 <HAL_RCC_OscConfig+0xf7c>
 80065ee:	4b01      	ldr	r3, [pc, #4]	; (80065f4 <HAL_RCC_OscConfig+0xf78>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	e029      	b.n	8006648 <HAL_RCC_OscConfig+0xfcc>
 80065f4:	40021000 	.word	0x40021000
 80065f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80065fc:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8006600:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006606:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800660a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	fa93 f2a3 	rbit	r2, r3
 8006614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006618:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006622:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006626:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8006630:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	fa93 f2a3 	rbit	r2, r3
 800663a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800663e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	4b2b      	ldr	r3, [pc, #172]	; (80066f4 <HAL_RCC_OscConfig+0x1078>)
 8006646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006648:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800664c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8006650:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006654:	6011      	str	r1, [r2, #0]
 8006656:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800665a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800665e:	6812      	ldr	r2, [r2, #0]
 8006660:	fa92 f1a2 	rbit	r1, r2
 8006664:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006668:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800666c:	6011      	str	r1, [r2, #0]
  return result;
 800666e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8006672:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8006676:	6812      	ldr	r2, [r2, #0]
 8006678:	fab2 f282 	clz	r2, r2
 800667c:	b2d2      	uxtb	r2, r2
 800667e:	f042 0220 	orr.w	r2, r2, #32
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	f002 021f 	and.w	r2, r2, #31
 8006688:	2101      	movs	r1, #1
 800668a:	fa01 f202 	lsl.w	r2, r1, r2
 800668e:	4013      	ands	r3, r2
 8006690:	2b00      	cmp	r3, #0
 8006692:	d180      	bne.n	8006596 <HAL_RCC_OscConfig+0xf1a>
 8006694:	e027      	b.n	80066e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800669a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d101      	bne.n	80066aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e01e      	b.n	80066e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80066aa:	4b12      	ldr	r3, [pc, #72]	; (80066f4 <HAL_RCC_OscConfig+0x1078>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80066b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80066b6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80066ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d10b      	bne.n	80066e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80066ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80066ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80066d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80066d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80066de:	429a      	cmp	r2, r3
 80066e0:	d001      	beq.n	80066e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40021000 	.word	0x40021000

080066f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b09e      	sub	sp, #120	; 0x78
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006702:	2300      	movs	r3, #0
 8006704:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e162      	b.n	80069d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006710:	4b90      	ldr	r3, [pc, #576]	; (8006954 <HAL_RCC_ClockConfig+0x25c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d910      	bls.n	8006740 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800671e:	4b8d      	ldr	r3, [pc, #564]	; (8006954 <HAL_RCC_ClockConfig+0x25c>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f023 0207 	bic.w	r2, r3, #7
 8006726:	498b      	ldr	r1, [pc, #556]	; (8006954 <HAL_RCC_ClockConfig+0x25c>)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	4313      	orrs	r3, r2
 800672c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800672e:	4b89      	ldr	r3, [pc, #548]	; (8006954 <HAL_RCC_ClockConfig+0x25c>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0307 	and.w	r3, r3, #7
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	429a      	cmp	r2, r3
 800673a:	d001      	beq.n	8006740 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e14a      	b.n	80069d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d008      	beq.n	800675e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800674c:	4b82      	ldr	r3, [pc, #520]	; (8006958 <HAL_RCC_ClockConfig+0x260>)
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	497f      	ldr	r1, [pc, #508]	; (8006958 <HAL_RCC_ClockConfig+0x260>)
 800675a:	4313      	orrs	r3, r2
 800675c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80dc 	beq.w	8006924 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d13c      	bne.n	80067ee <HAL_RCC_ClockConfig+0xf6>
 8006774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006778:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800677a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800677c:	fa93 f3a3 	rbit	r3, r3
 8006780:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006784:	fab3 f383 	clz	r3, r3
 8006788:	b2db      	uxtb	r3, r3
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	b2db      	uxtb	r3, r3
 800678e:	f043 0301 	orr.w	r3, r3, #1
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b01      	cmp	r3, #1
 8006796:	d102      	bne.n	800679e <HAL_RCC_ClockConfig+0xa6>
 8006798:	4b6f      	ldr	r3, [pc, #444]	; (8006958 <HAL_RCC_ClockConfig+0x260>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	e00f      	b.n	80067be <HAL_RCC_ClockConfig+0xc6>
 800679e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067a2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067a6:	fa93 f3a3 	rbit	r3, r3
 80067aa:	667b      	str	r3, [r7, #100]	; 0x64
 80067ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067b0:	663b      	str	r3, [r7, #96]	; 0x60
 80067b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067b4:	fa93 f3a3 	rbit	r3, r3
 80067b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067ba:	4b67      	ldr	r3, [pc, #412]	; (8006958 <HAL_RCC_ClockConfig+0x260>)
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067c2:	65ba      	str	r2, [r7, #88]	; 0x58
 80067c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067c6:	fa92 f2a2 	rbit	r2, r2
 80067ca:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80067cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80067ce:	fab2 f282 	clz	r2, r2
 80067d2:	b2d2      	uxtb	r2, r2
 80067d4:	f042 0220 	orr.w	r2, r2, #32
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	f002 021f 	and.w	r2, r2, #31
 80067de:	2101      	movs	r1, #1
 80067e0:	fa01 f202 	lsl.w	r2, r1, r2
 80067e4:	4013      	ands	r3, r2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d17b      	bne.n	80068e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e0f3      	b.n	80069d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d13c      	bne.n	8006870 <HAL_RCC_ClockConfig+0x178>
 80067f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067fa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067fe:	fa93 f3a3 	rbit	r3, r3
 8006802:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006806:	fab3 f383 	clz	r3, r3
 800680a:	b2db      	uxtb	r3, r3
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	b2db      	uxtb	r3, r3
 8006810:	f043 0301 	orr.w	r3, r3, #1
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b01      	cmp	r3, #1
 8006818:	d102      	bne.n	8006820 <HAL_RCC_ClockConfig+0x128>
 800681a:	4b4f      	ldr	r3, [pc, #316]	; (8006958 <HAL_RCC_ClockConfig+0x260>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	e00f      	b.n	8006840 <HAL_RCC_ClockConfig+0x148>
 8006820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006824:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006828:	fa93 f3a3 	rbit	r3, r3
 800682c:	647b      	str	r3, [r7, #68]	; 0x44
 800682e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006832:	643b      	str	r3, [r7, #64]	; 0x40
 8006834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006836:	fa93 f3a3 	rbit	r3, r3
 800683a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800683c:	4b46      	ldr	r3, [pc, #280]	; (8006958 <HAL_RCC_ClockConfig+0x260>)
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006844:	63ba      	str	r2, [r7, #56]	; 0x38
 8006846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006848:	fa92 f2a2 	rbit	r2, r2
 800684c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800684e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006850:	fab2 f282 	clz	r2, r2
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	f042 0220 	orr.w	r2, r2, #32
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	f002 021f 	and.w	r2, r2, #31
 8006860:	2101      	movs	r1, #1
 8006862:	fa01 f202 	lsl.w	r2, r1, r2
 8006866:	4013      	ands	r3, r2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d13a      	bne.n	80068e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e0b2      	b.n	80069d6 <HAL_RCC_ClockConfig+0x2de>
 8006870:	2302      	movs	r3, #2
 8006872:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006876:	fa93 f3a3 	rbit	r3, r3
 800687a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800687e:	fab3 f383 	clz	r3, r3
 8006882:	b2db      	uxtb	r3, r3
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b01      	cmp	r3, #1
 8006890:	d102      	bne.n	8006898 <HAL_RCC_ClockConfig+0x1a0>
 8006892:	4b31      	ldr	r3, [pc, #196]	; (8006958 <HAL_RCC_ClockConfig+0x260>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	e00d      	b.n	80068b4 <HAL_RCC_ClockConfig+0x1bc>
 8006898:	2302      	movs	r3, #2
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	fa93 f3a3 	rbit	r3, r3
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
 80068a4:	2302      	movs	r3, #2
 80068a6:	623b      	str	r3, [r7, #32]
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	fa93 f3a3 	rbit	r3, r3
 80068ae:	61fb      	str	r3, [r7, #28]
 80068b0:	4b29      	ldr	r3, [pc, #164]	; (8006958 <HAL_RCC_ClockConfig+0x260>)
 80068b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b4:	2202      	movs	r2, #2
 80068b6:	61ba      	str	r2, [r7, #24]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	fa92 f2a2 	rbit	r2, r2
 80068be:	617a      	str	r2, [r7, #20]
  return result;
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	fab2 f282 	clz	r2, r2
 80068c6:	b2d2      	uxtb	r2, r2
 80068c8:	f042 0220 	orr.w	r2, r2, #32
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	f002 021f 	and.w	r2, r2, #31
 80068d2:	2101      	movs	r1, #1
 80068d4:	fa01 f202 	lsl.w	r2, r1, r2
 80068d8:	4013      	ands	r3, r2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e079      	b.n	80069d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068e2:	4b1d      	ldr	r3, [pc, #116]	; (8006958 <HAL_RCC_ClockConfig+0x260>)
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f023 0203 	bic.w	r2, r3, #3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	491a      	ldr	r1, [pc, #104]	; (8006958 <HAL_RCC_ClockConfig+0x260>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068f4:	f7fc f972 	bl	8002bdc <HAL_GetTick>
 80068f8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068fa:	e00a      	b.n	8006912 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068fc:	f7fc f96e 	bl	8002bdc <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	f241 3288 	movw	r2, #5000	; 0x1388
 800690a:	4293      	cmp	r3, r2
 800690c:	d901      	bls.n	8006912 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e061      	b.n	80069d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006912:	4b11      	ldr	r3, [pc, #68]	; (8006958 <HAL_RCC_ClockConfig+0x260>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f003 020c 	and.w	r2, r3, #12
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	429a      	cmp	r2, r3
 8006922:	d1eb      	bne.n	80068fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006924:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <HAL_RCC_ClockConfig+0x25c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d214      	bcs.n	800695c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <HAL_RCC_ClockConfig+0x25c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f023 0207 	bic.w	r2, r3, #7
 800693a:	4906      	ldr	r1, [pc, #24]	; (8006954 <HAL_RCC_ClockConfig+0x25c>)
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	4313      	orrs	r3, r2
 8006940:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006942:	4b04      	ldr	r3, [pc, #16]	; (8006954 <HAL_RCC_ClockConfig+0x25c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	429a      	cmp	r2, r3
 800694e:	d005      	beq.n	800695c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006950:	2301      	movs	r3, #1
 8006952:	e040      	b.n	80069d6 <HAL_RCC_ClockConfig+0x2de>
 8006954:	40022000 	.word	0x40022000
 8006958:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b00      	cmp	r3, #0
 8006966:	d008      	beq.n	800697a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006968:	4b1d      	ldr	r3, [pc, #116]	; (80069e0 <HAL_RCC_ClockConfig+0x2e8>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	491a      	ldr	r1, [pc, #104]	; (80069e0 <HAL_RCC_ClockConfig+0x2e8>)
 8006976:	4313      	orrs	r3, r2
 8006978:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	2b00      	cmp	r3, #0
 8006984:	d009      	beq.n	800699a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006986:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <HAL_RCC_ClockConfig+0x2e8>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	4912      	ldr	r1, [pc, #72]	; (80069e0 <HAL_RCC_ClockConfig+0x2e8>)
 8006996:	4313      	orrs	r3, r2
 8006998:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800699a:	f000 f829 	bl	80069f0 <HAL_RCC_GetSysClockFreq>
 800699e:	4601      	mov	r1, r0
 80069a0:	4b0f      	ldr	r3, [pc, #60]	; (80069e0 <HAL_RCC_ClockConfig+0x2e8>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069a8:	22f0      	movs	r2, #240	; 0xf0
 80069aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	fa92 f2a2 	rbit	r2, r2
 80069b2:	60fa      	str	r2, [r7, #12]
  return result;
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	fab2 f282 	clz	r2, r2
 80069ba:	b2d2      	uxtb	r2, r2
 80069bc:	40d3      	lsrs	r3, r2
 80069be:	4a09      	ldr	r2, [pc, #36]	; (80069e4 <HAL_RCC_ClockConfig+0x2ec>)
 80069c0:	5cd3      	ldrb	r3, [r2, r3]
 80069c2:	fa21 f303 	lsr.w	r3, r1, r3
 80069c6:	4a08      	ldr	r2, [pc, #32]	; (80069e8 <HAL_RCC_ClockConfig+0x2f0>)
 80069c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80069ca:	4b08      	ldr	r3, [pc, #32]	; (80069ec <HAL_RCC_ClockConfig+0x2f4>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7fc f8c0 	bl	8002b54 <HAL_InitTick>
  
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3778      	adds	r7, #120	; 0x78
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40021000 	.word	0x40021000
 80069e4:	0800ff44 	.word	0x0800ff44
 80069e8:	20000008 	.word	0x20000008
 80069ec:	2000000c 	.word	0x2000000c

080069f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b08b      	sub	sp, #44	; 0x2c
 80069f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	2300      	movs	r3, #0
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	2300      	movs	r3, #0
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006a06:	2300      	movs	r3, #0
 8006a08:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8006a0a:	4b29      	ldr	r3, [pc, #164]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	f003 030c 	and.w	r3, r3, #12
 8006a16:	2b04      	cmp	r3, #4
 8006a18:	d002      	beq.n	8006a20 <HAL_RCC_GetSysClockFreq+0x30>
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d003      	beq.n	8006a26 <HAL_RCC_GetSysClockFreq+0x36>
 8006a1e:	e03c      	b.n	8006a9a <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006a20:	4b24      	ldr	r3, [pc, #144]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006a22:	623b      	str	r3, [r7, #32]
      break;
 8006a24:	e03c      	b.n	8006aa0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8006a2c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006a30:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	fa92 f2a2 	rbit	r2, r2
 8006a38:	607a      	str	r2, [r7, #4]
  return result;
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	fab2 f282 	clz	r2, r2
 8006a40:	b2d2      	uxtb	r2, r2
 8006a42:	40d3      	lsrs	r3, r2
 8006a44:	4a1c      	ldr	r2, [pc, #112]	; (8006ab8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006a46:	5cd3      	ldrb	r3, [r2, r3]
 8006a48:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8006a4a:	4b19      	ldr	r3, [pc, #100]	; (8006ab0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	f003 030f 	and.w	r3, r3, #15
 8006a52:	220f      	movs	r2, #15
 8006a54:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	fa92 f2a2 	rbit	r2, r2
 8006a5c:	60fa      	str	r2, [r7, #12]
  return result;
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	fab2 f282 	clz	r2, r2
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	40d3      	lsrs	r3, r2
 8006a68:	4a14      	ldr	r2, [pc, #80]	; (8006abc <HAL_RCC_GetSysClockFreq+0xcc>)
 8006a6a:	5cd3      	ldrb	r3, [r2, r3]
 8006a6c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d008      	beq.n	8006a8a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8006a78:	4a0e      	ldr	r2, [pc, #56]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	fb02 f303 	mul.w	r3, r2, r3
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
 8006a88:	e004      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	4a0c      	ldr	r2, [pc, #48]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006a8e:	fb02 f303 	mul.w	r3, r2, r3
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	623b      	str	r3, [r7, #32]
      break;
 8006a98:	e002      	b.n	8006aa0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006a9a:	4b06      	ldr	r3, [pc, #24]	; (8006ab4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8006a9c:	623b      	str	r3, [r7, #32]
      break;
 8006a9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aa0:	6a3b      	ldr	r3, [r7, #32]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	372c      	adds	r7, #44	; 0x2c
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	40021000 	.word	0x40021000
 8006ab4:	007a1200 	.word	0x007a1200
 8006ab8:	0800ff5c 	.word	0x0800ff5c
 8006abc:	0800ff6c 	.word	0x0800ff6c
 8006ac0:	003d0900 	.word	0x003d0900

08006ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ac8:	4b03      	ldr	r3, [pc, #12]	; (8006ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006aca:	681b      	ldr	r3, [r3, #0]
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	20000008 	.word	0x20000008

08006adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006ae2:	f7ff ffef 	bl	8006ac4 <HAL_RCC_GetHCLKFreq>
 8006ae6:	4601      	mov	r1, r0
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006af0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006af4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	fa92 f2a2 	rbit	r2, r2
 8006afc:	603a      	str	r2, [r7, #0]
  return result;
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	fab2 f282 	clz	r2, r2
 8006b04:	b2d2      	uxtb	r2, r2
 8006b06:	40d3      	lsrs	r3, r2
 8006b08:	4a04      	ldr	r2, [pc, #16]	; (8006b1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8006b0a:	5cd3      	ldrb	r3, [r2, r3]
 8006b0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	0800ff54 	.word	0x0800ff54

08006b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b082      	sub	sp, #8
 8006b24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006b26:	f7ff ffcd 	bl	8006ac4 <HAL_RCC_GetHCLKFreq>
 8006b2a:	4601      	mov	r1, r0
 8006b2c:	4b0b      	ldr	r3, [pc, #44]	; (8006b5c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006b34:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006b38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	fa92 f2a2 	rbit	r2, r2
 8006b40:	603a      	str	r2, [r7, #0]
  return result;
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	fab2 f282 	clz	r2, r2
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	40d3      	lsrs	r3, r2
 8006b4c:	4a04      	ldr	r2, [pc, #16]	; (8006b60 <HAL_RCC_GetPCLK2Freq+0x40>)
 8006b4e:	5cd3      	ldrb	r3, [r2, r3]
 8006b50:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006b54:	4618      	mov	r0, r3
 8006b56:	3708      	adds	r7, #8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40021000 	.word	0x40021000
 8006b60:	0800ff54 	.word	0x0800ff54

08006b64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b092      	sub	sp, #72	; 0x48
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8006b74:	2300      	movs	r3, #0
 8006b76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 80d4 	beq.w	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b88:	4b4e      	ldr	r3, [pc, #312]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b8a:	69db      	ldr	r3, [r3, #28]
 8006b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10e      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b94:	4b4b      	ldr	r3, [pc, #300]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	4a4a      	ldr	r2, [pc, #296]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b9e:	61d3      	str	r3, [r2, #28]
 8006ba0:	4b48      	ldr	r3, [pc, #288]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba8:	60bb      	str	r3, [r7, #8]
 8006baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bac:	2301      	movs	r3, #1
 8006bae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bb2:	4b45      	ldr	r3, [pc, #276]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d118      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006bbe:	4b42      	ldr	r3, [pc, #264]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a41      	ldr	r2, [pc, #260]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006bca:	f7fc f807 	bl	8002bdc <HAL_GetTick>
 8006bce:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bd0:	e008      	b.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bd2:	f7fc f803 	bl	8002bdc <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b64      	cmp	r3, #100	; 0x64
 8006bde:	d901      	bls.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e169      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006be4:	4b38      	ldr	r3, [pc, #224]	; (8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0f0      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bf0:	4b34      	ldr	r3, [pc, #208]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bf2:	6a1b      	ldr	r3, [r3, #32]
 8006bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f000 8084 	beq.w	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d07c      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c10:	4b2c      	ldr	r3, [pc, #176]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c1e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c22:	fa93 f3a3 	rbit	r3, r3
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c2a:	fab3 f383 	clz	r3, r3
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	461a      	mov	r2, r3
 8006c32:	4b26      	ldr	r3, [pc, #152]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c34:	4413      	add	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	6013      	str	r3, [r2, #0]
 8006c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006c42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c46:	fa93 f3a3 	rbit	r3, r3
 8006c4a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c4e:	fab3 f383 	clz	r3, r3
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	461a      	mov	r2, r3
 8006c56:	4b1d      	ldr	r3, [pc, #116]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c58:	4413      	add	r3, r2
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	2300      	movs	r3, #0
 8006c60:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c62:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c66:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d04b      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c72:	f7fb ffb3 	bl	8002bdc <HAL_GetTick>
 8006c76:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c78:	e00a      	b.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c7a:	f7fb ffaf 	bl	8002bdc <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e113      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006c90:	2302      	movs	r3, #2
 8006c92:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	fa93 f3a3 	rbit	r3, r3
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	623b      	str	r3, [r7, #32]
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	fa93 f3a3 	rbit	r3, r3
 8006ca6:	61fb      	str	r3, [r7, #28]
  return result;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006caa:	fab3 f383 	clz	r3, r3
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	095b      	lsrs	r3, r3, #5
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	f043 0302 	orr.w	r3, r3, #2
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d108      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8006cbe:	4b01      	ldr	r3, [pc, #4]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	e00d      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8006cc4:	40021000 	.word	0x40021000
 8006cc8:	40007000 	.word	0x40007000
 8006ccc:	10908100 	.word	0x10908100
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	fa93 f3a3 	rbit	r3, r3
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	4b78      	ldr	r3, [pc, #480]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	613a      	str	r2, [r7, #16]
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	fa92 f2a2 	rbit	r2, r2
 8006cea:	60fa      	str	r2, [r7, #12]
  return result;
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	fab2 f282 	clz	r2, r2
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf8:	b2d2      	uxtb	r2, r2
 8006cfa:	f002 021f 	and.w	r2, r2, #31
 8006cfe:	2101      	movs	r1, #1
 8006d00:	fa01 f202 	lsl.w	r2, r1, r2
 8006d04:	4013      	ands	r3, r2
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0b7      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006d0a:	4b6d      	ldr	r3, [pc, #436]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d0c:	6a1b      	ldr	r3, [r3, #32]
 8006d0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	496a      	ldr	r1, [pc, #424]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006d1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d105      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d24:	4b66      	ldr	r3, [pc, #408]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	4a65      	ldr	r2, [pc, #404]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d008      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d3c:	4b60      	ldr	r3, [pc, #384]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	f023 0203 	bic.w	r2, r3, #3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	495d      	ldr	r1, [pc, #372]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d008      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d5a:	4b59      	ldr	r3, [pc, #356]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	4956      	ldr	r1, [pc, #344]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d008      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d78:	4b51      	ldr	r3, [pc, #324]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	494e      	ldr	r1, [pc, #312]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d008      	beq.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d96:	4b4a      	ldr	r3, [pc, #296]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	f023 0210 	bic.w	r2, r3, #16
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	4947      	ldr	r1, [pc, #284]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d008      	beq.n	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006db4:	4b42      	ldr	r3, [pc, #264]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	493f      	ldr	r1, [pc, #252]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d008      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006dd2:	4b3b      	ldr	r3, [pc, #236]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	f023 0220 	bic.w	r2, r3, #32
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	4938      	ldr	r1, [pc, #224]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d008      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006df0:	4b33      	ldr	r3, [pc, #204]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	695b      	ldr	r3, [r3, #20]
 8006dfc:	4930      	ldr	r1, [pc, #192]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0310 	and.w	r3, r3, #16
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d008      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e0e:	4b2c      	ldr	r3, [pc, #176]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	4929      	ldr	r1, [pc, #164]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d008      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006e2c:	4b24      	ldr	r3, [pc, #144]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	4921      	ldr	r1, [pc, #132]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d008      	beq.n	8006e5c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006e4a:	4b1d      	ldr	r3, [pc, #116]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e56:	491a      	ldr	r1, [pc, #104]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d008      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006e68:	4b15      	ldr	r3, [pc, #84]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	4912      	ldr	r1, [pc, #72]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d008      	beq.n	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006e86:	4b0e      	ldr	r3, [pc, #56]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e92:	490b      	ldr	r1, [pc, #44]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d008      	beq.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006ea4:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb0:	4903      	ldr	r1, [pc, #12]	; (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3748      	adds	r7, #72	; 0x48
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	40021000 	.word	0x40021000

08006ec4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d101      	bne.n	8006ed6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e09d      	b.n	8007012 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d108      	bne.n	8006ef0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ee6:	d009      	beq.n	8006efc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	61da      	str	r2, [r3, #28]
 8006eee:	e005      	b.n	8006efc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d106      	bne.n	8006f1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fb f888 	bl	800202c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f3c:	d902      	bls.n	8006f44 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	e002      	b.n	8006f4a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006f52:	d007      	beq.n	8006f64 <HAL_SPI_Init+0xa0>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006f5c:	d002      	beq.n	8006f64 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f92:	431a      	orrs	r2, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a1b      	ldr	r3, [r3, #32]
 8006fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fa6:	ea42 0103 	orr.w	r1, r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	0c1b      	lsrs	r3, r3, #16
 8006fc0:	f003 0204 	and.w	r2, r3, #4
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	f003 0310 	and.w	r3, r3, #16
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006fe0:	ea42 0103 	orr.w	r1, r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	430a      	orrs	r2, r1
 8006ff0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007000:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b082      	sub	sp, #8
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e049      	b.n	80070c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d106      	bne.n	8007046 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f7fb f899 	bl	8002178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2202      	movs	r2, #2
 800704a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	3304      	adds	r3, #4
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f000 fd87 	bl	8007b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d001      	beq.n	80070e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e04a      	b.n	8007176 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2202      	movs	r2, #2
 80070e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f042 0201 	orr.w	r2, r2, #1
 80070f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a21      	ldr	r2, [pc, #132]	; (8007184 <HAL_TIM_Base_Start_IT+0xbc>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d018      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x6c>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710a:	d013      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x6c>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1d      	ldr	r2, [pc, #116]	; (8007188 <HAL_TIM_Base_Start_IT+0xc0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00e      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x6c>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a1c      	ldr	r2, [pc, #112]	; (800718c <HAL_TIM_Base_Start_IT+0xc4>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d009      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x6c>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a1a      	ldr	r2, [pc, #104]	; (8007190 <HAL_TIM_Base_Start_IT+0xc8>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d004      	beq.n	8007134 <HAL_TIM_Base_Start_IT+0x6c>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a19      	ldr	r2, [pc, #100]	; (8007194 <HAL_TIM_Base_Start_IT+0xcc>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d115      	bne.n	8007160 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	689a      	ldr	r2, [r3, #8]
 800713a:	4b17      	ldr	r3, [pc, #92]	; (8007198 <HAL_TIM_Base_Start_IT+0xd0>)
 800713c:	4013      	ands	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b06      	cmp	r3, #6
 8007144:	d015      	beq.n	8007172 <HAL_TIM_Base_Start_IT+0xaa>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800714c:	d011      	beq.n	8007172 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0201 	orr.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800715e:	e008      	b.n	8007172 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f042 0201 	orr.w	r2, r2, #1
 800716e:	601a      	str	r2, [r3, #0]
 8007170:	e000      	b.n	8007174 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007172:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	40012c00 	.word	0x40012c00
 8007188:	40000400 	.word	0x40000400
 800718c:	40000800 	.word	0x40000800
 8007190:	40013400 	.word	0x40013400
 8007194:	40014000 	.word	0x40014000
 8007198:	00010007 	.word	0x00010007

0800719c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d101      	bne.n	80071ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	e049      	b.n	8007242 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d106      	bne.n	80071c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7fa ff74 	bl	80020b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2202      	movs	r2, #2
 80071cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	3304      	adds	r3, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f000 fcc6 	bl	8007b6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
	...

0800724c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d109      	bne.n	8007270 <HAL_TIM_PWM_Start+0x24>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007262:	b2db      	uxtb	r3, r3
 8007264:	2b01      	cmp	r3, #1
 8007266:	bf14      	ite	ne
 8007268:	2301      	movne	r3, #1
 800726a:	2300      	moveq	r3, #0
 800726c:	b2db      	uxtb	r3, r3
 800726e:	e03c      	b.n	80072ea <HAL_TIM_PWM_Start+0x9e>
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	2b04      	cmp	r3, #4
 8007274:	d109      	bne.n	800728a <HAL_TIM_PWM_Start+0x3e>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	bf14      	ite	ne
 8007282:	2301      	movne	r3, #1
 8007284:	2300      	moveq	r3, #0
 8007286:	b2db      	uxtb	r3, r3
 8007288:	e02f      	b.n	80072ea <HAL_TIM_PWM_Start+0x9e>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b08      	cmp	r3, #8
 800728e:	d109      	bne.n	80072a4 <HAL_TIM_PWM_Start+0x58>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007296:	b2db      	uxtb	r3, r3
 8007298:	2b01      	cmp	r3, #1
 800729a:	bf14      	ite	ne
 800729c:	2301      	movne	r3, #1
 800729e:	2300      	moveq	r3, #0
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	e022      	b.n	80072ea <HAL_TIM_PWM_Start+0x9e>
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2b0c      	cmp	r3, #12
 80072a8:	d109      	bne.n	80072be <HAL_TIM_PWM_Start+0x72>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	bf14      	ite	ne
 80072b6:	2301      	movne	r3, #1
 80072b8:	2300      	moveq	r3, #0
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	e015      	b.n	80072ea <HAL_TIM_PWM_Start+0x9e>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	2b10      	cmp	r3, #16
 80072c2:	d109      	bne.n	80072d8 <HAL_TIM_PWM_Start+0x8c>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80072ca:	b2db      	uxtb	r3, r3
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	bf14      	ite	ne
 80072d0:	2301      	movne	r3, #1
 80072d2:	2300      	moveq	r3, #0
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	e008      	b.n	80072ea <HAL_TIM_PWM_Start+0x9e>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80072de:	b2db      	uxtb	r3, r3
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e097      	b.n	8007422 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <HAL_TIM_PWM_Start+0xb6>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007300:	e023      	b.n	800734a <HAL_TIM_PWM_Start+0xfe>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b04      	cmp	r3, #4
 8007306:	d104      	bne.n	8007312 <HAL_TIM_PWM_Start+0xc6>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007310:	e01b      	b.n	800734a <HAL_TIM_PWM_Start+0xfe>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b08      	cmp	r3, #8
 8007316:	d104      	bne.n	8007322 <HAL_TIM_PWM_Start+0xd6>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007320:	e013      	b.n	800734a <HAL_TIM_PWM_Start+0xfe>
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	2b0c      	cmp	r3, #12
 8007326:	d104      	bne.n	8007332 <HAL_TIM_PWM_Start+0xe6>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007330:	e00b      	b.n	800734a <HAL_TIM_PWM_Start+0xfe>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b10      	cmp	r3, #16
 8007336:	d104      	bne.n	8007342 <HAL_TIM_PWM_Start+0xf6>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007340:	e003      	b.n	800734a <HAL_TIM_PWM_Start+0xfe>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2202      	movs	r2, #2
 8007346:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2201      	movs	r2, #1
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	4618      	mov	r0, r3
 8007354:	f000 ff70 	bl	8008238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a33      	ldr	r2, [pc, #204]	; (800742c <HAL_TIM_PWM_Start+0x1e0>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d013      	beq.n	800738a <HAL_TIM_PWM_Start+0x13e>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a32      	ldr	r2, [pc, #200]	; (8007430 <HAL_TIM_PWM_Start+0x1e4>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d00e      	beq.n	800738a <HAL_TIM_PWM_Start+0x13e>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a30      	ldr	r2, [pc, #192]	; (8007434 <HAL_TIM_PWM_Start+0x1e8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d009      	beq.n	800738a <HAL_TIM_PWM_Start+0x13e>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a2f      	ldr	r2, [pc, #188]	; (8007438 <HAL_TIM_PWM_Start+0x1ec>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d004      	beq.n	800738a <HAL_TIM_PWM_Start+0x13e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a2d      	ldr	r2, [pc, #180]	; (800743c <HAL_TIM_PWM_Start+0x1f0>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d101      	bne.n	800738e <HAL_TIM_PWM_Start+0x142>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <HAL_TIM_PWM_Start+0x144>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d007      	beq.n	80073a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a20      	ldr	r2, [pc, #128]	; (800742c <HAL_TIM_PWM_Start+0x1e0>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d018      	beq.n	80073e0 <HAL_TIM_PWM_Start+0x194>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b6:	d013      	beq.n	80073e0 <HAL_TIM_PWM_Start+0x194>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a20      	ldr	r2, [pc, #128]	; (8007440 <HAL_TIM_PWM_Start+0x1f4>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00e      	beq.n	80073e0 <HAL_TIM_PWM_Start+0x194>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a1f      	ldr	r2, [pc, #124]	; (8007444 <HAL_TIM_PWM_Start+0x1f8>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d009      	beq.n	80073e0 <HAL_TIM_PWM_Start+0x194>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a17      	ldr	r2, [pc, #92]	; (8007430 <HAL_TIM_PWM_Start+0x1e4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d004      	beq.n	80073e0 <HAL_TIM_PWM_Start+0x194>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a16      	ldr	r2, [pc, #88]	; (8007434 <HAL_TIM_PWM_Start+0x1e8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d115      	bne.n	800740c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689a      	ldr	r2, [r3, #8]
 80073e6:	4b18      	ldr	r3, [pc, #96]	; (8007448 <HAL_TIM_PWM_Start+0x1fc>)
 80073e8:	4013      	ands	r3, r2
 80073ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b06      	cmp	r3, #6
 80073f0:	d015      	beq.n	800741e <HAL_TIM_PWM_Start+0x1d2>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073f8:	d011      	beq.n	800741e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 0201 	orr.w	r2, r2, #1
 8007408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800740a:	e008      	b.n	800741e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f042 0201 	orr.w	r2, r2, #1
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	e000      	b.n	8007420 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800741e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	40012c00 	.word	0x40012c00
 8007430:	40013400 	.word	0x40013400
 8007434:	40014000 	.word	0x40014000
 8007438:	40014400 	.word	0x40014400
 800743c:	40014800 	.word	0x40014800
 8007440:	40000400 	.word	0x40000400
 8007444:	40000800 	.word	0x40000800
 8007448:	00010007 	.word	0x00010007

0800744c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d101      	bne.n	8007460 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e097      	b.n	8007590 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007466:	b2db      	uxtb	r3, r3
 8007468:	2b00      	cmp	r3, #0
 800746a:	d106      	bne.n	800747a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7fa fe3b 	bl	80020f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2202      	movs	r2, #2
 800747e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6812      	ldr	r2, [r2, #0]
 800748c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007490:	f023 0307 	bic.w	r3, r3, #7
 8007494:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	3304      	adds	r3, #4
 800749e:	4619      	mov	r1, r3
 80074a0:	4610      	mov	r0, r2
 80074a2:	f000 fb63 	bl	8007b6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	699b      	ldr	r3, [r3, #24]
 80074b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ce:	f023 0303 	bic.w	r3, r3, #3
 80074d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	4313      	orrs	r3, r2
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80074ec:	f023 030c 	bic.w	r3, r3, #12
 80074f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	021b      	lsls	r3, r3, #8
 8007508:	4313      	orrs	r3, r2
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4313      	orrs	r3, r2
 800750e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	011a      	lsls	r2, r3, #4
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	6a1b      	ldr	r3, [r3, #32]
 800751a:	031b      	lsls	r3, r3, #12
 800751c:	4313      	orrs	r3, r2
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	4313      	orrs	r3, r2
 8007522:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800752a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007532:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	4313      	orrs	r3, r2
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	4313      	orrs	r3, r2
 8007544:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	693a      	ldr	r2, [r7, #16]
 8007554:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80075b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d110      	bne.n	80075ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d102      	bne.n	80075d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80075ce:	7b7b      	ldrb	r3, [r7, #13]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d001      	beq.n	80075d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e069      	b.n	80076ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2202      	movs	r2, #2
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2202      	movs	r2, #2
 80075e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075e8:	e031      	b.n	800764e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	d110      	bne.n	8007612 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80075f0:	7bbb      	ldrb	r3, [r7, #14]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d102      	bne.n	80075fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80075f6:	7b3b      	ldrb	r3, [r7, #12]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d001      	beq.n	8007600 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e055      	b.n	80076ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2202      	movs	r2, #2
 8007604:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2202      	movs	r2, #2
 800760c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007610:	e01d      	b.n	800764e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d108      	bne.n	800762a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007618:	7bbb      	ldrb	r3, [r7, #14]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d105      	bne.n	800762a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800761e:	7b7b      	ldrb	r3, [r7, #13]
 8007620:	2b01      	cmp	r3, #1
 8007622:	d102      	bne.n	800762a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007624:	7b3b      	ldrb	r3, [r7, #12]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d001      	beq.n	800762e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e03e      	b.n	80076ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2202      	movs	r2, #2
 8007632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2202      	movs	r2, #2
 800763a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2202      	movs	r2, #2
 8007642:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2202      	movs	r2, #2
 800764a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_TIM_Encoder_Start+0xc4>
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	2b04      	cmp	r3, #4
 8007658:	d008      	beq.n	800766c <HAL_TIM_Encoder_Start+0xd4>
 800765a:	e00f      	b.n	800767c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2201      	movs	r2, #1
 8007662:	2100      	movs	r1, #0
 8007664:	4618      	mov	r0, r3
 8007666:	f000 fde7 	bl	8008238 <TIM_CCxChannelCmd>
      break;
 800766a:	e016      	b.n	800769a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2201      	movs	r2, #1
 8007672:	2104      	movs	r1, #4
 8007674:	4618      	mov	r0, r3
 8007676:	f000 fddf 	bl	8008238 <TIM_CCxChannelCmd>
      break;
 800767a:	e00e      	b.n	800769a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2201      	movs	r2, #1
 8007682:	2100      	movs	r1, #0
 8007684:	4618      	mov	r0, r3
 8007686:	f000 fdd7 	bl	8008238 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2201      	movs	r2, #1
 8007690:	2104      	movs	r1, #4
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fdd0 	bl	8008238 <TIM_CCxChannelCmd>
      break;
 8007698:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0201 	orr.w	r2, r2, #1
 80076a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d122      	bne.n	8007710 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d11b      	bne.n	8007710 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f06f 0202 	mvn.w	r2, #2
 80076e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699b      	ldr	r3, [r3, #24]
 80076ee:	f003 0303 	and.w	r3, r3, #3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fa1a 	bl	8007b30 <HAL_TIM_IC_CaptureCallback>
 80076fc:	e005      	b.n	800770a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fa0c 	bl	8007b1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fa1d 	bl	8007b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b04      	cmp	r3, #4
 800771c:	d122      	bne.n	8007764 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b04      	cmp	r3, #4
 800772a:	d11b      	bne.n	8007764 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0204 	mvn.w	r2, #4
 8007734:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2202      	movs	r2, #2
 800773a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f9f0 	bl	8007b30 <HAL_TIM_IC_CaptureCallback>
 8007750:	e005      	b.n	800775e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f9e2 	bl	8007b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 f9f3 	bl	8007b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b08      	cmp	r3, #8
 8007770:	d122      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0308 	and.w	r3, r3, #8
 800777c:	2b08      	cmp	r3, #8
 800777e:	d11b      	bne.n	80077b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0208 	mvn.w	r2, #8
 8007788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2204      	movs	r2, #4
 800778e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f003 0303 	and.w	r3, r3, #3
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f9c6 	bl	8007b30 <HAL_TIM_IC_CaptureCallback>
 80077a4:	e005      	b.n	80077b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 f9b8 	bl	8007b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f9c9 	bl	8007b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0310 	and.w	r3, r3, #16
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d122      	bne.n	800780c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b10      	cmp	r3, #16
 80077d2:	d11b      	bne.n	800780c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0210 	mvn.w	r2, #16
 80077dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2208      	movs	r2, #8
 80077e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f99c 	bl	8007b30 <HAL_TIM_IC_CaptureCallback>
 80077f8:	e005      	b.n	8007806 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f98e 	bl	8007b1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f99f 	bl	8007b44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b01      	cmp	r3, #1
 8007818:	d10e      	bne.n	8007838 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	2b01      	cmp	r3, #1
 8007826:	d107      	bne.n	8007838 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0201 	mvn.w	r2, #1
 8007830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7f9 fd5e 	bl	80012f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007842:	2b80      	cmp	r3, #128	; 0x80
 8007844:	d10e      	bne.n	8007864 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007850:	2b80      	cmp	r3, #128	; 0x80
 8007852:	d107      	bne.n	8007864 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800785c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fe18 	bl	8008494 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007872:	d10e      	bne.n	8007892 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68db      	ldr	r3, [r3, #12]
 800787a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787e:	2b80      	cmp	r3, #128	; 0x80
 8007880:	d107      	bne.n	8007892 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800788a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fe0b 	bl	80084a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	2b40      	cmp	r3, #64	; 0x40
 800789e:	d10e      	bne.n	80078be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b40      	cmp	r3, #64	; 0x40
 80078ac:	d107      	bne.n	80078be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f94d 	bl	8007b58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f003 0320 	and.w	r3, r3, #32
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d10e      	bne.n	80078ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d107      	bne.n	80078ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f06f 0220 	mvn.w	r2, #32
 80078e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fdcb 	bl	8008480 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078ea:	bf00      	nop
 80078ec:	3708      	adds	r7, #8
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800790a:	2b01      	cmp	r3, #1
 800790c:	d101      	bne.n	8007912 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800790e:	2302      	movs	r3, #2
 8007910:	e0ff      	b.n	8007b12 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b14      	cmp	r3, #20
 800791e:	f200 80f0 	bhi.w	8007b02 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007922:	a201      	add	r2, pc, #4	; (adr r2, 8007928 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007928:	0800797d 	.word	0x0800797d
 800792c:	08007b03 	.word	0x08007b03
 8007930:	08007b03 	.word	0x08007b03
 8007934:	08007b03 	.word	0x08007b03
 8007938:	080079bd 	.word	0x080079bd
 800793c:	08007b03 	.word	0x08007b03
 8007940:	08007b03 	.word	0x08007b03
 8007944:	08007b03 	.word	0x08007b03
 8007948:	080079ff 	.word	0x080079ff
 800794c:	08007b03 	.word	0x08007b03
 8007950:	08007b03 	.word	0x08007b03
 8007954:	08007b03 	.word	0x08007b03
 8007958:	08007a3f 	.word	0x08007a3f
 800795c:	08007b03 	.word	0x08007b03
 8007960:	08007b03 	.word	0x08007b03
 8007964:	08007b03 	.word	0x08007b03
 8007968:	08007a81 	.word	0x08007a81
 800796c:	08007b03 	.word	0x08007b03
 8007970:	08007b03 	.word	0x08007b03
 8007974:	08007b03 	.word	0x08007b03
 8007978:	08007ac1 	.word	0x08007ac1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68b9      	ldr	r1, [r7, #8]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 f982 	bl	8007c8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	699a      	ldr	r2, [r3, #24]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0208 	orr.w	r2, r2, #8
 8007996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699a      	ldr	r2, [r3, #24]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0204 	bic.w	r2, r2, #4
 80079a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6999      	ldr	r1, [r3, #24]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	691a      	ldr	r2, [r3, #16]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	619a      	str	r2, [r3, #24]
      break;
 80079ba:	e0a5      	b.n	8007b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 f9f2 	bl	8007dac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699a      	ldr	r2, [r3, #24]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6999      	ldr	r1, [r3, #24]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	021a      	lsls	r2, r3, #8
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	619a      	str	r2, [r3, #24]
      break;
 80079fc:	e084      	b.n	8007b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68b9      	ldr	r1, [r7, #8]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 fa5b 	bl	8007ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69da      	ldr	r2, [r3, #28]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0208 	orr.w	r2, r2, #8
 8007a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69da      	ldr	r2, [r3, #28]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0204 	bic.w	r2, r2, #4
 8007a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69d9      	ldr	r1, [r3, #28]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	691a      	ldr	r2, [r3, #16]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	61da      	str	r2, [r3, #28]
      break;
 8007a3c:	e064      	b.n	8007b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68b9      	ldr	r1, [r7, #8]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 fac3 	bl	8007fd0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69da      	ldr	r2, [r3, #28]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69da      	ldr	r2, [r3, #28]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69d9      	ldr	r1, [r3, #28]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	021a      	lsls	r2, r3, #8
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	61da      	str	r2, [r3, #28]
      break;
 8007a7e:	e043      	b.n	8007b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fb0c 	bl	80080a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f042 0208 	orr.w	r2, r2, #8
 8007a9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0204 	bic.w	r2, r2, #4
 8007aaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	691a      	ldr	r2, [r3, #16]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	430a      	orrs	r2, r1
 8007abc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007abe:	e023      	b.n	8007b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68b9      	ldr	r1, [r7, #8]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 fb50 	bl	800816c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ada:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	021a      	lsls	r2, r3, #8
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007b00:	e002      	b.n	8007b08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	75fb      	strb	r3, [r7, #23]
      break;
 8007b06:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3718      	adds	r7, #24
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop

08007b1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr

08007b30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b60:	bf00      	nop
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b085      	sub	sp, #20
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a3c      	ldr	r2, [pc, #240]	; (8007c70 <TIM_Base_SetConfig+0x104>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00f      	beq.n	8007ba4 <TIM_Base_SetConfig+0x38>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b8a:	d00b      	beq.n	8007ba4 <TIM_Base_SetConfig+0x38>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a39      	ldr	r2, [pc, #228]	; (8007c74 <TIM_Base_SetConfig+0x108>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d007      	beq.n	8007ba4 <TIM_Base_SetConfig+0x38>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a38      	ldr	r2, [pc, #224]	; (8007c78 <TIM_Base_SetConfig+0x10c>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d003      	beq.n	8007ba4 <TIM_Base_SetConfig+0x38>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a37      	ldr	r2, [pc, #220]	; (8007c7c <TIM_Base_SetConfig+0x110>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d108      	bne.n	8007bb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007baa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a2d      	ldr	r2, [pc, #180]	; (8007c70 <TIM_Base_SetConfig+0x104>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d01b      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bc4:	d017      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a2a      	ldr	r2, [pc, #168]	; (8007c74 <TIM_Base_SetConfig+0x108>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d013      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a29      	ldr	r2, [pc, #164]	; (8007c78 <TIM_Base_SetConfig+0x10c>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d00f      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a28      	ldr	r2, [pc, #160]	; (8007c7c <TIM_Base_SetConfig+0x110>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00b      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a27      	ldr	r2, [pc, #156]	; (8007c80 <TIM_Base_SetConfig+0x114>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d007      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a26      	ldr	r2, [pc, #152]	; (8007c84 <TIM_Base_SetConfig+0x118>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d003      	beq.n	8007bf6 <TIM_Base_SetConfig+0x8a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a25      	ldr	r2, [pc, #148]	; (8007c88 <TIM_Base_SetConfig+0x11c>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d108      	bne.n	8007c08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	689a      	ldr	r2, [r3, #8]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a10      	ldr	r2, [pc, #64]	; (8007c70 <TIM_Base_SetConfig+0x104>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d00f      	beq.n	8007c54 <TIM_Base_SetConfig+0xe8>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a11      	ldr	r2, [pc, #68]	; (8007c7c <TIM_Base_SetConfig+0x110>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d00b      	beq.n	8007c54 <TIM_Base_SetConfig+0xe8>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a10      	ldr	r2, [pc, #64]	; (8007c80 <TIM_Base_SetConfig+0x114>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d007      	beq.n	8007c54 <TIM_Base_SetConfig+0xe8>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a0f      	ldr	r2, [pc, #60]	; (8007c84 <TIM_Base_SetConfig+0x118>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d003      	beq.n	8007c54 <TIM_Base_SetConfig+0xe8>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a0e      	ldr	r2, [pc, #56]	; (8007c88 <TIM_Base_SetConfig+0x11c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d103      	bne.n	8007c5c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	691a      	ldr	r2, [r3, #16]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	615a      	str	r2, [r3, #20]
}
 8007c62:	bf00      	nop
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	40012c00 	.word	0x40012c00
 8007c74:	40000400 	.word	0x40000400
 8007c78:	40000800 	.word	0x40000800
 8007c7c:	40013400 	.word	0x40013400
 8007c80:	40014000 	.word	0x40014000
 8007c84:	40014400 	.word	0x40014400
 8007c88:	40014800 	.word	0x40014800

08007c8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f023 0201 	bic.w	r2, r3, #1
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 0303 	bic.w	r3, r3, #3
 8007cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f023 0302 	bic.w	r3, r3, #2
 8007cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a2c      	ldr	r2, [pc, #176]	; (8007d98 <TIM_OC1_SetConfig+0x10c>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00f      	beq.n	8007d0c <TIM_OC1_SetConfig+0x80>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a2b      	ldr	r2, [pc, #172]	; (8007d9c <TIM_OC1_SetConfig+0x110>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d00b      	beq.n	8007d0c <TIM_OC1_SetConfig+0x80>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a2a      	ldr	r2, [pc, #168]	; (8007da0 <TIM_OC1_SetConfig+0x114>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d007      	beq.n	8007d0c <TIM_OC1_SetConfig+0x80>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a29      	ldr	r2, [pc, #164]	; (8007da4 <TIM_OC1_SetConfig+0x118>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d003      	beq.n	8007d0c <TIM_OC1_SetConfig+0x80>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a28      	ldr	r2, [pc, #160]	; (8007da8 <TIM_OC1_SetConfig+0x11c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d10c      	bne.n	8007d26 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f023 0308 	bic.w	r3, r3, #8
 8007d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	f023 0304 	bic.w	r3, r3, #4
 8007d24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	4a1b      	ldr	r2, [pc, #108]	; (8007d98 <TIM_OC1_SetConfig+0x10c>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	d00f      	beq.n	8007d4e <TIM_OC1_SetConfig+0xc2>
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a1a      	ldr	r2, [pc, #104]	; (8007d9c <TIM_OC1_SetConfig+0x110>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00b      	beq.n	8007d4e <TIM_OC1_SetConfig+0xc2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a19      	ldr	r2, [pc, #100]	; (8007da0 <TIM_OC1_SetConfig+0x114>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d007      	beq.n	8007d4e <TIM_OC1_SetConfig+0xc2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a18      	ldr	r2, [pc, #96]	; (8007da4 <TIM_OC1_SetConfig+0x118>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d003      	beq.n	8007d4e <TIM_OC1_SetConfig+0xc2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a17      	ldr	r2, [pc, #92]	; (8007da8 <TIM_OC1_SetConfig+0x11c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d111      	bne.n	8007d72 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	693a      	ldr	r2, [r7, #16]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	621a      	str	r2, [r3, #32]
}
 8007d8c:	bf00      	nop
 8007d8e:	371c      	adds	r7, #28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr
 8007d98:	40012c00 	.word	0x40012c00
 8007d9c:	40013400 	.word	0x40013400
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40014400 	.word	0x40014400
 8007da8:	40014800 	.word	0x40014800

08007dac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	f023 0210 	bic.w	r2, r3, #16
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f023 0320 	bic.w	r3, r3, #32
 8007dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a28      	ldr	r2, [pc, #160]	; (8007eac <TIM_OC2_SetConfig+0x100>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d003      	beq.n	8007e18 <TIM_OC2_SetConfig+0x6c>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a27      	ldr	r2, [pc, #156]	; (8007eb0 <TIM_OC2_SetConfig+0x104>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d10d      	bne.n	8007e34 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	011b      	lsls	r3, r3, #4
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a1d      	ldr	r2, [pc, #116]	; (8007eac <TIM_OC2_SetConfig+0x100>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d00f      	beq.n	8007e5c <TIM_OC2_SetConfig+0xb0>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a1c      	ldr	r2, [pc, #112]	; (8007eb0 <TIM_OC2_SetConfig+0x104>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d00b      	beq.n	8007e5c <TIM_OC2_SetConfig+0xb0>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <TIM_OC2_SetConfig+0x108>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d007      	beq.n	8007e5c <TIM_OC2_SetConfig+0xb0>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a1a      	ldr	r2, [pc, #104]	; (8007eb8 <TIM_OC2_SetConfig+0x10c>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d003      	beq.n	8007e5c <TIM_OC2_SetConfig+0xb0>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a19      	ldr	r2, [pc, #100]	; (8007ebc <TIM_OC2_SetConfig+0x110>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d113      	bne.n	8007e84 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e62:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e6a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	695b      	ldr	r3, [r3, #20]
 8007e70:	009b      	lsls	r3, r3, #2
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	4313      	orrs	r3, r2
 8007e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68fa      	ldr	r2, [r7, #12]
 8007e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	621a      	str	r2, [r3, #32]
}
 8007e9e:	bf00      	nop
 8007ea0:	371c      	adds	r7, #28
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	40012c00 	.word	0x40012c00
 8007eb0:	40013400 	.word	0x40013400
 8007eb4:	40014000 	.word	0x40014000
 8007eb8:	40014400 	.word	0x40014400
 8007ebc:	40014800 	.word	0x40014800

08007ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b087      	sub	sp, #28
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a1b      	ldr	r3, [r3, #32]
 8007ece:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0303 	bic.w	r3, r3, #3
 8007efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	021b      	lsls	r3, r3, #8
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a27      	ldr	r2, [pc, #156]	; (8007fbc <TIM_OC3_SetConfig+0xfc>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d003      	beq.n	8007f2a <TIM_OC3_SetConfig+0x6a>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a26      	ldr	r2, [pc, #152]	; (8007fc0 <TIM_OC3_SetConfig+0x100>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d10d      	bne.n	8007f46 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	021b      	lsls	r3, r3, #8
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f44:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1c      	ldr	r2, [pc, #112]	; (8007fbc <TIM_OC3_SetConfig+0xfc>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d00f      	beq.n	8007f6e <TIM_OC3_SetConfig+0xae>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a1b      	ldr	r2, [pc, #108]	; (8007fc0 <TIM_OC3_SetConfig+0x100>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d00b      	beq.n	8007f6e <TIM_OC3_SetConfig+0xae>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a1a      	ldr	r2, [pc, #104]	; (8007fc4 <TIM_OC3_SetConfig+0x104>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d007      	beq.n	8007f6e <TIM_OC3_SetConfig+0xae>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a19      	ldr	r2, [pc, #100]	; (8007fc8 <TIM_OC3_SetConfig+0x108>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d003      	beq.n	8007f6e <TIM_OC3_SetConfig+0xae>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a18      	ldr	r2, [pc, #96]	; (8007fcc <TIM_OC3_SetConfig+0x10c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d113      	bne.n	8007f96 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	011b      	lsls	r3, r3, #4
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	011b      	lsls	r3, r3, #4
 8007f90:	693a      	ldr	r2, [r7, #16]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	621a      	str	r2, [r3, #32]
}
 8007fb0:	bf00      	nop
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	40012c00 	.word	0x40012c00
 8007fc0:	40013400 	.word	0x40013400
 8007fc4:	40014000 	.word	0x40014000
 8007fc8:	40014400 	.word	0x40014400
 8007fcc:	40014800 	.word	0x40014800

08007fd0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b087      	sub	sp, #28
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	69db      	ldr	r3, [r3, #28]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800800a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	021b      	lsls	r3, r3, #8
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	4313      	orrs	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800801e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	031b      	lsls	r3, r3, #12
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a18      	ldr	r2, [pc, #96]	; (8008090 <TIM_OC4_SetConfig+0xc0>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00f      	beq.n	8008054 <TIM_OC4_SetConfig+0x84>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a17      	ldr	r2, [pc, #92]	; (8008094 <TIM_OC4_SetConfig+0xc4>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00b      	beq.n	8008054 <TIM_OC4_SetConfig+0x84>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a16      	ldr	r2, [pc, #88]	; (8008098 <TIM_OC4_SetConfig+0xc8>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d007      	beq.n	8008054 <TIM_OC4_SetConfig+0x84>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a15      	ldr	r2, [pc, #84]	; (800809c <TIM_OC4_SetConfig+0xcc>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_OC4_SetConfig+0x84>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a14      	ldr	r2, [pc, #80]	; (80080a0 <TIM_OC4_SetConfig+0xd0>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d109      	bne.n	8008068 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800805a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	695b      	ldr	r3, [r3, #20]
 8008060:	019b      	lsls	r3, r3, #6
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	4313      	orrs	r3, r2
 8008066:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	685a      	ldr	r2, [r3, #4]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	621a      	str	r2, [r3, #32]
}
 8008082:	bf00      	nop
 8008084:	371c      	adds	r7, #28
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
 800808e:	bf00      	nop
 8008090:	40012c00 	.word	0x40012c00
 8008094:	40013400 	.word	0x40013400
 8008098:	40014000 	.word	0x40014000
 800809c:	40014400 	.word	0x40014400
 80080a0:	40014800 	.word	0x40014800

080080a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b087      	sub	sp, #28
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80080e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	041b      	lsls	r3, r3, #16
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a17      	ldr	r2, [pc, #92]	; (8008158 <TIM_OC5_SetConfig+0xb4>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00f      	beq.n	800811e <TIM_OC5_SetConfig+0x7a>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a16      	ldr	r2, [pc, #88]	; (800815c <TIM_OC5_SetConfig+0xb8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d00b      	beq.n	800811e <TIM_OC5_SetConfig+0x7a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a15      	ldr	r2, [pc, #84]	; (8008160 <TIM_OC5_SetConfig+0xbc>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d007      	beq.n	800811e <TIM_OC5_SetConfig+0x7a>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a14      	ldr	r2, [pc, #80]	; (8008164 <TIM_OC5_SetConfig+0xc0>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d003      	beq.n	800811e <TIM_OC5_SetConfig+0x7a>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a13      	ldr	r2, [pc, #76]	; (8008168 <TIM_OC5_SetConfig+0xc4>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d109      	bne.n	8008132 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008124:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	021b      	lsls	r3, r3, #8
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	685a      	ldr	r2, [r3, #4]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	621a      	str	r2, [r3, #32]
}
 800814c:	bf00      	nop
 800814e:	371c      	adds	r7, #28
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	40012c00 	.word	0x40012c00
 800815c:	40013400 	.word	0x40013400
 8008160:	40014000 	.word	0x40014000
 8008164:	40014400 	.word	0x40014400
 8008168:	40014800 	.word	0x40014800

0800816c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800816c:	b480      	push	{r7}
 800816e:	b087      	sub	sp, #28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6a1b      	ldr	r3, [r3, #32]
 800817a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800819a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800819e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	021b      	lsls	r3, r3, #8
 80081a6:	68fa      	ldr	r2, [r7, #12]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	051b      	lsls	r3, r3, #20
 80081ba:	693a      	ldr	r2, [r7, #16]
 80081bc:	4313      	orrs	r3, r2
 80081be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a18      	ldr	r2, [pc, #96]	; (8008224 <TIM_OC6_SetConfig+0xb8>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d00f      	beq.n	80081e8 <TIM_OC6_SetConfig+0x7c>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a17      	ldr	r2, [pc, #92]	; (8008228 <TIM_OC6_SetConfig+0xbc>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d00b      	beq.n	80081e8 <TIM_OC6_SetConfig+0x7c>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a16      	ldr	r2, [pc, #88]	; (800822c <TIM_OC6_SetConfig+0xc0>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d007      	beq.n	80081e8 <TIM_OC6_SetConfig+0x7c>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a15      	ldr	r2, [pc, #84]	; (8008230 <TIM_OC6_SetConfig+0xc4>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d003      	beq.n	80081e8 <TIM_OC6_SetConfig+0x7c>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a14      	ldr	r2, [pc, #80]	; (8008234 <TIM_OC6_SetConfig+0xc8>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d109      	bne.n	80081fc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	029b      	lsls	r3, r3, #10
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	693a      	ldr	r2, [r7, #16]
 8008214:	621a      	str	r2, [r3, #32]
}
 8008216:	bf00      	nop
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40012c00 	.word	0x40012c00
 8008228:	40013400 	.word	0x40013400
 800822c:	40014000 	.word	0x40014000
 8008230:	40014400 	.word	0x40014400
 8008234:	40014800 	.word	0x40014800

08008238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008238:	b480      	push	{r7}
 800823a:	b087      	sub	sp, #28
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f003 031f 	and.w	r3, r3, #31
 800824a:	2201      	movs	r2, #1
 800824c:	fa02 f303 	lsl.w	r3, r2, r3
 8008250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6a1a      	ldr	r2, [r3, #32]
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	43db      	mvns	r3, r3
 800825a:	401a      	ands	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6a1a      	ldr	r2, [r3, #32]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	f003 031f 	and.w	r3, r3, #31
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	fa01 f303 	lsl.w	r3, r1, r3
 8008270:	431a      	orrs	r2, r3
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	621a      	str	r2, [r3, #32]
}
 8008276:	bf00      	nop
 8008278:	371c      	adds	r7, #28
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
	...

08008284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008284:	b480      	push	{r7}
 8008286:	b085      	sub	sp, #20
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008294:	2b01      	cmp	r3, #1
 8008296:	d101      	bne.n	800829c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008298:	2302      	movs	r3, #2
 800829a:	e063      	b.n	8008364 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2202      	movs	r2, #2
 80082a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a2b      	ldr	r2, [pc, #172]	; (8008370 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d004      	beq.n	80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a2a      	ldr	r2, [pc, #168]	; (8008374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d108      	bne.n	80082e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80082d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a1b      	ldr	r2, [pc, #108]	; (8008370 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d018      	beq.n	8008338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800830e:	d013      	beq.n	8008338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a18      	ldr	r2, [pc, #96]	; (8008378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00e      	beq.n	8008338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a17      	ldr	r2, [pc, #92]	; (800837c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d009      	beq.n	8008338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a12      	ldr	r2, [pc, #72]	; (8008374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d004      	beq.n	8008338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a13      	ldr	r2, [pc, #76]	; (8008380 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d10c      	bne.n	8008352 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800833e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	4313      	orrs	r3, r2
 8008348:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2201      	movs	r2, #1
 8008356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr
 8008370:	40012c00 	.word	0x40012c00
 8008374:	40013400 	.word	0x40013400
 8008378:	40000400 	.word	0x40000400
 800837c:	40000800 	.word	0x40000800
 8008380:	40014000 	.word	0x40014000

08008384 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008384:	b480      	push	{r7}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800838e:	2300      	movs	r3, #0
 8008390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008398:	2b01      	cmp	r3, #1
 800839a:	d101      	bne.n	80083a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800839c:	2302      	movs	r3, #2
 800839e:	e065      	b.n	800846c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4313      	orrs	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	695b      	ldr	r3, [r3, #20]
 80083f8:	4313      	orrs	r3, r2
 80083fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008406:	4313      	orrs	r3, r2
 8008408:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	041b      	lsls	r3, r3, #16
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a16      	ldr	r2, [pc, #88]	; (8008478 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d004      	beq.n	800842e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a14      	ldr	r2, [pc, #80]	; (800847c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d115      	bne.n	800845a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008438:	051b      	lsls	r3, r3, #20
 800843a:	4313      	orrs	r3, r2
 800843c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	69db      	ldr	r3, [r3, #28]
 8008448:	4313      	orrs	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3714      	adds	r7, #20
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr
 8008478:	40012c00 	.word	0x40012c00
 800847c:	40013400 	.word	0x40013400

08008480 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e040      	b.n	8008550 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7f9 fec4 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2224      	movs	r2, #36	; 0x24
 80084e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0201 	bic.w	r2, r2, #1
 80084f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 f8b6 	bl	800866c <UART_SetConfig>
 8008500:	4603      	mov	r3, r0
 8008502:	2b01      	cmp	r3, #1
 8008504:	d101      	bne.n	800850a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e022      	b.n	8008550 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fa7e 	bl	8008a14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	685a      	ldr	r2, [r3, #4]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008526:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689a      	ldr	r2, [r3, #8]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008536:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0201 	orr.w	r2, r2, #1
 8008546:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fb05 	bl	8008b58 <UART_CheckIdleState>
 800854e:	4603      	mov	r3, r0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08a      	sub	sp, #40	; 0x28
 800855c:	af02      	add	r7, sp, #8
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	603b      	str	r3, [r7, #0]
 8008564:	4613      	mov	r3, r2
 8008566:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800856c:	2b20      	cmp	r3, #32
 800856e:	d178      	bne.n	8008662 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d002      	beq.n	800857c <HAL_UART_Transmit+0x24>
 8008576:	88fb      	ldrh	r3, [r7, #6]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d101      	bne.n	8008580 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	e071      	b.n	8008664 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2221      	movs	r2, #33	; 0x21
 800858c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800858e:	f7fa fb25 	bl	8002bdc <HAL_GetTick>
 8008592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	88fa      	ldrh	r2, [r7, #6]
 8008598:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	88fa      	ldrh	r2, [r7, #6]
 80085a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ac:	d108      	bne.n	80085c0 <HAL_UART_Transmit+0x68>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d104      	bne.n	80085c0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80085b6:	2300      	movs	r3, #0
 80085b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	61bb      	str	r3, [r7, #24]
 80085be:	e003      	b.n	80085c8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085c8:	e030      	b.n	800862c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2200      	movs	r2, #0
 80085d2:	2180      	movs	r1, #128	; 0x80
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f000 fb67 	bl	8008ca8 <UART_WaitOnFlagUntilTimeout>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d004      	beq.n	80085ea <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2220      	movs	r2, #32
 80085e4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e03c      	b.n	8008664 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10b      	bne.n	8008608 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	881a      	ldrh	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085fc:	b292      	uxth	r2, r2
 80085fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	3302      	adds	r3, #2
 8008604:	61bb      	str	r3, [r7, #24]
 8008606:	e008      	b.n	800861a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	781a      	ldrb	r2, [r3, #0]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	b292      	uxth	r2, r2
 8008612:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008614:	69fb      	ldr	r3, [r7, #28]
 8008616:	3301      	adds	r3, #1
 8008618:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008620:	b29b      	uxth	r3, r3
 8008622:	3b01      	subs	r3, #1
 8008624:	b29a      	uxth	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008632:	b29b      	uxth	r3, r3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1c8      	bne.n	80085ca <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	2200      	movs	r2, #0
 8008640:	2140      	movs	r1, #64	; 0x40
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f000 fb30 	bl	8008ca8 <UART_WaitOnFlagUntilTimeout>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d004      	beq.n	8008658 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2220      	movs	r2, #32
 8008652:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	e005      	b.n	8008664 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2220      	movs	r2, #32
 800865c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	e000      	b.n	8008664 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8008662:	2302      	movs	r3, #2
  }
}
 8008664:	4618      	mov	r0, r3
 8008666:	3720      	adds	r7, #32
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b088      	sub	sp, #32
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	431a      	orrs	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	695b      	ldr	r3, [r3, #20]
 8008686:	431a      	orrs	r2, r3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	69db      	ldr	r3, [r3, #28]
 800868c:	4313      	orrs	r3, r2
 800868e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800869a:	f023 030c 	bic.w	r3, r3, #12
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	6979      	ldr	r1, [r7, #20]
 80086a4:	430b      	orrs	r3, r1
 80086a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6a1b      	ldr	r3, [r3, #32]
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	430a      	orrs	r2, r1
 80086e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4aa7      	ldr	r2, [pc, #668]	; (8008984 <UART_SetConfig+0x318>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d120      	bne.n	800872e <UART_SetConfig+0xc2>
 80086ec:	4ba6      	ldr	r3, [pc, #664]	; (8008988 <UART_SetConfig+0x31c>)
 80086ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f0:	f003 0303 	and.w	r3, r3, #3
 80086f4:	2b03      	cmp	r3, #3
 80086f6:	d817      	bhi.n	8008728 <UART_SetConfig+0xbc>
 80086f8:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <UART_SetConfig+0x94>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008711 	.word	0x08008711
 8008704:	0800871d 	.word	0x0800871d
 8008708:	08008723 	.word	0x08008723
 800870c:	08008717 	.word	0x08008717
 8008710:	2301      	movs	r3, #1
 8008712:	77fb      	strb	r3, [r7, #31]
 8008714:	e0b5      	b.n	8008882 <UART_SetConfig+0x216>
 8008716:	2302      	movs	r3, #2
 8008718:	77fb      	strb	r3, [r7, #31]
 800871a:	e0b2      	b.n	8008882 <UART_SetConfig+0x216>
 800871c:	2304      	movs	r3, #4
 800871e:	77fb      	strb	r3, [r7, #31]
 8008720:	e0af      	b.n	8008882 <UART_SetConfig+0x216>
 8008722:	2308      	movs	r3, #8
 8008724:	77fb      	strb	r3, [r7, #31]
 8008726:	e0ac      	b.n	8008882 <UART_SetConfig+0x216>
 8008728:	2310      	movs	r3, #16
 800872a:	77fb      	strb	r3, [r7, #31]
 800872c:	e0a9      	b.n	8008882 <UART_SetConfig+0x216>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a96      	ldr	r2, [pc, #600]	; (800898c <UART_SetConfig+0x320>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d124      	bne.n	8008782 <UART_SetConfig+0x116>
 8008738:	4b93      	ldr	r3, [pc, #588]	; (8008988 <UART_SetConfig+0x31c>)
 800873a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800873c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008740:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008744:	d011      	beq.n	800876a <UART_SetConfig+0xfe>
 8008746:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800874a:	d817      	bhi.n	800877c <UART_SetConfig+0x110>
 800874c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008750:	d011      	beq.n	8008776 <UART_SetConfig+0x10a>
 8008752:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008756:	d811      	bhi.n	800877c <UART_SetConfig+0x110>
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <UART_SetConfig+0xf8>
 800875c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008760:	d006      	beq.n	8008770 <UART_SetConfig+0x104>
 8008762:	e00b      	b.n	800877c <UART_SetConfig+0x110>
 8008764:	2300      	movs	r3, #0
 8008766:	77fb      	strb	r3, [r7, #31]
 8008768:	e08b      	b.n	8008882 <UART_SetConfig+0x216>
 800876a:	2302      	movs	r3, #2
 800876c:	77fb      	strb	r3, [r7, #31]
 800876e:	e088      	b.n	8008882 <UART_SetConfig+0x216>
 8008770:	2304      	movs	r3, #4
 8008772:	77fb      	strb	r3, [r7, #31]
 8008774:	e085      	b.n	8008882 <UART_SetConfig+0x216>
 8008776:	2308      	movs	r3, #8
 8008778:	77fb      	strb	r3, [r7, #31]
 800877a:	e082      	b.n	8008882 <UART_SetConfig+0x216>
 800877c:	2310      	movs	r3, #16
 800877e:	77fb      	strb	r3, [r7, #31]
 8008780:	e07f      	b.n	8008882 <UART_SetConfig+0x216>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a82      	ldr	r2, [pc, #520]	; (8008990 <UART_SetConfig+0x324>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d124      	bne.n	80087d6 <UART_SetConfig+0x16a>
 800878c:	4b7e      	ldr	r3, [pc, #504]	; (8008988 <UART_SetConfig+0x31c>)
 800878e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008790:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008794:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008798:	d011      	beq.n	80087be <UART_SetConfig+0x152>
 800879a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800879e:	d817      	bhi.n	80087d0 <UART_SetConfig+0x164>
 80087a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087a4:	d011      	beq.n	80087ca <UART_SetConfig+0x15e>
 80087a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80087aa:	d811      	bhi.n	80087d0 <UART_SetConfig+0x164>
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <UART_SetConfig+0x14c>
 80087b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087b4:	d006      	beq.n	80087c4 <UART_SetConfig+0x158>
 80087b6:	e00b      	b.n	80087d0 <UART_SetConfig+0x164>
 80087b8:	2300      	movs	r3, #0
 80087ba:	77fb      	strb	r3, [r7, #31]
 80087bc:	e061      	b.n	8008882 <UART_SetConfig+0x216>
 80087be:	2302      	movs	r3, #2
 80087c0:	77fb      	strb	r3, [r7, #31]
 80087c2:	e05e      	b.n	8008882 <UART_SetConfig+0x216>
 80087c4:	2304      	movs	r3, #4
 80087c6:	77fb      	strb	r3, [r7, #31]
 80087c8:	e05b      	b.n	8008882 <UART_SetConfig+0x216>
 80087ca:	2308      	movs	r3, #8
 80087cc:	77fb      	strb	r3, [r7, #31]
 80087ce:	e058      	b.n	8008882 <UART_SetConfig+0x216>
 80087d0:	2310      	movs	r3, #16
 80087d2:	77fb      	strb	r3, [r7, #31]
 80087d4:	e055      	b.n	8008882 <UART_SetConfig+0x216>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a6e      	ldr	r2, [pc, #440]	; (8008994 <UART_SetConfig+0x328>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d124      	bne.n	800882a <UART_SetConfig+0x1be>
 80087e0:	4b69      	ldr	r3, [pc, #420]	; (8008988 <UART_SetConfig+0x31c>)
 80087e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80087e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087ec:	d011      	beq.n	8008812 <UART_SetConfig+0x1a6>
 80087ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087f2:	d817      	bhi.n	8008824 <UART_SetConfig+0x1b8>
 80087f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087f8:	d011      	beq.n	800881e <UART_SetConfig+0x1b2>
 80087fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087fe:	d811      	bhi.n	8008824 <UART_SetConfig+0x1b8>
 8008800:	2b00      	cmp	r3, #0
 8008802:	d003      	beq.n	800880c <UART_SetConfig+0x1a0>
 8008804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008808:	d006      	beq.n	8008818 <UART_SetConfig+0x1ac>
 800880a:	e00b      	b.n	8008824 <UART_SetConfig+0x1b8>
 800880c:	2300      	movs	r3, #0
 800880e:	77fb      	strb	r3, [r7, #31]
 8008810:	e037      	b.n	8008882 <UART_SetConfig+0x216>
 8008812:	2302      	movs	r3, #2
 8008814:	77fb      	strb	r3, [r7, #31]
 8008816:	e034      	b.n	8008882 <UART_SetConfig+0x216>
 8008818:	2304      	movs	r3, #4
 800881a:	77fb      	strb	r3, [r7, #31]
 800881c:	e031      	b.n	8008882 <UART_SetConfig+0x216>
 800881e:	2308      	movs	r3, #8
 8008820:	77fb      	strb	r3, [r7, #31]
 8008822:	e02e      	b.n	8008882 <UART_SetConfig+0x216>
 8008824:	2310      	movs	r3, #16
 8008826:	77fb      	strb	r3, [r7, #31]
 8008828:	e02b      	b.n	8008882 <UART_SetConfig+0x216>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a5a      	ldr	r2, [pc, #360]	; (8008998 <UART_SetConfig+0x32c>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d124      	bne.n	800887e <UART_SetConfig+0x212>
 8008834:	4b54      	ldr	r3, [pc, #336]	; (8008988 <UART_SetConfig+0x31c>)
 8008836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008838:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800883c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008840:	d011      	beq.n	8008866 <UART_SetConfig+0x1fa>
 8008842:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008846:	d817      	bhi.n	8008878 <UART_SetConfig+0x20c>
 8008848:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800884c:	d011      	beq.n	8008872 <UART_SetConfig+0x206>
 800884e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008852:	d811      	bhi.n	8008878 <UART_SetConfig+0x20c>
 8008854:	2b00      	cmp	r3, #0
 8008856:	d003      	beq.n	8008860 <UART_SetConfig+0x1f4>
 8008858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800885c:	d006      	beq.n	800886c <UART_SetConfig+0x200>
 800885e:	e00b      	b.n	8008878 <UART_SetConfig+0x20c>
 8008860:	2300      	movs	r3, #0
 8008862:	77fb      	strb	r3, [r7, #31]
 8008864:	e00d      	b.n	8008882 <UART_SetConfig+0x216>
 8008866:	2302      	movs	r3, #2
 8008868:	77fb      	strb	r3, [r7, #31]
 800886a:	e00a      	b.n	8008882 <UART_SetConfig+0x216>
 800886c:	2304      	movs	r3, #4
 800886e:	77fb      	strb	r3, [r7, #31]
 8008870:	e007      	b.n	8008882 <UART_SetConfig+0x216>
 8008872:	2308      	movs	r3, #8
 8008874:	77fb      	strb	r3, [r7, #31]
 8008876:	e004      	b.n	8008882 <UART_SetConfig+0x216>
 8008878:	2310      	movs	r3, #16
 800887a:	77fb      	strb	r3, [r7, #31]
 800887c:	e001      	b.n	8008882 <UART_SetConfig+0x216>
 800887e:	2310      	movs	r3, #16
 8008880:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800888a:	d15b      	bne.n	8008944 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800888c:	7ffb      	ldrb	r3, [r7, #31]
 800888e:	2b08      	cmp	r3, #8
 8008890:	d827      	bhi.n	80088e2 <UART_SetConfig+0x276>
 8008892:	a201      	add	r2, pc, #4	; (adr r2, 8008898 <UART_SetConfig+0x22c>)
 8008894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008898:	080088bd 	.word	0x080088bd
 800889c:	080088c5 	.word	0x080088c5
 80088a0:	080088cd 	.word	0x080088cd
 80088a4:	080088e3 	.word	0x080088e3
 80088a8:	080088d3 	.word	0x080088d3
 80088ac:	080088e3 	.word	0x080088e3
 80088b0:	080088e3 	.word	0x080088e3
 80088b4:	080088e3 	.word	0x080088e3
 80088b8:	080088db 	.word	0x080088db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088bc:	f7fe f90e 	bl	8006adc <HAL_RCC_GetPCLK1Freq>
 80088c0:	61b8      	str	r0, [r7, #24]
        break;
 80088c2:	e013      	b.n	80088ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088c4:	f7fe f92c 	bl	8006b20 <HAL_RCC_GetPCLK2Freq>
 80088c8:	61b8      	str	r0, [r7, #24]
        break;
 80088ca:	e00f      	b.n	80088ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088cc:	4b33      	ldr	r3, [pc, #204]	; (800899c <UART_SetConfig+0x330>)
 80088ce:	61bb      	str	r3, [r7, #24]
        break;
 80088d0:	e00c      	b.n	80088ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088d2:	f7fe f88d 	bl	80069f0 <HAL_RCC_GetSysClockFreq>
 80088d6:	61b8      	str	r0, [r7, #24]
        break;
 80088d8:	e008      	b.n	80088ec <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088de:	61bb      	str	r3, [r7, #24]
        break;
 80088e0:	e004      	b.n	80088ec <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	77bb      	strb	r3, [r7, #30]
        break;
 80088ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f000 8082 	beq.w	80089f8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	005a      	lsls	r2, r3, #1
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	085b      	lsrs	r3, r3, #1
 80088fe:	441a      	add	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	fbb2 f3f3 	udiv	r3, r2, r3
 8008908:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	2b0f      	cmp	r3, #15
 800890e:	d916      	bls.n	800893e <UART_SetConfig+0x2d2>
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008916:	d212      	bcs.n	800893e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	b29b      	uxth	r3, r3
 800891c:	f023 030f 	bic.w	r3, r3, #15
 8008920:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	085b      	lsrs	r3, r3, #1
 8008926:	b29b      	uxth	r3, r3
 8008928:	f003 0307 	and.w	r3, r3, #7
 800892c:	b29a      	uxth	r2, r3
 800892e:	89fb      	ldrh	r3, [r7, #14]
 8008930:	4313      	orrs	r3, r2
 8008932:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	89fa      	ldrh	r2, [r7, #14]
 800893a:	60da      	str	r2, [r3, #12]
 800893c:	e05c      	b.n	80089f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	77bb      	strb	r3, [r7, #30]
 8008942:	e059      	b.n	80089f8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008944:	7ffb      	ldrb	r3, [r7, #31]
 8008946:	2b08      	cmp	r3, #8
 8008948:	d835      	bhi.n	80089b6 <UART_SetConfig+0x34a>
 800894a:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <UART_SetConfig+0x2e4>)
 800894c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008950:	08008975 	.word	0x08008975
 8008954:	0800897d 	.word	0x0800897d
 8008958:	080089a1 	.word	0x080089a1
 800895c:	080089b7 	.word	0x080089b7
 8008960:	080089a7 	.word	0x080089a7
 8008964:	080089b7 	.word	0x080089b7
 8008968:	080089b7 	.word	0x080089b7
 800896c:	080089b7 	.word	0x080089b7
 8008970:	080089af 	.word	0x080089af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008974:	f7fe f8b2 	bl	8006adc <HAL_RCC_GetPCLK1Freq>
 8008978:	61b8      	str	r0, [r7, #24]
        break;
 800897a:	e021      	b.n	80089c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800897c:	f7fe f8d0 	bl	8006b20 <HAL_RCC_GetPCLK2Freq>
 8008980:	61b8      	str	r0, [r7, #24]
        break;
 8008982:	e01d      	b.n	80089c0 <UART_SetConfig+0x354>
 8008984:	40013800 	.word	0x40013800
 8008988:	40021000 	.word	0x40021000
 800898c:	40004400 	.word	0x40004400
 8008990:	40004800 	.word	0x40004800
 8008994:	40004c00 	.word	0x40004c00
 8008998:	40005000 	.word	0x40005000
 800899c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089a0:	4b1b      	ldr	r3, [pc, #108]	; (8008a10 <UART_SetConfig+0x3a4>)
 80089a2:	61bb      	str	r3, [r7, #24]
        break;
 80089a4:	e00c      	b.n	80089c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089a6:	f7fe f823 	bl	80069f0 <HAL_RCC_GetSysClockFreq>
 80089aa:	61b8      	str	r0, [r7, #24]
        break;
 80089ac:	e008      	b.n	80089c0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089b2:	61bb      	str	r3, [r7, #24]
        break;
 80089b4:	e004      	b.n	80089c0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	77bb      	strb	r3, [r7, #30]
        break;
 80089be:	bf00      	nop
    }

    if (pclk != 0U)
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d018      	beq.n	80089f8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	085a      	lsrs	r2, r3, #1
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	441a      	add	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	2b0f      	cmp	r3, #15
 80089de:	d909      	bls.n	80089f4 <UART_SetConfig+0x388>
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089e6:	d205      	bcs.n	80089f4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	b29a      	uxth	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	60da      	str	r2, [r3, #12]
 80089f2:	e001      	b.n	80089f8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008a04:	7fbb      	ldrb	r3, [r7, #30]
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3720      	adds	r7, #32
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	007a1200 	.word	0x007a1200

08008a14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a20:	f003 0301 	and.w	r3, r3, #1
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d00a      	beq.n	8008a3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	430a      	orrs	r2, r1
 8008a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	f003 0304 	and.w	r3, r3, #4
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	f003 0308 	and.w	r3, r3, #8
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	f003 0310 	and.w	r3, r3, #16
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689b      	ldr	r3, [r3, #8]
 8008ab6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aca:	f003 0320 	and.w	r3, r3, #32
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d01a      	beq.n	8008b2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b12:	d10a      	bne.n	8008b2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	430a      	orrs	r2, r1
 8008b28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00a      	beq.n	8008b4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	430a      	orrs	r2, r1
 8008b4a:	605a      	str	r2, [r3, #4]
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	370c      	adds	r7, #12
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr

08008b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b098      	sub	sp, #96	; 0x60
 8008b5c:	af02      	add	r7, sp, #8
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b68:	f7fa f838 	bl	8002bdc <HAL_GetTick>
 8008b6c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0308 	and.w	r3, r3, #8
 8008b78:	2b08      	cmp	r3, #8
 8008b7a:	d12e      	bne.n	8008bda <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b84:	2200      	movs	r2, #0
 8008b86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f88c 	bl	8008ca8 <UART_WaitOnFlagUntilTimeout>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d021      	beq.n	8008bda <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9e:	e853 3f00 	ldrex	r3, [r3]
 8008ba2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008baa:	653b      	str	r3, [r7, #80]	; 0x50
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8008bb6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bbc:	e841 2300 	strex	r3, r2, [r1]
 8008bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1e6      	bne.n	8008b96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2220      	movs	r2, #32
 8008bcc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bd6:	2303      	movs	r3, #3
 8008bd8:	e062      	b.n	8008ca0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f003 0304 	and.w	r3, r3, #4
 8008be4:	2b04      	cmp	r3, #4
 8008be6:	d149      	bne.n	8008c7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008be8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f856 	bl	8008ca8 <UART_WaitOnFlagUntilTimeout>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d03c      	beq.n	8008c7c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	623b      	str	r3, [r7, #32]
   return(result);
 8008c10:	6a3b      	ldr	r3, [r7, #32]
 8008c12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c20:	633b      	str	r3, [r7, #48]	; 0x30
 8008c22:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e6      	bne.n	8008c02 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	3308      	adds	r3, #8
 8008c3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	e853 3f00 	ldrex	r3, [r3]
 8008c42:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0301 	bic.w	r3, r3, #1
 8008c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	3308      	adds	r3, #8
 8008c52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c54:	61fa      	str	r2, [r7, #28]
 8008c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c58:	69b9      	ldr	r1, [r7, #24]
 8008c5a:	69fa      	ldr	r2, [r7, #28]
 8008c5c:	e841 2300 	strex	r3, r2, [r1]
 8008c60:	617b      	str	r3, [r7, #20]
   return(result);
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1e5      	bne.n	8008c34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e011      	b.n	8008ca0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2220      	movs	r2, #32
 8008c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3758      	adds	r7, #88	; 0x58
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cb8:	e049      	b.n	8008d4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d045      	beq.n	8008d4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cc2:	f7f9 ff8b 	bl	8002bdc <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d302      	bcc.n	8008cd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e048      	b.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0304 	and.w	r3, r3, #4
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d031      	beq.n	8008d4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	f003 0308 	and.w	r3, r3, #8
 8008cf4:	2b08      	cmp	r3, #8
 8008cf6:	d110      	bne.n	8008d1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	2208      	movs	r2, #8
 8008cfe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f000 f838 	bl	8008d76 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2208      	movs	r2, #8
 8008d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e029      	b.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d28:	d111      	bne.n	8008d4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 f81e 	bl	8008d76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2220      	movs	r2, #32
 8008d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e00f      	b.n	8008d6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	69da      	ldr	r2, [r3, #28]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	4013      	ands	r3, r2
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	bf0c      	ite	eq
 8008d5e:	2301      	moveq	r3, #1
 8008d60:	2300      	movne	r3, #0
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	79fb      	ldrb	r3, [r7, #7]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d0a6      	beq.n	8008cba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d76:	b480      	push	{r7}
 8008d78:	b095      	sub	sp, #84	; 0x54
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d86:	e853 3f00 	ldrex	r3, [r3]
 8008d8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8008d9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008da2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e6      	bne.n	8008d7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3308      	adds	r3, #8
 8008db6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	e853 3f00 	ldrex	r3, [r3]
 8008dbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	f023 0301 	bic.w	r3, r3, #1
 8008dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	3308      	adds	r3, #8
 8008dce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e5      	bne.n	8008db0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d118      	bne.n	8008e1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	f023 0310 	bic.w	r3, r3, #16
 8008e00:	647b      	str	r3, [r7, #68]	; 0x44
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e0a:	61bb      	str	r3, [r7, #24]
 8008e0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	6979      	ldr	r1, [r7, #20]
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	613b      	str	r3, [r7, #16]
   return(result);
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e6      	bne.n	8008dec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2220      	movs	r2, #32
 8008e22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008e32:	bf00      	nop
 8008e34:	3754      	adds	r7, #84	; 0x54
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008e3e:	b480      	push	{r7}
 8008e40:	b085      	sub	sp, #20
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008e4e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008e52:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b085      	sub	sp, #20
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008e74:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8008e78:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	b29b      	uxth	r3, r3
 8008e86:	43db      	mvns	r3, r3
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	4013      	ands	r3, r2
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3714      	adds	r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	f107 0014 	add.w	r0, r7, #20
 8008eb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	370c      	adds	r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	b004      	add	sp, #16
 8008ee2:	4770      	bx	lr

08008ee4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b09d      	sub	sp, #116	; 0x74
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f0a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	78db      	ldrb	r3, [r3, #3]
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d81f      	bhi.n	8008f56 <USB_ActivateEndpoint+0x72>
 8008f16:	a201      	add	r2, pc, #4	; (adr r2, 8008f1c <USB_ActivateEndpoint+0x38>)
 8008f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1c:	08008f2d 	.word	0x08008f2d
 8008f20:	08008f49 	.word	0x08008f49
 8008f24:	08008f5f 	.word	0x08008f5f
 8008f28:	08008f3b 	.word	0x08008f3b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008f2c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008f30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f34:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008f38:	e012      	b.n	8008f60 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008f3a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008f3e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008f42:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008f46:	e00b      	b.n	8008f60 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008f48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008f4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008f50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008f54:	e004      	b.n	8008f60 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008f5c:	e000      	b.n	8008f60 <USB_ActivateEndpoint+0x7c>
      break;
 8008f5e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	441a      	add	r2, r3
 8008f6a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	881b      	ldrh	r3, [r3, #0]
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	b21b      	sxth	r3, r3
 8008f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9a:	b21a      	sxth	r2, r3
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	b21b      	sxth	r3, r3
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	b21b      	sxth	r3, r3
 8008fa6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	441a      	add	r2, r3
 8008fb4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	7b1b      	ldrb	r3, [r3, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	f040 8178 	bne.w	80092c6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	785b      	ldrb	r3, [r3, #1]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	f000 8084 	beq.w	80090e8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	61bb      	str	r3, [r7, #24]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	461a      	mov	r2, r3
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	61bb      	str	r3, [r7, #24]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	011a      	lsls	r2, r3, #4
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009002:	617b      	str	r3, [r7, #20]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	88db      	ldrh	r3, [r3, #6]
 8009008:	085b      	lsrs	r3, r3, #1
 800900a:	b29b      	uxth	r3, r3
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	b29a      	uxth	r2, r3
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	009b      	lsls	r3, r3, #2
 800901c:	4413      	add	r3, r2
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	827b      	strh	r3, [r7, #18]
 8009022:	8a7b      	ldrh	r3, [r7, #18]
 8009024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009028:	2b00      	cmp	r3, #0
 800902a:	d01b      	beq.n	8009064 <USB_ActivateEndpoint+0x180>
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	4413      	add	r3, r2
 8009036:	881b      	ldrh	r3, [r3, #0]
 8009038:	b29b      	uxth	r3, r3
 800903a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800903e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009042:	823b      	strh	r3, [r7, #16]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	441a      	add	r2, r3
 800904e:	8a3b      	ldrh	r3, [r7, #16]
 8009050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800905c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009060:	b29b      	uxth	r3, r3
 8009062:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	78db      	ldrb	r3, [r3, #3]
 8009068:	2b01      	cmp	r3, #1
 800906a:	d020      	beq.n	80090ae <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	881b      	ldrh	r3, [r3, #0]
 8009078:	b29b      	uxth	r3, r3
 800907a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800907e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009082:	81bb      	strh	r3, [r7, #12]
 8009084:	89bb      	ldrh	r3, [r7, #12]
 8009086:	f083 0320 	eor.w	r3, r3, #32
 800908a:	81bb      	strh	r3, [r7, #12]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	441a      	add	r2, r3
 8009096:	89bb      	ldrh	r3, [r7, #12]
 8009098:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800909c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	8013      	strh	r3, [r2, #0]
 80090ac:	e2d5      	b.n	800965a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80090ae:	687a      	ldr	r2, [r7, #4]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090c4:	81fb      	strh	r3, [r7, #14]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	441a      	add	r2, r3
 80090d0:	89fb      	ldrh	r3, [r7, #14]
 80090d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	8013      	strh	r3, [r2, #0]
 80090e6:	e2b8      	b.n	800965a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	633b      	str	r3, [r7, #48]	; 0x30
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	461a      	mov	r2, r3
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	4413      	add	r3, r2
 80090fa:	633b      	str	r3, [r7, #48]	; 0x30
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	011a      	lsls	r2, r3, #4
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	4413      	add	r3, r2
 8009106:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800910a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	88db      	ldrh	r3, [r3, #6]
 8009110:	085b      	lsrs	r3, r3, #1
 8009112:	b29b      	uxth	r3, r3
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	b29a      	uxth	r2, r3
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009126:	b29b      	uxth	r3, r3
 8009128:	461a      	mov	r2, r3
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	4413      	add	r3, r2
 800912e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	011a      	lsls	r2, r3, #4
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	4413      	add	r3, r2
 800913a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800913e:	627b      	str	r3, [r7, #36]	; 0x24
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	881b      	ldrh	r3, [r3, #0]
 8009144:	b29b      	uxth	r3, r3
 8009146:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800914a:	b29a      	uxth	r2, r3
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	801a      	strh	r2, [r3, #0]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	2b3e      	cmp	r3, #62	; 0x3e
 8009156:	d91d      	bls.n	8009194 <USB_ActivateEndpoint+0x2b0>
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	095b      	lsrs	r3, r3, #5
 800915e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	f003 031f 	and.w	r3, r3, #31
 8009168:	2b00      	cmp	r3, #0
 800916a:	d102      	bne.n	8009172 <USB_ActivateEndpoint+0x28e>
 800916c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800916e:	3b01      	subs	r3, #1
 8009170:	66bb      	str	r3, [r7, #104]	; 0x68
 8009172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009174:	881b      	ldrh	r3, [r3, #0]
 8009176:	b29a      	uxth	r2, r3
 8009178:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800917a:	b29b      	uxth	r3, r3
 800917c:	029b      	lsls	r3, r3, #10
 800917e:	b29b      	uxth	r3, r3
 8009180:	4313      	orrs	r3, r2
 8009182:	b29b      	uxth	r3, r3
 8009184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800918c:	b29a      	uxth	r2, r3
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	801a      	strh	r2, [r3, #0]
 8009192:	e026      	b.n	80091e2 <USB_ActivateEndpoint+0x2fe>
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10a      	bne.n	80091b2 <USB_ActivateEndpoint+0x2ce>
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	801a      	strh	r2, [r3, #0]
 80091b0:	e017      	b.n	80091e2 <USB_ActivateEndpoint+0x2fe>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	085b      	lsrs	r3, r3, #1
 80091b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d002      	beq.n	80091cc <USB_ActivateEndpoint+0x2e8>
 80091c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091c8:	3301      	adds	r3, #1
 80091ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ce:	881b      	ldrh	r3, [r3, #0]
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	029b      	lsls	r3, r3, #10
 80091d8:	b29b      	uxth	r3, r3
 80091da:	4313      	orrs	r3, r2
 80091dc:	b29a      	uxth	r2, r3
 80091de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	781b      	ldrb	r3, [r3, #0]
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	881b      	ldrh	r3, [r3, #0]
 80091ee:	847b      	strh	r3, [r7, #34]	; 0x22
 80091f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80091f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d01b      	beq.n	8009232 <USB_ActivateEndpoint+0x34e>
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4413      	add	r3, r2
 8009204:	881b      	ldrh	r3, [r3, #0]
 8009206:	b29b      	uxth	r3, r3
 8009208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800920c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009210:	843b      	strh	r3, [r7, #32]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	441a      	add	r2, r3
 800921c:	8c3b      	ldrh	r3, [r7, #32]
 800921e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009222:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009226:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800922a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800922e:	b29b      	uxth	r3, r3
 8009230:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d124      	bne.n	8009284 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4413      	add	r3, r2
 8009244:	881b      	ldrh	r3, [r3, #0]
 8009246:	b29b      	uxth	r3, r3
 8009248:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800924c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009250:	83bb      	strh	r3, [r7, #28]
 8009252:	8bbb      	ldrh	r3, [r7, #28]
 8009254:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009258:	83bb      	strh	r3, [r7, #28]
 800925a:	8bbb      	ldrh	r3, [r7, #28]
 800925c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009260:	83bb      	strh	r3, [r7, #28]
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	441a      	add	r2, r3
 800926c:	8bbb      	ldrh	r3, [r7, #28]
 800926e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800927a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800927e:	b29b      	uxth	r3, r3
 8009280:	8013      	strh	r3, [r2, #0]
 8009282:	e1ea      	b.n	800965a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	881b      	ldrh	r3, [r3, #0]
 8009290:	b29b      	uxth	r3, r3
 8009292:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800929a:	83fb      	strh	r3, [r7, #30]
 800929c:	8bfb      	ldrh	r3, [r7, #30]
 800929e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80092a2:	83fb      	strh	r3, [r7, #30]
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	009b      	lsls	r3, r3, #2
 80092ac:	441a      	add	r2, r3
 80092ae:	8bfb      	ldrh	r3, [r7, #30]
 80092b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	8013      	strh	r3, [r2, #0]
 80092c4:	e1c9      	b.n	800965a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	78db      	ldrb	r3, [r3, #3]
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d11e      	bne.n	800930c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	4413      	add	r3, r2
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092e4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	441a      	add	r2, r3
 80092f2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80092f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092fe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009306:	b29b      	uxth	r3, r3
 8009308:	8013      	strh	r3, [r2, #0]
 800930a:	e01d      	b.n	8009348 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	b29b      	uxth	r3, r3
 800931a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800931e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009322:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	441a      	add	r2, r3
 8009330:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009334:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009338:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800933c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009344:	b29b      	uxth	r3, r3
 8009346:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009352:	b29b      	uxth	r3, r3
 8009354:	461a      	mov	r2, r3
 8009356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009358:	4413      	add	r3, r2
 800935a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	011a      	lsls	r2, r3, #4
 8009362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009364:	4413      	add	r3, r2
 8009366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800936a:	65bb      	str	r3, [r7, #88]	; 0x58
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	891b      	ldrh	r3, [r3, #8]
 8009370:	085b      	lsrs	r3, r3, #1
 8009372:	b29b      	uxth	r3, r3
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800937a:	801a      	strh	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	657b      	str	r3, [r7, #84]	; 0x54
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009386:	b29b      	uxth	r3, r3
 8009388:	461a      	mov	r2, r3
 800938a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800938c:	4413      	add	r3, r2
 800938e:	657b      	str	r3, [r7, #84]	; 0x54
 8009390:	683b      	ldr	r3, [r7, #0]
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	011a      	lsls	r2, r3, #4
 8009396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009398:	4413      	add	r3, r2
 800939a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800939e:	653b      	str	r3, [r7, #80]	; 0x50
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	895b      	ldrh	r3, [r3, #10]
 80093a4:	085b      	lsrs	r3, r3, #1
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	b29a      	uxth	r2, r3
 80093ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093ae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	785b      	ldrb	r3, [r3, #1]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f040 8093 	bne.w	80094e0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80093ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80093ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d01b      	beq.n	800940e <USB_ActivateEndpoint+0x52a>
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	b29b      	uxth	r3, r3
 80093e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	441a      	add	r2, r3
 80093f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80093fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009402:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800940a:	b29b      	uxth	r3, r3
 800940c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	009b      	lsls	r3, r3, #2
 8009416:	4413      	add	r3, r2
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800941c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800941e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009422:	2b00      	cmp	r3, #0
 8009424:	d01b      	beq.n	800945e <USB_ActivateEndpoint+0x57a>
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	781b      	ldrb	r3, [r3, #0]
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	881b      	ldrh	r3, [r3, #0]
 8009432:	b29b      	uxth	r3, r3
 8009434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800943c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	441a      	add	r2, r3
 8009448:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800944a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800944e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009456:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800945a:	b29b      	uxth	r3, r3
 800945c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	4413      	add	r3, r2
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	b29b      	uxth	r3, r3
 800946c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009474:	873b      	strh	r3, [r7, #56]	; 0x38
 8009476:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009478:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800947c:	873b      	strh	r3, [r7, #56]	; 0x38
 800947e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009480:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009484:	873b      	strh	r3, [r7, #56]	; 0x38
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	009b      	lsls	r3, r3, #2
 800948e:	441a      	add	r2, r3
 8009490:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009492:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009496:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800949a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800949e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094bc:	86fb      	strh	r3, [r7, #54]	; 0x36
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	441a      	add	r2, r3
 80094c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80094ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094da:	b29b      	uxth	r3, r3
 80094dc:	8013      	strh	r3, [r2, #0]
 80094de:	e0bc      	b.n	800965a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80094f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80094f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d01d      	beq.n	8009538 <USB_ActivateEndpoint+0x654>
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	4413      	add	r3, r2
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	b29b      	uxth	r3, r3
 800950a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800950e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009512:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	441a      	add	r2, r3
 8009520:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009524:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009528:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800952c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009530:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009534:	b29b      	uxth	r3, r3
 8009536:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	781b      	ldrb	r3, [r3, #0]
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	4413      	add	r3, r2
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009548:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800954c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009550:	2b00      	cmp	r3, #0
 8009552:	d01d      	beq.n	8009590 <USB_ActivateEndpoint+0x6ac>
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	009b      	lsls	r3, r3, #2
 800955c:	4413      	add	r3, r2
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	b29b      	uxth	r3, r3
 8009562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800956a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	441a      	add	r2, r3
 8009578:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800957c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009588:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800958c:	b29b      	uxth	r3, r3
 800958e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	78db      	ldrb	r3, [r3, #3]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d024      	beq.n	80095e2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80095b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80095b6:	f083 0320 	eor.w	r3, r3, #32
 80095ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	441a      	add	r2, r3
 80095c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80095cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095dc:	b29b      	uxth	r3, r3
 80095de:	8013      	strh	r3, [r2, #0]
 80095e0:	e01d      	b.n	800961e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095f8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	441a      	add	r2, r3
 8009606:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800960a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800960e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800961a:	b29b      	uxth	r3, r3
 800961c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	881b      	ldrh	r3, [r3, #0]
 800962a:	b29b      	uxth	r3, r3
 800962c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009634:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	009b      	lsls	r3, r3, #2
 8009640:	441a      	add	r2, r3
 8009642:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800964a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800964e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009656:	b29b      	uxth	r3, r3
 8009658:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800965a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800965e:	4618      	mov	r0, r3
 8009660:	3774      	adds	r7, #116	; 0x74
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop

0800966c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800966c:	b480      	push	{r7}
 800966e:	b08d      	sub	sp, #52	; 0x34
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	7b1b      	ldrb	r3, [r3, #12]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f040 808e 	bne.w	800979c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	785b      	ldrb	r3, [r3, #1]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d044      	beq.n	8009712 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009688:	687a      	ldr	r2, [r7, #4]
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	81bb      	strh	r3, [r7, #12]
 8009696:	89bb      	ldrh	r3, [r7, #12]
 8009698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800969c:	2b00      	cmp	r3, #0
 800969e:	d01b      	beq.n	80096d8 <USB_DeactivateEndpoint+0x6c>
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	881b      	ldrh	r3, [r3, #0]
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096b6:	817b      	strh	r3, [r7, #10]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	441a      	add	r2, r3
 80096c2:	897b      	ldrh	r3, [r7, #10]
 80096c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80096d4:	b29b      	uxth	r3, r3
 80096d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	009b      	lsls	r3, r3, #2
 80096e0:	4413      	add	r3, r2
 80096e2:	881b      	ldrh	r3, [r3, #0]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ee:	813b      	strh	r3, [r7, #8]
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	441a      	add	r2, r3
 80096fa:	893b      	ldrh	r3, [r7, #8]
 80096fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009700:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800970c:	b29b      	uxth	r3, r3
 800970e:	8013      	strh	r3, [r2, #0]
 8009710:	e192      	b.n	8009a38 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	827b      	strh	r3, [r7, #18]
 8009720:	8a7b      	ldrh	r3, [r7, #18]
 8009722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009726:	2b00      	cmp	r3, #0
 8009728:	d01b      	beq.n	8009762 <USB_DeactivateEndpoint+0xf6>
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	881b      	ldrh	r3, [r3, #0]
 8009736:	b29b      	uxth	r3, r3
 8009738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800973c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009740:	823b      	strh	r3, [r7, #16]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	441a      	add	r2, r3
 800974c:	8a3b      	ldrh	r3, [r7, #16]
 800974e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009752:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009756:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800975a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800975e:	b29b      	uxth	r3, r3
 8009760:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	009b      	lsls	r3, r3, #2
 800976a:	4413      	add	r3, r2
 800976c:	881b      	ldrh	r3, [r3, #0]
 800976e:	b29b      	uxth	r3, r3
 8009770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009778:	81fb      	strh	r3, [r7, #14]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	441a      	add	r2, r3
 8009784:	89fb      	ldrh	r3, [r7, #14]
 8009786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800978a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800978e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009796:	b29b      	uxth	r3, r3
 8009798:	8013      	strh	r3, [r2, #0]
 800979a:	e14d      	b.n	8009a38 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	785b      	ldrb	r3, [r3, #1]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f040 80a5 	bne.w	80098f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4413      	add	r3, r2
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	843b      	strh	r3, [r7, #32]
 80097b4:	8c3b      	ldrh	r3, [r7, #32]
 80097b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d01b      	beq.n	80097f6 <USB_DeactivateEndpoint+0x18a>
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4413      	add	r3, r2
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097d4:	83fb      	strh	r3, [r7, #30]
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	441a      	add	r2, r3
 80097e0:	8bfb      	ldrh	r3, [r7, #30]
 80097e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80097ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	83bb      	strh	r3, [r7, #28]
 8009804:	8bbb      	ldrh	r3, [r7, #28]
 8009806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980a:	2b00      	cmp	r3, #0
 800980c:	d01b      	beq.n	8009846 <USB_DeactivateEndpoint+0x1da>
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	781b      	ldrb	r3, [r3, #0]
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	4413      	add	r3, r2
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	b29b      	uxth	r3, r3
 800981c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009824:	837b      	strh	r3, [r7, #26]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	781b      	ldrb	r3, [r3, #0]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	441a      	add	r2, r3
 8009830:	8b7b      	ldrh	r3, [r7, #26]
 8009832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800983a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800983e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009842:	b29b      	uxth	r3, r3
 8009844:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	b29b      	uxth	r3, r3
 8009854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800985c:	833b      	strh	r3, [r7, #24]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	441a      	add	r2, r3
 8009868:	8b3b      	ldrh	r3, [r7, #24]
 800986a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800986e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009876:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800987a:	b29b      	uxth	r3, r3
 800987c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	881b      	ldrh	r3, [r3, #0]
 800988a:	b29b      	uxth	r3, r3
 800988c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009894:	82fb      	strh	r3, [r7, #22]
 8009896:	687a      	ldr	r2, [r7, #4]
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	441a      	add	r2, r3
 80098a0:	8afb      	ldrh	r3, [r7, #22]
 80098a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098cc:	82bb      	strh	r3, [r7, #20]
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	441a      	add	r2, r3
 80098d8:	8abb      	ldrh	r3, [r7, #20]
 80098da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	8013      	strh	r3, [r2, #0]
 80098ee:	e0a3      	b.n	8009a38 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80098fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009900:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009904:	2b00      	cmp	r3, #0
 8009906:	d01b      	beq.n	8009940 <USB_DeactivateEndpoint+0x2d4>
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	4413      	add	r3, r2
 8009912:	881b      	ldrh	r3, [r3, #0]
 8009914:	b29b      	uxth	r3, r3
 8009916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800991a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800991e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	441a      	add	r2, r3
 800992a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800992c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800993c:	b29b      	uxth	r3, r3
 800993e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	881b      	ldrh	r3, [r3, #0]
 800994c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800994e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009954:	2b00      	cmp	r3, #0
 8009956:	d01b      	beq.n	8009990 <USB_DeactivateEndpoint+0x324>
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	4413      	add	r3, r2
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	b29b      	uxth	r3, r3
 8009966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800996a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800996e:	853b      	strh	r3, [r7, #40]	; 0x28
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	441a      	add	r2, r3
 800997a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800997c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009980:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009984:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009988:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800998c:	b29b      	uxth	r3, r3
 800998e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	009b      	lsls	r3, r3, #2
 8009998:	4413      	add	r3, r2
 800999a:	881b      	ldrh	r3, [r3, #0]
 800999c:	b29b      	uxth	r3, r3
 800999e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	441a      	add	r2, r3
 80099b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80099b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	881b      	ldrh	r3, [r3, #0]
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	781b      	ldrb	r3, [r3, #0]
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	441a      	add	r2, r3
 80099ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	4413      	add	r3, r2
 8009a0a:	881b      	ldrh	r3, [r3, #0]
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a16:	847b      	strh	r3, [r7, #34]	; 0x22
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	441a      	add	r2, r3
 8009a22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3734      	adds	r7, #52	; 0x34
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b0c2      	sub	sp, #264	; 0x108
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a54:	6018      	str	r0, [r3, #0]
 8009a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a5e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009a60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	785b      	ldrb	r3, [r3, #1]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	f040 86b7 	bne.w	800a7e0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009a72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	699a      	ldr	r2, [r3, #24]
 8009a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d908      	bls.n	8009aa0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009a9e:	e007      	b.n	8009ab0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	699b      	ldr	r3, [r3, #24]
 8009aac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	7b1b      	ldrb	r3, [r3, #12]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d13a      	bne.n	8009b36 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6959      	ldr	r1, [r3, #20]
 8009acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	88da      	ldrh	r2, [r3, #6]
 8009ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ae2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009ae6:	6800      	ldr	r0, [r0, #0]
 8009ae8:	f001 fc8c 	bl	800b404 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	613b      	str	r3, [r7, #16]
 8009af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009afc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	461a      	mov	r2, r3
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	613b      	str	r3, [r7, #16]
 8009b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	011a      	lsls	r2, r3, #4
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	4413      	add	r3, r2
 8009b22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	801a      	strh	r2, [r3, #0]
 8009b32:	f000 be1f 	b.w	800a774 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	78db      	ldrb	r3, [r3, #3]
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	f040 8462 	bne.w	800a40c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	6a1a      	ldr	r2, [r3, #32]
 8009b54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	f240 83df 	bls.w	800a324 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	4413      	add	r3, r2
 8009b80:	881b      	ldrh	r3, [r3, #0]
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	441a      	add	r2, r3
 8009baa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6a1a      	ldr	r2, [r3, #32]
 8009bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd2:	1ad2      	subs	r2, r2, r3
 8009bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009be0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009be4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	4413      	add	r3, r2
 8009bfa:	881b      	ldrh	r3, [r3, #0]
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 81c7 	beq.w	8009f96 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	633b      	str	r3, [r7, #48]	; 0x30
 8009c14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	785b      	ldrb	r3, [r3, #1]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d177      	bne.n	8009d14 <USB_EPStartXfer+0x2ce>
 8009c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	461a      	mov	r2, r3
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	4413      	add	r3, r2
 8009c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	011a      	lsls	r2, r3, #4
 8009c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c58:	4413      	add	r3, r2
 8009c5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8009c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c62:	881b      	ldrh	r3, [r3, #0]
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c6a:	b29a      	uxth	r2, r3
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6e:	801a      	strh	r2, [r3, #0]
 8009c70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c74:	2b3e      	cmp	r3, #62	; 0x3e
 8009c76:	d921      	bls.n	8009cbc <USB_EPStartXfer+0x276>
 8009c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c7c:	095b      	lsrs	r3, r3, #5
 8009c7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c86:	f003 031f 	and.w	r3, r3, #31
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d104      	bne.n	8009c98 <USB_EPStartXfer+0x252>
 8009c8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009c92:	3b01      	subs	r3, #1
 8009c94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	881b      	ldrh	r3, [r3, #0]
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ca2:	b29b      	uxth	r3, r3
 8009ca4:	029b      	lsls	r3, r3, #10
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb8:	801a      	strh	r2, [r3, #0]
 8009cba:	e050      	b.n	8009d5e <USB_EPStartXfer+0x318>
 8009cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <USB_EPStartXfer+0x294>
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	881b      	ldrh	r3, [r3, #0]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	801a      	strh	r2, [r3, #0]
 8009cd8:	e041      	b.n	8009d5e <USB_EPStartXfer+0x318>
 8009cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cde:	085b      	lsrs	r3, r3, #1
 8009ce0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d004      	beq.n	8009cfa <USB_EPStartXfer+0x2b4>
 8009cf0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	881b      	ldrh	r3, [r3, #0]
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	029b      	lsls	r3, r3, #10
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	801a      	strh	r2, [r3, #0]
 8009d12:	e024      	b.n	8009d5e <USB_EPStartXfer+0x318>
 8009d14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	785b      	ldrb	r3, [r3, #1]
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d11c      	bne.n	8009d5e <USB_EPStartXfer+0x318>
 8009d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	461a      	mov	r2, r3
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	4413      	add	r3, r2
 8009d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8009d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	011a      	lsls	r2, r3, #4
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	4413      	add	r3, r2
 8009d4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009d52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	895b      	ldrh	r3, [r3, #10]
 8009d6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6959      	ldr	r1, [r3, #20]
 8009d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009d88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009d8c:	6800      	ldr	r0, [r0, #0]
 8009d8e:	f001 fb39 	bl	800b404 <USB_WritePMA>
            ep->xfer_buff += len;
 8009d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	695a      	ldr	r2, [r3, #20]
 8009d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009da2:	441a      	add	r2, r3
 8009da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	6a1a      	ldr	r2, [r3, #32]
 8009dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d90f      	bls.n	8009dec <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009dcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6a1a      	ldr	r2, [r3, #32]
 8009dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ddc:	1ad2      	subs	r2, r2, r3
 8009dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	621a      	str	r2, [r3, #32]
 8009dea:	e00e      	b.n	8009e0a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6a1b      	ldr	r3, [r3, #32]
 8009df8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2200      	movs	r2, #0
 8009e08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d177      	bne.n	8009f0a <USB_EPStartXfer+0x4c4>
 8009e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	61bb      	str	r3, [r7, #24]
 8009e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	461a      	mov	r2, r3
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	4413      	add	r3, r2
 8009e3c:	61bb      	str	r3, [r7, #24]
 8009e3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	011a      	lsls	r2, r3, #4
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	4413      	add	r3, r2
 8009e50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e54:	617b      	str	r3, [r7, #20]
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	881b      	ldrh	r3, [r3, #0]
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e60:	b29a      	uxth	r2, r3
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	801a      	strh	r2, [r3, #0]
 8009e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6a:	2b3e      	cmp	r3, #62	; 0x3e
 8009e6c:	d921      	bls.n	8009eb2 <USB_EPStartXfer+0x46c>
 8009e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e72:	095b      	lsrs	r3, r3, #5
 8009e74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e7c:	f003 031f 	and.w	r3, r3, #31
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d104      	bne.n	8009e8e <USB_EPStartXfer+0x448>
 8009e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e8e:	697b      	ldr	r3, [r7, #20]
 8009e90:	881b      	ldrh	r3, [r3, #0]
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e98:	b29b      	uxth	r3, r3
 8009e9a:	029b      	lsls	r3, r3, #10
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	801a      	strh	r2, [r3, #0]
 8009eb0:	e056      	b.n	8009f60 <USB_EPStartXfer+0x51a>
 8009eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10a      	bne.n	8009ed0 <USB_EPStartXfer+0x48a>
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ec4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ec8:	b29a      	uxth	r2, r3
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	801a      	strh	r2, [r3, #0]
 8009ece:	e047      	b.n	8009f60 <USB_EPStartXfer+0x51a>
 8009ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ed4:	085b      	lsrs	r3, r3, #1
 8009ed6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d004      	beq.n	8009ef0 <USB_EPStartXfer+0x4aa>
 8009ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009eea:	3301      	adds	r3, #1
 8009eec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	881b      	ldrh	r3, [r3, #0]
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	029b      	lsls	r3, r3, #10
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	4313      	orrs	r3, r2
 8009f02:	b29a      	uxth	r2, r3
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	801a      	strh	r2, [r3, #0]
 8009f08:	e02a      	b.n	8009f60 <USB_EPStartXfer+0x51a>
 8009f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	785b      	ldrb	r3, [r3, #1]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d122      	bne.n	8009f60 <USB_EPStartXfer+0x51a>
 8009f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	623b      	str	r3, [r7, #32]
 8009f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	461a      	mov	r2, r3
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	623b      	str	r3, [r7, #32]
 8009f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	011a      	lsls	r2, r3, #4
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f54:	61fb      	str	r3, [r7, #28]
 8009f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	891b      	ldrh	r3, [r3, #8]
 8009f6c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6959      	ldr	r1, [r3, #20]
 8009f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f86:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f8a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f8e:	6800      	ldr	r0, [r0, #0]
 8009f90:	f001 fa38 	bl	800b404 <USB_WritePMA>
 8009f94:	e3ee      	b.n	800a774 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d177      	bne.n	800a096 <USB_EPStartXfer+0x650>
 8009fa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009faa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fc6:	4413      	add	r3, r2
 8009fc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009fca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	011a      	lsls	r2, r3, #4
 8009fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009fda:	4413      	add	r3, r2
 8009fdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8009fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ff0:	801a      	strh	r2, [r3, #0]
 8009ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff6:	2b3e      	cmp	r3, #62	; 0x3e
 8009ff8:	d921      	bls.n	800a03e <USB_EPStartXfer+0x5f8>
 8009ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ffe:	095b      	lsrs	r3, r3, #5
 800a000:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a008:	f003 031f 	and.w	r3, r3, #31
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d104      	bne.n	800a01a <USB_EPStartXfer+0x5d4>
 800a010:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a014:	3b01      	subs	r3, #1
 800a016:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a01a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	b29a      	uxth	r2, r3
 800a020:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a024:	b29b      	uxth	r3, r3
 800a026:	029b      	lsls	r3, r3, #10
 800a028:	b29b      	uxth	r3, r3
 800a02a:	4313      	orrs	r3, r2
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a032:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a036:	b29a      	uxth	r2, r3
 800a038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a03a:	801a      	strh	r2, [r3, #0]
 800a03c:	e056      	b.n	800a0ec <USB_EPStartXfer+0x6a6>
 800a03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10a      	bne.n	800a05c <USB_EPStartXfer+0x616>
 800a046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	b29b      	uxth	r3, r3
 800a04c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a054:	b29a      	uxth	r2, r3
 800a056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a058:	801a      	strh	r2, [r3, #0]
 800a05a:	e047      	b.n	800a0ec <USB_EPStartXfer+0x6a6>
 800a05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a060:	085b      	lsrs	r3, r3, #1
 800a062:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a06a:	f003 0301 	and.w	r3, r3, #1
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d004      	beq.n	800a07c <USB_EPStartXfer+0x636>
 800a072:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a076:	3301      	adds	r3, #1
 800a078:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a07c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	b29a      	uxth	r2, r3
 800a082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a086:	b29b      	uxth	r3, r3
 800a088:	029b      	lsls	r3, r3, #10
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	4313      	orrs	r3, r2
 800a08e:	b29a      	uxth	r2, r3
 800a090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a092:	801a      	strh	r2, [r3, #0]
 800a094:	e02a      	b.n	800a0ec <USB_EPStartXfer+0x6a6>
 800a096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a09a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	785b      	ldrb	r3, [r3, #1]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d122      	bne.n	800a0ec <USB_EPStartXfer+0x6a6>
 800a0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	653b      	str	r3, [r7, #80]	; 0x50
 800a0b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0c6:	4413      	add	r3, r2
 800a0c8:	653b      	str	r3, [r7, #80]	; 0x50
 800a0ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	781b      	ldrb	r3, [r3, #0]
 800a0d6:	011a      	lsls	r2, r3, #4
 800a0d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0da:	4413      	add	r3, r2
 800a0dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a0e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a0ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	891b      	ldrh	r3, [r3, #8]
 800a0f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a100:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6959      	ldr	r1, [r3, #20]
 800a108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a112:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a116:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a11a:	6800      	ldr	r0, [r0, #0]
 800a11c:	f001 f972 	bl	800b404 <USB_WritePMA>
            ep->xfer_buff += len;
 800a120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	695a      	ldr	r2, [r3, #20]
 800a12c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a130:	441a      	add	r2, r3
 800a132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a13e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a142:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6a1a      	ldr	r2, [r3, #32]
 800a14a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a14e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	429a      	cmp	r2, r3
 800a158:	d90f      	bls.n	800a17a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a15a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a15e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6a1a      	ldr	r2, [r3, #32]
 800a166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a16a:	1ad2      	subs	r2, r2, r3
 800a16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	621a      	str	r2, [r3, #32]
 800a178:	e00e      	b.n	800a198 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2200      	movs	r2, #0
 800a196:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	643b      	str	r3, [r7, #64]	; 0x40
 800a1a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	785b      	ldrb	r3, [r3, #1]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d177      	bne.n	800a2a4 <USB_EPStartXfer+0x85e>
 800a1b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1d4:	4413      	add	r3, r2
 800a1d6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	011a      	lsls	r2, r3, #4
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a1ee:	637b      	str	r3, [r7, #52]	; 0x34
 800a1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1f2:	881b      	ldrh	r3, [r3, #0]
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fe:	801a      	strh	r2, [r3, #0]
 800a200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a204:	2b3e      	cmp	r3, #62	; 0x3e
 800a206:	d921      	bls.n	800a24c <USB_EPStartXfer+0x806>
 800a208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a20c:	095b      	lsrs	r3, r3, #5
 800a20e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a212:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a216:	f003 031f 	and.w	r3, r3, #31
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d104      	bne.n	800a228 <USB_EPStartXfer+0x7e2>
 800a21e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a222:	3b01      	subs	r3, #1
 800a224:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a22a:	881b      	ldrh	r3, [r3, #0]
 800a22c:	b29a      	uxth	r2, r3
 800a22e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a232:	b29b      	uxth	r3, r3
 800a234:	029b      	lsls	r3, r3, #10
 800a236:	b29b      	uxth	r3, r3
 800a238:	4313      	orrs	r3, r2
 800a23a:	b29b      	uxth	r3, r3
 800a23c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a244:	b29a      	uxth	r2, r3
 800a246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a248:	801a      	strh	r2, [r3, #0]
 800a24a:	e050      	b.n	800a2ee <USB_EPStartXfer+0x8a8>
 800a24c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10a      	bne.n	800a26a <USB_EPStartXfer+0x824>
 800a254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a256:	881b      	ldrh	r3, [r3, #0]
 800a258:	b29b      	uxth	r3, r3
 800a25a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a25e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a262:	b29a      	uxth	r2, r3
 800a264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a266:	801a      	strh	r2, [r3, #0]
 800a268:	e041      	b.n	800a2ee <USB_EPStartXfer+0x8a8>
 800a26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a26e:	085b      	lsrs	r3, r3, #1
 800a270:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a278:	f003 0301 	and.w	r3, r3, #1
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d004      	beq.n	800a28a <USB_EPStartXfer+0x844>
 800a280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a284:	3301      	adds	r3, #1
 800a286:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28c:	881b      	ldrh	r3, [r3, #0]
 800a28e:	b29a      	uxth	r2, r3
 800a290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a294:	b29b      	uxth	r3, r3
 800a296:	029b      	lsls	r3, r3, #10
 800a298:	b29b      	uxth	r3, r3
 800a29a:	4313      	orrs	r3, r2
 800a29c:	b29a      	uxth	r2, r3
 800a29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2a0:	801a      	strh	r2, [r3, #0]
 800a2a2:	e024      	b.n	800a2ee <USB_EPStartXfer+0x8a8>
 800a2a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	785b      	ldrb	r3, [r3, #1]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d11c      	bne.n	800a2ee <USB_EPStartXfer+0x8a8>
 800a2b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2c2:	b29b      	uxth	r3, r3
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c8:	4413      	add	r3, r2
 800a2ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a2cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	011a      	lsls	r2, r3, #4
 800a2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2dc:	4413      	add	r3, r2
 800a2de:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a2ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	895b      	ldrh	r3, [r3, #10]
 800a2fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a302:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	6959      	ldr	r1, [r3, #20]
 800a30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a30e:	b29b      	uxth	r3, r3
 800a310:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a314:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a318:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a31c:	6800      	ldr	r0, [r0, #0]
 800a31e:	f001 f871 	bl	800b404 <USB_WritePMA>
 800a322:	e227      	b.n	800a774 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a324:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a328:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	b29b      	uxth	r3, r3
 800a352:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a35a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a36c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	441a      	add	r2, r3
 800a378:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a37c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a394:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a39c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3b0:	4413      	add	r3, r2
 800a3b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	011a      	lsls	r2, r3, #4
 800a3c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3c4:	4413      	add	r3, r2
 800a3c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a3ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800a3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a3d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	891b      	ldrh	r3, [r3, #8]
 800a3e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a3e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6959      	ldr	r1, [r3, #20]
 800a3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a3fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a400:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a404:	6800      	ldr	r0, [r0, #0]
 800a406:	f000 fffd 	bl	800b404 <USB_WritePMA>
 800a40a:	e1b3      	b.n	800a774 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6a1a      	ldr	r2, [r3, #32]
 800a418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a41c:	1ad2      	subs	r2, r2, r3
 800a41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a42a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a42e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	881b      	ldrh	r3, [r3, #0]
 800a446:	b29b      	uxth	r3, r3
 800a448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	f000 80c6 	beq.w	800a5de <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	673b      	str	r3, [r7, #112]	; 0x70
 800a45e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a462:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	785b      	ldrb	r3, [r3, #1]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d177      	bne.n	800a55e <USB_EPStartXfer+0xb18>
 800a46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a472:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	66bb      	str	r3, [r7, #104]	; 0x68
 800a47a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a47e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a488:	b29b      	uxth	r3, r3
 800a48a:	461a      	mov	r2, r3
 800a48c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a48e:	4413      	add	r3, r2
 800a490:	66bb      	str	r3, [r7, #104]	; 0x68
 800a492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	011a      	lsls	r2, r3, #4
 800a4a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4a8:	667b      	str	r3, [r7, #100]	; 0x64
 800a4aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4ac:	881b      	ldrh	r3, [r3, #0]
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4b4:	b29a      	uxth	r2, r3
 800a4b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4b8:	801a      	strh	r2, [r3, #0]
 800a4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4be:	2b3e      	cmp	r3, #62	; 0x3e
 800a4c0:	d921      	bls.n	800a506 <USB_EPStartXfer+0xac0>
 800a4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c6:	095b      	lsrs	r3, r3, #5
 800a4c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d0:	f003 031f 	and.w	r3, r3, #31
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d104      	bne.n	800a4e2 <USB_EPStartXfer+0xa9c>
 800a4d8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a4e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4e4:	881b      	ldrh	r3, [r3, #0]
 800a4e6:	b29a      	uxth	r2, r3
 800a4e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	029b      	lsls	r3, r3, #10
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a502:	801a      	strh	r2, [r3, #0]
 800a504:	e050      	b.n	800a5a8 <USB_EPStartXfer+0xb62>
 800a506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10a      	bne.n	800a524 <USB_EPStartXfer+0xade>
 800a50e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a510:	881b      	ldrh	r3, [r3, #0]
 800a512:	b29b      	uxth	r3, r3
 800a514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a520:	801a      	strh	r2, [r3, #0]
 800a522:	e041      	b.n	800a5a8 <USB_EPStartXfer+0xb62>
 800a524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a528:	085b      	lsrs	r3, r3, #1
 800a52a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a52e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	2b00      	cmp	r3, #0
 800a538:	d004      	beq.n	800a544 <USB_EPStartXfer+0xafe>
 800a53a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a53e:	3301      	adds	r3, #1
 800a540:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a546:	881b      	ldrh	r3, [r3, #0]
 800a548:	b29a      	uxth	r2, r3
 800a54a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a54e:	b29b      	uxth	r3, r3
 800a550:	029b      	lsls	r3, r3, #10
 800a552:	b29b      	uxth	r3, r3
 800a554:	4313      	orrs	r3, r2
 800a556:	b29a      	uxth	r2, r3
 800a558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a55a:	801a      	strh	r2, [r3, #0]
 800a55c:	e024      	b.n	800a5a8 <USB_EPStartXfer+0xb62>
 800a55e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	785b      	ldrb	r3, [r3, #1]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d11c      	bne.n	800a5a8 <USB_EPStartXfer+0xb62>
 800a56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	461a      	mov	r2, r3
 800a580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a582:	4413      	add	r3, r2
 800a584:	673b      	str	r3, [r7, #112]	; 0x70
 800a586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a58a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	781b      	ldrb	r3, [r3, #0]
 800a592:	011a      	lsls	r2, r3, #4
 800a594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a596:	4413      	add	r3, r2
 800a598:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a59c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a2:	b29a      	uxth	r2, r3
 800a5a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5a6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a5a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	895b      	ldrh	r3, [r3, #10]
 800a5b4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	6959      	ldr	r1, [r3, #20]
 800a5c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a5ce:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a5d2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a5d6:	6800      	ldr	r0, [r0, #0]
 800a5d8:	f000 ff14 	bl	800b404 <USB_WritePMA>
 800a5dc:	e0ca      	b.n	800a774 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	785b      	ldrb	r3, [r3, #1]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d177      	bne.n	800a6de <USB_EPStartXfer+0xc98>
 800a5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a5fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a608:	b29b      	uxth	r3, r3
 800a60a:	461a      	mov	r2, r3
 800a60c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a60e:	4413      	add	r3, r2
 800a610:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	011a      	lsls	r2, r3, #4
 800a620:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a622:	4413      	add	r3, r2
 800a624:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a628:	67bb      	str	r3, [r7, #120]	; 0x78
 800a62a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a62c:	881b      	ldrh	r3, [r3, #0]
 800a62e:	b29b      	uxth	r3, r3
 800a630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a634:	b29a      	uxth	r2, r3
 800a636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a638:	801a      	strh	r2, [r3, #0]
 800a63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a63e:	2b3e      	cmp	r3, #62	; 0x3e
 800a640:	d921      	bls.n	800a686 <USB_EPStartXfer+0xc40>
 800a642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a646:	095b      	lsrs	r3, r3, #5
 800a648:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a650:	f003 031f 	and.w	r3, r3, #31
 800a654:	2b00      	cmp	r3, #0
 800a656:	d104      	bne.n	800a662 <USB_EPStartXfer+0xc1c>
 800a658:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a65c:	3b01      	subs	r3, #1
 800a65e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a662:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a664:	881b      	ldrh	r3, [r3, #0]
 800a666:	b29a      	uxth	r2, r3
 800a668:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	029b      	lsls	r3, r3, #10
 800a670:	b29b      	uxth	r3, r3
 800a672:	4313      	orrs	r3, r2
 800a674:	b29b      	uxth	r3, r3
 800a676:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a67a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a67e:	b29a      	uxth	r2, r3
 800a680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a682:	801a      	strh	r2, [r3, #0]
 800a684:	e05c      	b.n	800a740 <USB_EPStartXfer+0xcfa>
 800a686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10a      	bne.n	800a6a4 <USB_EPStartXfer+0xc5e>
 800a68e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	b29b      	uxth	r3, r3
 800a694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6a0:	801a      	strh	r2, [r3, #0]
 800a6a2:	e04d      	b.n	800a740 <USB_EPStartXfer+0xcfa>
 800a6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a8:	085b      	lsrs	r3, r3, #1
 800a6aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d004      	beq.n	800a6c4 <USB_EPStartXfer+0xc7e>
 800a6ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a6be:	3301      	adds	r3, #1
 800a6c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a6c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6c6:	881b      	ldrh	r3, [r3, #0]
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	029b      	lsls	r3, r3, #10
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a6da:	801a      	strh	r2, [r3, #0]
 800a6dc:	e030      	b.n	800a740 <USB_EPStartXfer+0xcfa>
 800a6de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	785b      	ldrb	r3, [r3, #1]
 800a6ea:	2b01      	cmp	r3, #1
 800a6ec:	d128      	bne.n	800a740 <USB_EPStartXfer+0xcfa>
 800a6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	461a      	mov	r2, r3
 800a70e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a712:	4413      	add	r3, r2
 800a714:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	011a      	lsls	r2, r3, #4
 800a726:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a72a:	4413      	add	r3, r2
 800a72c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a730:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a738:	b29a      	uxth	r2, r3
 800a73a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a73e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	891b      	ldrh	r3, [r3, #8]
 800a74c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6959      	ldr	r1, [r3, #20]
 800a75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a760:	b29b      	uxth	r3, r3
 800a762:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a766:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a76a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a76e:	6800      	ldr	r0, [r0, #0]
 800a770:	f000 fe48 	bl	800b404 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	009b      	lsls	r3, r3, #2
 800a78c:	4413      	add	r3, r2
 800a78e:	881b      	ldrh	r3, [r3, #0]
 800a790:	b29b      	uxth	r3, r3
 800a792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a79a:	817b      	strh	r3, [r7, #10]
 800a79c:	897b      	ldrh	r3, [r7, #10]
 800a79e:	f083 0310 	eor.w	r3, r3, #16
 800a7a2:	817b      	strh	r3, [r7, #10]
 800a7a4:	897b      	ldrh	r3, [r7, #10]
 800a7a6:	f083 0320 	eor.w	r3, r3, #32
 800a7aa:	817b      	strh	r3, [r7, #10]
 800a7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	441a      	add	r2, r3
 800a7c6:	897b      	ldrh	r3, [r7, #10]
 800a7c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a7cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a7d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	8013      	strh	r3, [r2, #0]
 800a7dc:	f000 bcde 	b.w	800b19c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a7e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	7b1b      	ldrb	r3, [r3, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f040 80bb 	bne.w	800a968 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a7f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	699a      	ldr	r2, [r3, #24]
 800a7fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	691b      	ldr	r3, [r3, #16]
 800a80a:	429a      	cmp	r2, r3
 800a80c:	d917      	bls.n	800a83e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a81e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	699a      	ldr	r2, [r3, #24]
 800a82a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a82e:	1ad2      	subs	r2, r2, r3
 800a830:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a834:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	619a      	str	r2, [r3, #24]
 800a83c:	e00e      	b.n	800a85c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a83e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	699b      	ldr	r3, [r3, #24]
 800a84a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a84e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	2200      	movs	r2, #0
 800a85a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a85c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a86a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a86e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a878:	b29b      	uxth	r3, r3
 800a87a:	461a      	mov	r2, r3
 800a87c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a880:	4413      	add	r3, r2
 800a882:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a88a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	011a      	lsls	r2, r3, #4
 800a894:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a898:	4413      	add	r3, r2
 800a89a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a89e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a8a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8b4:	801a      	strh	r2, [r3, #0]
 800a8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ba:	2b3e      	cmp	r3, #62	; 0x3e
 800a8bc:	d924      	bls.n	800a908 <USB_EPStartXfer+0xec2>
 800a8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c2:	095b      	lsrs	r3, r3, #5
 800a8c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8cc:	f003 031f 	and.w	r3, r3, #31
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d104      	bne.n	800a8de <USB_EPStartXfer+0xe98>
 800a8d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a8de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8e2:	881b      	ldrh	r3, [r3, #0]
 800a8e4:	b29a      	uxth	r2, r3
 800a8e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	029b      	lsls	r3, r3, #10
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a902:	801a      	strh	r2, [r3, #0]
 800a904:	f000 bc10 	b.w	800b128 <USB_EPStartXfer+0x16e2>
 800a908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10c      	bne.n	800a92a <USB_EPStartXfer+0xee4>
 800a910:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a914:	881b      	ldrh	r3, [r3, #0]
 800a916:	b29b      	uxth	r3, r3
 800a918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a91c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a920:	b29a      	uxth	r2, r3
 800a922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a926:	801a      	strh	r2, [r3, #0]
 800a928:	e3fe      	b.n	800b128 <USB_EPStartXfer+0x16e2>
 800a92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92e:	085b      	lsrs	r3, r3, #1
 800a930:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a938:	f003 0301 	and.w	r3, r3, #1
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d004      	beq.n	800a94a <USB_EPStartXfer+0xf04>
 800a940:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a944:	3301      	adds	r3, #1
 800a946:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a94a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a94e:	881b      	ldrh	r3, [r3, #0]
 800a950:	b29a      	uxth	r2, r3
 800a952:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a956:	b29b      	uxth	r3, r3
 800a958:	029b      	lsls	r3, r3, #10
 800a95a:	b29b      	uxth	r3, r3
 800a95c:	4313      	orrs	r3, r2
 800a95e:	b29a      	uxth	r2, r3
 800a960:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a964:	801a      	strh	r2, [r3, #0]
 800a966:	e3df      	b.n	800b128 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a96c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	78db      	ldrb	r3, [r3, #3]
 800a974:	2b02      	cmp	r3, #2
 800a976:	f040 8218 	bne.w	800adaa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a97a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a97e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	785b      	ldrb	r3, [r3, #1]
 800a986:	2b00      	cmp	r3, #0
 800a988:	f040 809d 	bne.w	800aac6 <USB_EPStartXfer+0x1080>
 800a98c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a99a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a99e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	461a      	mov	r2, r3
 800a9ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9b0:	4413      	add	r3, r2
 800a9b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	011a      	lsls	r2, r3, #4
 800a9c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9c8:	4413      	add	r3, r2
 800a9ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a9ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a9d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9d6:	881b      	ldrh	r3, [r3, #0]
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9e4:	801a      	strh	r2, [r3, #0]
 800a9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	2b3e      	cmp	r3, #62	; 0x3e
 800a9f4:	d92b      	bls.n	800aa4e <USB_EPStartXfer+0x1008>
 800a9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	691b      	ldr	r3, [r3, #16]
 800aa02:	095b      	lsrs	r3, r3, #5
 800aa04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	691b      	ldr	r3, [r3, #16]
 800aa14:	f003 031f 	and.w	r3, r3, #31
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d104      	bne.n	800aa26 <USB_EPStartXfer+0xfe0>
 800aa1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa20:	3b01      	subs	r3, #1
 800aa22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa2a:	881b      	ldrh	r3, [r3, #0]
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	029b      	lsls	r3, r3, #10
 800aa36:	b29b      	uxth	r3, r3
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa44:	b29a      	uxth	r2, r3
 800aa46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa4a:	801a      	strh	r2, [r3, #0]
 800aa4c:	e070      	b.n	800ab30 <USB_EPStartXfer+0x10ea>
 800aa4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d10c      	bne.n	800aa78 <USB_EPStartXfer+0x1032>
 800aa5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa62:	881b      	ldrh	r3, [r3, #0]
 800aa64:	b29b      	uxth	r3, r3
 800aa66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa6e:	b29a      	uxth	r2, r3
 800aa70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa74:	801a      	strh	r2, [r3, #0]
 800aa76:	e05b      	b.n	800ab30 <USB_EPStartXfer+0x10ea>
 800aa78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	085b      	lsrs	r3, r3, #1
 800aa86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	f003 0301 	and.w	r3, r3, #1
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d004      	beq.n	800aaa8 <USB_EPStartXfer+0x1062>
 800aa9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aaa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	029b      	lsls	r3, r3, #10
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	4313      	orrs	r3, r2
 800aabc:	b29a      	uxth	r2, r3
 800aabe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aac2:	801a      	strh	r2, [r3, #0]
 800aac4:	e034      	b.n	800ab30 <USB_EPStartXfer+0x10ea>
 800aac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	785b      	ldrb	r3, [r3, #1]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d12c      	bne.n	800ab30 <USB_EPStartXfer+0x10ea>
 800aad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aada:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aafa:	4413      	add	r3, r2
 800aafc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	011a      	lsls	r2, r3, #4
 800ab0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab12:	4413      	add	r3, r2
 800ab14:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ab2e:	801a      	strh	r2, [r3, #0]
 800ab30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ab3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	785b      	ldrb	r3, [r3, #1]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f040 809d 	bne.w	800ac8a <USB_EPStartXfer+0x1244>
 800ab50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	461a      	mov	r2, r3
 800ab70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab74:	4413      	add	r3, r2
 800ab76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ab7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	011a      	lsls	r2, r3, #4
 800ab88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ab8c:	4413      	add	r3, r2
 800ab8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ab96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab9a:	881b      	ldrh	r3, [r3, #0]
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aba8:	801a      	strh	r2, [r3, #0]
 800abaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	2b3e      	cmp	r3, #62	; 0x3e
 800abb8:	d92b      	bls.n	800ac12 <USB_EPStartXfer+0x11cc>
 800abba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	691b      	ldr	r3, [r3, #16]
 800abc6:	095b      	lsrs	r3, r3, #5
 800abc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	f003 031f 	and.w	r3, r3, #31
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d104      	bne.n	800abea <USB_EPStartXfer+0x11a4>
 800abe0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abe4:	3b01      	subs	r3, #1
 800abe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	b29a      	uxth	r2, r3
 800abf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	029b      	lsls	r3, r3, #10
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	4313      	orrs	r3, r2
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac0e:	801a      	strh	r2, [r3, #0]
 800ac10:	e069      	b.n	800ace6 <USB_EPStartXfer+0x12a0>
 800ac12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10c      	bne.n	800ac3c <USB_EPStartXfer+0x11f6>
 800ac22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac26:	881b      	ldrh	r3, [r3, #0]
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac38:	801a      	strh	r2, [r3, #0]
 800ac3a:	e054      	b.n	800ace6 <USB_EPStartXfer+0x12a0>
 800ac3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	691b      	ldr	r3, [r3, #16]
 800ac48:	085b      	lsrs	r3, r3, #1
 800ac4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	691b      	ldr	r3, [r3, #16]
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d004      	beq.n	800ac6c <USB_EPStartXfer+0x1226>
 800ac62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac66:	3301      	adds	r3, #1
 800ac68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ac6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	029b      	lsls	r3, r3, #10
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ac86:	801a      	strh	r2, [r3, #0]
 800ac88:	e02d      	b.n	800ace6 <USB_EPStartXfer+0x12a0>
 800ac8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	785b      	ldrb	r3, [r3, #1]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d125      	bne.n	800ace6 <USB_EPStartXfer+0x12a0>
 800ac9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	461a      	mov	r2, r3
 800acac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800acb0:	4413      	add	r3, r2
 800acb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800acb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	781b      	ldrb	r3, [r3, #0]
 800acc2:	011a      	lsls	r2, r3, #4
 800acc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800acc8:	4413      	add	r3, r2
 800acca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800acce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800acd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	b29a      	uxth	r2, r3
 800ace0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ace4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ace6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	69db      	ldr	r3, [r3, #28]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f000 8218 	beq.w	800b128 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800acf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	881b      	ldrh	r3, [r3, #0]
 800ad14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ad18:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ad1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d005      	beq.n	800ad30 <USB_EPStartXfer+0x12ea>
 800ad24:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ad28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d10d      	bne.n	800ad4c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ad30:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ad34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f040 81f5 	bne.w	800b128 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ad3e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ad42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	f040 81ee 	bne.w	800b128 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ad4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	881b      	ldrh	r3, [r3, #0]
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad72:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800ad76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad7e:	681a      	ldr	r2, [r3, #0]
 800ad80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	441a      	add	r2, r3
 800ad90:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800ad94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ada0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	8013      	strh	r3, [r2, #0]
 800ada8:	e1be      	b.n	800b128 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800adaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	78db      	ldrb	r3, [r3, #3]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	f040 81b4 	bne.w	800b124 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800adbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	699a      	ldr	r2, [r3, #24]
 800adc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	429a      	cmp	r2, r3
 800add6:	d917      	bls.n	800ae08 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800add8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800addc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800ade8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	699a      	ldr	r2, [r3, #24]
 800adf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf8:	1ad2      	subs	r2, r2, r3
 800adfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	619a      	str	r2, [r3, #24]
 800ae06:	e00e      	b.n	800ae26 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ae08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	699b      	ldr	r3, [r3, #24]
 800ae14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ae18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	2200      	movs	r2, #0
 800ae24:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ae26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	785b      	ldrb	r3, [r3, #1]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	f040 8085 	bne.w	800af42 <USB_EPStartXfer+0x14fc>
 800ae38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	461a      	mov	r2, r3
 800ae58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	011a      	lsls	r2, r3, #4
 800ae70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ae74:	4413      	add	r3, r2
 800ae76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ae7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae82:	881b      	ldrh	r3, [r3, #0]
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae90:	801a      	strh	r2, [r3, #0]
 800ae92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae96:	2b3e      	cmp	r3, #62	; 0x3e
 800ae98:	d923      	bls.n	800aee2 <USB_EPStartXfer+0x149c>
 800ae9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae9e:	095b      	lsrs	r3, r3, #5
 800aea0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea8:	f003 031f 	and.w	r3, r3, #31
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d104      	bne.n	800aeba <USB_EPStartXfer+0x1474>
 800aeb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeb4:	3b01      	subs	r3, #1
 800aeb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800aeba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aebe:	881b      	ldrh	r3, [r3, #0]
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	029b      	lsls	r3, r3, #10
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	4313      	orrs	r3, r2
 800aece:	b29b      	uxth	r3, r3
 800aed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aede:	801a      	strh	r2, [r3, #0]
 800aee0:	e060      	b.n	800afa4 <USB_EPStartXfer+0x155e>
 800aee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d10c      	bne.n	800af04 <USB_EPStartXfer+0x14be>
 800aeea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aeee:	881b      	ldrh	r3, [r3, #0]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aefa:	b29a      	uxth	r2, r3
 800aefc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af00:	801a      	strh	r2, [r3, #0]
 800af02:	e04f      	b.n	800afa4 <USB_EPStartXfer+0x155e>
 800af04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af08:	085b      	lsrs	r3, r3, #1
 800af0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800af0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	d004      	beq.n	800af24 <USB_EPStartXfer+0x14de>
 800af1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af1e:	3301      	adds	r3, #1
 800af20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800af24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af30:	b29b      	uxth	r3, r3
 800af32:	029b      	lsls	r3, r3, #10
 800af34:	b29b      	uxth	r3, r3
 800af36:	4313      	orrs	r3, r2
 800af38:	b29a      	uxth	r2, r3
 800af3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800af3e:	801a      	strh	r2, [r3, #0]
 800af40:	e030      	b.n	800afa4 <USB_EPStartXfer+0x155e>
 800af42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	785b      	ldrb	r3, [r3, #1]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d128      	bne.n	800afa4 <USB_EPStartXfer+0x155e>
 800af52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800af60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af6e:	b29b      	uxth	r3, r3
 800af70:	461a      	mov	r2, r3
 800af72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af76:	4413      	add	r3, r2
 800af78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800af7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	011a      	lsls	r2, r3, #4
 800af8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af8e:	4413      	add	r3, r2
 800af90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800af94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800afa2:	801a      	strh	r2, [r3, #0]
 800afa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800afb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	785b      	ldrb	r3, [r3, #1]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	f040 8085 	bne.w	800b0ce <USB_EPStartXfer+0x1688>
 800afc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800afd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	461a      	mov	r2, r3
 800afe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800afe8:	4413      	add	r3, r2
 800afea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800afee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	011a      	lsls	r2, r3, #4
 800affc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b000:	4413      	add	r3, r2
 800b002:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b006:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b00a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b00e:	881b      	ldrh	r3, [r3, #0]
 800b010:	b29b      	uxth	r3, r3
 800b012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b016:	b29a      	uxth	r2, r3
 800b018:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b01c:	801a      	strh	r2, [r3, #0]
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b022:	2b3e      	cmp	r3, #62	; 0x3e
 800b024:	d923      	bls.n	800b06e <USB_EPStartXfer+0x1628>
 800b026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b02a:	095b      	lsrs	r3, r3, #5
 800b02c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b034:	f003 031f 	and.w	r3, r3, #31
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d104      	bne.n	800b046 <USB_EPStartXfer+0x1600>
 800b03c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b040:	3b01      	subs	r3, #1
 800b042:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b046:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b04a:	881b      	ldrh	r3, [r3, #0]
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b052:	b29b      	uxth	r3, r3
 800b054:	029b      	lsls	r3, r3, #10
 800b056:	b29b      	uxth	r3, r3
 800b058:	4313      	orrs	r3, r2
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b064:	b29a      	uxth	r2, r3
 800b066:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b06a:	801a      	strh	r2, [r3, #0]
 800b06c:	e05c      	b.n	800b128 <USB_EPStartXfer+0x16e2>
 800b06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10c      	bne.n	800b090 <USB_EPStartXfer+0x164a>
 800b076:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b07a:	881b      	ldrh	r3, [r3, #0]
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b082:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b086:	b29a      	uxth	r2, r3
 800b088:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b08c:	801a      	strh	r2, [r3, #0]
 800b08e:	e04b      	b.n	800b128 <USB_EPStartXfer+0x16e2>
 800b090:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b094:	085b      	lsrs	r3, r3, #1
 800b096:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d004      	beq.n	800b0b0 <USB_EPStartXfer+0x166a>
 800b0a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b0b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	029b      	lsls	r3, r3, #10
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b0ca:	801a      	strh	r2, [r3, #0]
 800b0cc:	e02c      	b.n	800b128 <USB_EPStartXfer+0x16e2>
 800b0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	785b      	ldrb	r3, [r3, #1]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d124      	bne.n	800b128 <USB_EPStartXfer+0x16e2>
 800b0de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b0f4:	4413      	add	r3, r2
 800b0f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b0fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	011a      	lsls	r2, r3, #4
 800b108:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b10c:	4413      	add	r3, r2
 800b10e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b120:	801a      	strh	r2, [r3, #0]
 800b122:	e001      	b.n	800b128 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b124:	2301      	movs	r3, #1
 800b126:	e03a      	b.n	800b19e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	4413      	add	r3, r2
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	b29b      	uxth	r3, r3
 800b146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b14a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b14e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b152:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b156:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b15a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b15e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b162:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b166:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b16a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b16e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b172:	681a      	ldr	r2, [r3, #0]
 800b174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	441a      	add	r2, r3
 800b184:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b18c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b198:	b29b      	uxth	r3, r3
 800b19a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	785b      	ldrb	r3, [r3, #1]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d020      	beq.n	800b1fc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	4413      	add	r3, r2
 800b1c4:	881b      	ldrh	r3, [r3, #0]
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1d0:	81bb      	strh	r3, [r7, #12]
 800b1d2:	89bb      	ldrh	r3, [r7, #12]
 800b1d4:	f083 0310 	eor.w	r3, r3, #16
 800b1d8:	81bb      	strh	r3, [r7, #12]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	441a      	add	r2, r3
 800b1e4:	89bb      	ldrh	r3, [r7, #12]
 800b1e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	8013      	strh	r3, [r2, #0]
 800b1fa:	e01f      	b.n	800b23c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4413      	add	r3, r2
 800b206:	881b      	ldrh	r3, [r3, #0]
 800b208:	b29b      	uxth	r3, r3
 800b20a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b20e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b212:	81fb      	strh	r3, [r7, #14]
 800b214:	89fb      	ldrh	r3, [r7, #14]
 800b216:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b21a:	81fb      	strh	r3, [r7, #14]
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	009b      	lsls	r3, r3, #2
 800b224:	441a      	add	r2, r3
 800b226:	89fb      	ldrh	r3, [r7, #14]
 800b228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b22c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b238:	b29b      	uxth	r3, r3
 800b23a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3714      	adds	r7, #20
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr

0800b24a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b24a:	b480      	push	{r7}
 800b24c:	b087      	sub	sp, #28
 800b24e:	af00      	add	r7, sp, #0
 800b250:	6078      	str	r0, [r7, #4]
 800b252:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	7b1b      	ldrb	r3, [r3, #12]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	f040 809d 	bne.w	800b398 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	785b      	ldrb	r3, [r3, #1]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d04c      	beq.n	800b300 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	4413      	add	r3, r2
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	823b      	strh	r3, [r7, #16]
 800b274:	8a3b      	ldrh	r3, [r7, #16]
 800b276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d01b      	beq.n	800b2b6 <USB_EPClearStall+0x6c>
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	4413      	add	r3, r2
 800b288:	881b      	ldrh	r3, [r3, #0]
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b294:	81fb      	strh	r3, [r7, #14]
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	441a      	add	r2, r3
 800b2a0:	89fb      	ldrh	r3, [r7, #14]
 800b2a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b2b2:	b29b      	uxth	r3, r3
 800b2b4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	78db      	ldrb	r3, [r3, #3]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d06c      	beq.n	800b398 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4413      	add	r3, r2
 800b2c8:	881b      	ldrh	r3, [r3, #0]
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2d4:	81bb      	strh	r3, [r7, #12]
 800b2d6:	89bb      	ldrh	r3, [r7, #12]
 800b2d8:	f083 0320 	eor.w	r3, r3, #32
 800b2dc:	81bb      	strh	r3, [r7, #12]
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	441a      	add	r2, r3
 800b2e8:	89bb      	ldrh	r3, [r7, #12]
 800b2ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	8013      	strh	r3, [r2, #0]
 800b2fe:	e04b      	b.n	800b398 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b300:	687a      	ldr	r2, [r7, #4]
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	881b      	ldrh	r3, [r3, #0]
 800b30c:	82fb      	strh	r3, [r7, #22]
 800b30e:	8afb      	ldrh	r3, [r7, #22]
 800b310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d01b      	beq.n	800b350 <USB_EPClearStall+0x106>
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	4413      	add	r3, r2
 800b322:	881b      	ldrh	r3, [r3, #0]
 800b324:	b29b      	uxth	r3, r3
 800b326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b32a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b32e:	82bb      	strh	r3, [r7, #20]
 800b330:	687a      	ldr	r2, [r7, #4]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	441a      	add	r2, r3
 800b33a:	8abb      	ldrh	r3, [r7, #20]
 800b33c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b34c:	b29b      	uxth	r3, r3
 800b34e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	881b      	ldrh	r3, [r3, #0]
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b366:	827b      	strh	r3, [r7, #18]
 800b368:	8a7b      	ldrh	r3, [r7, #18]
 800b36a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b36e:	827b      	strh	r3, [r7, #18]
 800b370:	8a7b      	ldrh	r3, [r7, #18]
 800b372:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b376:	827b      	strh	r3, [r7, #18]
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	781b      	ldrb	r3, [r3, #0]
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	441a      	add	r2, r3
 800b382:	8a7b      	ldrh	r3, [r7, #18]
 800b384:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b388:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b38c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b394:	b29b      	uxth	r3, r3
 800b396:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b398:	2300      	movs	r3, #0
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	371c      	adds	r7, #28
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	b083      	sub	sp, #12
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b3b2:	78fb      	ldrb	r3, [r7, #3]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d103      	bne.n	800b3c0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2280      	movs	r2, #128	; 0x80
 800b3bc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	370c      	adds	r7, #12
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr

0800b3ce <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	b083      	sub	sp, #12
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b3f2:	b29b      	uxth	r3, r3
 800b3f4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b404:	b480      	push	{r7}
 800b406:	b08b      	sub	sp, #44	; 0x2c
 800b408:	af00      	add	r7, sp, #0
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	4611      	mov	r1, r2
 800b410:	461a      	mov	r2, r3
 800b412:	460b      	mov	r3, r1
 800b414:	80fb      	strh	r3, [r7, #6]
 800b416:	4613      	mov	r3, r2
 800b418:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b41a:	88bb      	ldrh	r3, [r7, #4]
 800b41c:	3301      	adds	r3, #1
 800b41e:	085b      	lsrs	r3, r3, #1
 800b420:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b42a:	88fb      	ldrh	r3, [r7, #6]
 800b42c:	005a      	lsls	r2, r3, #1
 800b42e:	697b      	ldr	r3, [r7, #20]
 800b430:	4413      	add	r3, r2
 800b432:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b436:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	627b      	str	r3, [r7, #36]	; 0x24
 800b43c:	e01e      	b.n	800b47c <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	3301      	adds	r3, #1
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	021b      	lsls	r3, r3, #8
 800b44c:	b21a      	sxth	r2, r3
 800b44e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b452:	4313      	orrs	r3, r2
 800b454:	b21b      	sxth	r3, r3
 800b456:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	8a7a      	ldrh	r2, [r7, #18]
 800b45c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	3302      	adds	r3, #2
 800b462:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b464:	6a3b      	ldr	r3, [r7, #32]
 800b466:	3302      	adds	r3, #2
 800b468:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800b46a:	69fb      	ldr	r3, [r7, #28]
 800b46c:	3301      	adds	r3, #1
 800b46e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	3301      	adds	r3, #1
 800b474:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b478:	3b01      	subs	r3, #1
 800b47a:	627b      	str	r3, [r7, #36]	; 0x24
 800b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d1dd      	bne.n	800b43e <USB_WritePMA+0x3a>
  }
}
 800b482:	bf00      	nop
 800b484:	bf00      	nop
 800b486:	372c      	adds	r7, #44	; 0x2c
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b490:	b480      	push	{r7}
 800b492:	b08b      	sub	sp, #44	; 0x2c
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	4611      	mov	r1, r2
 800b49c:	461a      	mov	r2, r3
 800b49e:	460b      	mov	r3, r1
 800b4a0:	80fb      	strh	r3, [r7, #6]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b4a6:	88bb      	ldrh	r3, [r7, #4]
 800b4a8:	085b      	lsrs	r3, r3, #1
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b4b6:	88fb      	ldrh	r3, [r7, #6]
 800b4b8:	005a      	lsls	r2, r3, #1
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	4413      	add	r3, r2
 800b4be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b4c2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b4c8:	e01b      	b.n	800b502 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b4ca:	6a3b      	ldr	r3, [r7, #32]
 800b4cc:	881b      	ldrh	r3, [r3, #0]
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b4d2:	6a3b      	ldr	r3, [r7, #32]
 800b4d4:	3302      	adds	r3, #2
 800b4d6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	b2da      	uxtb	r2, r3
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	0a1b      	lsrs	r3, r3, #8
 800b4ea:	b2da      	uxtb	r2, r3
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	3302      	adds	r3, #2
 800b4fa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800b4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fe:	3b01      	subs	r3, #1
 800b500:	627b      	str	r3, [r7, #36]	; 0x24
 800b502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1e0      	bne.n	800b4ca <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b508:	88bb      	ldrh	r3, [r7, #4]
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	b29b      	uxth	r3, r3
 800b510:	2b00      	cmp	r3, #0
 800b512:	d007      	beq.n	800b524 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800b514:	6a3b      	ldr	r3, [r7, #32]
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	b29b      	uxth	r3, r3
 800b51a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	69fb      	ldr	r3, [r7, #28]
 800b522:	701a      	strb	r2, [r3, #0]
  }
}
 800b524:	bf00      	nop
 800b526:	372c      	adds	r7, #44	; 0x2c
 800b528:	46bd      	mov	sp, r7
 800b52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52e:	4770      	bx	lr

0800b530 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b084      	sub	sp, #16
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
 800b538:	460b      	mov	r3, r1
 800b53a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b53c:	2300      	movs	r3, #0
 800b53e:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800b540:	2302      	movs	r3, #2
 800b542:	2203      	movs	r2, #3
 800b544:	2181      	movs	r1, #129	; 0x81
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f001 fd93 	bl	800d072 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800b552:	2304      	movs	r3, #4
 800b554:	2203      	movs	r2, #3
 800b556:	2101      	movs	r1, #1
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f001 fd8a 	bl	800d072 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800b566:	2018      	movs	r0, #24
 800b568:	f001 fe98 	bl	800d29c <USBD_static_malloc>
 800b56c:	4602      	mov	r2, r0
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d102      	bne.n	800b584 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800b57e:	2301      	movs	r3, #1
 800b580:	73fb      	strb	r3, [r7, #15]
 800b582:	e011      	b.n	800b5a8 <USBD_CUSTOM_HID_Init+0x78>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b58a:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	2200      	movs	r2, #0
 800b590:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800b59c:	68ba      	ldr	r2, [r7, #8]
 800b59e:	2304      	movs	r3, #4
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f001 fe57 	bl	800d256 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}

0800b5b2 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800b5b2:	b580      	push	{r7, lr}
 800b5b4:	b082      	sub	sp, #8
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800b5be:	2181      	movs	r1, #129	; 0x81
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f001 fd7c 	bl	800d0be <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800b5cc:	2101      	movs	r1, #1
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f001 fd75 	bl	800d0be <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d00e      	beq.n	800b604 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f001 fe5e 	bl	800d2b8 <USBD_static_free>
    pdev->pClassData = NULL;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2200      	movs	r2, #0
 800b600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }
  return USBD_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
	...

0800b610 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b620:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800b622:	2300      	movs	r3, #0
 800b624:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800b626:	2300      	movs	r3, #0
 800b628:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800b62a:	2300      	movs	r3, #0
 800b62c:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 800b62e:	2300      	movs	r3, #0
 800b630:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d051      	beq.n	800b6e2 <USBD_CUSTOM_HID_Setup+0xd2>
 800b63e:	2b20      	cmp	r3, #32
 800b640:	f040 80d8 	bne.w	800b7f4 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	785b      	ldrb	r3, [r3, #1]
 800b648:	3b02      	subs	r3, #2
 800b64a:	2b09      	cmp	r3, #9
 800b64c:	d841      	bhi.n	800b6d2 <USBD_CUSTOM_HID_Setup+0xc2>
 800b64e:	a201      	add	r2, pc, #4	; (adr r2, 800b654 <USBD_CUSTOM_HID_Setup+0x44>)
 800b650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b654:	0800b6ad 	.word	0x0800b6ad
 800b658:	0800b68b 	.word	0x0800b68b
 800b65c:	0800b6d3 	.word	0x0800b6d3
 800b660:	0800b6d3 	.word	0x0800b6d3
 800b664:	0800b6d3 	.word	0x0800b6d3
 800b668:	0800b6d3 	.word	0x0800b6d3
 800b66c:	0800b6d3 	.word	0x0800b6d3
 800b670:	0800b6bd 	.word	0x0800b6bd
 800b674:	0800b69b 	.word	0x0800b69b
 800b678:	0800b67d 	.word	0x0800b67d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	885b      	ldrh	r3, [r3, #2]
 800b680:	b2db      	uxtb	r3, r3
 800b682:	461a      	mov	r2, r3
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	605a      	str	r2, [r3, #4]
          break;
 800b688:	e02a      	b.n	800b6e0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	3304      	adds	r3, #4
 800b68e:	2201      	movs	r2, #1
 800b690:	4619      	mov	r1, r3
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f001 f99f 	bl	800c9d6 <USBD_CtlSendData>
          break;
 800b698:	e022      	b.n	800b6e0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	885b      	ldrh	r3, [r3, #2]
 800b69e:	0a1b      	lsrs	r3, r3, #8
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	609a      	str	r2, [r3, #8]
          break;
 800b6aa:	e019      	b.n	800b6e0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	3308      	adds	r3, #8
 800b6b0:	2201      	movs	r2, #1
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f001 f98e 	bl	800c9d6 <USBD_CtlSendData>
          break;
 800b6ba:	e011      	b.n	800b6e0 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800b6c2:	6939      	ldr	r1, [r7, #16]
 800b6c4:	683b      	ldr	r3, [r7, #0]
 800b6c6:	88db      	ldrh	r3, [r3, #6]
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f001 f9b1 	bl	800ca32 <USBD_CtlPrepareRx>
          break;
 800b6d0:	e006      	b.n	800b6e0 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800b6d2:	6839      	ldr	r1, [r7, #0]
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f001 f913 	bl	800c900 <USBD_CtlError>
          ret = USBD_FAIL;
 800b6da:	2302      	movs	r3, #2
 800b6dc:	75fb      	strb	r3, [r7, #23]
          break;
 800b6de:	bf00      	nop
      }
      break;
 800b6e0:	e08f      	b.n	800b802 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	785b      	ldrb	r3, [r3, #1]
 800b6e6:	2b0b      	cmp	r3, #11
 800b6e8:	d87c      	bhi.n	800b7e4 <USBD_CUSTOM_HID_Setup+0x1d4>
 800b6ea:	a201      	add	r2, pc, #4	; (adr r2, 800b6f0 <USBD_CUSTOM_HID_Setup+0xe0>)
 800b6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f0:	0800b721 	.word	0x0800b721
 800b6f4:	0800b7e5 	.word	0x0800b7e5
 800b6f8:	0800b7e5 	.word	0x0800b7e5
 800b6fc:	0800b7e5 	.word	0x0800b7e5
 800b700:	0800b7e5 	.word	0x0800b7e5
 800b704:	0800b7e5 	.word	0x0800b7e5
 800b708:	0800b749 	.word	0x0800b749
 800b70c:	0800b7e5 	.word	0x0800b7e5
 800b710:	0800b7e5 	.word	0x0800b7e5
 800b714:	0800b7e5 	.word	0x0800b7e5
 800b718:	0800b797 	.word	0x0800b797
 800b71c:	0800b7bf 	.word	0x0800b7bf
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b726:	2b03      	cmp	r3, #3
 800b728:	d107      	bne.n	800b73a <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b72a:	f107 030e 	add.w	r3, r7, #14
 800b72e:	2202      	movs	r2, #2
 800b730:	4619      	mov	r1, r3
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f001 f94f 	bl	800c9d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b738:	e05b      	b.n	800b7f2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800b73a:	6839      	ldr	r1, [r7, #0]
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f001 f8df 	bl	800c900 <USBD_CtlError>
            ret = USBD_FAIL;
 800b742:	2302      	movs	r3, #2
 800b744:	75fb      	strb	r3, [r7, #23]
          break;
 800b746:	e054      	b.n	800b7f2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	885b      	ldrh	r3, [r3, #2]
 800b74c:	0a1b      	lsrs	r3, r3, #8
 800b74e:	b29b      	uxth	r3, r3
 800b750:	2b22      	cmp	r3, #34	; 0x22
 800b752:	d10b      	bne.n	800b76c <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	88db      	ldrh	r3, [r3, #6]
 800b758:	2b23      	cmp	r3, #35	; 0x23
 800b75a:	bf28      	it	cs
 800b75c:	2323      	movcs	r3, #35	; 0x23
 800b75e:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	61bb      	str	r3, [r7, #24]
 800b76a:	e00d      	b.n	800b788 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	885b      	ldrh	r3, [r3, #2]
 800b770:	0a1b      	lsrs	r3, r3, #8
 800b772:	b29b      	uxth	r3, r3
 800b774:	2b21      	cmp	r3, #33	; 0x21
 800b776:	d107      	bne.n	800b788 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800b778:	4b24      	ldr	r3, [pc, #144]	; (800b80c <USBD_CUSTOM_HID_Setup+0x1fc>)
 800b77a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	88db      	ldrh	r3, [r3, #6]
 800b780:	2b09      	cmp	r3, #9
 800b782:	bf28      	it	cs
 800b784:	2309      	movcs	r3, #9
 800b786:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800b788:	8bfb      	ldrh	r3, [r7, #30]
 800b78a:	461a      	mov	r2, r3
 800b78c:	69b9      	ldr	r1, [r7, #24]
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f001 f921 	bl	800c9d6 <USBD_CtlSendData>
          break;
 800b794:	e02d      	b.n	800b7f2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b79c:	2b03      	cmp	r3, #3
 800b79e:	d107      	bne.n	800b7b0 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	330c      	adds	r3, #12
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f001 f914 	bl	800c9d6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b7ae:	e020      	b.n	800b7f2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800b7b0:	6839      	ldr	r1, [r7, #0]
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f001 f8a4 	bl	800c900 <USBD_CtlError>
            ret = USBD_FAIL;
 800b7b8:	2302      	movs	r3, #2
 800b7ba:	75fb      	strb	r3, [r7, #23]
          break;
 800b7bc:	e019      	b.n	800b7f2 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7c4:	2b03      	cmp	r3, #3
 800b7c6:	d106      	bne.n	800b7d6 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	885b      	ldrh	r3, [r3, #2]
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b7d4:	e00d      	b.n	800b7f2 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f001 f891 	bl	800c900 <USBD_CtlError>
            ret = USBD_FAIL;
 800b7de:	2302      	movs	r3, #2
 800b7e0:	75fb      	strb	r3, [r7, #23]
          break;
 800b7e2:	e006      	b.n	800b7f2 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800b7e4:	6839      	ldr	r1, [r7, #0]
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f001 f88a 	bl	800c900 <USBD_CtlError>
          ret = USBD_FAIL;
 800b7ec:	2302      	movs	r3, #2
 800b7ee:	75fb      	strb	r3, [r7, #23]
          break;
 800b7f0:	bf00      	nop
      }
      break;
 800b7f2:	e006      	b.n	800b802 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 800b7f4:	6839      	ldr	r1, [r7, #0]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f001 f882 	bl	800c900 <USBD_CtlError>
      ret = USBD_FAIL;
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	75fb      	strb	r3, [r7, #23]
      break;
 800b800:	bf00      	nop
  }
  return ret;
 800b802:	7dfb      	ldrb	r3, [r7, #23]
}
 800b804:	4618      	mov	r0, r3
 800b806:	3720      	adds	r7, #32
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	200000d0 	.word	0x200000d0

0800b810 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
 800b816:	60f8      	str	r0, [r7, #12]
 800b818:	60b9      	str	r1, [r7, #8]
 800b81a:	4613      	mov	r3, r2
 800b81c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b824:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b82c:	2b03      	cmp	r3, #3
 800b82e:	d10f      	bne.n	800b850 <USBD_CUSTOM_HID_SendReport+0x40>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	7d1b      	ldrb	r3, [r3, #20]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d109      	bne.n	800b84c <USBD_CUSTOM_HID_SendReport+0x3c>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	2201      	movs	r2, #1
 800b83c:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800b83e:	88fb      	ldrh	r3, [r7, #6]
 800b840:	68ba      	ldr	r2, [r7, #8]
 800b842:	2181      	movs	r1, #129	; 0x81
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f001 fce3 	bl	800d210 <USBD_LL_Transmit>
 800b84a:	e001      	b.n	800b850 <USBD_CUSTOM_HID_SendReport+0x40>
    }
    else
    {
      return USBD_BUSY;
 800b84c:	2301      	movs	r3, #1
 800b84e:	e000      	b.n	800b852 <USBD_CUSTOM_HID_SendReport+0x42>
    }
  }
  return USBD_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3718      	adds	r7, #24
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}
	...

0800b85c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2229      	movs	r2, #41	; 0x29
 800b868:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800b86a:	4b03      	ldr	r3, [pc, #12]	; (800b878 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	370c      	adds	r7, #12
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	2000004c 	.word	0x2000004c

0800b87c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2229      	movs	r2, #41	; 0x29
 800b888:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800b88a:	4b03      	ldr	r3, [pc, #12]	; (800b898 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr
 800b898:	20000078 	.word	0x20000078

0800b89c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2229      	movs	r2, #41	; 0x29
 800b8a8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800b8aa:	4b03      	ldr	r3, [pc, #12]	; (800b8b8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr
 800b8b8:	200000a4 	.word	0x200000a4

0800b8bc <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8f2:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8fa:	68db      	ldr	r3, [r3, #12]
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	4610      	mov	r0, r2
 800b900:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	2304      	movs	r3, #4
 800b906:	2101      	movs	r1, #1
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f001 fca4 	bl	800d256 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3710      	adds	r7, #16
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}

0800b918 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	b084      	sub	sp, #16
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b926:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	691b      	ldr	r3, [r3, #16]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d109      	bne.n	800b944 <USBD_CUSTOM_HID_EP0_RxReady+0x2c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b936:	68db      	ldr	r3, [r3, #12]
 800b938:	68fa      	ldr	r2, [r7, #12]
 800b93a:	4610      	mov	r0, r2
 800b93c:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2200      	movs	r2, #0
 800b942:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 800b944:	2300      	movs	r3, #0
}
 800b946:	4618      	mov	r0, r3
 800b948:	3710      	adds	r7, #16
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
	...

0800b950 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	220a      	movs	r2, #10
 800b95c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800b95e:	4b03      	ldr	r3, [pc, #12]	; (800b96c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 800b960:	4618      	mov	r0, r3
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	200000dc 	.word	0x200000dc

0800b970 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b97a:	2302      	movs	r3, #2
 800b97c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d005      	beq.n	800b990 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b990:	7bfb      	ldrb	r3, [r7, #15]
}
 800b992:	4618      	mov	r0, r3
 800b994:	3714      	adds	r7, #20
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b084      	sub	sp, #16
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	60f8      	str	r0, [r7, #12]
 800b9a6:	60b9      	str	r1, [r7, #8]
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b9b2:	2302      	movs	r3, #2
 800b9b4:	e01a      	b.n	800b9ec <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d003      	beq.n	800b9c8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	79fa      	ldrb	r2, [r7, #7]
 800b9e2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f001 fad9 	bl	800cf9c <USBD_LL_Init>

  return USBD_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b085      	sub	sp, #20
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d006      	beq.n	800ba16 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	683a      	ldr	r2, [r7, #0]
 800ba0c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]
 800ba14:	e001      	b.n	800ba1a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ba16:	2302      	movs	r3, #2
 800ba18:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ba1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3714      	adds	r7, #20
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f001 fb03 	bl	800d03c <USBD_LL_Start>

  return USBD_OK;
 800ba36:	2300      	movs	r3, #0
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	3708      	adds	r7, #8
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	bd80      	pop	{r7, pc}

0800ba40 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	370c      	adds	r7, #12
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	460b      	mov	r3, r1
 800ba60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ba62:	2302      	movs	r3, #2
 800ba64:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d00c      	beq.n	800ba8a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	78fa      	ldrb	r2, [r7, #3]
 800ba7a:	4611      	mov	r1, r2
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	4798      	blx	r3
 800ba80:	4603      	mov	r3, r0
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ba8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	460b      	mov	r3, r1
 800ba9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	78fa      	ldrb	r2, [r7, #3]
 800baaa:	4611      	mov	r1, r2
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	4798      	blx	r3

  return USBD_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b082      	sub	sp, #8
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
 800bac2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	4618      	mov	r0, r3
 800bace:	f000 feda 	bl	800c886 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2201      	movs	r2, #1
 800bad6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bae0:	461a      	mov	r2, r3
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800baee:	f003 031f 	and.w	r3, r3, #31
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d016      	beq.n	800bb24 <USBD_LL_SetupStage+0x6a>
 800baf6:	2b02      	cmp	r3, #2
 800baf8:	d81c      	bhi.n	800bb34 <USBD_LL_SetupStage+0x7a>
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <USBD_LL_SetupStage+0x4a>
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d008      	beq.n	800bb14 <USBD_LL_SetupStage+0x5a>
 800bb02:	e017      	b.n	800bb34 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 f9cd 	bl	800beac <USBD_StdDevReq>
      break;
 800bb12:	e01a      	b.n	800bb4a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fa2f 	bl	800bf80 <USBD_StdItfReq>
      break;
 800bb22:	e012      	b.n	800bb4a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f000 fa6f 	bl	800c010 <USBD_StdEPReq>
      break;
 800bb32:	e00a      	b.n	800bb4a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bb3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	4619      	mov	r1, r3
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f001 fada 	bl	800d0fc <USBD_LL_StallEP>
      break;
 800bb48:	bf00      	nop
  }

  return USBD_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}

0800bb54 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bb62:	7afb      	ldrb	r3, [r7, #11]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d14b      	bne.n	800bc00 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bb6e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb76:	2b03      	cmp	r3, #3
 800bb78:	d134      	bne.n	800bbe4 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	68da      	ldr	r2, [r3, #12]
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d919      	bls.n	800bbba <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	68da      	ldr	r2, [r3, #12]
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	1ad2      	subs	r2, r2, r3
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	68da      	ldr	r2, [r3, #12]
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d203      	bcs.n	800bba8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	e002      	b.n	800bbae <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bba8:	697b      	ldr	r3, [r7, #20]
 800bbaa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	461a      	mov	r2, r3
 800bbb0:	6879      	ldr	r1, [r7, #4]
 800bbb2:	68f8      	ldr	r0, [r7, #12]
 800bbb4:	f000 ff5b 	bl	800ca6e <USBD_CtlContinueRx>
 800bbb8:	e038      	b.n	800bc2c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d00a      	beq.n	800bbdc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bbcc:	2b03      	cmp	r3, #3
 800bbce:	d105      	bne.n	800bbdc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbd6:	691b      	ldr	r3, [r3, #16]
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bbdc:	68f8      	ldr	r0, [r7, #12]
 800bbde:	f000 ff58 	bl	800ca92 <USBD_CtlSendStatus>
 800bbe2:	e023      	b.n	800bc2c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbea:	2b05      	cmp	r3, #5
 800bbec:	d11e      	bne.n	800bc2c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	68f8      	ldr	r0, [r7, #12]
 800bbfa:	f001 fa7f 	bl	800d0fc <USBD_LL_StallEP>
 800bbfe:	e015      	b.n	800bc2c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc06:	699b      	ldr	r3, [r3, #24]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d00d      	beq.n	800bc28 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bc12:	2b03      	cmp	r3, #3
 800bc14:	d108      	bne.n	800bc28 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc1c:	699b      	ldr	r3, [r3, #24]
 800bc1e:	7afa      	ldrb	r2, [r7, #11]
 800bc20:	4611      	mov	r1, r2
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	4798      	blx	r3
 800bc26:	e001      	b.n	800bc2c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc28:	2302      	movs	r3, #2
 800bc2a:	e000      	b.n	800bc2e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bc2c:	2300      	movs	r3, #0
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	3718      	adds	r7, #24
 800bc32:	46bd      	mov	sp, r7
 800bc34:	bd80      	pop	{r7, pc}

0800bc36 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bc36:	b580      	push	{r7, lr}
 800bc38:	b086      	sub	sp, #24
 800bc3a:	af00      	add	r7, sp, #0
 800bc3c:	60f8      	str	r0, [r7, #12]
 800bc3e:	460b      	mov	r3, r1
 800bc40:	607a      	str	r2, [r7, #4]
 800bc42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bc44:	7afb      	ldrb	r3, [r7, #11]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d17f      	bne.n	800bd4a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3314      	adds	r3, #20
 800bc4e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d15c      	bne.n	800bd14 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	68da      	ldr	r2, [r3, #12]
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	691b      	ldr	r3, [r3, #16]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d915      	bls.n	800bc92 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	68da      	ldr	r2, [r3, #12]
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	1ad2      	subs	r2, r2, r3
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	6879      	ldr	r1, [r7, #4]
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	f000 fec5 	bl	800ca0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc84:	2300      	movs	r3, #0
 800bc86:	2200      	movs	r2, #0
 800bc88:	2100      	movs	r1, #0
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f001 fae3 	bl	800d256 <USBD_LL_PrepareReceive>
 800bc90:	e04e      	b.n	800bd30 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	697a      	ldr	r2, [r7, #20]
 800bc98:	6912      	ldr	r2, [r2, #16]
 800bc9a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc9e:	fb01 f202 	mul.w	r2, r1, r2
 800bca2:	1a9b      	subs	r3, r3, r2
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d11c      	bne.n	800bce2 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d316      	bcc.n	800bce2 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	689a      	ldr	r2, [r3, #8]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d20f      	bcs.n	800bce2 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	f000 fea1 	bl	800ca0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	2100      	movs	r1, #0
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f001 fabb 	bl	800d256 <USBD_LL_PrepareReceive>
 800bce0:	e026      	b.n	800bd30 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bce8:	68db      	ldr	r3, [r3, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00a      	beq.n	800bd04 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bcf4:	2b03      	cmp	r3, #3
 800bcf6:	d105      	bne.n	800bd04 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bcfe:	68db      	ldr	r3, [r3, #12]
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bd04:	2180      	movs	r1, #128	; 0x80
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f001 f9f8 	bl	800d0fc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f000 fed3 	bl	800cab8 <USBD_CtlReceiveStatus>
 800bd12:	e00d      	b.n	800bd30 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd1a:	2b04      	cmp	r3, #4
 800bd1c:	d004      	beq.n	800bd28 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d103      	bne.n	800bd30 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bd28:	2180      	movs	r1, #128	; 0x80
 800bd2a:	68f8      	ldr	r0, [r7, #12]
 800bd2c:	f001 f9e6 	bl	800d0fc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d11d      	bne.n	800bd76 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bd3a:	68f8      	ldr	r0, [r7, #12]
 800bd3c:	f7ff fe80 	bl	800ba40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2200      	movs	r2, #0
 800bd44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bd48:	e015      	b.n	800bd76 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd50:	695b      	ldr	r3, [r3, #20]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d00d      	beq.n	800bd72 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d108      	bne.n	800bd72 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd66:	695b      	ldr	r3, [r3, #20]
 800bd68:	7afa      	ldrb	r2, [r7, #11]
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	68f8      	ldr	r0, [r7, #12]
 800bd6e:	4798      	blx	r3
 800bd70:	e001      	b.n	800bd76 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bd72:	2302      	movs	r3, #2
 800bd74:	e000      	b.n	800bd78 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd88:	2340      	movs	r3, #64	; 0x40
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f001 f96f 	bl	800d072 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2201      	movs	r2, #1
 800bd98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2240      	movs	r2, #64	; 0x40
 800bda0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bda4:	2340      	movs	r3, #64	; 0x40
 800bda6:	2200      	movs	r2, #0
 800bda8:	2180      	movs	r1, #128	; 0x80
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f001 f961 	bl	800d072 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2240      	movs	r2, #64	; 0x40
 800bdba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d009      	beq.n	800bdf8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	6852      	ldr	r2, [r2, #4]
 800bdf0:	b2d2      	uxtb	r2, r2
 800bdf2:	4611      	mov	r1, r2
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	4798      	blx	r3
  }

  return USBD_OK;
 800bdf8:	2300      	movs	r3, #0
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800be02:	b480      	push	{r7}
 800be04:	b083      	sub	sp, #12
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	460b      	mov	r3, r1
 800be0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	78fa      	ldrb	r2, [r7, #3]
 800be12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	370c      	adds	r7, #12
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2204      	movs	r2, #4
 800be3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800be3e:	2300      	movs	r3, #0
}
 800be40:	4618      	mov	r0, r3
 800be42:	370c      	adds	r7, #12
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be5a:	2b04      	cmp	r3, #4
 800be5c:	d105      	bne.n	800be6a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be86:	2b03      	cmp	r3, #3
 800be88:	d10b      	bne.n	800bea2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d005      	beq.n	800bea2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be9c:	69db      	ldr	r3, [r3, #28]
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bea2:	2300      	movs	r3, #0
}
 800bea4:	4618      	mov	r0, r3
 800bea6:	3708      	adds	r7, #8
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beb6:	2300      	movs	r3, #0
 800beb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bec2:	2b40      	cmp	r3, #64	; 0x40
 800bec4:	d005      	beq.n	800bed2 <USBD_StdDevReq+0x26>
 800bec6:	2b40      	cmp	r3, #64	; 0x40
 800bec8:	d84f      	bhi.n	800bf6a <USBD_StdDevReq+0xbe>
 800beca:	2b00      	cmp	r3, #0
 800becc:	d009      	beq.n	800bee2 <USBD_StdDevReq+0x36>
 800bece:	2b20      	cmp	r3, #32
 800bed0:	d14b      	bne.n	800bf6a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bed8:	689b      	ldr	r3, [r3, #8]
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	4798      	blx	r3
      break;
 800bee0:	e048      	b.n	800bf74 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	785b      	ldrb	r3, [r3, #1]
 800bee6:	2b09      	cmp	r3, #9
 800bee8:	d839      	bhi.n	800bf5e <USBD_StdDevReq+0xb2>
 800beea:	a201      	add	r2, pc, #4	; (adr r2, 800bef0 <USBD_StdDevReq+0x44>)
 800beec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef0:	0800bf41 	.word	0x0800bf41
 800bef4:	0800bf55 	.word	0x0800bf55
 800bef8:	0800bf5f 	.word	0x0800bf5f
 800befc:	0800bf4b 	.word	0x0800bf4b
 800bf00:	0800bf5f 	.word	0x0800bf5f
 800bf04:	0800bf23 	.word	0x0800bf23
 800bf08:	0800bf19 	.word	0x0800bf19
 800bf0c:	0800bf5f 	.word	0x0800bf5f
 800bf10:	0800bf37 	.word	0x0800bf37
 800bf14:	0800bf2d 	.word	0x0800bf2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f9dc 	bl	800c2d8 <USBD_GetDescriptor>
          break;
 800bf20:	e022      	b.n	800bf68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf22:	6839      	ldr	r1, [r7, #0]
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fb3f 	bl	800c5a8 <USBD_SetAddress>
          break;
 800bf2a:	e01d      	b.n	800bf68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fb7e 	bl	800c630 <USBD_SetConfig>
          break;
 800bf34:	e018      	b.n	800bf68 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf36:	6839      	ldr	r1, [r7, #0]
 800bf38:	6878      	ldr	r0, [r7, #4]
 800bf3a:	f000 fc07 	bl	800c74c <USBD_GetConfig>
          break;
 800bf3e:	e013      	b.n	800bf68 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fc37 	bl	800c7b6 <USBD_GetStatus>
          break;
 800bf48:	e00e      	b.n	800bf68 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf4a:	6839      	ldr	r1, [r7, #0]
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f000 fc65 	bl	800c81c <USBD_SetFeature>
          break;
 800bf52:	e009      	b.n	800bf68 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf54:	6839      	ldr	r1, [r7, #0]
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 fc74 	bl	800c844 <USBD_ClrFeature>
          break;
 800bf5c:	e004      	b.n	800bf68 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bf5e:	6839      	ldr	r1, [r7, #0]
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 fccd 	bl	800c900 <USBD_CtlError>
          break;
 800bf66:	bf00      	nop
      }
      break;
 800bf68:	e004      	b.n	800bf74 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fcc7 	bl	800c900 <USBD_CtlError>
      break;
 800bf72:	bf00      	nop
  }

  return ret;
 800bf74:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop

0800bf80 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf96:	2b40      	cmp	r3, #64	; 0x40
 800bf98:	d005      	beq.n	800bfa6 <USBD_StdItfReq+0x26>
 800bf9a:	2b40      	cmp	r3, #64	; 0x40
 800bf9c:	d82e      	bhi.n	800bffc <USBD_StdItfReq+0x7c>
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d001      	beq.n	800bfa6 <USBD_StdItfReq+0x26>
 800bfa2:	2b20      	cmp	r3, #32
 800bfa4:	d12a      	bne.n	800bffc <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfac:	3b01      	subs	r3, #1
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d81d      	bhi.n	800bfee <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	889b      	ldrh	r3, [r3, #4]
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d813      	bhi.n	800bfe4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	4798      	blx	r3
 800bfca:	4603      	mov	r3, r0
 800bfcc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	88db      	ldrh	r3, [r3, #6]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d110      	bne.n	800bff8 <USBD_StdItfReq+0x78>
 800bfd6:	7bfb      	ldrb	r3, [r7, #15]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d10d      	bne.n	800bff8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fd58 	bl	800ca92 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfe2:	e009      	b.n	800bff8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bfe4:	6839      	ldr	r1, [r7, #0]
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 fc8a 	bl	800c900 <USBD_CtlError>
          break;
 800bfec:	e004      	b.n	800bff8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bfee:	6839      	ldr	r1, [r7, #0]
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fc85 	bl	800c900 <USBD_CtlError>
          break;
 800bff6:	e000      	b.n	800bffa <USBD_StdItfReq+0x7a>
          break;
 800bff8:	bf00      	nop
      }
      break;
 800bffa:	e004      	b.n	800c006 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bffc:	6839      	ldr	r1, [r7, #0]
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	f000 fc7e 	bl	800c900 <USBD_CtlError>
      break;
 800c004:	bf00      	nop
  }

  return USBD_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	889b      	ldrh	r3, [r3, #4]
 800c022:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c02c:	2b40      	cmp	r3, #64	; 0x40
 800c02e:	d007      	beq.n	800c040 <USBD_StdEPReq+0x30>
 800c030:	2b40      	cmp	r3, #64	; 0x40
 800c032:	f200 8146 	bhi.w	800c2c2 <USBD_StdEPReq+0x2b2>
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00a      	beq.n	800c050 <USBD_StdEPReq+0x40>
 800c03a:	2b20      	cmp	r3, #32
 800c03c:	f040 8141 	bne.w	800c2c2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	6839      	ldr	r1, [r7, #0]
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	4798      	blx	r3
      break;
 800c04e:	e13d      	b.n	800c2cc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c058:	2b20      	cmp	r3, #32
 800c05a:	d10a      	bne.n	800c072 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	6839      	ldr	r1, [r7, #0]
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	4798      	blx	r3
 800c06a:	4603      	mov	r3, r0
 800c06c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c06e:	7bfb      	ldrb	r3, [r7, #15]
 800c070:	e12d      	b.n	800c2ce <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	785b      	ldrb	r3, [r3, #1]
 800c076:	2b03      	cmp	r3, #3
 800c078:	d007      	beq.n	800c08a <USBD_StdEPReq+0x7a>
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	f300 811b 	bgt.w	800c2b6 <USBD_StdEPReq+0x2a6>
 800c080:	2b00      	cmp	r3, #0
 800c082:	d072      	beq.n	800c16a <USBD_StdEPReq+0x15a>
 800c084:	2b01      	cmp	r3, #1
 800c086:	d03a      	beq.n	800c0fe <USBD_StdEPReq+0xee>
 800c088:	e115      	b.n	800c2b6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c090:	2b02      	cmp	r3, #2
 800c092:	d002      	beq.n	800c09a <USBD_StdEPReq+0x8a>
 800c094:	2b03      	cmp	r3, #3
 800c096:	d015      	beq.n	800c0c4 <USBD_StdEPReq+0xb4>
 800c098:	e02b      	b.n	800c0f2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c09a:	7bbb      	ldrb	r3, [r7, #14]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00c      	beq.n	800c0ba <USBD_StdEPReq+0xaa>
 800c0a0:	7bbb      	ldrb	r3, [r7, #14]
 800c0a2:	2b80      	cmp	r3, #128	; 0x80
 800c0a4:	d009      	beq.n	800c0ba <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f001 f826 	bl	800d0fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c0b0:	2180      	movs	r1, #128	; 0x80
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f001 f822 	bl	800d0fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0b8:	e020      	b.n	800c0fc <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fc1f 	bl	800c900 <USBD_CtlError>
              break;
 800c0c2:	e01b      	b.n	800c0fc <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	885b      	ldrh	r3, [r3, #2]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10e      	bne.n	800c0ea <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00b      	beq.n	800c0ea <USBD_StdEPReq+0xda>
 800c0d2:	7bbb      	ldrb	r3, [r7, #14]
 800c0d4:	2b80      	cmp	r3, #128	; 0x80
 800c0d6:	d008      	beq.n	800c0ea <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	88db      	ldrh	r3, [r3, #6]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d104      	bne.n	800c0ea <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f001 f809 	bl	800d0fc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 fcd1 	bl	800ca92 <USBD_CtlSendStatus>

              break;
 800c0f0:	e004      	b.n	800c0fc <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800c0f2:	6839      	ldr	r1, [r7, #0]
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fc03 	bl	800c900 <USBD_CtlError>
              break;
 800c0fa:	bf00      	nop
          }
          break;
 800c0fc:	e0e0      	b.n	800c2c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c104:	2b02      	cmp	r3, #2
 800c106:	d002      	beq.n	800c10e <USBD_StdEPReq+0xfe>
 800c108:	2b03      	cmp	r3, #3
 800c10a:	d015      	beq.n	800c138 <USBD_StdEPReq+0x128>
 800c10c:	e026      	b.n	800c15c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c10e:	7bbb      	ldrb	r3, [r7, #14]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00c      	beq.n	800c12e <USBD_StdEPReq+0x11e>
 800c114:	7bbb      	ldrb	r3, [r7, #14]
 800c116:	2b80      	cmp	r3, #128	; 0x80
 800c118:	d009      	beq.n	800c12e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c11a:	7bbb      	ldrb	r3, [r7, #14]
 800c11c:	4619      	mov	r1, r3
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f000 ffec 	bl	800d0fc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c124:	2180      	movs	r1, #128	; 0x80
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 ffe8 	bl	800d0fc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c12c:	e01c      	b.n	800c168 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800c12e:	6839      	ldr	r1, [r7, #0]
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fbe5 	bl	800c900 <USBD_CtlError>
              break;
 800c136:	e017      	b.n	800c168 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	885b      	ldrh	r3, [r3, #2]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d112      	bne.n	800c166 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c146:	2b00      	cmp	r3, #0
 800c148:	d004      	beq.n	800c154 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f000 fff3 	bl	800d13a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fc9c 	bl	800ca92 <USBD_CtlSendStatus>
              }
              break;
 800c15a:	e004      	b.n	800c166 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fbce 	bl	800c900 <USBD_CtlError>
              break;
 800c164:	e000      	b.n	800c168 <USBD_StdEPReq+0x158>
              break;
 800c166:	bf00      	nop
          }
          break;
 800c168:	e0aa      	b.n	800c2c0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c170:	2b02      	cmp	r3, #2
 800c172:	d002      	beq.n	800c17a <USBD_StdEPReq+0x16a>
 800c174:	2b03      	cmp	r3, #3
 800c176:	d032      	beq.n	800c1de <USBD_StdEPReq+0x1ce>
 800c178:	e097      	b.n	800c2aa <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d007      	beq.n	800c190 <USBD_StdEPReq+0x180>
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	2b80      	cmp	r3, #128	; 0x80
 800c184:	d004      	beq.n	800c190 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fbb9 	bl	800c900 <USBD_CtlError>
                break;
 800c18e:	e091      	b.n	800c2b4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c194:	2b00      	cmp	r3, #0
 800c196:	da0b      	bge.n	800c1b0 <USBD_StdEPReq+0x1a0>
 800c198:	7bbb      	ldrb	r3, [r7, #14]
 800c19a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c19e:	4613      	mov	r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4413      	add	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	3310      	adds	r3, #16
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	e00b      	b.n	800c1c8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
 800c1b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 fbfd 	bl	800c9d6 <USBD_CtlSendData>
              break;
 800c1dc:	e06a      	b.n	800c2b4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	da11      	bge.n	800c20a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1e6:	7bbb      	ldrb	r3, [r7, #14]
 800c1e8:	f003 020f 	and.w	r2, r3, #15
 800c1ec:	6879      	ldr	r1, [r7, #4]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	440b      	add	r3, r1
 800c1f8:	3318      	adds	r3, #24
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d117      	bne.n	800c230 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c200:	6839      	ldr	r1, [r7, #0]
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fb7c 	bl	800c900 <USBD_CtlError>
                  break;
 800c208:	e054      	b.n	800c2b4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c20a:	7bbb      	ldrb	r3, [r7, #14]
 800c20c:	f003 020f 	and.w	r2, r3, #15
 800c210:	6879      	ldr	r1, [r7, #4]
 800c212:	4613      	mov	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4413      	add	r3, r2
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	440b      	add	r3, r1
 800c21c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d104      	bne.n	800c230 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c226:	6839      	ldr	r1, [r7, #0]
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fb69 	bl	800c900 <USBD_CtlError>
                  break;
 800c22e:	e041      	b.n	800c2b4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c230:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c234:	2b00      	cmp	r3, #0
 800c236:	da0b      	bge.n	800c250 <USBD_StdEPReq+0x240>
 800c238:	7bbb      	ldrb	r3, [r7, #14]
 800c23a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c23e:	4613      	mov	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	4413      	add	r3, r2
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	3310      	adds	r3, #16
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	4413      	add	r3, r2
 800c24c:	3304      	adds	r3, #4
 800c24e:	e00b      	b.n	800c268 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c250:	7bbb      	ldrb	r3, [r7, #14]
 800c252:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c256:	4613      	mov	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	4413      	add	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	4413      	add	r3, r2
 800c266:	3304      	adds	r3, #4
 800c268:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c26a:	7bbb      	ldrb	r3, [r7, #14]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d002      	beq.n	800c276 <USBD_StdEPReq+0x266>
 800c270:	7bbb      	ldrb	r3, [r7, #14]
 800c272:	2b80      	cmp	r3, #128	; 0x80
 800c274:	d103      	bne.n	800c27e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	2200      	movs	r2, #0
 800c27a:	601a      	str	r2, [r3, #0]
 800c27c:	e00e      	b.n	800c29c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c27e:	7bbb      	ldrb	r3, [r7, #14]
 800c280:	4619      	mov	r1, r3
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 ff78 	bl	800d178 <USBD_LL_IsStallEP>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d003      	beq.n	800c296 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	2201      	movs	r2, #1
 800c292:	601a      	str	r2, [r3, #0]
 800c294:	e002      	b.n	800c29c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2200      	movs	r2, #0
 800c29a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2202      	movs	r2, #2
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 fb97 	bl	800c9d6 <USBD_CtlSendData>
              break;
 800c2a8:	e004      	b.n	800c2b4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c2aa:	6839      	ldr	r1, [r7, #0]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 fb27 	bl	800c900 <USBD_CtlError>
              break;
 800c2b2:	bf00      	nop
          }
          break;
 800c2b4:	e004      	b.n	800c2c0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f000 fb21 	bl	800c900 <USBD_CtlError>
          break;
 800c2be:	bf00      	nop
      }
      break;
 800c2c0:	e004      	b.n	800c2cc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fb1b 	bl	800c900 <USBD_CtlError>
      break;
 800c2ca:	bf00      	nop
  }

  return ret;
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
	...

0800c2d8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b084      	sub	sp, #16
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	885b      	ldrh	r3, [r3, #2]
 800c2f2:	0a1b      	lsrs	r3, r3, #8
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	2b06      	cmp	r3, #6
 800c2fa:	f200 8128 	bhi.w	800c54e <USBD_GetDescriptor+0x276>
 800c2fe:	a201      	add	r2, pc, #4	; (adr r2, 800c304 <USBD_GetDescriptor+0x2c>)
 800c300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c304:	0800c321 	.word	0x0800c321
 800c308:	0800c339 	.word	0x0800c339
 800c30c:	0800c379 	.word	0x0800c379
 800c310:	0800c54f 	.word	0x0800c54f
 800c314:	0800c54f 	.word	0x0800c54f
 800c318:	0800c4ef 	.word	0x0800c4ef
 800c31c:	0800c51b 	.word	0x0800c51b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	7c12      	ldrb	r2, [r2, #16]
 800c32c:	f107 0108 	add.w	r1, r7, #8
 800c330:	4610      	mov	r0, r2
 800c332:	4798      	blx	r3
 800c334:	60f8      	str	r0, [r7, #12]
      break;
 800c336:	e112      	b.n	800c55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	7c1b      	ldrb	r3, [r3, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10d      	bne.n	800c35c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c348:	f107 0208 	add.w	r2, r7, #8
 800c34c:	4610      	mov	r0, r2
 800c34e:	4798      	blx	r3
 800c350:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3301      	adds	r3, #1
 800c356:	2202      	movs	r2, #2
 800c358:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c35a:	e100      	b.n	800c55e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c364:	f107 0208 	add.w	r2, r7, #8
 800c368:	4610      	mov	r0, r2
 800c36a:	4798      	blx	r3
 800c36c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3301      	adds	r3, #1
 800c372:	2202      	movs	r2, #2
 800c374:	701a      	strb	r2, [r3, #0]
      break;
 800c376:	e0f2      	b.n	800c55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	885b      	ldrh	r3, [r3, #2]
 800c37c:	b2db      	uxtb	r3, r3
 800c37e:	2b05      	cmp	r3, #5
 800c380:	f200 80ac 	bhi.w	800c4dc <USBD_GetDescriptor+0x204>
 800c384:	a201      	add	r2, pc, #4	; (adr r2, 800c38c <USBD_GetDescriptor+0xb4>)
 800c386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c38a:	bf00      	nop
 800c38c:	0800c3a5 	.word	0x0800c3a5
 800c390:	0800c3d9 	.word	0x0800c3d9
 800c394:	0800c40d 	.word	0x0800c40d
 800c398:	0800c441 	.word	0x0800c441
 800c39c:	0800c475 	.word	0x0800c475
 800c3a0:	0800c4a9 	.word	0x0800c4a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00b      	beq.n	800c3c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	7c12      	ldrb	r2, [r2, #16]
 800c3bc:	f107 0108 	add.w	r1, r7, #8
 800c3c0:	4610      	mov	r0, r2
 800c3c2:	4798      	blx	r3
 800c3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3c6:	e091      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fa98 	bl	800c900 <USBD_CtlError>
            err++;
 800c3d0:	7afb      	ldrb	r3, [r7, #11]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3d6:	e089      	b.n	800c4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00b      	beq.n	800c3fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c3ea:	689b      	ldr	r3, [r3, #8]
 800c3ec:	687a      	ldr	r2, [r7, #4]
 800c3ee:	7c12      	ldrb	r2, [r2, #16]
 800c3f0:	f107 0108 	add.w	r1, r7, #8
 800c3f4:	4610      	mov	r0, r2
 800c3f6:	4798      	blx	r3
 800c3f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3fa:	e077      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3fc:	6839      	ldr	r1, [r7, #0]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 fa7e 	bl	800c900 <USBD_CtlError>
            err++;
 800c404:	7afb      	ldrb	r3, [r7, #11]
 800c406:	3301      	adds	r3, #1
 800c408:	72fb      	strb	r3, [r7, #11]
          break;
 800c40a:	e06f      	b.n	800c4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00b      	beq.n	800c430 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c41e:	68db      	ldr	r3, [r3, #12]
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	7c12      	ldrb	r2, [r2, #16]
 800c424:	f107 0108 	add.w	r1, r7, #8
 800c428:	4610      	mov	r0, r2
 800c42a:	4798      	blx	r3
 800c42c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c42e:	e05d      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c430:	6839      	ldr	r1, [r7, #0]
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 fa64 	bl	800c900 <USBD_CtlError>
            err++;
 800c438:	7afb      	ldrb	r3, [r7, #11]
 800c43a:	3301      	adds	r3, #1
 800c43c:	72fb      	strb	r3, [r7, #11]
          break;
 800c43e:	e055      	b.n	800c4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c446:	691b      	ldr	r3, [r3, #16]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d00b      	beq.n	800c464 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	7c12      	ldrb	r2, [r2, #16]
 800c458:	f107 0108 	add.w	r1, r7, #8
 800c45c:	4610      	mov	r0, r2
 800c45e:	4798      	blx	r3
 800c460:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c462:	e043      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 fa4a 	bl	800c900 <USBD_CtlError>
            err++;
 800c46c:	7afb      	ldrb	r3, [r7, #11]
 800c46e:	3301      	adds	r3, #1
 800c470:	72fb      	strb	r3, [r7, #11]
          break;
 800c472:	e03b      	b.n	800c4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c47a:	695b      	ldr	r3, [r3, #20]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00b      	beq.n	800c498 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c486:	695b      	ldr	r3, [r3, #20]
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	7c12      	ldrb	r2, [r2, #16]
 800c48c:	f107 0108 	add.w	r1, r7, #8
 800c490:	4610      	mov	r0, r2
 800c492:	4798      	blx	r3
 800c494:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c496:	e029      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 fa30 	bl	800c900 <USBD_CtlError>
            err++;
 800c4a0:	7afb      	ldrb	r3, [r7, #11]
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4a6:	e021      	b.n	800c4ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c4ae:	699b      	ldr	r3, [r3, #24]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d00b      	beq.n	800c4cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	7c12      	ldrb	r2, [r2, #16]
 800c4c0:	f107 0108 	add.w	r1, r7, #8
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4798      	blx	r3
 800c4c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4ca:	e00f      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4cc:	6839      	ldr	r1, [r7, #0]
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 fa16 	bl	800c900 <USBD_CtlError>
            err++;
 800c4d4:	7afb      	ldrb	r3, [r7, #11]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4da:	e007      	b.n	800c4ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 fa0e 	bl	800c900 <USBD_CtlError>
          err++;
 800c4e4:	7afb      	ldrb	r3, [r7, #11]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c4ea:	e038      	b.n	800c55e <USBD_GetDescriptor+0x286>
 800c4ec:	e037      	b.n	800c55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	7c1b      	ldrb	r3, [r3, #16]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d109      	bne.n	800c50a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4fe:	f107 0208 	add.w	r2, r7, #8
 800c502:	4610      	mov	r0, r2
 800c504:	4798      	blx	r3
 800c506:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c508:	e029      	b.n	800c55e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f9f7 	bl	800c900 <USBD_CtlError>
        err++;
 800c512:	7afb      	ldrb	r3, [r7, #11]
 800c514:	3301      	adds	r3, #1
 800c516:	72fb      	strb	r3, [r7, #11]
      break;
 800c518:	e021      	b.n	800c55e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	7c1b      	ldrb	r3, [r3, #16]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d10d      	bne.n	800c53e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c52a:	f107 0208 	add.w	r2, r7, #8
 800c52e:	4610      	mov	r0, r2
 800c530:	4798      	blx	r3
 800c532:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	3301      	adds	r3, #1
 800c538:	2207      	movs	r2, #7
 800c53a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c53c:	e00f      	b.n	800c55e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c53e:	6839      	ldr	r1, [r7, #0]
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f000 f9dd 	bl	800c900 <USBD_CtlError>
        err++;
 800c546:	7afb      	ldrb	r3, [r7, #11]
 800c548:	3301      	adds	r3, #1
 800c54a:	72fb      	strb	r3, [r7, #11]
      break;
 800c54c:	e007      	b.n	800c55e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c54e:	6839      	ldr	r1, [r7, #0]
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 f9d5 	bl	800c900 <USBD_CtlError>
      err++;
 800c556:	7afb      	ldrb	r3, [r7, #11]
 800c558:	3301      	adds	r3, #1
 800c55a:	72fb      	strb	r3, [r7, #11]
      break;
 800c55c:	bf00      	nop
  }

  if (err != 0U)
 800c55e:	7afb      	ldrb	r3, [r7, #11]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d11c      	bne.n	800c59e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c564:	893b      	ldrh	r3, [r7, #8]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d011      	beq.n	800c58e <USBD_GetDescriptor+0x2b6>
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	88db      	ldrh	r3, [r3, #6]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d00d      	beq.n	800c58e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	88da      	ldrh	r2, [r3, #6]
 800c576:	893b      	ldrh	r3, [r7, #8]
 800c578:	4293      	cmp	r3, r2
 800c57a:	bf28      	it	cs
 800c57c:	4613      	movcs	r3, r2
 800c57e:	b29b      	uxth	r3, r3
 800c580:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c582:	893b      	ldrh	r3, [r7, #8]
 800c584:	461a      	mov	r2, r3
 800c586:	68f9      	ldr	r1, [r7, #12]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fa24 	bl	800c9d6 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	88db      	ldrh	r3, [r3, #6]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d104      	bne.n	800c5a0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c596:	6878      	ldr	r0, [r7, #4]
 800c598:	f000 fa7b 	bl	800ca92 <USBD_CtlSendStatus>
 800c59c:	e000      	b.n	800c5a0 <USBD_GetDescriptor+0x2c8>
    return;
 800c59e:	bf00      	nop
    }
  }
}
 800c5a0:	3710      	adds	r7, #16
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop

0800c5a8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
 800c5b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	889b      	ldrh	r3, [r3, #4]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d130      	bne.n	800c61c <USBD_SetAddress+0x74>
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	88db      	ldrh	r3, [r3, #6]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d12c      	bne.n	800c61c <USBD_SetAddress+0x74>
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	885b      	ldrh	r3, [r3, #2]
 800c5c6:	2b7f      	cmp	r3, #127	; 0x7f
 800c5c8:	d828      	bhi.n	800c61c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	885b      	ldrh	r3, [r3, #2]
 800c5ce:	b2db      	uxtb	r3, r3
 800c5d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c5d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5dc:	2b03      	cmp	r3, #3
 800c5de:	d104      	bne.n	800c5ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 f98c 	bl	800c900 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e8:	e01d      	b.n	800c626 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	7bfa      	ldrb	r2, [r7, #15]
 800c5ee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c5f2:	7bfb      	ldrb	r3, [r7, #15]
 800c5f4:	4619      	mov	r1, r3
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 fdeb 	bl	800d1d2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f000 fa48 	bl	800ca92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c602:	7bfb      	ldrb	r3, [r7, #15]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d004      	beq.n	800c612 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2202      	movs	r2, #2
 800c60c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c610:	e009      	b.n	800c626 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2201      	movs	r2, #1
 800c616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c61a:	e004      	b.n	800c626 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c61c:	6839      	ldr	r1, [r7, #0]
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f96e 	bl	800c900 <USBD_CtlError>
  }
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop
 800c628:	3710      	adds	r7, #16
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
	...

0800c630 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	885b      	ldrh	r3, [r3, #2]
 800c63e:	b2da      	uxtb	r2, r3
 800c640:	4b41      	ldr	r3, [pc, #260]	; (800c748 <USBD_SetConfig+0x118>)
 800c642:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c644:	4b40      	ldr	r3, [pc, #256]	; (800c748 <USBD_SetConfig+0x118>)
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d904      	bls.n	800c656 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c64c:	6839      	ldr	r1, [r7, #0]
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f956 	bl	800c900 <USBD_CtlError>
 800c654:	e075      	b.n	800c742 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d002      	beq.n	800c666 <USBD_SetConfig+0x36>
 800c660:	2b03      	cmp	r3, #3
 800c662:	d023      	beq.n	800c6ac <USBD_SetConfig+0x7c>
 800c664:	e062      	b.n	800c72c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c666:	4b38      	ldr	r3, [pc, #224]	; (800c748 <USBD_SetConfig+0x118>)
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d01a      	beq.n	800c6a4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c66e:	4b36      	ldr	r3, [pc, #216]	; (800c748 <USBD_SetConfig+0x118>)
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	461a      	mov	r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2203      	movs	r2, #3
 800c67c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c680:	4b31      	ldr	r3, [pc, #196]	; (800c748 <USBD_SetConfig+0x118>)
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	4619      	mov	r1, r3
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff f9e5 	bl	800ba56 <USBD_SetClassConfig>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d104      	bne.n	800c69c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c692:	6839      	ldr	r1, [r7, #0]
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 f933 	bl	800c900 <USBD_CtlError>
            return;
 800c69a:	e052      	b.n	800c742 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 f9f8 	bl	800ca92 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c6a2:	e04e      	b.n	800c742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 f9f4 	bl	800ca92 <USBD_CtlSendStatus>
        break;
 800c6aa:	e04a      	b.n	800c742 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c6ac:	4b26      	ldr	r3, [pc, #152]	; (800c748 <USBD_SetConfig+0x118>)
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d112      	bne.n	800c6da <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2202      	movs	r2, #2
 800c6b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c6bc:	4b22      	ldr	r3, [pc, #136]	; (800c748 <USBD_SetConfig+0x118>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	461a      	mov	r2, r3
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c6c6:	4b20      	ldr	r3, [pc, #128]	; (800c748 <USBD_SetConfig+0x118>)
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f7ff f9e1 	bl	800ba94 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f9dd 	bl	800ca92 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c6d8:	e033      	b.n	800c742 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c6da:	4b1b      	ldr	r3, [pc, #108]	; (800c748 <USBD_SetConfig+0x118>)
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d01d      	beq.n	800c724 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	685b      	ldr	r3, [r3, #4]
 800c6ec:	b2db      	uxtb	r3, r3
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f7ff f9cf 	bl	800ba94 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c6f6:	4b14      	ldr	r3, [pc, #80]	; (800c748 <USBD_SetConfig+0x118>)
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c700:	4b11      	ldr	r3, [pc, #68]	; (800c748 <USBD_SetConfig+0x118>)
 800c702:	781b      	ldrb	r3, [r3, #0]
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f7ff f9a5 	bl	800ba56 <USBD_SetClassConfig>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d104      	bne.n	800c71c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c712:	6839      	ldr	r1, [r7, #0]
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f000 f8f3 	bl	800c900 <USBD_CtlError>
            return;
 800c71a:	e012      	b.n	800c742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f9b8 	bl	800ca92 <USBD_CtlSendStatus>
        break;
 800c722:	e00e      	b.n	800c742 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 f9b4 	bl	800ca92 <USBD_CtlSendStatus>
        break;
 800c72a:	e00a      	b.n	800c742 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f000 f8e6 	bl	800c900 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c734:	4b04      	ldr	r3, [pc, #16]	; (800c748 <USBD_SetConfig+0x118>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	4619      	mov	r1, r3
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f7ff f9aa 	bl	800ba94 <USBD_ClrClassConfig>
        break;
 800c740:	bf00      	nop
    }
  }
}
 800c742:	3708      	adds	r7, #8
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	2000073c 	.word	0x2000073c

0800c74c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b082      	sub	sp, #8
 800c750:	af00      	add	r7, sp, #0
 800c752:	6078      	str	r0, [r7, #4]
 800c754:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	88db      	ldrh	r3, [r3, #6]
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d004      	beq.n	800c768 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c75e:	6839      	ldr	r1, [r7, #0]
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f000 f8cd 	bl	800c900 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c766:	e022      	b.n	800c7ae <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c76e:	2b02      	cmp	r3, #2
 800c770:	dc02      	bgt.n	800c778 <USBD_GetConfig+0x2c>
 800c772:	2b00      	cmp	r3, #0
 800c774:	dc03      	bgt.n	800c77e <USBD_GetConfig+0x32>
 800c776:	e015      	b.n	800c7a4 <USBD_GetConfig+0x58>
 800c778:	2b03      	cmp	r3, #3
 800c77a:	d00b      	beq.n	800c794 <USBD_GetConfig+0x48>
 800c77c:	e012      	b.n	800c7a4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	3308      	adds	r3, #8
 800c788:	2201      	movs	r2, #1
 800c78a:	4619      	mov	r1, r3
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 f922 	bl	800c9d6 <USBD_CtlSendData>
        break;
 800c792:	e00c      	b.n	800c7ae <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	3304      	adds	r3, #4
 800c798:	2201      	movs	r2, #1
 800c79a:	4619      	mov	r1, r3
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f91a 	bl	800c9d6 <USBD_CtlSendData>
        break;
 800c7a2:	e004      	b.n	800c7ae <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c7a4:	6839      	ldr	r1, [r7, #0]
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 f8aa 	bl	800c900 <USBD_CtlError>
        break;
 800c7ac:	bf00      	nop
}
 800c7ae:	bf00      	nop
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
 800c7be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d81e      	bhi.n	800c80a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	88db      	ldrh	r3, [r3, #6]
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d004      	beq.n	800c7de <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c7d4:	6839      	ldr	r1, [r7, #0]
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f892 	bl	800c900 <USBD_CtlError>
        break;
 800c7dc:	e01a      	b.n	800c814 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d005      	beq.n	800c7fa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	68db      	ldr	r3, [r3, #12]
 800c7f2:	f043 0202 	orr.w	r2, r3, #2
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	330c      	adds	r3, #12
 800c7fe:	2202      	movs	r2, #2
 800c800:	4619      	mov	r1, r3
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f8e7 	bl	800c9d6 <USBD_CtlSendData>
      break;
 800c808:	e004      	b.n	800c814 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c80a:	6839      	ldr	r1, [r7, #0]
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 f877 	bl	800c900 <USBD_CtlError>
      break;
 800c812:	bf00      	nop
  }
}
 800c814:	bf00      	nop
 800c816:	3708      	adds	r7, #8
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b082      	sub	sp, #8
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	885b      	ldrh	r3, [r3, #2]
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d106      	bne.n	800c83c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2201      	movs	r2, #1
 800c832:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f000 f92b 	bl	800ca92 <USBD_CtlSendStatus>
  }
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c854:	3b01      	subs	r3, #1
 800c856:	2b02      	cmp	r3, #2
 800c858:	d80b      	bhi.n	800c872 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	885b      	ldrh	r3, [r3, #2]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d10c      	bne.n	800c87c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f911 	bl	800ca92 <USBD_CtlSendStatus>
      }
      break;
 800c870:	e004      	b.n	800c87c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 f843 	bl	800c900 <USBD_CtlError>
      break;
 800c87a:	e000      	b.n	800c87e <USBD_ClrFeature+0x3a>
      break;
 800c87c:	bf00      	nop
  }
}
 800c87e:	bf00      	nop
 800c880:	3708      	adds	r7, #8
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c886:	b480      	push	{r7}
 800c888:	b083      	sub	sp, #12
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
 800c88e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	781a      	ldrb	r2, [r3, #0]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	785a      	ldrb	r2, [r3, #1]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	3302      	adds	r3, #2
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	b29a      	uxth	r2, r3
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	3303      	adds	r3, #3
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	021b      	lsls	r3, r3, #8
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	4413      	add	r3, r2
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	3304      	adds	r3, #4
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	3305      	adds	r3, #5
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	021b      	lsls	r3, r3, #8
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	4413      	add	r3, r2
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	3306      	adds	r3, #6
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	b29a      	uxth	r2, r3
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	3307      	adds	r3, #7
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	021b      	lsls	r3, r3, #8
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	4413      	add	r3, r2
 800c8ee:	b29a      	uxth	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	80da      	strh	r2, [r3, #6]

}
 800c8f4:	bf00      	nop
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fe:	4770      	bx	lr

0800c900 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b082      	sub	sp, #8
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c90a:	2180      	movs	r1, #128	; 0x80
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fbf5 	bl	800d0fc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c912:	2100      	movs	r1, #0
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 fbf1 	bl	800d0fc <USBD_LL_StallEP>
}
 800c91a:	bf00      	nop
 800c91c:	3708      	adds	r7, #8
 800c91e:	46bd      	mov	sp, r7
 800c920:	bd80      	pop	{r7, pc}

0800c922 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c922:	b580      	push	{r7, lr}
 800c924:	b086      	sub	sp, #24
 800c926:	af00      	add	r7, sp, #0
 800c928:	60f8      	str	r0, [r7, #12]
 800c92a:	60b9      	str	r1, [r7, #8]
 800c92c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c92e:	2300      	movs	r3, #0
 800c930:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d032      	beq.n	800c99e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f000 f834 	bl	800c9a6 <USBD_GetLen>
 800c93e:	4603      	mov	r3, r0
 800c940:	3301      	adds	r3, #1
 800c942:	b29b      	uxth	r3, r3
 800c944:	005b      	lsls	r3, r3, #1
 800c946:	b29a      	uxth	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c94c:	7dfb      	ldrb	r3, [r7, #23]
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	75fa      	strb	r2, [r7, #23]
 800c952:	461a      	mov	r2, r3
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	4413      	add	r3, r2
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	7812      	ldrb	r2, [r2, #0]
 800c95c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	1c5a      	adds	r2, r3, #1
 800c962:	75fa      	strb	r2, [r7, #23]
 800c964:	461a      	mov	r2, r3
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	4413      	add	r3, r2
 800c96a:	2203      	movs	r2, #3
 800c96c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c96e:	e012      	b.n	800c996 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	1c5a      	adds	r2, r3, #1
 800c974:	60fa      	str	r2, [r7, #12]
 800c976:	7dfa      	ldrb	r2, [r7, #23]
 800c978:	1c51      	adds	r1, r2, #1
 800c97a:	75f9      	strb	r1, [r7, #23]
 800c97c:	4611      	mov	r1, r2
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	440a      	add	r2, r1
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c986:	7dfb      	ldrb	r3, [r7, #23]
 800c988:	1c5a      	adds	r2, r3, #1
 800c98a:	75fa      	strb	r2, [r7, #23]
 800c98c:	461a      	mov	r2, r3
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	4413      	add	r3, r2
 800c992:	2200      	movs	r2, #0
 800c994:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d1e8      	bne.n	800c970 <USBD_GetString+0x4e>
    }
  }
}
 800c99e:	bf00      	nop
 800c9a0:	3718      	adds	r7, #24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c9a6:	b480      	push	{r7}
 800c9a8:	b085      	sub	sp, #20
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c9b2:	e005      	b.n	800c9c0 <USBD_GetLen+0x1a>
  {
    len++;
 800c9b4:	7bfb      	ldrb	r3, [r7, #15]
 800c9b6:	3301      	adds	r3, #1
 800c9b8:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	3301      	adds	r3, #1
 800c9be:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d1f5      	bne.n	800c9b4 <USBD_GetLen+0xe>
  }

  return len;
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3714      	adds	r7, #20
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d4:	4770      	bx	lr

0800c9d6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c9d6:	b580      	push	{r7, lr}
 800c9d8:	b084      	sub	sp, #16
 800c9da:	af00      	add	r7, sp, #0
 800c9dc:	60f8      	str	r0, [r7, #12]
 800c9de:	60b9      	str	r1, [r7, #8]
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2202      	movs	r2, #2
 800c9e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c9ec:	88fa      	ldrh	r2, [r7, #6]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c9f2:	88fa      	ldrh	r2, [r7, #6]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9f8:	88fb      	ldrh	r3, [r7, #6]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	2100      	movs	r1, #0
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f000 fc06 	bl	800d210 <USBD_LL_Transmit>

  return USBD_OK;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3710      	adds	r7, #16
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}

0800ca0e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b084      	sub	sp, #16
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	60f8      	str	r0, [r7, #12]
 800ca16:	60b9      	str	r1, [r7, #8]
 800ca18:	4613      	mov	r3, r2
 800ca1a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca1c:	88fb      	ldrh	r3, [r7, #6]
 800ca1e:	68ba      	ldr	r2, [r7, #8]
 800ca20:	2100      	movs	r1, #0
 800ca22:	68f8      	ldr	r0, [r7, #12]
 800ca24:	f000 fbf4 	bl	800d210 <USBD_LL_Transmit>

  return USBD_OK;
 800ca28:	2300      	movs	r3, #0
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3710      	adds	r7, #16
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b084      	sub	sp, #16
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	60f8      	str	r0, [r7, #12]
 800ca3a:	60b9      	str	r1, [r7, #8]
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	2203      	movs	r2, #3
 800ca44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ca48:	88fa      	ldrh	r2, [r7, #6]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800ca50:	88fa      	ldrh	r2, [r7, #6]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca58:	88fb      	ldrh	r3, [r7, #6]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f000 fbf9 	bl	800d256 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca64:	2300      	movs	r3, #0
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b084      	sub	sp, #16
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	60f8      	str	r0, [r7, #12]
 800ca76:	60b9      	str	r1, [r7, #8]
 800ca78:	4613      	mov	r3, r2
 800ca7a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca7c:	88fb      	ldrh	r3, [r7, #6]
 800ca7e:	68ba      	ldr	r2, [r7, #8]
 800ca80:	2100      	movs	r1, #0
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	f000 fbe7 	bl	800d256 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b082      	sub	sp, #8
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2204      	movs	r2, #4
 800ca9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800caa2:	2300      	movs	r3, #0
 800caa4:	2200      	movs	r2, #0
 800caa6:	2100      	movs	r1, #0
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fbb1 	bl	800d210 <USBD_LL_Transmit>

  return USBD_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b082      	sub	sp, #8
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2205      	movs	r2, #5
 800cac4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cac8:	2300      	movs	r3, #0
 800caca:	2200      	movs	r2, #0
 800cacc:	2100      	movs	r1, #0
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f000 fbc1 	bl	800d256 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
	...

0800cae0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cae4:	2200      	movs	r2, #0
 800cae6:	4912      	ldr	r1, [pc, #72]	; (800cb30 <MX_USB_DEVICE_Init+0x50>)
 800cae8:	4812      	ldr	r0, [pc, #72]	; (800cb34 <MX_USB_DEVICE_Init+0x54>)
 800caea:	f7fe ff58 	bl	800b99e <USBD_Init>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800caf4:	f7f5 f984 	bl	8001e00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800caf8:	490f      	ldr	r1, [pc, #60]	; (800cb38 <MX_USB_DEVICE_Init+0x58>)
 800cafa:	480e      	ldr	r0, [pc, #56]	; (800cb34 <MX_USB_DEVICE_Init+0x54>)
 800cafc:	f7fe ff7a 	bl	800b9f4 <USBD_RegisterClass>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d001      	beq.n	800cb0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb06:	f7f5 f97b 	bl	8001e00 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800cb0a:	490c      	ldr	r1, [pc, #48]	; (800cb3c <MX_USB_DEVICE_Init+0x5c>)
 800cb0c:	4809      	ldr	r0, [pc, #36]	; (800cb34 <MX_USB_DEVICE_Init+0x54>)
 800cb0e:	f7fe ff2f 	bl	800b970 <USBD_CUSTOM_HID_RegisterInterface>
 800cb12:	4603      	mov	r3, r0
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d001      	beq.n	800cb1c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cb18:	f7f5 f972 	bl	8001e00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb1c:	4805      	ldr	r0, [pc, #20]	; (800cb34 <MX_USB_DEVICE_Init+0x54>)
 800cb1e:	f7fe ff83 	bl	800ba28 <USBD_Start>
 800cb22:	4603      	mov	r3, r0
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d001      	beq.n	800cb2c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cb28:	f7f5 f96a 	bl	8001e00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cb2c:	bf00      	nop
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	2000011c 	.word	0x2000011c
 800cb34:	20000740 	.word	0x20000740
 800cb38:	20000014 	.word	0x20000014
 800cb3c:	2000010c 	.word	0x2000010c

0800cb40 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800cb40:	b480      	push	{r7}
 800cb42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cb44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr

0800cb50 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800cb50:	b480      	push	{r7}
 800cb52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800cb54:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	4770      	bx	lr

0800cb60 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *state)
{
 800cb60:	b4f0      	push	{r4, r5, r6, r7}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */

	memcpy(report_buffer, state, 64);
 800cb68:	4a0e      	ldr	r2, [pc, #56]	; (800cba4 <CUSTOM_HID_OutEvent_FS+0x44>)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4610      	mov	r0, r2
 800cb6e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800cb72:	4602      	mov	r2, r0
 800cb74:	4619      	mov	r1, r3
 800cb76:	f8d1 c000 	ldr.w	ip, [r1]
 800cb7a:	684e      	ldr	r6, [r1, #4]
 800cb7c:	688d      	ldr	r5, [r1, #8]
 800cb7e:	68c9      	ldr	r1, [r1, #12]
 800cb80:	f8c2 c000 	str.w	ip, [r2]
 800cb84:	6056      	str	r6, [r2, #4]
 800cb86:	6095      	str	r5, [r2, #8]
 800cb88:	60d1      	str	r1, [r2, #12]
 800cb8a:	3310      	adds	r3, #16
 800cb8c:	3010      	adds	r0, #16
 800cb8e:	42a3      	cmp	r3, r4
 800cb90:	d1ef      	bne.n	800cb72 <CUSTOM_HID_OutEvent_FS+0x12>

	flag_rx = 1;
 800cb92:	4b05      	ldr	r3, [pc, #20]	; (800cba8 <CUSTOM_HID_OutEvent_FS+0x48>)
 800cb94:	2201      	movs	r2, #1
 800cb96:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 800cb98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bcf0      	pop	{r4, r5, r6, r7}
 800cba2:	4770      	bx	lr
 800cba4:	200006e4 	.word	0x200006e4
 800cba8:	20000725 	.word	0x20000725

0800cbac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	6039      	str	r1, [r7, #0]
 800cbb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	2212      	movs	r2, #18
 800cbbc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cbbe:	4b03      	ldr	r3, [pc, #12]	; (800cbcc <USBD_FS_DeviceDescriptor+0x20>)
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	20000138 	.word	0x20000138

0800cbd0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	6039      	str	r1, [r7, #0]
 800cbda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	2204      	movs	r2, #4
 800cbe0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cbe2:	4b03      	ldr	r3, [pc, #12]	; (800cbf0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr
 800cbf0:	2000014c 	.word	0x2000014c

0800cbf4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	6039      	str	r1, [r7, #0]
 800cbfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cc00:	79fb      	ldrb	r3, [r7, #7]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d105      	bne.n	800cc12 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	4907      	ldr	r1, [pc, #28]	; (800cc28 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc0a:	4808      	ldr	r0, [pc, #32]	; (800cc2c <USBD_FS_ProductStrDescriptor+0x38>)
 800cc0c:	f7ff fe89 	bl	800c922 <USBD_GetString>
 800cc10:	e004      	b.n	800cc1c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	4904      	ldr	r1, [pc, #16]	; (800cc28 <USBD_FS_ProductStrDescriptor+0x34>)
 800cc16:	4805      	ldr	r0, [pc, #20]	; (800cc2c <USBD_FS_ProductStrDescriptor+0x38>)
 800cc18:	f7ff fe83 	bl	800c922 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cc1c:	4b02      	ldr	r3, [pc, #8]	; (800cc28 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3708      	adds	r7, #8
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	20000a04 	.word	0x20000a04
 800cc2c:	0800fee4 	.word	0x0800fee4

0800cc30 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	4603      	mov	r3, r0
 800cc38:	6039      	str	r1, [r7, #0]
 800cc3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cc3c:	683a      	ldr	r2, [r7, #0]
 800cc3e:	4904      	ldr	r1, [pc, #16]	; (800cc50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cc40:	4804      	ldr	r0, [pc, #16]	; (800cc54 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cc42:	f7ff fe6e 	bl	800c922 <USBD_GetString>
  return USBD_StrDesc;
 800cc46:	4b02      	ldr	r3, [pc, #8]	; (800cc50 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	20000a04 	.word	0x20000a04
 800cc54:	0800ff04 	.word	0x0800ff04

0800cc58 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	4603      	mov	r3, r0
 800cc60:	6039      	str	r1, [r7, #0]
 800cc62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	221a      	movs	r2, #26
 800cc68:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cc6a:	f000 f843 	bl	800ccf4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cc6e:	4b02      	ldr	r3, [pc, #8]	; (800cc78 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3708      	adds	r7, #8
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	20000150 	.word	0x20000150

0800cc7c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	4603      	mov	r3, r0
 800cc84:	6039      	str	r1, [r7, #0]
 800cc86:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cc88:	79fb      	ldrb	r3, [r7, #7]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d105      	bne.n	800cc9a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc8e:	683a      	ldr	r2, [r7, #0]
 800cc90:	4907      	ldr	r1, [pc, #28]	; (800ccb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc92:	4808      	ldr	r0, [pc, #32]	; (800ccb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cc94:	f7ff fe45 	bl	800c922 <USBD_GetString>
 800cc98:	e004      	b.n	800cca4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cc9a:	683a      	ldr	r2, [r7, #0]
 800cc9c:	4904      	ldr	r1, [pc, #16]	; (800ccb0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cc9e:	4805      	ldr	r0, [pc, #20]	; (800ccb4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cca0:	f7ff fe3f 	bl	800c922 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cca4:	4b02      	ldr	r3, [pc, #8]	; (800ccb0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3708      	adds	r7, #8
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	20000a04 	.word	0x20000a04
 800ccb4:	0800ff18 	.word	0x0800ff18

0800ccb8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b082      	sub	sp, #8
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	6039      	str	r1, [r7, #0]
 800ccc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccc4:	79fb      	ldrb	r3, [r7, #7]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d105      	bne.n	800ccd6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccca:	683a      	ldr	r2, [r7, #0]
 800cccc:	4907      	ldr	r1, [pc, #28]	; (800ccec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccce:	4808      	ldr	r0, [pc, #32]	; (800ccf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccd0:	f7ff fe27 	bl	800c922 <USBD_GetString>
 800ccd4:	e004      	b.n	800cce0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ccd6:	683a      	ldr	r2, [r7, #0]
 800ccd8:	4904      	ldr	r1, [pc, #16]	; (800ccec <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ccda:	4805      	ldr	r0, [pc, #20]	; (800ccf0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ccdc:	f7ff fe21 	bl	800c922 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cce0:	4b02      	ldr	r3, [pc, #8]	; (800ccec <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3708      	adds	r7, #8
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}
 800ccea:	bf00      	nop
 800ccec:	20000a04 	.word	0x20000a04
 800ccf0:	0800ff2c 	.word	0x0800ff2c

0800ccf4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b084      	sub	sp, #16
 800ccf8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ccfa:	4b0f      	ldr	r3, [pc, #60]	; (800cd38 <Get_SerialNum+0x44>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cd00:	4b0e      	ldr	r3, [pc, #56]	; (800cd3c <Get_SerialNum+0x48>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cd06:	4b0e      	ldr	r3, [pc, #56]	; (800cd40 <Get_SerialNum+0x4c>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	4413      	add	r3, r2
 800cd12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d009      	beq.n	800cd2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cd1a:	2208      	movs	r2, #8
 800cd1c:	4909      	ldr	r1, [pc, #36]	; (800cd44 <Get_SerialNum+0x50>)
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f000 f814 	bl	800cd4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cd24:	2204      	movs	r2, #4
 800cd26:	4908      	ldr	r1, [pc, #32]	; (800cd48 <Get_SerialNum+0x54>)
 800cd28:	68b8      	ldr	r0, [r7, #8]
 800cd2a:	f000 f80f 	bl	800cd4c <IntToUnicode>
  }
}
 800cd2e:	bf00      	nop
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
 800cd36:	bf00      	nop
 800cd38:	1ffff7ac 	.word	0x1ffff7ac
 800cd3c:	1ffff7b0 	.word	0x1ffff7b0
 800cd40:	1ffff7b4 	.word	0x1ffff7b4
 800cd44:	20000152 	.word	0x20000152
 800cd48:	20000162 	.word	0x20000162

0800cd4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b087      	sub	sp, #28
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	4613      	mov	r3, r2
 800cd58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cd5e:	2300      	movs	r3, #0
 800cd60:	75fb      	strb	r3, [r7, #23]
 800cd62:	e027      	b.n	800cdb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	0f1b      	lsrs	r3, r3, #28
 800cd68:	2b09      	cmp	r3, #9
 800cd6a:	d80b      	bhi.n	800cd84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	0f1b      	lsrs	r3, r3, #28
 800cd70:	b2da      	uxtb	r2, r3
 800cd72:	7dfb      	ldrb	r3, [r7, #23]
 800cd74:	005b      	lsls	r3, r3, #1
 800cd76:	4619      	mov	r1, r3
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	440b      	add	r3, r1
 800cd7c:	3230      	adds	r2, #48	; 0x30
 800cd7e:	b2d2      	uxtb	r2, r2
 800cd80:	701a      	strb	r2, [r3, #0]
 800cd82:	e00a      	b.n	800cd9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	0f1b      	lsrs	r3, r3, #28
 800cd88:	b2da      	uxtb	r2, r3
 800cd8a:	7dfb      	ldrb	r3, [r7, #23]
 800cd8c:	005b      	lsls	r3, r3, #1
 800cd8e:	4619      	mov	r1, r3
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	440b      	add	r3, r1
 800cd94:	3237      	adds	r2, #55	; 0x37
 800cd96:	b2d2      	uxtb	r2, r2
 800cd98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	011b      	lsls	r3, r3, #4
 800cd9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cda0:	7dfb      	ldrb	r3, [r7, #23]
 800cda2:	005b      	lsls	r3, r3, #1
 800cda4:	3301      	adds	r3, #1
 800cda6:	68ba      	ldr	r2, [r7, #8]
 800cda8:	4413      	add	r3, r2
 800cdaa:	2200      	movs	r2, #0
 800cdac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cdae:	7dfb      	ldrb	r3, [r7, #23]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	75fb      	strb	r3, [r7, #23]
 800cdb4:	7dfa      	ldrb	r2, [r7, #23]
 800cdb6:	79fb      	ldrb	r3, [r7, #7]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d3d3      	bcc.n	800cd64 <IntToUnicode+0x18>
  }
}
 800cdbc:	bf00      	nop
 800cdbe:	bf00      	nop
 800cdc0:	371c      	adds	r7, #28
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr
	...

0800cdcc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b08a      	sub	sp, #40	; 0x28
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdd4:	f107 0314 	add.w	r3, r7, #20
 800cdd8:	2200      	movs	r2, #0
 800cdda:	601a      	str	r2, [r3, #0]
 800cddc:	605a      	str	r2, [r3, #4]
 800cdde:	609a      	str	r2, [r3, #8]
 800cde0:	60da      	str	r2, [r3, #12]
 800cde2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a1c      	ldr	r2, [pc, #112]	; (800ce5c <HAL_PCD_MspInit+0x90>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d131      	bne.n	800ce52 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cdee:	4b1c      	ldr	r3, [pc, #112]	; (800ce60 <HAL_PCD_MspInit+0x94>)
 800cdf0:	695b      	ldr	r3, [r3, #20]
 800cdf2:	4a1b      	ldr	r2, [pc, #108]	; (800ce60 <HAL_PCD_MspInit+0x94>)
 800cdf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdf8:	6153      	str	r3, [r2, #20]
 800cdfa:	4b19      	ldr	r3, [pc, #100]	; (800ce60 <HAL_PCD_MspInit+0x94>)
 800cdfc:	695b      	ldr	r3, [r3, #20]
 800cdfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce02:	613b      	str	r3, [r7, #16]
 800ce04:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800ce06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ce0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce10:	2300      	movs	r3, #0
 800ce12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ce14:	2303      	movs	r3, #3
 800ce16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 800ce18:	230e      	movs	r3, #14
 800ce1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce1c:	f107 0314 	add.w	r3, r7, #20
 800ce20:	4619      	mov	r1, r3
 800ce22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ce26:	f7f6 f81b 	bl	8002e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ce2a:	4b0d      	ldr	r3, [pc, #52]	; (800ce60 <HAL_PCD_MspInit+0x94>)
 800ce2c:	69db      	ldr	r3, [r3, #28]
 800ce2e:	4a0c      	ldr	r2, [pc, #48]	; (800ce60 <HAL_PCD_MspInit+0x94>)
 800ce30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ce34:	61d3      	str	r3, [r2, #28]
 800ce36:	4b0a      	ldr	r3, [pc, #40]	; (800ce60 <HAL_PCD_MspInit+0x94>)
 800ce38:	69db      	ldr	r3, [r3, #28]
 800ce3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce3e:	60fb      	str	r3, [r7, #12]
 800ce40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800ce42:	2200      	movs	r2, #0
 800ce44:	2100      	movs	r1, #0
 800ce46:	2014      	movs	r0, #20
 800ce48:	f7f5 ffd3 	bl	8002df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800ce4c:	2014      	movs	r0, #20
 800ce4e:	f7f5 ffec 	bl	8002e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ce52:	bf00      	nop
 800ce54:	3728      	adds	r7, #40	; 0x28
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	40005c00 	.word	0x40005c00
 800ce60:	40021000 	.word	0x40021000

0800ce64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b082      	sub	sp, #8
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800ce78:	4619      	mov	r1, r3
 800ce7a:	4610      	mov	r0, r2
 800ce7c:	f7fe fe1d 	bl	800baba <USBD_LL_SetupStage>
}
 800ce80:	bf00      	nop
 800ce82:	3708      	adds	r7, #8
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}

0800ce88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	460b      	mov	r3, r1
 800ce92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ce9a:	78fa      	ldrb	r2, [r7, #3]
 800ce9c:	6879      	ldr	r1, [r7, #4]
 800ce9e:	4613      	mov	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4413      	add	r3, r2
 800cea4:	00db      	lsls	r3, r3, #3
 800cea6:	440b      	add	r3, r1
 800cea8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800ceac:	681a      	ldr	r2, [r3, #0]
 800ceae:	78fb      	ldrb	r3, [r7, #3]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	f7fe fe4f 	bl	800bb54 <USBD_LL_DataOutStage>
}
 800ceb6:	bf00      	nop
 800ceb8:	3708      	adds	r7, #8
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b082      	sub	sp, #8
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
 800cec6:	460b      	mov	r3, r1
 800cec8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800ced0:	78fa      	ldrb	r2, [r7, #3]
 800ced2:	6879      	ldr	r1, [r7, #4]
 800ced4:	4613      	mov	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4413      	add	r3, r2
 800ceda:	00db      	lsls	r3, r3, #3
 800cedc:	440b      	add	r3, r1
 800cede:	333c      	adds	r3, #60	; 0x3c
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	78fb      	ldrb	r3, [r7, #3]
 800cee4:	4619      	mov	r1, r3
 800cee6:	f7fe fea6 	bl	800bc36 <USBD_LL_DataInStage>
}
 800ceea:	bf00      	nop
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}

0800cef2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cef2:	b580      	push	{r7, lr}
 800cef4:	b082      	sub	sp, #8
 800cef6:	af00      	add	r7, sp, #0
 800cef8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cf00:	4618      	mov	r0, r3
 800cf02:	f7fe ffb9 	bl	800be78 <USBD_LL_SOF>
}
 800cf06:	bf00      	nop
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b084      	sub	sp, #16
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cf16:	2301      	movs	r3, #1
 800cf18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	689b      	ldr	r3, [r3, #8]
 800cf1e:	2b02      	cmp	r3, #2
 800cf20:	d001      	beq.n	800cf26 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cf22:	f7f4 ff6d 	bl	8001e00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cf2c:	7bfa      	ldrb	r2, [r7, #15]
 800cf2e:	4611      	mov	r1, r2
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7fe ff66 	bl	800be02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7fe ff1f 	bl	800bd80 <USBD_LL_Reset>
}
 800cf42:	bf00      	nop
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
	...

0800cf4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b082      	sub	sp, #8
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7fe ff61 	bl	800be22 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	699b      	ldr	r3, [r3, #24]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d005      	beq.n	800cf74 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cf68:	4b04      	ldr	r3, [pc, #16]	; (800cf7c <HAL_PCD_SuspendCallback+0x30>)
 800cf6a:	691b      	ldr	r3, [r3, #16]
 800cf6c:	4a03      	ldr	r2, [pc, #12]	; (800cf7c <HAL_PCD_SuspendCallback+0x30>)
 800cf6e:	f043 0306 	orr.w	r3, r3, #6
 800cf72:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cf74:	bf00      	nop
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}
 800cf7c:	e000ed00 	.word	0xe000ed00

0800cf80 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f7fe ff5c 	bl	800be4c <USBD_LL_Resume>
}
 800cf94:	bf00      	nop
 800cf96:	3708      	adds	r7, #8
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b082      	sub	sp, #8
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cfa4:	4a23      	ldr	r2, [pc, #140]	; (800d034 <USBD_LL_Init+0x98>)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4a21      	ldr	r2, [pc, #132]	; (800d034 <USBD_LL_Init+0x98>)
 800cfb0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800cfb4:	4b1f      	ldr	r3, [pc, #124]	; (800d034 <USBD_LL_Init+0x98>)
 800cfb6:	4a20      	ldr	r2, [pc, #128]	; (800d038 <USBD_LL_Init+0x9c>)
 800cfb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cfba:	4b1e      	ldr	r3, [pc, #120]	; (800d034 <USBD_LL_Init+0x98>)
 800cfbc:	2208      	movs	r2, #8
 800cfbe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cfc0:	4b1c      	ldr	r3, [pc, #112]	; (800d034 <USBD_LL_Init+0x98>)
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cfc6:	4b1b      	ldr	r3, [pc, #108]	; (800d034 <USBD_LL_Init+0x98>)
 800cfc8:	2202      	movs	r2, #2
 800cfca:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cfcc:	4b19      	ldr	r3, [pc, #100]	; (800d034 <USBD_LL_Init+0x98>)
 800cfce:	2200      	movs	r2, #0
 800cfd0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cfd2:	4b18      	ldr	r3, [pc, #96]	; (800d034 <USBD_LL_Init+0x98>)
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cfd8:	4816      	ldr	r0, [pc, #88]	; (800d034 <USBD_LL_Init+0x98>)
 800cfda:	f7f6 fe8e 	bl	8003cfa <HAL_PCD_Init>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d001      	beq.n	800cfe8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cfe4:	f7f4 ff0c 	bl	8001e00 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cfee:	2318      	movs	r3, #24
 800cff0:	2200      	movs	r2, #0
 800cff2:	2100      	movs	r1, #0
 800cff4:	f7f8 faff 	bl	80055f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cffe:	2358      	movs	r3, #88	; 0x58
 800d000:	2200      	movs	r2, #0
 800d002:	2180      	movs	r1, #128	; 0x80
 800d004:	f7f8 faf7 	bl	80055f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d00e:	2398      	movs	r3, #152	; 0x98
 800d010:	2200      	movs	r2, #0
 800d012:	2181      	movs	r1, #129	; 0x81
 800d014:	f7f8 faef 	bl	80055f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d01e:	23d8      	movs	r3, #216	; 0xd8
 800d020:	2200      	movs	r2, #0
 800d022:	2101      	movs	r1, #1
 800d024:	f7f8 fae7 	bl	80055f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 800d028:	2300      	movs	r3, #0
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	3708      	adds	r7, #8
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}
 800d032:	bf00      	nop
 800d034:	20000c04 	.word	0x20000c04
 800d038:	40005c00 	.word	0x40005c00

0800d03c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d048:	2300      	movs	r3, #0
 800d04a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d052:	4618      	mov	r0, r3
 800d054:	f7f6 ff23 	bl	8003e9e <HAL_PCD_Start>
 800d058:	4603      	mov	r3, r0
 800d05a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d05c:	7bfb      	ldrb	r3, [r7, #15]
 800d05e:	4618      	mov	r0, r3
 800d060:	f000 f940 	bl	800d2e4 <USBD_Get_USB_Status>
 800d064:	4603      	mov	r3, r0
 800d066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d068:	7bbb      	ldrb	r3, [r7, #14]
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b084      	sub	sp, #16
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
 800d07a:	4608      	mov	r0, r1
 800d07c:	4611      	mov	r1, r2
 800d07e:	461a      	mov	r2, r3
 800d080:	4603      	mov	r3, r0
 800d082:	70fb      	strb	r3, [r7, #3]
 800d084:	460b      	mov	r3, r1
 800d086:	70bb      	strb	r3, [r7, #2]
 800d088:	4613      	mov	r3, r2
 800d08a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d08c:	2300      	movs	r3, #0
 800d08e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d090:	2300      	movs	r3, #0
 800d092:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d09a:	78bb      	ldrb	r3, [r7, #2]
 800d09c:	883a      	ldrh	r2, [r7, #0]
 800d09e:	78f9      	ldrb	r1, [r7, #3]
 800d0a0:	f7f7 f81c 	bl	80040dc <HAL_PCD_EP_Open>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0a8:	7bfb      	ldrb	r3, [r7, #15]
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f000 f91a 	bl	800d2e4 <USBD_Get_USB_Status>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}

0800d0be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0be:	b580      	push	{r7, lr}
 800d0c0:	b084      	sub	sp, #16
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0d8:	78fa      	ldrb	r2, [r7, #3]
 800d0da:	4611      	mov	r1, r2
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7f7 f85a 	bl	8004196 <HAL_PCD_EP_Close>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d0e6:	7bfb      	ldrb	r3, [r7, #15]
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f000 f8fb 	bl	800d2e4 <USBD_Get_USB_Status>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d0f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b084      	sub	sp, #16
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	460b      	mov	r3, r1
 800d106:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d108:	2300      	movs	r3, #0
 800d10a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d10c:	2300      	movs	r3, #0
 800d10e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d116:	78fa      	ldrb	r2, [r7, #3]
 800d118:	4611      	mov	r1, r2
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7f7 f8eb 	bl	80042f6 <HAL_PCD_EP_SetStall>
 800d120:	4603      	mov	r3, r0
 800d122:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d124:	7bfb      	ldrb	r3, [r7, #15]
 800d126:	4618      	mov	r0, r3
 800d128:	f000 f8dc 	bl	800d2e4 <USBD_Get_USB_Status>
 800d12c:	4603      	mov	r3, r0
 800d12e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d130:	7bbb      	ldrb	r3, [r7, #14]
}
 800d132:	4618      	mov	r0, r3
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}

0800d13a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d13a:	b580      	push	{r7, lr}
 800d13c:	b084      	sub	sp, #16
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	460b      	mov	r3, r1
 800d144:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d146:	2300      	movs	r3, #0
 800d148:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d154:	78fa      	ldrb	r2, [r7, #3]
 800d156:	4611      	mov	r1, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	f7f7 f91e 	bl	800439a <HAL_PCD_EP_ClrStall>
 800d15e:	4603      	mov	r3, r0
 800d160:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d162:	7bfb      	ldrb	r3, [r7, #15]
 800d164:	4618      	mov	r0, r3
 800d166:	f000 f8bd 	bl	800d2e4 <USBD_Get_USB_Status>
 800d16a:	4603      	mov	r3, r0
 800d16c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d16e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d170:	4618      	mov	r0, r3
 800d172:	3710      	adds	r7, #16
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d178:	b480      	push	{r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
 800d180:	460b      	mov	r3, r1
 800d182:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d18a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d18c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d190:	2b00      	cmp	r3, #0
 800d192:	da0c      	bge.n	800d1ae <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d194:	78fb      	ldrb	r3, [r7, #3]
 800d196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d19a:	68f9      	ldr	r1, [r7, #12]
 800d19c:	1c5a      	adds	r2, r3, #1
 800d19e:	4613      	mov	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4413      	add	r3, r2
 800d1a4:	00db      	lsls	r3, r3, #3
 800d1a6:	440b      	add	r3, r1
 800d1a8:	3302      	adds	r3, #2
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	e00b      	b.n	800d1c6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d1ae:	78fb      	ldrb	r3, [r7, #3]
 800d1b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d1b4:	68f9      	ldr	r1, [r7, #12]
 800d1b6:	4613      	mov	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	4413      	add	r3, r2
 800d1bc:	00db      	lsls	r3, r3, #3
 800d1be:	440b      	add	r3, r1
 800d1c0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d1c4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3714      	adds	r7, #20
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr

0800d1d2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d1d2:	b580      	push	{r7, lr}
 800d1d4:	b084      	sub	sp, #16
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
 800d1da:	460b      	mov	r3, r1
 800d1dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d1ec:	78fa      	ldrb	r2, [r7, #3]
 800d1ee:	4611      	mov	r1, r2
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	f7f6 ff4e 	bl	8004092 <HAL_PCD_SetAddress>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1fa:	7bfb      	ldrb	r3, [r7, #15]
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f000 f871 	bl	800d2e4 <USBD_Get_USB_Status>
 800d202:	4603      	mov	r3, r0
 800d204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d206:	7bbb      	ldrb	r3, [r7, #14]
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3710      	adds	r7, #16
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b086      	sub	sp, #24
 800d214:	af00      	add	r7, sp, #0
 800d216:	60f8      	str	r0, [r7, #12]
 800d218:	607a      	str	r2, [r7, #4]
 800d21a:	461a      	mov	r2, r3
 800d21c:	460b      	mov	r3, r1
 800d21e:	72fb      	strb	r3, [r7, #11]
 800d220:	4613      	mov	r3, r2
 800d222:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d224:	2300      	movs	r3, #0
 800d226:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d228:	2300      	movs	r3, #0
 800d22a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d232:	893b      	ldrh	r3, [r7, #8]
 800d234:	7af9      	ldrb	r1, [r7, #11]
 800d236:	687a      	ldr	r2, [r7, #4]
 800d238:	f7f7 f826 	bl	8004288 <HAL_PCD_EP_Transmit>
 800d23c:	4603      	mov	r3, r0
 800d23e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d240:	7dfb      	ldrb	r3, [r7, #23]
 800d242:	4618      	mov	r0, r3
 800d244:	f000 f84e 	bl	800d2e4 <USBD_Get_USB_Status>
 800d248:	4603      	mov	r3, r0
 800d24a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d24c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3718      	adds	r7, #24
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b086      	sub	sp, #24
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	60f8      	str	r0, [r7, #12]
 800d25e:	607a      	str	r2, [r7, #4]
 800d260:	461a      	mov	r2, r3
 800d262:	460b      	mov	r3, r1
 800d264:	72fb      	strb	r3, [r7, #11]
 800d266:	4613      	mov	r3, r2
 800d268:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d26a:	2300      	movs	r3, #0
 800d26c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d26e:	2300      	movs	r3, #0
 800d270:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d278:	893b      	ldrh	r3, [r7, #8]
 800d27a:	7af9      	ldrb	r1, [r7, #11]
 800d27c:	687a      	ldr	r2, [r7, #4]
 800d27e:	f7f6 ffd2 	bl	8004226 <HAL_PCD_EP_Receive>
 800d282:	4603      	mov	r3, r0
 800d284:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d286:	7dfb      	ldrb	r3, [r7, #23]
 800d288:	4618      	mov	r0, r3
 800d28a:	f000 f82b 	bl	800d2e4 <USBD_Get_USB_Status>
 800d28e:	4603      	mov	r3, r0
 800d290:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d292:	7dbb      	ldrb	r3, [r7, #22]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3718      	adds	r7, #24
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b083      	sub	sp, #12
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800d2a4:	4b03      	ldr	r3, [pc, #12]	; (800d2b4 <USBD_static_malloc+0x18>)
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	370c      	adds	r7, #12
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b0:	4770      	bx	lr
 800d2b2:	bf00      	nop
 800d2b4:	20000ef0 	.word	0x20000ef0

0800d2b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b083      	sub	sp, #12
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]

}
 800d2c0:	bf00      	nop
 800d2c2:	370c      	adds	r7, #12
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ca:	4770      	bx	lr

0800d2cc <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2cc:	b480      	push	{r7}
 800d2ce:	b083      	sub	sp, #12
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
 800d2d4:	460b      	mov	r3, r1
 800d2d6:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d2d8:	bf00      	nop
 800d2da:	370c      	adds	r7, #12
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e2:	4770      	bx	lr

0800d2e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b085      	sub	sp, #20
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d2f2:	79fb      	ldrb	r3, [r7, #7]
 800d2f4:	2b03      	cmp	r3, #3
 800d2f6:	d817      	bhi.n	800d328 <USBD_Get_USB_Status+0x44>
 800d2f8:	a201      	add	r2, pc, #4	; (adr r2, 800d300 <USBD_Get_USB_Status+0x1c>)
 800d2fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2fe:	bf00      	nop
 800d300:	0800d311 	.word	0x0800d311
 800d304:	0800d317 	.word	0x0800d317
 800d308:	0800d31d 	.word	0x0800d31d
 800d30c:	0800d323 	.word	0x0800d323
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d310:	2300      	movs	r3, #0
 800d312:	73fb      	strb	r3, [r7, #15]
    break;
 800d314:	e00b      	b.n	800d32e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d316:	2302      	movs	r3, #2
 800d318:	73fb      	strb	r3, [r7, #15]
    break;
 800d31a:	e008      	b.n	800d32e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d31c:	2301      	movs	r3, #1
 800d31e:	73fb      	strb	r3, [r7, #15]
    break;
 800d320:	e005      	b.n	800d32e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d322:	2302      	movs	r3, #2
 800d324:	73fb      	strb	r3, [r7, #15]
    break;
 800d326:	e002      	b.n	800d32e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d328:	2302      	movs	r3, #2
 800d32a:	73fb      	strb	r3, [r7, #15]
    break;
 800d32c:	bf00      	nop
  }
  return usb_status;
 800d32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d330:	4618      	mov	r0, r3
 800d332:	3714      	adds	r7, #20
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr

0800d33c <__errno>:
 800d33c:	4b01      	ldr	r3, [pc, #4]	; (800d344 <__errno+0x8>)
 800d33e:	6818      	ldr	r0, [r3, #0]
 800d340:	4770      	bx	lr
 800d342:	bf00      	nop
 800d344:	2000016c 	.word	0x2000016c

0800d348 <__libc_init_array>:
 800d348:	b570      	push	{r4, r5, r6, lr}
 800d34a:	4d0d      	ldr	r5, [pc, #52]	; (800d380 <__libc_init_array+0x38>)
 800d34c:	4c0d      	ldr	r4, [pc, #52]	; (800d384 <__libc_init_array+0x3c>)
 800d34e:	1b64      	subs	r4, r4, r5
 800d350:	10a4      	asrs	r4, r4, #2
 800d352:	2600      	movs	r6, #0
 800d354:	42a6      	cmp	r6, r4
 800d356:	d109      	bne.n	800d36c <__libc_init_array+0x24>
 800d358:	4d0b      	ldr	r5, [pc, #44]	; (800d388 <__libc_init_array+0x40>)
 800d35a:	4c0c      	ldr	r4, [pc, #48]	; (800d38c <__libc_init_array+0x44>)
 800d35c:	f002 fdaa 	bl	800feb4 <_init>
 800d360:	1b64      	subs	r4, r4, r5
 800d362:	10a4      	asrs	r4, r4, #2
 800d364:	2600      	movs	r6, #0
 800d366:	42a6      	cmp	r6, r4
 800d368:	d105      	bne.n	800d376 <__libc_init_array+0x2e>
 800d36a:	bd70      	pop	{r4, r5, r6, pc}
 800d36c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d370:	4798      	blx	r3
 800d372:	3601      	adds	r6, #1
 800d374:	e7ee      	b.n	800d354 <__libc_init_array+0xc>
 800d376:	f855 3b04 	ldr.w	r3, [r5], #4
 800d37a:	4798      	blx	r3
 800d37c:	3601      	adds	r6, #1
 800d37e:	e7f2      	b.n	800d366 <__libc_init_array+0x1e>
 800d380:	08010354 	.word	0x08010354
 800d384:	08010354 	.word	0x08010354
 800d388:	08010354 	.word	0x08010354
 800d38c:	08010358 	.word	0x08010358

0800d390 <memset>:
 800d390:	4402      	add	r2, r0
 800d392:	4603      	mov	r3, r0
 800d394:	4293      	cmp	r3, r2
 800d396:	d100      	bne.n	800d39a <memset+0xa>
 800d398:	4770      	bx	lr
 800d39a:	f803 1b01 	strb.w	r1, [r3], #1
 800d39e:	e7f9      	b.n	800d394 <memset+0x4>

0800d3a0 <__cvt>:
 800d3a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a4:	ec55 4b10 	vmov	r4, r5, d0
 800d3a8:	2d00      	cmp	r5, #0
 800d3aa:	460e      	mov	r6, r1
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	462b      	mov	r3, r5
 800d3b0:	bfbb      	ittet	lt
 800d3b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d3b6:	461d      	movlt	r5, r3
 800d3b8:	2300      	movge	r3, #0
 800d3ba:	232d      	movlt	r3, #45	; 0x2d
 800d3bc:	700b      	strb	r3, [r1, #0]
 800d3be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d3c4:	4691      	mov	r9, r2
 800d3c6:	f023 0820 	bic.w	r8, r3, #32
 800d3ca:	bfbc      	itt	lt
 800d3cc:	4622      	movlt	r2, r4
 800d3ce:	4614      	movlt	r4, r2
 800d3d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d3d4:	d005      	beq.n	800d3e2 <__cvt+0x42>
 800d3d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d3da:	d100      	bne.n	800d3de <__cvt+0x3e>
 800d3dc:	3601      	adds	r6, #1
 800d3de:	2102      	movs	r1, #2
 800d3e0:	e000      	b.n	800d3e4 <__cvt+0x44>
 800d3e2:	2103      	movs	r1, #3
 800d3e4:	ab03      	add	r3, sp, #12
 800d3e6:	9301      	str	r3, [sp, #4]
 800d3e8:	ab02      	add	r3, sp, #8
 800d3ea:	9300      	str	r3, [sp, #0]
 800d3ec:	ec45 4b10 	vmov	d0, r4, r5
 800d3f0:	4653      	mov	r3, sl
 800d3f2:	4632      	mov	r2, r6
 800d3f4:	f000 fe00 	bl	800dff8 <_dtoa_r>
 800d3f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d3fc:	4607      	mov	r7, r0
 800d3fe:	d102      	bne.n	800d406 <__cvt+0x66>
 800d400:	f019 0f01 	tst.w	r9, #1
 800d404:	d022      	beq.n	800d44c <__cvt+0xac>
 800d406:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d40a:	eb07 0906 	add.w	r9, r7, r6
 800d40e:	d110      	bne.n	800d432 <__cvt+0x92>
 800d410:	783b      	ldrb	r3, [r7, #0]
 800d412:	2b30      	cmp	r3, #48	; 0x30
 800d414:	d10a      	bne.n	800d42c <__cvt+0x8c>
 800d416:	2200      	movs	r2, #0
 800d418:	2300      	movs	r3, #0
 800d41a:	4620      	mov	r0, r4
 800d41c:	4629      	mov	r1, r5
 800d41e:	f7f3 fb53 	bl	8000ac8 <__aeabi_dcmpeq>
 800d422:	b918      	cbnz	r0, 800d42c <__cvt+0x8c>
 800d424:	f1c6 0601 	rsb	r6, r6, #1
 800d428:	f8ca 6000 	str.w	r6, [sl]
 800d42c:	f8da 3000 	ldr.w	r3, [sl]
 800d430:	4499      	add	r9, r3
 800d432:	2200      	movs	r2, #0
 800d434:	2300      	movs	r3, #0
 800d436:	4620      	mov	r0, r4
 800d438:	4629      	mov	r1, r5
 800d43a:	f7f3 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800d43e:	b108      	cbz	r0, 800d444 <__cvt+0xa4>
 800d440:	f8cd 900c 	str.w	r9, [sp, #12]
 800d444:	2230      	movs	r2, #48	; 0x30
 800d446:	9b03      	ldr	r3, [sp, #12]
 800d448:	454b      	cmp	r3, r9
 800d44a:	d307      	bcc.n	800d45c <__cvt+0xbc>
 800d44c:	9b03      	ldr	r3, [sp, #12]
 800d44e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d450:	1bdb      	subs	r3, r3, r7
 800d452:	4638      	mov	r0, r7
 800d454:	6013      	str	r3, [r2, #0]
 800d456:	b004      	add	sp, #16
 800d458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d45c:	1c59      	adds	r1, r3, #1
 800d45e:	9103      	str	r1, [sp, #12]
 800d460:	701a      	strb	r2, [r3, #0]
 800d462:	e7f0      	b.n	800d446 <__cvt+0xa6>

0800d464 <__exponent>:
 800d464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d466:	4603      	mov	r3, r0
 800d468:	2900      	cmp	r1, #0
 800d46a:	bfb8      	it	lt
 800d46c:	4249      	neglt	r1, r1
 800d46e:	f803 2b02 	strb.w	r2, [r3], #2
 800d472:	bfb4      	ite	lt
 800d474:	222d      	movlt	r2, #45	; 0x2d
 800d476:	222b      	movge	r2, #43	; 0x2b
 800d478:	2909      	cmp	r1, #9
 800d47a:	7042      	strb	r2, [r0, #1]
 800d47c:	dd2a      	ble.n	800d4d4 <__exponent+0x70>
 800d47e:	f10d 0407 	add.w	r4, sp, #7
 800d482:	46a4      	mov	ip, r4
 800d484:	270a      	movs	r7, #10
 800d486:	46a6      	mov	lr, r4
 800d488:	460a      	mov	r2, r1
 800d48a:	fb91 f6f7 	sdiv	r6, r1, r7
 800d48e:	fb07 1516 	mls	r5, r7, r6, r1
 800d492:	3530      	adds	r5, #48	; 0x30
 800d494:	2a63      	cmp	r2, #99	; 0x63
 800d496:	f104 34ff 	add.w	r4, r4, #4294967295
 800d49a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d49e:	4631      	mov	r1, r6
 800d4a0:	dcf1      	bgt.n	800d486 <__exponent+0x22>
 800d4a2:	3130      	adds	r1, #48	; 0x30
 800d4a4:	f1ae 0502 	sub.w	r5, lr, #2
 800d4a8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d4ac:	1c44      	adds	r4, r0, #1
 800d4ae:	4629      	mov	r1, r5
 800d4b0:	4561      	cmp	r1, ip
 800d4b2:	d30a      	bcc.n	800d4ca <__exponent+0x66>
 800d4b4:	f10d 0209 	add.w	r2, sp, #9
 800d4b8:	eba2 020e 	sub.w	r2, r2, lr
 800d4bc:	4565      	cmp	r5, ip
 800d4be:	bf88      	it	hi
 800d4c0:	2200      	movhi	r2, #0
 800d4c2:	4413      	add	r3, r2
 800d4c4:	1a18      	subs	r0, r3, r0
 800d4c6:	b003      	add	sp, #12
 800d4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4ce:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d4d2:	e7ed      	b.n	800d4b0 <__exponent+0x4c>
 800d4d4:	2330      	movs	r3, #48	; 0x30
 800d4d6:	3130      	adds	r1, #48	; 0x30
 800d4d8:	7083      	strb	r3, [r0, #2]
 800d4da:	70c1      	strb	r1, [r0, #3]
 800d4dc:	1d03      	adds	r3, r0, #4
 800d4de:	e7f1      	b.n	800d4c4 <__exponent+0x60>

0800d4e0 <_printf_float>:
 800d4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4e4:	ed2d 8b02 	vpush	{d8}
 800d4e8:	b08d      	sub	sp, #52	; 0x34
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d4f0:	4616      	mov	r6, r2
 800d4f2:	461f      	mov	r7, r3
 800d4f4:	4605      	mov	r5, r0
 800d4f6:	f001 fd25 	bl	800ef44 <_localeconv_r>
 800d4fa:	f8d0 a000 	ldr.w	sl, [r0]
 800d4fe:	4650      	mov	r0, sl
 800d500:	f7f2 fe66 	bl	80001d0 <strlen>
 800d504:	2300      	movs	r3, #0
 800d506:	930a      	str	r3, [sp, #40]	; 0x28
 800d508:	6823      	ldr	r3, [r4, #0]
 800d50a:	9305      	str	r3, [sp, #20]
 800d50c:	f8d8 3000 	ldr.w	r3, [r8]
 800d510:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d514:	3307      	adds	r3, #7
 800d516:	f023 0307 	bic.w	r3, r3, #7
 800d51a:	f103 0208 	add.w	r2, r3, #8
 800d51e:	f8c8 2000 	str.w	r2, [r8]
 800d522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d526:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d52a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d52e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d532:	9307      	str	r3, [sp, #28]
 800d534:	f8cd 8018 	str.w	r8, [sp, #24]
 800d538:	ee08 0a10 	vmov	s16, r0
 800d53c:	4b9f      	ldr	r3, [pc, #636]	; (800d7bc <_printf_float+0x2dc>)
 800d53e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d542:	f04f 32ff 	mov.w	r2, #4294967295
 800d546:	f7f3 faf1 	bl	8000b2c <__aeabi_dcmpun>
 800d54a:	bb88      	cbnz	r0, 800d5b0 <_printf_float+0xd0>
 800d54c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d550:	4b9a      	ldr	r3, [pc, #616]	; (800d7bc <_printf_float+0x2dc>)
 800d552:	f04f 32ff 	mov.w	r2, #4294967295
 800d556:	f7f3 facb 	bl	8000af0 <__aeabi_dcmple>
 800d55a:	bb48      	cbnz	r0, 800d5b0 <_printf_float+0xd0>
 800d55c:	2200      	movs	r2, #0
 800d55e:	2300      	movs	r3, #0
 800d560:	4640      	mov	r0, r8
 800d562:	4649      	mov	r1, r9
 800d564:	f7f3 faba 	bl	8000adc <__aeabi_dcmplt>
 800d568:	b110      	cbz	r0, 800d570 <_printf_float+0x90>
 800d56a:	232d      	movs	r3, #45	; 0x2d
 800d56c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d570:	4b93      	ldr	r3, [pc, #588]	; (800d7c0 <_printf_float+0x2e0>)
 800d572:	4894      	ldr	r0, [pc, #592]	; (800d7c4 <_printf_float+0x2e4>)
 800d574:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d578:	bf94      	ite	ls
 800d57a:	4698      	movls	r8, r3
 800d57c:	4680      	movhi	r8, r0
 800d57e:	2303      	movs	r3, #3
 800d580:	6123      	str	r3, [r4, #16]
 800d582:	9b05      	ldr	r3, [sp, #20]
 800d584:	f023 0204 	bic.w	r2, r3, #4
 800d588:	6022      	str	r2, [r4, #0]
 800d58a:	f04f 0900 	mov.w	r9, #0
 800d58e:	9700      	str	r7, [sp, #0]
 800d590:	4633      	mov	r3, r6
 800d592:	aa0b      	add	r2, sp, #44	; 0x2c
 800d594:	4621      	mov	r1, r4
 800d596:	4628      	mov	r0, r5
 800d598:	f000 f9d8 	bl	800d94c <_printf_common>
 800d59c:	3001      	adds	r0, #1
 800d59e:	f040 8090 	bne.w	800d6c2 <_printf_float+0x1e2>
 800d5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a6:	b00d      	add	sp, #52	; 0x34
 800d5a8:	ecbd 8b02 	vpop	{d8}
 800d5ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b0:	4642      	mov	r2, r8
 800d5b2:	464b      	mov	r3, r9
 800d5b4:	4640      	mov	r0, r8
 800d5b6:	4649      	mov	r1, r9
 800d5b8:	f7f3 fab8 	bl	8000b2c <__aeabi_dcmpun>
 800d5bc:	b140      	cbz	r0, 800d5d0 <_printf_float+0xf0>
 800d5be:	464b      	mov	r3, r9
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	bfbc      	itt	lt
 800d5c4:	232d      	movlt	r3, #45	; 0x2d
 800d5c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d5ca:	487f      	ldr	r0, [pc, #508]	; (800d7c8 <_printf_float+0x2e8>)
 800d5cc:	4b7f      	ldr	r3, [pc, #508]	; (800d7cc <_printf_float+0x2ec>)
 800d5ce:	e7d1      	b.n	800d574 <_printf_float+0x94>
 800d5d0:	6863      	ldr	r3, [r4, #4]
 800d5d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d5d6:	9206      	str	r2, [sp, #24]
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	d13f      	bne.n	800d65c <_printf_float+0x17c>
 800d5dc:	2306      	movs	r3, #6
 800d5de:	6063      	str	r3, [r4, #4]
 800d5e0:	9b05      	ldr	r3, [sp, #20]
 800d5e2:	6861      	ldr	r1, [r4, #4]
 800d5e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	9303      	str	r3, [sp, #12]
 800d5ec:	ab0a      	add	r3, sp, #40	; 0x28
 800d5ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d5f2:	ab09      	add	r3, sp, #36	; 0x24
 800d5f4:	ec49 8b10 	vmov	d0, r8, r9
 800d5f8:	9300      	str	r3, [sp, #0]
 800d5fa:	6022      	str	r2, [r4, #0]
 800d5fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d600:	4628      	mov	r0, r5
 800d602:	f7ff fecd 	bl	800d3a0 <__cvt>
 800d606:	9b06      	ldr	r3, [sp, #24]
 800d608:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d60a:	2b47      	cmp	r3, #71	; 0x47
 800d60c:	4680      	mov	r8, r0
 800d60e:	d108      	bne.n	800d622 <_printf_float+0x142>
 800d610:	1cc8      	adds	r0, r1, #3
 800d612:	db02      	blt.n	800d61a <_printf_float+0x13a>
 800d614:	6863      	ldr	r3, [r4, #4]
 800d616:	4299      	cmp	r1, r3
 800d618:	dd41      	ble.n	800d69e <_printf_float+0x1be>
 800d61a:	f1ab 0b02 	sub.w	fp, fp, #2
 800d61e:	fa5f fb8b 	uxtb.w	fp, fp
 800d622:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d626:	d820      	bhi.n	800d66a <_printf_float+0x18a>
 800d628:	3901      	subs	r1, #1
 800d62a:	465a      	mov	r2, fp
 800d62c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d630:	9109      	str	r1, [sp, #36]	; 0x24
 800d632:	f7ff ff17 	bl	800d464 <__exponent>
 800d636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d638:	1813      	adds	r3, r2, r0
 800d63a:	2a01      	cmp	r2, #1
 800d63c:	4681      	mov	r9, r0
 800d63e:	6123      	str	r3, [r4, #16]
 800d640:	dc02      	bgt.n	800d648 <_printf_float+0x168>
 800d642:	6822      	ldr	r2, [r4, #0]
 800d644:	07d2      	lsls	r2, r2, #31
 800d646:	d501      	bpl.n	800d64c <_printf_float+0x16c>
 800d648:	3301      	adds	r3, #1
 800d64a:	6123      	str	r3, [r4, #16]
 800d64c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d650:	2b00      	cmp	r3, #0
 800d652:	d09c      	beq.n	800d58e <_printf_float+0xae>
 800d654:	232d      	movs	r3, #45	; 0x2d
 800d656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d65a:	e798      	b.n	800d58e <_printf_float+0xae>
 800d65c:	9a06      	ldr	r2, [sp, #24]
 800d65e:	2a47      	cmp	r2, #71	; 0x47
 800d660:	d1be      	bne.n	800d5e0 <_printf_float+0x100>
 800d662:	2b00      	cmp	r3, #0
 800d664:	d1bc      	bne.n	800d5e0 <_printf_float+0x100>
 800d666:	2301      	movs	r3, #1
 800d668:	e7b9      	b.n	800d5de <_printf_float+0xfe>
 800d66a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d66e:	d118      	bne.n	800d6a2 <_printf_float+0x1c2>
 800d670:	2900      	cmp	r1, #0
 800d672:	6863      	ldr	r3, [r4, #4]
 800d674:	dd0b      	ble.n	800d68e <_printf_float+0x1ae>
 800d676:	6121      	str	r1, [r4, #16]
 800d678:	b913      	cbnz	r3, 800d680 <_printf_float+0x1a0>
 800d67a:	6822      	ldr	r2, [r4, #0]
 800d67c:	07d0      	lsls	r0, r2, #31
 800d67e:	d502      	bpl.n	800d686 <_printf_float+0x1a6>
 800d680:	3301      	adds	r3, #1
 800d682:	440b      	add	r3, r1
 800d684:	6123      	str	r3, [r4, #16]
 800d686:	65a1      	str	r1, [r4, #88]	; 0x58
 800d688:	f04f 0900 	mov.w	r9, #0
 800d68c:	e7de      	b.n	800d64c <_printf_float+0x16c>
 800d68e:	b913      	cbnz	r3, 800d696 <_printf_float+0x1b6>
 800d690:	6822      	ldr	r2, [r4, #0]
 800d692:	07d2      	lsls	r2, r2, #31
 800d694:	d501      	bpl.n	800d69a <_printf_float+0x1ba>
 800d696:	3302      	adds	r3, #2
 800d698:	e7f4      	b.n	800d684 <_printf_float+0x1a4>
 800d69a:	2301      	movs	r3, #1
 800d69c:	e7f2      	b.n	800d684 <_printf_float+0x1a4>
 800d69e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d6a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6a4:	4299      	cmp	r1, r3
 800d6a6:	db05      	blt.n	800d6b4 <_printf_float+0x1d4>
 800d6a8:	6823      	ldr	r3, [r4, #0]
 800d6aa:	6121      	str	r1, [r4, #16]
 800d6ac:	07d8      	lsls	r0, r3, #31
 800d6ae:	d5ea      	bpl.n	800d686 <_printf_float+0x1a6>
 800d6b0:	1c4b      	adds	r3, r1, #1
 800d6b2:	e7e7      	b.n	800d684 <_printf_float+0x1a4>
 800d6b4:	2900      	cmp	r1, #0
 800d6b6:	bfd4      	ite	le
 800d6b8:	f1c1 0202 	rsble	r2, r1, #2
 800d6bc:	2201      	movgt	r2, #1
 800d6be:	4413      	add	r3, r2
 800d6c0:	e7e0      	b.n	800d684 <_printf_float+0x1a4>
 800d6c2:	6823      	ldr	r3, [r4, #0]
 800d6c4:	055a      	lsls	r2, r3, #21
 800d6c6:	d407      	bmi.n	800d6d8 <_printf_float+0x1f8>
 800d6c8:	6923      	ldr	r3, [r4, #16]
 800d6ca:	4642      	mov	r2, r8
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	47b8      	blx	r7
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	d12c      	bne.n	800d730 <_printf_float+0x250>
 800d6d6:	e764      	b.n	800d5a2 <_printf_float+0xc2>
 800d6d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d6dc:	f240 80e0 	bls.w	800d8a0 <_printf_float+0x3c0>
 800d6e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	f7f3 f9ee 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6ec:	2800      	cmp	r0, #0
 800d6ee:	d034      	beq.n	800d75a <_printf_float+0x27a>
 800d6f0:	4a37      	ldr	r2, [pc, #220]	; (800d7d0 <_printf_float+0x2f0>)
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	4631      	mov	r1, r6
 800d6f6:	4628      	mov	r0, r5
 800d6f8:	47b8      	blx	r7
 800d6fa:	3001      	adds	r0, #1
 800d6fc:	f43f af51 	beq.w	800d5a2 <_printf_float+0xc2>
 800d700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d704:	429a      	cmp	r2, r3
 800d706:	db02      	blt.n	800d70e <_printf_float+0x22e>
 800d708:	6823      	ldr	r3, [r4, #0]
 800d70a:	07d8      	lsls	r0, r3, #31
 800d70c:	d510      	bpl.n	800d730 <_printf_float+0x250>
 800d70e:	ee18 3a10 	vmov	r3, s16
 800d712:	4652      	mov	r2, sl
 800d714:	4631      	mov	r1, r6
 800d716:	4628      	mov	r0, r5
 800d718:	47b8      	blx	r7
 800d71a:	3001      	adds	r0, #1
 800d71c:	f43f af41 	beq.w	800d5a2 <_printf_float+0xc2>
 800d720:	f04f 0800 	mov.w	r8, #0
 800d724:	f104 091a 	add.w	r9, r4, #26
 800d728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d72a:	3b01      	subs	r3, #1
 800d72c:	4543      	cmp	r3, r8
 800d72e:	dc09      	bgt.n	800d744 <_printf_float+0x264>
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	079b      	lsls	r3, r3, #30
 800d734:	f100 8105 	bmi.w	800d942 <_printf_float+0x462>
 800d738:	68e0      	ldr	r0, [r4, #12]
 800d73a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d73c:	4298      	cmp	r0, r3
 800d73e:	bfb8      	it	lt
 800d740:	4618      	movlt	r0, r3
 800d742:	e730      	b.n	800d5a6 <_printf_float+0xc6>
 800d744:	2301      	movs	r3, #1
 800d746:	464a      	mov	r2, r9
 800d748:	4631      	mov	r1, r6
 800d74a:	4628      	mov	r0, r5
 800d74c:	47b8      	blx	r7
 800d74e:	3001      	adds	r0, #1
 800d750:	f43f af27 	beq.w	800d5a2 <_printf_float+0xc2>
 800d754:	f108 0801 	add.w	r8, r8, #1
 800d758:	e7e6      	b.n	800d728 <_printf_float+0x248>
 800d75a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	dc39      	bgt.n	800d7d4 <_printf_float+0x2f4>
 800d760:	4a1b      	ldr	r2, [pc, #108]	; (800d7d0 <_printf_float+0x2f0>)
 800d762:	2301      	movs	r3, #1
 800d764:	4631      	mov	r1, r6
 800d766:	4628      	mov	r0, r5
 800d768:	47b8      	blx	r7
 800d76a:	3001      	adds	r0, #1
 800d76c:	f43f af19 	beq.w	800d5a2 <_printf_float+0xc2>
 800d770:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d774:	4313      	orrs	r3, r2
 800d776:	d102      	bne.n	800d77e <_printf_float+0x29e>
 800d778:	6823      	ldr	r3, [r4, #0]
 800d77a:	07d9      	lsls	r1, r3, #31
 800d77c:	d5d8      	bpl.n	800d730 <_printf_float+0x250>
 800d77e:	ee18 3a10 	vmov	r3, s16
 800d782:	4652      	mov	r2, sl
 800d784:	4631      	mov	r1, r6
 800d786:	4628      	mov	r0, r5
 800d788:	47b8      	blx	r7
 800d78a:	3001      	adds	r0, #1
 800d78c:	f43f af09 	beq.w	800d5a2 <_printf_float+0xc2>
 800d790:	f04f 0900 	mov.w	r9, #0
 800d794:	f104 0a1a 	add.w	sl, r4, #26
 800d798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d79a:	425b      	negs	r3, r3
 800d79c:	454b      	cmp	r3, r9
 800d79e:	dc01      	bgt.n	800d7a4 <_printf_float+0x2c4>
 800d7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7a2:	e792      	b.n	800d6ca <_printf_float+0x1ea>
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	4652      	mov	r2, sl
 800d7a8:	4631      	mov	r1, r6
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	47b8      	blx	r7
 800d7ae:	3001      	adds	r0, #1
 800d7b0:	f43f aef7 	beq.w	800d5a2 <_printf_float+0xc2>
 800d7b4:	f109 0901 	add.w	r9, r9, #1
 800d7b8:	e7ee      	b.n	800d798 <_printf_float+0x2b8>
 800d7ba:	bf00      	nop
 800d7bc:	7fefffff 	.word	0x7fefffff
 800d7c0:	0800ff80 	.word	0x0800ff80
 800d7c4:	0800ff84 	.word	0x0800ff84
 800d7c8:	0800ff8c 	.word	0x0800ff8c
 800d7cc:	0800ff88 	.word	0x0800ff88
 800d7d0:	0800ff90 	.word	0x0800ff90
 800d7d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	bfa8      	it	ge
 800d7dc:	461a      	movge	r2, r3
 800d7de:	2a00      	cmp	r2, #0
 800d7e0:	4691      	mov	r9, r2
 800d7e2:	dc37      	bgt.n	800d854 <_printf_float+0x374>
 800d7e4:	f04f 0b00 	mov.w	fp, #0
 800d7e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7ec:	f104 021a 	add.w	r2, r4, #26
 800d7f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d7f2:	9305      	str	r3, [sp, #20]
 800d7f4:	eba3 0309 	sub.w	r3, r3, r9
 800d7f8:	455b      	cmp	r3, fp
 800d7fa:	dc33      	bgt.n	800d864 <_printf_float+0x384>
 800d7fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d800:	429a      	cmp	r2, r3
 800d802:	db3b      	blt.n	800d87c <_printf_float+0x39c>
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	07da      	lsls	r2, r3, #31
 800d808:	d438      	bmi.n	800d87c <_printf_float+0x39c>
 800d80a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d80c:	9a05      	ldr	r2, [sp, #20]
 800d80e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d810:	1a9a      	subs	r2, r3, r2
 800d812:	eba3 0901 	sub.w	r9, r3, r1
 800d816:	4591      	cmp	r9, r2
 800d818:	bfa8      	it	ge
 800d81a:	4691      	movge	r9, r2
 800d81c:	f1b9 0f00 	cmp.w	r9, #0
 800d820:	dc35      	bgt.n	800d88e <_printf_float+0x3ae>
 800d822:	f04f 0800 	mov.w	r8, #0
 800d826:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d82a:	f104 0a1a 	add.w	sl, r4, #26
 800d82e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d832:	1a9b      	subs	r3, r3, r2
 800d834:	eba3 0309 	sub.w	r3, r3, r9
 800d838:	4543      	cmp	r3, r8
 800d83a:	f77f af79 	ble.w	800d730 <_printf_float+0x250>
 800d83e:	2301      	movs	r3, #1
 800d840:	4652      	mov	r2, sl
 800d842:	4631      	mov	r1, r6
 800d844:	4628      	mov	r0, r5
 800d846:	47b8      	blx	r7
 800d848:	3001      	adds	r0, #1
 800d84a:	f43f aeaa 	beq.w	800d5a2 <_printf_float+0xc2>
 800d84e:	f108 0801 	add.w	r8, r8, #1
 800d852:	e7ec      	b.n	800d82e <_printf_float+0x34e>
 800d854:	4613      	mov	r3, r2
 800d856:	4631      	mov	r1, r6
 800d858:	4642      	mov	r2, r8
 800d85a:	4628      	mov	r0, r5
 800d85c:	47b8      	blx	r7
 800d85e:	3001      	adds	r0, #1
 800d860:	d1c0      	bne.n	800d7e4 <_printf_float+0x304>
 800d862:	e69e      	b.n	800d5a2 <_printf_float+0xc2>
 800d864:	2301      	movs	r3, #1
 800d866:	4631      	mov	r1, r6
 800d868:	4628      	mov	r0, r5
 800d86a:	9205      	str	r2, [sp, #20]
 800d86c:	47b8      	blx	r7
 800d86e:	3001      	adds	r0, #1
 800d870:	f43f ae97 	beq.w	800d5a2 <_printf_float+0xc2>
 800d874:	9a05      	ldr	r2, [sp, #20]
 800d876:	f10b 0b01 	add.w	fp, fp, #1
 800d87a:	e7b9      	b.n	800d7f0 <_printf_float+0x310>
 800d87c:	ee18 3a10 	vmov	r3, s16
 800d880:	4652      	mov	r2, sl
 800d882:	4631      	mov	r1, r6
 800d884:	4628      	mov	r0, r5
 800d886:	47b8      	blx	r7
 800d888:	3001      	adds	r0, #1
 800d88a:	d1be      	bne.n	800d80a <_printf_float+0x32a>
 800d88c:	e689      	b.n	800d5a2 <_printf_float+0xc2>
 800d88e:	9a05      	ldr	r2, [sp, #20]
 800d890:	464b      	mov	r3, r9
 800d892:	4442      	add	r2, r8
 800d894:	4631      	mov	r1, r6
 800d896:	4628      	mov	r0, r5
 800d898:	47b8      	blx	r7
 800d89a:	3001      	adds	r0, #1
 800d89c:	d1c1      	bne.n	800d822 <_printf_float+0x342>
 800d89e:	e680      	b.n	800d5a2 <_printf_float+0xc2>
 800d8a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8a2:	2a01      	cmp	r2, #1
 800d8a4:	dc01      	bgt.n	800d8aa <_printf_float+0x3ca>
 800d8a6:	07db      	lsls	r3, r3, #31
 800d8a8:	d538      	bpl.n	800d91c <_printf_float+0x43c>
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	4642      	mov	r2, r8
 800d8ae:	4631      	mov	r1, r6
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	47b8      	blx	r7
 800d8b4:	3001      	adds	r0, #1
 800d8b6:	f43f ae74 	beq.w	800d5a2 <_printf_float+0xc2>
 800d8ba:	ee18 3a10 	vmov	r3, s16
 800d8be:	4652      	mov	r2, sl
 800d8c0:	4631      	mov	r1, r6
 800d8c2:	4628      	mov	r0, r5
 800d8c4:	47b8      	blx	r7
 800d8c6:	3001      	adds	r0, #1
 800d8c8:	f43f ae6b 	beq.w	800d5a2 <_printf_float+0xc2>
 800d8cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	f7f3 f8f8 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8d8:	b9d8      	cbnz	r0, 800d912 <_printf_float+0x432>
 800d8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8dc:	f108 0201 	add.w	r2, r8, #1
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	4631      	mov	r1, r6
 800d8e4:	4628      	mov	r0, r5
 800d8e6:	47b8      	blx	r7
 800d8e8:	3001      	adds	r0, #1
 800d8ea:	d10e      	bne.n	800d90a <_printf_float+0x42a>
 800d8ec:	e659      	b.n	800d5a2 <_printf_float+0xc2>
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	4652      	mov	r2, sl
 800d8f2:	4631      	mov	r1, r6
 800d8f4:	4628      	mov	r0, r5
 800d8f6:	47b8      	blx	r7
 800d8f8:	3001      	adds	r0, #1
 800d8fa:	f43f ae52 	beq.w	800d5a2 <_printf_float+0xc2>
 800d8fe:	f108 0801 	add.w	r8, r8, #1
 800d902:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d904:	3b01      	subs	r3, #1
 800d906:	4543      	cmp	r3, r8
 800d908:	dcf1      	bgt.n	800d8ee <_printf_float+0x40e>
 800d90a:	464b      	mov	r3, r9
 800d90c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d910:	e6dc      	b.n	800d6cc <_printf_float+0x1ec>
 800d912:	f04f 0800 	mov.w	r8, #0
 800d916:	f104 0a1a 	add.w	sl, r4, #26
 800d91a:	e7f2      	b.n	800d902 <_printf_float+0x422>
 800d91c:	2301      	movs	r3, #1
 800d91e:	4642      	mov	r2, r8
 800d920:	e7df      	b.n	800d8e2 <_printf_float+0x402>
 800d922:	2301      	movs	r3, #1
 800d924:	464a      	mov	r2, r9
 800d926:	4631      	mov	r1, r6
 800d928:	4628      	mov	r0, r5
 800d92a:	47b8      	blx	r7
 800d92c:	3001      	adds	r0, #1
 800d92e:	f43f ae38 	beq.w	800d5a2 <_printf_float+0xc2>
 800d932:	f108 0801 	add.w	r8, r8, #1
 800d936:	68e3      	ldr	r3, [r4, #12]
 800d938:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d93a:	1a5b      	subs	r3, r3, r1
 800d93c:	4543      	cmp	r3, r8
 800d93e:	dcf0      	bgt.n	800d922 <_printf_float+0x442>
 800d940:	e6fa      	b.n	800d738 <_printf_float+0x258>
 800d942:	f04f 0800 	mov.w	r8, #0
 800d946:	f104 0919 	add.w	r9, r4, #25
 800d94a:	e7f4      	b.n	800d936 <_printf_float+0x456>

0800d94c <_printf_common>:
 800d94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d950:	4616      	mov	r6, r2
 800d952:	4699      	mov	r9, r3
 800d954:	688a      	ldr	r2, [r1, #8]
 800d956:	690b      	ldr	r3, [r1, #16]
 800d958:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d95c:	4293      	cmp	r3, r2
 800d95e:	bfb8      	it	lt
 800d960:	4613      	movlt	r3, r2
 800d962:	6033      	str	r3, [r6, #0]
 800d964:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d968:	4607      	mov	r7, r0
 800d96a:	460c      	mov	r4, r1
 800d96c:	b10a      	cbz	r2, 800d972 <_printf_common+0x26>
 800d96e:	3301      	adds	r3, #1
 800d970:	6033      	str	r3, [r6, #0]
 800d972:	6823      	ldr	r3, [r4, #0]
 800d974:	0699      	lsls	r1, r3, #26
 800d976:	bf42      	ittt	mi
 800d978:	6833      	ldrmi	r3, [r6, #0]
 800d97a:	3302      	addmi	r3, #2
 800d97c:	6033      	strmi	r3, [r6, #0]
 800d97e:	6825      	ldr	r5, [r4, #0]
 800d980:	f015 0506 	ands.w	r5, r5, #6
 800d984:	d106      	bne.n	800d994 <_printf_common+0x48>
 800d986:	f104 0a19 	add.w	sl, r4, #25
 800d98a:	68e3      	ldr	r3, [r4, #12]
 800d98c:	6832      	ldr	r2, [r6, #0]
 800d98e:	1a9b      	subs	r3, r3, r2
 800d990:	42ab      	cmp	r3, r5
 800d992:	dc26      	bgt.n	800d9e2 <_printf_common+0x96>
 800d994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d998:	1e13      	subs	r3, r2, #0
 800d99a:	6822      	ldr	r2, [r4, #0]
 800d99c:	bf18      	it	ne
 800d99e:	2301      	movne	r3, #1
 800d9a0:	0692      	lsls	r2, r2, #26
 800d9a2:	d42b      	bmi.n	800d9fc <_printf_common+0xb0>
 800d9a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9a8:	4649      	mov	r1, r9
 800d9aa:	4638      	mov	r0, r7
 800d9ac:	47c0      	blx	r8
 800d9ae:	3001      	adds	r0, #1
 800d9b0:	d01e      	beq.n	800d9f0 <_printf_common+0xa4>
 800d9b2:	6823      	ldr	r3, [r4, #0]
 800d9b4:	68e5      	ldr	r5, [r4, #12]
 800d9b6:	6832      	ldr	r2, [r6, #0]
 800d9b8:	f003 0306 	and.w	r3, r3, #6
 800d9bc:	2b04      	cmp	r3, #4
 800d9be:	bf08      	it	eq
 800d9c0:	1aad      	subeq	r5, r5, r2
 800d9c2:	68a3      	ldr	r3, [r4, #8]
 800d9c4:	6922      	ldr	r2, [r4, #16]
 800d9c6:	bf0c      	ite	eq
 800d9c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9cc:	2500      	movne	r5, #0
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	bfc4      	itt	gt
 800d9d2:	1a9b      	subgt	r3, r3, r2
 800d9d4:	18ed      	addgt	r5, r5, r3
 800d9d6:	2600      	movs	r6, #0
 800d9d8:	341a      	adds	r4, #26
 800d9da:	42b5      	cmp	r5, r6
 800d9dc:	d11a      	bne.n	800da14 <_printf_common+0xc8>
 800d9de:	2000      	movs	r0, #0
 800d9e0:	e008      	b.n	800d9f4 <_printf_common+0xa8>
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	4652      	mov	r2, sl
 800d9e6:	4649      	mov	r1, r9
 800d9e8:	4638      	mov	r0, r7
 800d9ea:	47c0      	blx	r8
 800d9ec:	3001      	adds	r0, #1
 800d9ee:	d103      	bne.n	800d9f8 <_printf_common+0xac>
 800d9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9f8:	3501      	adds	r5, #1
 800d9fa:	e7c6      	b.n	800d98a <_printf_common+0x3e>
 800d9fc:	18e1      	adds	r1, r4, r3
 800d9fe:	1c5a      	adds	r2, r3, #1
 800da00:	2030      	movs	r0, #48	; 0x30
 800da02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da06:	4422      	add	r2, r4
 800da08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da10:	3302      	adds	r3, #2
 800da12:	e7c7      	b.n	800d9a4 <_printf_common+0x58>
 800da14:	2301      	movs	r3, #1
 800da16:	4622      	mov	r2, r4
 800da18:	4649      	mov	r1, r9
 800da1a:	4638      	mov	r0, r7
 800da1c:	47c0      	blx	r8
 800da1e:	3001      	adds	r0, #1
 800da20:	d0e6      	beq.n	800d9f0 <_printf_common+0xa4>
 800da22:	3601      	adds	r6, #1
 800da24:	e7d9      	b.n	800d9da <_printf_common+0x8e>
	...

0800da28 <_printf_i>:
 800da28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da2c:	7e0f      	ldrb	r7, [r1, #24]
 800da2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da30:	2f78      	cmp	r7, #120	; 0x78
 800da32:	4691      	mov	r9, r2
 800da34:	4680      	mov	r8, r0
 800da36:	460c      	mov	r4, r1
 800da38:	469a      	mov	sl, r3
 800da3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da3e:	d807      	bhi.n	800da50 <_printf_i+0x28>
 800da40:	2f62      	cmp	r7, #98	; 0x62
 800da42:	d80a      	bhi.n	800da5a <_printf_i+0x32>
 800da44:	2f00      	cmp	r7, #0
 800da46:	f000 80d8 	beq.w	800dbfa <_printf_i+0x1d2>
 800da4a:	2f58      	cmp	r7, #88	; 0x58
 800da4c:	f000 80a3 	beq.w	800db96 <_printf_i+0x16e>
 800da50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da58:	e03a      	b.n	800dad0 <_printf_i+0xa8>
 800da5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da5e:	2b15      	cmp	r3, #21
 800da60:	d8f6      	bhi.n	800da50 <_printf_i+0x28>
 800da62:	a101      	add	r1, pc, #4	; (adr r1, 800da68 <_printf_i+0x40>)
 800da64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da68:	0800dac1 	.word	0x0800dac1
 800da6c:	0800dad5 	.word	0x0800dad5
 800da70:	0800da51 	.word	0x0800da51
 800da74:	0800da51 	.word	0x0800da51
 800da78:	0800da51 	.word	0x0800da51
 800da7c:	0800da51 	.word	0x0800da51
 800da80:	0800dad5 	.word	0x0800dad5
 800da84:	0800da51 	.word	0x0800da51
 800da88:	0800da51 	.word	0x0800da51
 800da8c:	0800da51 	.word	0x0800da51
 800da90:	0800da51 	.word	0x0800da51
 800da94:	0800dbe1 	.word	0x0800dbe1
 800da98:	0800db05 	.word	0x0800db05
 800da9c:	0800dbc3 	.word	0x0800dbc3
 800daa0:	0800da51 	.word	0x0800da51
 800daa4:	0800da51 	.word	0x0800da51
 800daa8:	0800dc03 	.word	0x0800dc03
 800daac:	0800da51 	.word	0x0800da51
 800dab0:	0800db05 	.word	0x0800db05
 800dab4:	0800da51 	.word	0x0800da51
 800dab8:	0800da51 	.word	0x0800da51
 800dabc:	0800dbcb 	.word	0x0800dbcb
 800dac0:	682b      	ldr	r3, [r5, #0]
 800dac2:	1d1a      	adds	r2, r3, #4
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	602a      	str	r2, [r5, #0]
 800dac8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dacc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dad0:	2301      	movs	r3, #1
 800dad2:	e0a3      	b.n	800dc1c <_printf_i+0x1f4>
 800dad4:	6820      	ldr	r0, [r4, #0]
 800dad6:	6829      	ldr	r1, [r5, #0]
 800dad8:	0606      	lsls	r6, r0, #24
 800dada:	f101 0304 	add.w	r3, r1, #4
 800dade:	d50a      	bpl.n	800daf6 <_printf_i+0xce>
 800dae0:	680e      	ldr	r6, [r1, #0]
 800dae2:	602b      	str	r3, [r5, #0]
 800dae4:	2e00      	cmp	r6, #0
 800dae6:	da03      	bge.n	800daf0 <_printf_i+0xc8>
 800dae8:	232d      	movs	r3, #45	; 0x2d
 800daea:	4276      	negs	r6, r6
 800daec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800daf0:	485e      	ldr	r0, [pc, #376]	; (800dc6c <_printf_i+0x244>)
 800daf2:	230a      	movs	r3, #10
 800daf4:	e019      	b.n	800db2a <_printf_i+0x102>
 800daf6:	680e      	ldr	r6, [r1, #0]
 800daf8:	602b      	str	r3, [r5, #0]
 800dafa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dafe:	bf18      	it	ne
 800db00:	b236      	sxthne	r6, r6
 800db02:	e7ef      	b.n	800dae4 <_printf_i+0xbc>
 800db04:	682b      	ldr	r3, [r5, #0]
 800db06:	6820      	ldr	r0, [r4, #0]
 800db08:	1d19      	adds	r1, r3, #4
 800db0a:	6029      	str	r1, [r5, #0]
 800db0c:	0601      	lsls	r1, r0, #24
 800db0e:	d501      	bpl.n	800db14 <_printf_i+0xec>
 800db10:	681e      	ldr	r6, [r3, #0]
 800db12:	e002      	b.n	800db1a <_printf_i+0xf2>
 800db14:	0646      	lsls	r6, r0, #25
 800db16:	d5fb      	bpl.n	800db10 <_printf_i+0xe8>
 800db18:	881e      	ldrh	r6, [r3, #0]
 800db1a:	4854      	ldr	r0, [pc, #336]	; (800dc6c <_printf_i+0x244>)
 800db1c:	2f6f      	cmp	r7, #111	; 0x6f
 800db1e:	bf0c      	ite	eq
 800db20:	2308      	moveq	r3, #8
 800db22:	230a      	movne	r3, #10
 800db24:	2100      	movs	r1, #0
 800db26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db2a:	6865      	ldr	r5, [r4, #4]
 800db2c:	60a5      	str	r5, [r4, #8]
 800db2e:	2d00      	cmp	r5, #0
 800db30:	bfa2      	ittt	ge
 800db32:	6821      	ldrge	r1, [r4, #0]
 800db34:	f021 0104 	bicge.w	r1, r1, #4
 800db38:	6021      	strge	r1, [r4, #0]
 800db3a:	b90e      	cbnz	r6, 800db40 <_printf_i+0x118>
 800db3c:	2d00      	cmp	r5, #0
 800db3e:	d04d      	beq.n	800dbdc <_printf_i+0x1b4>
 800db40:	4615      	mov	r5, r2
 800db42:	fbb6 f1f3 	udiv	r1, r6, r3
 800db46:	fb03 6711 	mls	r7, r3, r1, r6
 800db4a:	5dc7      	ldrb	r7, [r0, r7]
 800db4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db50:	4637      	mov	r7, r6
 800db52:	42bb      	cmp	r3, r7
 800db54:	460e      	mov	r6, r1
 800db56:	d9f4      	bls.n	800db42 <_printf_i+0x11a>
 800db58:	2b08      	cmp	r3, #8
 800db5a:	d10b      	bne.n	800db74 <_printf_i+0x14c>
 800db5c:	6823      	ldr	r3, [r4, #0]
 800db5e:	07de      	lsls	r6, r3, #31
 800db60:	d508      	bpl.n	800db74 <_printf_i+0x14c>
 800db62:	6923      	ldr	r3, [r4, #16]
 800db64:	6861      	ldr	r1, [r4, #4]
 800db66:	4299      	cmp	r1, r3
 800db68:	bfde      	ittt	le
 800db6a:	2330      	movle	r3, #48	; 0x30
 800db6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800db74:	1b52      	subs	r2, r2, r5
 800db76:	6122      	str	r2, [r4, #16]
 800db78:	f8cd a000 	str.w	sl, [sp]
 800db7c:	464b      	mov	r3, r9
 800db7e:	aa03      	add	r2, sp, #12
 800db80:	4621      	mov	r1, r4
 800db82:	4640      	mov	r0, r8
 800db84:	f7ff fee2 	bl	800d94c <_printf_common>
 800db88:	3001      	adds	r0, #1
 800db8a:	d14c      	bne.n	800dc26 <_printf_i+0x1fe>
 800db8c:	f04f 30ff 	mov.w	r0, #4294967295
 800db90:	b004      	add	sp, #16
 800db92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db96:	4835      	ldr	r0, [pc, #212]	; (800dc6c <_printf_i+0x244>)
 800db98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800db9c:	6829      	ldr	r1, [r5, #0]
 800db9e:	6823      	ldr	r3, [r4, #0]
 800dba0:	f851 6b04 	ldr.w	r6, [r1], #4
 800dba4:	6029      	str	r1, [r5, #0]
 800dba6:	061d      	lsls	r5, r3, #24
 800dba8:	d514      	bpl.n	800dbd4 <_printf_i+0x1ac>
 800dbaa:	07df      	lsls	r7, r3, #31
 800dbac:	bf44      	itt	mi
 800dbae:	f043 0320 	orrmi.w	r3, r3, #32
 800dbb2:	6023      	strmi	r3, [r4, #0]
 800dbb4:	b91e      	cbnz	r6, 800dbbe <_printf_i+0x196>
 800dbb6:	6823      	ldr	r3, [r4, #0]
 800dbb8:	f023 0320 	bic.w	r3, r3, #32
 800dbbc:	6023      	str	r3, [r4, #0]
 800dbbe:	2310      	movs	r3, #16
 800dbc0:	e7b0      	b.n	800db24 <_printf_i+0xfc>
 800dbc2:	6823      	ldr	r3, [r4, #0]
 800dbc4:	f043 0320 	orr.w	r3, r3, #32
 800dbc8:	6023      	str	r3, [r4, #0]
 800dbca:	2378      	movs	r3, #120	; 0x78
 800dbcc:	4828      	ldr	r0, [pc, #160]	; (800dc70 <_printf_i+0x248>)
 800dbce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dbd2:	e7e3      	b.n	800db9c <_printf_i+0x174>
 800dbd4:	0659      	lsls	r1, r3, #25
 800dbd6:	bf48      	it	mi
 800dbd8:	b2b6      	uxthmi	r6, r6
 800dbda:	e7e6      	b.n	800dbaa <_printf_i+0x182>
 800dbdc:	4615      	mov	r5, r2
 800dbde:	e7bb      	b.n	800db58 <_printf_i+0x130>
 800dbe0:	682b      	ldr	r3, [r5, #0]
 800dbe2:	6826      	ldr	r6, [r4, #0]
 800dbe4:	6961      	ldr	r1, [r4, #20]
 800dbe6:	1d18      	adds	r0, r3, #4
 800dbe8:	6028      	str	r0, [r5, #0]
 800dbea:	0635      	lsls	r5, r6, #24
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	d501      	bpl.n	800dbf4 <_printf_i+0x1cc>
 800dbf0:	6019      	str	r1, [r3, #0]
 800dbf2:	e002      	b.n	800dbfa <_printf_i+0x1d2>
 800dbf4:	0670      	lsls	r0, r6, #25
 800dbf6:	d5fb      	bpl.n	800dbf0 <_printf_i+0x1c8>
 800dbf8:	8019      	strh	r1, [r3, #0]
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	6123      	str	r3, [r4, #16]
 800dbfe:	4615      	mov	r5, r2
 800dc00:	e7ba      	b.n	800db78 <_printf_i+0x150>
 800dc02:	682b      	ldr	r3, [r5, #0]
 800dc04:	1d1a      	adds	r2, r3, #4
 800dc06:	602a      	str	r2, [r5, #0]
 800dc08:	681d      	ldr	r5, [r3, #0]
 800dc0a:	6862      	ldr	r2, [r4, #4]
 800dc0c:	2100      	movs	r1, #0
 800dc0e:	4628      	mov	r0, r5
 800dc10:	f7f2 fae6 	bl	80001e0 <memchr>
 800dc14:	b108      	cbz	r0, 800dc1a <_printf_i+0x1f2>
 800dc16:	1b40      	subs	r0, r0, r5
 800dc18:	6060      	str	r0, [r4, #4]
 800dc1a:	6863      	ldr	r3, [r4, #4]
 800dc1c:	6123      	str	r3, [r4, #16]
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc24:	e7a8      	b.n	800db78 <_printf_i+0x150>
 800dc26:	6923      	ldr	r3, [r4, #16]
 800dc28:	462a      	mov	r2, r5
 800dc2a:	4649      	mov	r1, r9
 800dc2c:	4640      	mov	r0, r8
 800dc2e:	47d0      	blx	sl
 800dc30:	3001      	adds	r0, #1
 800dc32:	d0ab      	beq.n	800db8c <_printf_i+0x164>
 800dc34:	6823      	ldr	r3, [r4, #0]
 800dc36:	079b      	lsls	r3, r3, #30
 800dc38:	d413      	bmi.n	800dc62 <_printf_i+0x23a>
 800dc3a:	68e0      	ldr	r0, [r4, #12]
 800dc3c:	9b03      	ldr	r3, [sp, #12]
 800dc3e:	4298      	cmp	r0, r3
 800dc40:	bfb8      	it	lt
 800dc42:	4618      	movlt	r0, r3
 800dc44:	e7a4      	b.n	800db90 <_printf_i+0x168>
 800dc46:	2301      	movs	r3, #1
 800dc48:	4632      	mov	r2, r6
 800dc4a:	4649      	mov	r1, r9
 800dc4c:	4640      	mov	r0, r8
 800dc4e:	47d0      	blx	sl
 800dc50:	3001      	adds	r0, #1
 800dc52:	d09b      	beq.n	800db8c <_printf_i+0x164>
 800dc54:	3501      	adds	r5, #1
 800dc56:	68e3      	ldr	r3, [r4, #12]
 800dc58:	9903      	ldr	r1, [sp, #12]
 800dc5a:	1a5b      	subs	r3, r3, r1
 800dc5c:	42ab      	cmp	r3, r5
 800dc5e:	dcf2      	bgt.n	800dc46 <_printf_i+0x21e>
 800dc60:	e7eb      	b.n	800dc3a <_printf_i+0x212>
 800dc62:	2500      	movs	r5, #0
 800dc64:	f104 0619 	add.w	r6, r4, #25
 800dc68:	e7f5      	b.n	800dc56 <_printf_i+0x22e>
 800dc6a:	bf00      	nop
 800dc6c:	0800ff92 	.word	0x0800ff92
 800dc70:	0800ffa3 	.word	0x0800ffa3

0800dc74 <_puts_r>:
 800dc74:	b570      	push	{r4, r5, r6, lr}
 800dc76:	460e      	mov	r6, r1
 800dc78:	4605      	mov	r5, r0
 800dc7a:	b118      	cbz	r0, 800dc84 <_puts_r+0x10>
 800dc7c:	6983      	ldr	r3, [r0, #24]
 800dc7e:	b90b      	cbnz	r3, 800dc84 <_puts_r+0x10>
 800dc80:	f001 f8c2 	bl	800ee08 <__sinit>
 800dc84:	69ab      	ldr	r3, [r5, #24]
 800dc86:	68ac      	ldr	r4, [r5, #8]
 800dc88:	b913      	cbnz	r3, 800dc90 <_puts_r+0x1c>
 800dc8a:	4628      	mov	r0, r5
 800dc8c:	f001 f8bc 	bl	800ee08 <__sinit>
 800dc90:	4b2c      	ldr	r3, [pc, #176]	; (800dd44 <_puts_r+0xd0>)
 800dc92:	429c      	cmp	r4, r3
 800dc94:	d120      	bne.n	800dcd8 <_puts_r+0x64>
 800dc96:	686c      	ldr	r4, [r5, #4]
 800dc98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc9a:	07db      	lsls	r3, r3, #31
 800dc9c:	d405      	bmi.n	800dcaa <_puts_r+0x36>
 800dc9e:	89a3      	ldrh	r3, [r4, #12]
 800dca0:	0598      	lsls	r0, r3, #22
 800dca2:	d402      	bmi.n	800dcaa <_puts_r+0x36>
 800dca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dca6:	f001 f952 	bl	800ef4e <__retarget_lock_acquire_recursive>
 800dcaa:	89a3      	ldrh	r3, [r4, #12]
 800dcac:	0719      	lsls	r1, r3, #28
 800dcae:	d51d      	bpl.n	800dcec <_puts_r+0x78>
 800dcb0:	6923      	ldr	r3, [r4, #16]
 800dcb2:	b1db      	cbz	r3, 800dcec <_puts_r+0x78>
 800dcb4:	3e01      	subs	r6, #1
 800dcb6:	68a3      	ldr	r3, [r4, #8]
 800dcb8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dcbc:	3b01      	subs	r3, #1
 800dcbe:	60a3      	str	r3, [r4, #8]
 800dcc0:	bb39      	cbnz	r1, 800dd12 <_puts_r+0x9e>
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	da38      	bge.n	800dd38 <_puts_r+0xc4>
 800dcc6:	4622      	mov	r2, r4
 800dcc8:	210a      	movs	r1, #10
 800dcca:	4628      	mov	r0, r5
 800dccc:	f000 f848 	bl	800dd60 <__swbuf_r>
 800dcd0:	3001      	adds	r0, #1
 800dcd2:	d011      	beq.n	800dcf8 <_puts_r+0x84>
 800dcd4:	250a      	movs	r5, #10
 800dcd6:	e011      	b.n	800dcfc <_puts_r+0x88>
 800dcd8:	4b1b      	ldr	r3, [pc, #108]	; (800dd48 <_puts_r+0xd4>)
 800dcda:	429c      	cmp	r4, r3
 800dcdc:	d101      	bne.n	800dce2 <_puts_r+0x6e>
 800dcde:	68ac      	ldr	r4, [r5, #8]
 800dce0:	e7da      	b.n	800dc98 <_puts_r+0x24>
 800dce2:	4b1a      	ldr	r3, [pc, #104]	; (800dd4c <_puts_r+0xd8>)
 800dce4:	429c      	cmp	r4, r3
 800dce6:	bf08      	it	eq
 800dce8:	68ec      	ldreq	r4, [r5, #12]
 800dcea:	e7d5      	b.n	800dc98 <_puts_r+0x24>
 800dcec:	4621      	mov	r1, r4
 800dcee:	4628      	mov	r0, r5
 800dcf0:	f000 f888 	bl	800de04 <__swsetup_r>
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d0dd      	beq.n	800dcb4 <_puts_r+0x40>
 800dcf8:	f04f 35ff 	mov.w	r5, #4294967295
 800dcfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcfe:	07da      	lsls	r2, r3, #31
 800dd00:	d405      	bmi.n	800dd0e <_puts_r+0x9a>
 800dd02:	89a3      	ldrh	r3, [r4, #12]
 800dd04:	059b      	lsls	r3, r3, #22
 800dd06:	d402      	bmi.n	800dd0e <_puts_r+0x9a>
 800dd08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd0a:	f001 f921 	bl	800ef50 <__retarget_lock_release_recursive>
 800dd0e:	4628      	mov	r0, r5
 800dd10:	bd70      	pop	{r4, r5, r6, pc}
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	da04      	bge.n	800dd20 <_puts_r+0xac>
 800dd16:	69a2      	ldr	r2, [r4, #24]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	dc06      	bgt.n	800dd2a <_puts_r+0xb6>
 800dd1c:	290a      	cmp	r1, #10
 800dd1e:	d004      	beq.n	800dd2a <_puts_r+0xb6>
 800dd20:	6823      	ldr	r3, [r4, #0]
 800dd22:	1c5a      	adds	r2, r3, #1
 800dd24:	6022      	str	r2, [r4, #0]
 800dd26:	7019      	strb	r1, [r3, #0]
 800dd28:	e7c5      	b.n	800dcb6 <_puts_r+0x42>
 800dd2a:	4622      	mov	r2, r4
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	f000 f817 	bl	800dd60 <__swbuf_r>
 800dd32:	3001      	adds	r0, #1
 800dd34:	d1bf      	bne.n	800dcb6 <_puts_r+0x42>
 800dd36:	e7df      	b.n	800dcf8 <_puts_r+0x84>
 800dd38:	6823      	ldr	r3, [r4, #0]
 800dd3a:	250a      	movs	r5, #10
 800dd3c:	1c5a      	adds	r2, r3, #1
 800dd3e:	6022      	str	r2, [r4, #0]
 800dd40:	701d      	strb	r5, [r3, #0]
 800dd42:	e7db      	b.n	800dcfc <_puts_r+0x88>
 800dd44:	08010064 	.word	0x08010064
 800dd48:	08010084 	.word	0x08010084
 800dd4c:	08010044 	.word	0x08010044

0800dd50 <puts>:
 800dd50:	4b02      	ldr	r3, [pc, #8]	; (800dd5c <puts+0xc>)
 800dd52:	4601      	mov	r1, r0
 800dd54:	6818      	ldr	r0, [r3, #0]
 800dd56:	f7ff bf8d 	b.w	800dc74 <_puts_r>
 800dd5a:	bf00      	nop
 800dd5c:	2000016c 	.word	0x2000016c

0800dd60 <__swbuf_r>:
 800dd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd62:	460e      	mov	r6, r1
 800dd64:	4614      	mov	r4, r2
 800dd66:	4605      	mov	r5, r0
 800dd68:	b118      	cbz	r0, 800dd72 <__swbuf_r+0x12>
 800dd6a:	6983      	ldr	r3, [r0, #24]
 800dd6c:	b90b      	cbnz	r3, 800dd72 <__swbuf_r+0x12>
 800dd6e:	f001 f84b 	bl	800ee08 <__sinit>
 800dd72:	4b21      	ldr	r3, [pc, #132]	; (800ddf8 <__swbuf_r+0x98>)
 800dd74:	429c      	cmp	r4, r3
 800dd76:	d12b      	bne.n	800ddd0 <__swbuf_r+0x70>
 800dd78:	686c      	ldr	r4, [r5, #4]
 800dd7a:	69a3      	ldr	r3, [r4, #24]
 800dd7c:	60a3      	str	r3, [r4, #8]
 800dd7e:	89a3      	ldrh	r3, [r4, #12]
 800dd80:	071a      	lsls	r2, r3, #28
 800dd82:	d52f      	bpl.n	800dde4 <__swbuf_r+0x84>
 800dd84:	6923      	ldr	r3, [r4, #16]
 800dd86:	b36b      	cbz	r3, 800dde4 <__swbuf_r+0x84>
 800dd88:	6923      	ldr	r3, [r4, #16]
 800dd8a:	6820      	ldr	r0, [r4, #0]
 800dd8c:	1ac0      	subs	r0, r0, r3
 800dd8e:	6963      	ldr	r3, [r4, #20]
 800dd90:	b2f6      	uxtb	r6, r6
 800dd92:	4283      	cmp	r3, r0
 800dd94:	4637      	mov	r7, r6
 800dd96:	dc04      	bgt.n	800dda2 <__swbuf_r+0x42>
 800dd98:	4621      	mov	r1, r4
 800dd9a:	4628      	mov	r0, r5
 800dd9c:	f000 ffa0 	bl	800ece0 <_fflush_r>
 800dda0:	bb30      	cbnz	r0, 800ddf0 <__swbuf_r+0x90>
 800dda2:	68a3      	ldr	r3, [r4, #8]
 800dda4:	3b01      	subs	r3, #1
 800dda6:	60a3      	str	r3, [r4, #8]
 800dda8:	6823      	ldr	r3, [r4, #0]
 800ddaa:	1c5a      	adds	r2, r3, #1
 800ddac:	6022      	str	r2, [r4, #0]
 800ddae:	701e      	strb	r6, [r3, #0]
 800ddb0:	6963      	ldr	r3, [r4, #20]
 800ddb2:	3001      	adds	r0, #1
 800ddb4:	4283      	cmp	r3, r0
 800ddb6:	d004      	beq.n	800ddc2 <__swbuf_r+0x62>
 800ddb8:	89a3      	ldrh	r3, [r4, #12]
 800ddba:	07db      	lsls	r3, r3, #31
 800ddbc:	d506      	bpl.n	800ddcc <__swbuf_r+0x6c>
 800ddbe:	2e0a      	cmp	r6, #10
 800ddc0:	d104      	bne.n	800ddcc <__swbuf_r+0x6c>
 800ddc2:	4621      	mov	r1, r4
 800ddc4:	4628      	mov	r0, r5
 800ddc6:	f000 ff8b 	bl	800ece0 <_fflush_r>
 800ddca:	b988      	cbnz	r0, 800ddf0 <__swbuf_r+0x90>
 800ddcc:	4638      	mov	r0, r7
 800ddce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddd0:	4b0a      	ldr	r3, [pc, #40]	; (800ddfc <__swbuf_r+0x9c>)
 800ddd2:	429c      	cmp	r4, r3
 800ddd4:	d101      	bne.n	800ddda <__swbuf_r+0x7a>
 800ddd6:	68ac      	ldr	r4, [r5, #8]
 800ddd8:	e7cf      	b.n	800dd7a <__swbuf_r+0x1a>
 800ddda:	4b09      	ldr	r3, [pc, #36]	; (800de00 <__swbuf_r+0xa0>)
 800dddc:	429c      	cmp	r4, r3
 800ddde:	bf08      	it	eq
 800dde0:	68ec      	ldreq	r4, [r5, #12]
 800dde2:	e7ca      	b.n	800dd7a <__swbuf_r+0x1a>
 800dde4:	4621      	mov	r1, r4
 800dde6:	4628      	mov	r0, r5
 800dde8:	f000 f80c 	bl	800de04 <__swsetup_r>
 800ddec:	2800      	cmp	r0, #0
 800ddee:	d0cb      	beq.n	800dd88 <__swbuf_r+0x28>
 800ddf0:	f04f 37ff 	mov.w	r7, #4294967295
 800ddf4:	e7ea      	b.n	800ddcc <__swbuf_r+0x6c>
 800ddf6:	bf00      	nop
 800ddf8:	08010064 	.word	0x08010064
 800ddfc:	08010084 	.word	0x08010084
 800de00:	08010044 	.word	0x08010044

0800de04 <__swsetup_r>:
 800de04:	4b32      	ldr	r3, [pc, #200]	; (800ded0 <__swsetup_r+0xcc>)
 800de06:	b570      	push	{r4, r5, r6, lr}
 800de08:	681d      	ldr	r5, [r3, #0]
 800de0a:	4606      	mov	r6, r0
 800de0c:	460c      	mov	r4, r1
 800de0e:	b125      	cbz	r5, 800de1a <__swsetup_r+0x16>
 800de10:	69ab      	ldr	r3, [r5, #24]
 800de12:	b913      	cbnz	r3, 800de1a <__swsetup_r+0x16>
 800de14:	4628      	mov	r0, r5
 800de16:	f000 fff7 	bl	800ee08 <__sinit>
 800de1a:	4b2e      	ldr	r3, [pc, #184]	; (800ded4 <__swsetup_r+0xd0>)
 800de1c:	429c      	cmp	r4, r3
 800de1e:	d10f      	bne.n	800de40 <__swsetup_r+0x3c>
 800de20:	686c      	ldr	r4, [r5, #4]
 800de22:	89a3      	ldrh	r3, [r4, #12]
 800de24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de28:	0719      	lsls	r1, r3, #28
 800de2a:	d42c      	bmi.n	800de86 <__swsetup_r+0x82>
 800de2c:	06dd      	lsls	r5, r3, #27
 800de2e:	d411      	bmi.n	800de54 <__swsetup_r+0x50>
 800de30:	2309      	movs	r3, #9
 800de32:	6033      	str	r3, [r6, #0]
 800de34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de38:	81a3      	strh	r3, [r4, #12]
 800de3a:	f04f 30ff 	mov.w	r0, #4294967295
 800de3e:	e03e      	b.n	800debe <__swsetup_r+0xba>
 800de40:	4b25      	ldr	r3, [pc, #148]	; (800ded8 <__swsetup_r+0xd4>)
 800de42:	429c      	cmp	r4, r3
 800de44:	d101      	bne.n	800de4a <__swsetup_r+0x46>
 800de46:	68ac      	ldr	r4, [r5, #8]
 800de48:	e7eb      	b.n	800de22 <__swsetup_r+0x1e>
 800de4a:	4b24      	ldr	r3, [pc, #144]	; (800dedc <__swsetup_r+0xd8>)
 800de4c:	429c      	cmp	r4, r3
 800de4e:	bf08      	it	eq
 800de50:	68ec      	ldreq	r4, [r5, #12]
 800de52:	e7e6      	b.n	800de22 <__swsetup_r+0x1e>
 800de54:	0758      	lsls	r0, r3, #29
 800de56:	d512      	bpl.n	800de7e <__swsetup_r+0x7a>
 800de58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de5a:	b141      	cbz	r1, 800de6e <__swsetup_r+0x6a>
 800de5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de60:	4299      	cmp	r1, r3
 800de62:	d002      	beq.n	800de6a <__swsetup_r+0x66>
 800de64:	4630      	mov	r0, r6
 800de66:	f001 fc89 	bl	800f77c <_free_r>
 800de6a:	2300      	movs	r3, #0
 800de6c:	6363      	str	r3, [r4, #52]	; 0x34
 800de6e:	89a3      	ldrh	r3, [r4, #12]
 800de70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de74:	81a3      	strh	r3, [r4, #12]
 800de76:	2300      	movs	r3, #0
 800de78:	6063      	str	r3, [r4, #4]
 800de7a:	6923      	ldr	r3, [r4, #16]
 800de7c:	6023      	str	r3, [r4, #0]
 800de7e:	89a3      	ldrh	r3, [r4, #12]
 800de80:	f043 0308 	orr.w	r3, r3, #8
 800de84:	81a3      	strh	r3, [r4, #12]
 800de86:	6923      	ldr	r3, [r4, #16]
 800de88:	b94b      	cbnz	r3, 800de9e <__swsetup_r+0x9a>
 800de8a:	89a3      	ldrh	r3, [r4, #12]
 800de8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de94:	d003      	beq.n	800de9e <__swsetup_r+0x9a>
 800de96:	4621      	mov	r1, r4
 800de98:	4630      	mov	r0, r6
 800de9a:	f001 f87f 	bl	800ef9c <__smakebuf_r>
 800de9e:	89a0      	ldrh	r0, [r4, #12]
 800dea0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dea4:	f010 0301 	ands.w	r3, r0, #1
 800dea8:	d00a      	beq.n	800dec0 <__swsetup_r+0xbc>
 800deaa:	2300      	movs	r3, #0
 800deac:	60a3      	str	r3, [r4, #8]
 800deae:	6963      	ldr	r3, [r4, #20]
 800deb0:	425b      	negs	r3, r3
 800deb2:	61a3      	str	r3, [r4, #24]
 800deb4:	6923      	ldr	r3, [r4, #16]
 800deb6:	b943      	cbnz	r3, 800deca <__swsetup_r+0xc6>
 800deb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800debc:	d1ba      	bne.n	800de34 <__swsetup_r+0x30>
 800debe:	bd70      	pop	{r4, r5, r6, pc}
 800dec0:	0781      	lsls	r1, r0, #30
 800dec2:	bf58      	it	pl
 800dec4:	6963      	ldrpl	r3, [r4, #20]
 800dec6:	60a3      	str	r3, [r4, #8]
 800dec8:	e7f4      	b.n	800deb4 <__swsetup_r+0xb0>
 800deca:	2000      	movs	r0, #0
 800decc:	e7f7      	b.n	800debe <__swsetup_r+0xba>
 800dece:	bf00      	nop
 800ded0:	2000016c 	.word	0x2000016c
 800ded4:	08010064 	.word	0x08010064
 800ded8:	08010084 	.word	0x08010084
 800dedc:	08010044 	.word	0x08010044

0800dee0 <quorem>:
 800dee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	6903      	ldr	r3, [r0, #16]
 800dee6:	690c      	ldr	r4, [r1, #16]
 800dee8:	42a3      	cmp	r3, r4
 800deea:	4607      	mov	r7, r0
 800deec:	f2c0 8081 	blt.w	800dff2 <quorem+0x112>
 800def0:	3c01      	subs	r4, #1
 800def2:	f101 0814 	add.w	r8, r1, #20
 800def6:	f100 0514 	add.w	r5, r0, #20
 800defa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800defe:	9301      	str	r3, [sp, #4]
 800df00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800df04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800df08:	3301      	adds	r3, #1
 800df0a:	429a      	cmp	r2, r3
 800df0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800df10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800df14:	fbb2 f6f3 	udiv	r6, r2, r3
 800df18:	d331      	bcc.n	800df7e <quorem+0x9e>
 800df1a:	f04f 0e00 	mov.w	lr, #0
 800df1e:	4640      	mov	r0, r8
 800df20:	46ac      	mov	ip, r5
 800df22:	46f2      	mov	sl, lr
 800df24:	f850 2b04 	ldr.w	r2, [r0], #4
 800df28:	b293      	uxth	r3, r2
 800df2a:	fb06 e303 	mla	r3, r6, r3, lr
 800df2e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800df32:	b29b      	uxth	r3, r3
 800df34:	ebaa 0303 	sub.w	r3, sl, r3
 800df38:	f8dc a000 	ldr.w	sl, [ip]
 800df3c:	0c12      	lsrs	r2, r2, #16
 800df3e:	fa13 f38a 	uxtah	r3, r3, sl
 800df42:	fb06 e202 	mla	r2, r6, r2, lr
 800df46:	9300      	str	r3, [sp, #0]
 800df48:	9b00      	ldr	r3, [sp, #0]
 800df4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800df4e:	b292      	uxth	r2, r2
 800df50:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800df54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800df58:	f8bd 3000 	ldrh.w	r3, [sp]
 800df5c:	4581      	cmp	r9, r0
 800df5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800df62:	f84c 3b04 	str.w	r3, [ip], #4
 800df66:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800df6a:	d2db      	bcs.n	800df24 <quorem+0x44>
 800df6c:	f855 300b 	ldr.w	r3, [r5, fp]
 800df70:	b92b      	cbnz	r3, 800df7e <quorem+0x9e>
 800df72:	9b01      	ldr	r3, [sp, #4]
 800df74:	3b04      	subs	r3, #4
 800df76:	429d      	cmp	r5, r3
 800df78:	461a      	mov	r2, r3
 800df7a:	d32e      	bcc.n	800dfda <quorem+0xfa>
 800df7c:	613c      	str	r4, [r7, #16]
 800df7e:	4638      	mov	r0, r7
 800df80:	f001 fae4 	bl	800f54c <__mcmp>
 800df84:	2800      	cmp	r0, #0
 800df86:	db24      	blt.n	800dfd2 <quorem+0xf2>
 800df88:	3601      	adds	r6, #1
 800df8a:	4628      	mov	r0, r5
 800df8c:	f04f 0c00 	mov.w	ip, #0
 800df90:	f858 2b04 	ldr.w	r2, [r8], #4
 800df94:	f8d0 e000 	ldr.w	lr, [r0]
 800df98:	b293      	uxth	r3, r2
 800df9a:	ebac 0303 	sub.w	r3, ip, r3
 800df9e:	0c12      	lsrs	r2, r2, #16
 800dfa0:	fa13 f38e 	uxtah	r3, r3, lr
 800dfa4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dfa8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dfac:	b29b      	uxth	r3, r3
 800dfae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfb2:	45c1      	cmp	r9, r8
 800dfb4:	f840 3b04 	str.w	r3, [r0], #4
 800dfb8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dfbc:	d2e8      	bcs.n	800df90 <quorem+0xb0>
 800dfbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dfc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dfc6:	b922      	cbnz	r2, 800dfd2 <quorem+0xf2>
 800dfc8:	3b04      	subs	r3, #4
 800dfca:	429d      	cmp	r5, r3
 800dfcc:	461a      	mov	r2, r3
 800dfce:	d30a      	bcc.n	800dfe6 <quorem+0x106>
 800dfd0:	613c      	str	r4, [r7, #16]
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	b003      	add	sp, #12
 800dfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfda:	6812      	ldr	r2, [r2, #0]
 800dfdc:	3b04      	subs	r3, #4
 800dfde:	2a00      	cmp	r2, #0
 800dfe0:	d1cc      	bne.n	800df7c <quorem+0x9c>
 800dfe2:	3c01      	subs	r4, #1
 800dfe4:	e7c7      	b.n	800df76 <quorem+0x96>
 800dfe6:	6812      	ldr	r2, [r2, #0]
 800dfe8:	3b04      	subs	r3, #4
 800dfea:	2a00      	cmp	r2, #0
 800dfec:	d1f0      	bne.n	800dfd0 <quorem+0xf0>
 800dfee:	3c01      	subs	r4, #1
 800dff0:	e7eb      	b.n	800dfca <quorem+0xea>
 800dff2:	2000      	movs	r0, #0
 800dff4:	e7ee      	b.n	800dfd4 <quorem+0xf4>
	...

0800dff8 <_dtoa_r>:
 800dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	ed2d 8b04 	vpush	{d8-d9}
 800e000:	ec57 6b10 	vmov	r6, r7, d0
 800e004:	b093      	sub	sp, #76	; 0x4c
 800e006:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e008:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e00c:	9106      	str	r1, [sp, #24]
 800e00e:	ee10 aa10 	vmov	sl, s0
 800e012:	4604      	mov	r4, r0
 800e014:	9209      	str	r2, [sp, #36]	; 0x24
 800e016:	930c      	str	r3, [sp, #48]	; 0x30
 800e018:	46bb      	mov	fp, r7
 800e01a:	b975      	cbnz	r5, 800e03a <_dtoa_r+0x42>
 800e01c:	2010      	movs	r0, #16
 800e01e:	f000 fffd 	bl	800f01c <malloc>
 800e022:	4602      	mov	r2, r0
 800e024:	6260      	str	r0, [r4, #36]	; 0x24
 800e026:	b920      	cbnz	r0, 800e032 <_dtoa_r+0x3a>
 800e028:	4ba7      	ldr	r3, [pc, #668]	; (800e2c8 <_dtoa_r+0x2d0>)
 800e02a:	21ea      	movs	r1, #234	; 0xea
 800e02c:	48a7      	ldr	r0, [pc, #668]	; (800e2cc <_dtoa_r+0x2d4>)
 800e02e:	f001 fe45 	bl	800fcbc <__assert_func>
 800e032:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e036:	6005      	str	r5, [r0, #0]
 800e038:	60c5      	str	r5, [r0, #12]
 800e03a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e03c:	6819      	ldr	r1, [r3, #0]
 800e03e:	b151      	cbz	r1, 800e056 <_dtoa_r+0x5e>
 800e040:	685a      	ldr	r2, [r3, #4]
 800e042:	604a      	str	r2, [r1, #4]
 800e044:	2301      	movs	r3, #1
 800e046:	4093      	lsls	r3, r2
 800e048:	608b      	str	r3, [r1, #8]
 800e04a:	4620      	mov	r0, r4
 800e04c:	f001 f83c 	bl	800f0c8 <_Bfree>
 800e050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e052:	2200      	movs	r2, #0
 800e054:	601a      	str	r2, [r3, #0]
 800e056:	1e3b      	subs	r3, r7, #0
 800e058:	bfaa      	itet	ge
 800e05a:	2300      	movge	r3, #0
 800e05c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e060:	f8c8 3000 	strge.w	r3, [r8]
 800e064:	4b9a      	ldr	r3, [pc, #616]	; (800e2d0 <_dtoa_r+0x2d8>)
 800e066:	bfbc      	itt	lt
 800e068:	2201      	movlt	r2, #1
 800e06a:	f8c8 2000 	strlt.w	r2, [r8]
 800e06e:	ea33 030b 	bics.w	r3, r3, fp
 800e072:	d11b      	bne.n	800e0ac <_dtoa_r+0xb4>
 800e074:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e076:	f242 730f 	movw	r3, #9999	; 0x270f
 800e07a:	6013      	str	r3, [r2, #0]
 800e07c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e080:	4333      	orrs	r3, r6
 800e082:	f000 8592 	beq.w	800ebaa <_dtoa_r+0xbb2>
 800e086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e088:	b963      	cbnz	r3, 800e0a4 <_dtoa_r+0xac>
 800e08a:	4b92      	ldr	r3, [pc, #584]	; (800e2d4 <_dtoa_r+0x2dc>)
 800e08c:	e022      	b.n	800e0d4 <_dtoa_r+0xdc>
 800e08e:	4b92      	ldr	r3, [pc, #584]	; (800e2d8 <_dtoa_r+0x2e0>)
 800e090:	9301      	str	r3, [sp, #4]
 800e092:	3308      	adds	r3, #8
 800e094:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e096:	6013      	str	r3, [r2, #0]
 800e098:	9801      	ldr	r0, [sp, #4]
 800e09a:	b013      	add	sp, #76	; 0x4c
 800e09c:	ecbd 8b04 	vpop	{d8-d9}
 800e0a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0a4:	4b8b      	ldr	r3, [pc, #556]	; (800e2d4 <_dtoa_r+0x2dc>)
 800e0a6:	9301      	str	r3, [sp, #4]
 800e0a8:	3303      	adds	r3, #3
 800e0aa:	e7f3      	b.n	800e094 <_dtoa_r+0x9c>
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	4650      	mov	r0, sl
 800e0b2:	4659      	mov	r1, fp
 800e0b4:	f7f2 fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0b8:	ec4b ab19 	vmov	d9, sl, fp
 800e0bc:	4680      	mov	r8, r0
 800e0be:	b158      	cbz	r0, 800e0d8 <_dtoa_r+0xe0>
 800e0c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	6013      	str	r3, [r2, #0]
 800e0c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	f000 856b 	beq.w	800eba4 <_dtoa_r+0xbac>
 800e0ce:	4883      	ldr	r0, [pc, #524]	; (800e2dc <_dtoa_r+0x2e4>)
 800e0d0:	6018      	str	r0, [r3, #0]
 800e0d2:	1e43      	subs	r3, r0, #1
 800e0d4:	9301      	str	r3, [sp, #4]
 800e0d6:	e7df      	b.n	800e098 <_dtoa_r+0xa0>
 800e0d8:	ec4b ab10 	vmov	d0, sl, fp
 800e0dc:	aa10      	add	r2, sp, #64	; 0x40
 800e0de:	a911      	add	r1, sp, #68	; 0x44
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f001 fad9 	bl	800f698 <__d2b>
 800e0e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e0ea:	ee08 0a10 	vmov	s16, r0
 800e0ee:	2d00      	cmp	r5, #0
 800e0f0:	f000 8084 	beq.w	800e1fc <_dtoa_r+0x204>
 800e0f4:	ee19 3a90 	vmov	r3, s19
 800e0f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e100:	4656      	mov	r6, sl
 800e102:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e106:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e10a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e10e:	4b74      	ldr	r3, [pc, #464]	; (800e2e0 <_dtoa_r+0x2e8>)
 800e110:	2200      	movs	r2, #0
 800e112:	4630      	mov	r0, r6
 800e114:	4639      	mov	r1, r7
 800e116:	f7f2 f8b7 	bl	8000288 <__aeabi_dsub>
 800e11a:	a365      	add	r3, pc, #404	; (adr r3, 800e2b0 <_dtoa_r+0x2b8>)
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	f7f2 fa6a 	bl	80005f8 <__aeabi_dmul>
 800e124:	a364      	add	r3, pc, #400	; (adr r3, 800e2b8 <_dtoa_r+0x2c0>)
 800e126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12a:	f7f2 f8af 	bl	800028c <__adddf3>
 800e12e:	4606      	mov	r6, r0
 800e130:	4628      	mov	r0, r5
 800e132:	460f      	mov	r7, r1
 800e134:	f7f2 f9f6 	bl	8000524 <__aeabi_i2d>
 800e138:	a361      	add	r3, pc, #388	; (adr r3, 800e2c0 <_dtoa_r+0x2c8>)
 800e13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13e:	f7f2 fa5b 	bl	80005f8 <__aeabi_dmul>
 800e142:	4602      	mov	r2, r0
 800e144:	460b      	mov	r3, r1
 800e146:	4630      	mov	r0, r6
 800e148:	4639      	mov	r1, r7
 800e14a:	f7f2 f89f 	bl	800028c <__adddf3>
 800e14e:	4606      	mov	r6, r0
 800e150:	460f      	mov	r7, r1
 800e152:	f7f2 fd01 	bl	8000b58 <__aeabi_d2iz>
 800e156:	2200      	movs	r2, #0
 800e158:	9000      	str	r0, [sp, #0]
 800e15a:	2300      	movs	r3, #0
 800e15c:	4630      	mov	r0, r6
 800e15e:	4639      	mov	r1, r7
 800e160:	f7f2 fcbc 	bl	8000adc <__aeabi_dcmplt>
 800e164:	b150      	cbz	r0, 800e17c <_dtoa_r+0x184>
 800e166:	9800      	ldr	r0, [sp, #0]
 800e168:	f7f2 f9dc 	bl	8000524 <__aeabi_i2d>
 800e16c:	4632      	mov	r2, r6
 800e16e:	463b      	mov	r3, r7
 800e170:	f7f2 fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800e174:	b910      	cbnz	r0, 800e17c <_dtoa_r+0x184>
 800e176:	9b00      	ldr	r3, [sp, #0]
 800e178:	3b01      	subs	r3, #1
 800e17a:	9300      	str	r3, [sp, #0]
 800e17c:	9b00      	ldr	r3, [sp, #0]
 800e17e:	2b16      	cmp	r3, #22
 800e180:	d85a      	bhi.n	800e238 <_dtoa_r+0x240>
 800e182:	9a00      	ldr	r2, [sp, #0]
 800e184:	4b57      	ldr	r3, [pc, #348]	; (800e2e4 <_dtoa_r+0x2ec>)
 800e186:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e18e:	ec51 0b19 	vmov	r0, r1, d9
 800e192:	f7f2 fca3 	bl	8000adc <__aeabi_dcmplt>
 800e196:	2800      	cmp	r0, #0
 800e198:	d050      	beq.n	800e23c <_dtoa_r+0x244>
 800e19a:	9b00      	ldr	r3, [sp, #0]
 800e19c:	3b01      	subs	r3, #1
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e1a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e1a6:	1b5d      	subs	r5, r3, r5
 800e1a8:	1e6b      	subs	r3, r5, #1
 800e1aa:	9305      	str	r3, [sp, #20]
 800e1ac:	bf45      	ittet	mi
 800e1ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800e1b2:	9304      	strmi	r3, [sp, #16]
 800e1b4:	2300      	movpl	r3, #0
 800e1b6:	2300      	movmi	r3, #0
 800e1b8:	bf4c      	ite	mi
 800e1ba:	9305      	strmi	r3, [sp, #20]
 800e1bc:	9304      	strpl	r3, [sp, #16]
 800e1be:	9b00      	ldr	r3, [sp, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	db3d      	blt.n	800e240 <_dtoa_r+0x248>
 800e1c4:	9b05      	ldr	r3, [sp, #20]
 800e1c6:	9a00      	ldr	r2, [sp, #0]
 800e1c8:	920a      	str	r2, [sp, #40]	; 0x28
 800e1ca:	4413      	add	r3, r2
 800e1cc:	9305      	str	r3, [sp, #20]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	9307      	str	r3, [sp, #28]
 800e1d2:	9b06      	ldr	r3, [sp, #24]
 800e1d4:	2b09      	cmp	r3, #9
 800e1d6:	f200 8089 	bhi.w	800e2ec <_dtoa_r+0x2f4>
 800e1da:	2b05      	cmp	r3, #5
 800e1dc:	bfc4      	itt	gt
 800e1de:	3b04      	subgt	r3, #4
 800e1e0:	9306      	strgt	r3, [sp, #24]
 800e1e2:	9b06      	ldr	r3, [sp, #24]
 800e1e4:	f1a3 0302 	sub.w	r3, r3, #2
 800e1e8:	bfcc      	ite	gt
 800e1ea:	2500      	movgt	r5, #0
 800e1ec:	2501      	movle	r5, #1
 800e1ee:	2b03      	cmp	r3, #3
 800e1f0:	f200 8087 	bhi.w	800e302 <_dtoa_r+0x30a>
 800e1f4:	e8df f003 	tbb	[pc, r3]
 800e1f8:	59383a2d 	.word	0x59383a2d
 800e1fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e200:	441d      	add	r5, r3
 800e202:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e206:	2b20      	cmp	r3, #32
 800e208:	bfc1      	itttt	gt
 800e20a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e20e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e212:	fa0b f303 	lslgt.w	r3, fp, r3
 800e216:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e21a:	bfda      	itte	le
 800e21c:	f1c3 0320 	rsble	r3, r3, #32
 800e220:	fa06 f003 	lslle.w	r0, r6, r3
 800e224:	4318      	orrgt	r0, r3
 800e226:	f7f2 f96d 	bl	8000504 <__aeabi_ui2d>
 800e22a:	2301      	movs	r3, #1
 800e22c:	4606      	mov	r6, r0
 800e22e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e232:	3d01      	subs	r5, #1
 800e234:	930e      	str	r3, [sp, #56]	; 0x38
 800e236:	e76a      	b.n	800e10e <_dtoa_r+0x116>
 800e238:	2301      	movs	r3, #1
 800e23a:	e7b2      	b.n	800e1a2 <_dtoa_r+0x1aa>
 800e23c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e23e:	e7b1      	b.n	800e1a4 <_dtoa_r+0x1ac>
 800e240:	9b04      	ldr	r3, [sp, #16]
 800e242:	9a00      	ldr	r2, [sp, #0]
 800e244:	1a9b      	subs	r3, r3, r2
 800e246:	9304      	str	r3, [sp, #16]
 800e248:	4253      	negs	r3, r2
 800e24a:	9307      	str	r3, [sp, #28]
 800e24c:	2300      	movs	r3, #0
 800e24e:	930a      	str	r3, [sp, #40]	; 0x28
 800e250:	e7bf      	b.n	800e1d2 <_dtoa_r+0x1da>
 800e252:	2300      	movs	r3, #0
 800e254:	9308      	str	r3, [sp, #32]
 800e256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e258:	2b00      	cmp	r3, #0
 800e25a:	dc55      	bgt.n	800e308 <_dtoa_r+0x310>
 800e25c:	2301      	movs	r3, #1
 800e25e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e262:	461a      	mov	r2, r3
 800e264:	9209      	str	r2, [sp, #36]	; 0x24
 800e266:	e00c      	b.n	800e282 <_dtoa_r+0x28a>
 800e268:	2301      	movs	r3, #1
 800e26a:	e7f3      	b.n	800e254 <_dtoa_r+0x25c>
 800e26c:	2300      	movs	r3, #0
 800e26e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e270:	9308      	str	r3, [sp, #32]
 800e272:	9b00      	ldr	r3, [sp, #0]
 800e274:	4413      	add	r3, r2
 800e276:	9302      	str	r3, [sp, #8]
 800e278:	3301      	adds	r3, #1
 800e27a:	2b01      	cmp	r3, #1
 800e27c:	9303      	str	r3, [sp, #12]
 800e27e:	bfb8      	it	lt
 800e280:	2301      	movlt	r3, #1
 800e282:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e284:	2200      	movs	r2, #0
 800e286:	6042      	str	r2, [r0, #4]
 800e288:	2204      	movs	r2, #4
 800e28a:	f102 0614 	add.w	r6, r2, #20
 800e28e:	429e      	cmp	r6, r3
 800e290:	6841      	ldr	r1, [r0, #4]
 800e292:	d93d      	bls.n	800e310 <_dtoa_r+0x318>
 800e294:	4620      	mov	r0, r4
 800e296:	f000 fed7 	bl	800f048 <_Balloc>
 800e29a:	9001      	str	r0, [sp, #4]
 800e29c:	2800      	cmp	r0, #0
 800e29e:	d13b      	bne.n	800e318 <_dtoa_r+0x320>
 800e2a0:	4b11      	ldr	r3, [pc, #68]	; (800e2e8 <_dtoa_r+0x2f0>)
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e2a8:	e6c0      	b.n	800e02c <_dtoa_r+0x34>
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	e7df      	b.n	800e26e <_dtoa_r+0x276>
 800e2ae:	bf00      	nop
 800e2b0:	636f4361 	.word	0x636f4361
 800e2b4:	3fd287a7 	.word	0x3fd287a7
 800e2b8:	8b60c8b3 	.word	0x8b60c8b3
 800e2bc:	3fc68a28 	.word	0x3fc68a28
 800e2c0:	509f79fb 	.word	0x509f79fb
 800e2c4:	3fd34413 	.word	0x3fd34413
 800e2c8:	0800ffc1 	.word	0x0800ffc1
 800e2cc:	0800ffd8 	.word	0x0800ffd8
 800e2d0:	7ff00000 	.word	0x7ff00000
 800e2d4:	0800ffbd 	.word	0x0800ffbd
 800e2d8:	0800ffb4 	.word	0x0800ffb4
 800e2dc:	0800ff91 	.word	0x0800ff91
 800e2e0:	3ff80000 	.word	0x3ff80000
 800e2e4:	08010128 	.word	0x08010128
 800e2e8:	08010033 	.word	0x08010033
 800e2ec:	2501      	movs	r5, #1
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	9306      	str	r3, [sp, #24]
 800e2f2:	9508      	str	r5, [sp, #32]
 800e2f4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	2312      	movs	r3, #18
 800e300:	e7b0      	b.n	800e264 <_dtoa_r+0x26c>
 800e302:	2301      	movs	r3, #1
 800e304:	9308      	str	r3, [sp, #32]
 800e306:	e7f5      	b.n	800e2f4 <_dtoa_r+0x2fc>
 800e308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e30a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e30e:	e7b8      	b.n	800e282 <_dtoa_r+0x28a>
 800e310:	3101      	adds	r1, #1
 800e312:	6041      	str	r1, [r0, #4]
 800e314:	0052      	lsls	r2, r2, #1
 800e316:	e7b8      	b.n	800e28a <_dtoa_r+0x292>
 800e318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e31a:	9a01      	ldr	r2, [sp, #4]
 800e31c:	601a      	str	r2, [r3, #0]
 800e31e:	9b03      	ldr	r3, [sp, #12]
 800e320:	2b0e      	cmp	r3, #14
 800e322:	f200 809d 	bhi.w	800e460 <_dtoa_r+0x468>
 800e326:	2d00      	cmp	r5, #0
 800e328:	f000 809a 	beq.w	800e460 <_dtoa_r+0x468>
 800e32c:	9b00      	ldr	r3, [sp, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	dd32      	ble.n	800e398 <_dtoa_r+0x3a0>
 800e332:	4ab7      	ldr	r2, [pc, #732]	; (800e610 <_dtoa_r+0x618>)
 800e334:	f003 030f 	and.w	r3, r3, #15
 800e338:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e33c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e340:	9b00      	ldr	r3, [sp, #0]
 800e342:	05d8      	lsls	r0, r3, #23
 800e344:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e348:	d516      	bpl.n	800e378 <_dtoa_r+0x380>
 800e34a:	4bb2      	ldr	r3, [pc, #712]	; (800e614 <_dtoa_r+0x61c>)
 800e34c:	ec51 0b19 	vmov	r0, r1, d9
 800e350:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e354:	f7f2 fa7a 	bl	800084c <__aeabi_ddiv>
 800e358:	f007 070f 	and.w	r7, r7, #15
 800e35c:	4682      	mov	sl, r0
 800e35e:	468b      	mov	fp, r1
 800e360:	2503      	movs	r5, #3
 800e362:	4eac      	ldr	r6, [pc, #688]	; (800e614 <_dtoa_r+0x61c>)
 800e364:	b957      	cbnz	r7, 800e37c <_dtoa_r+0x384>
 800e366:	4642      	mov	r2, r8
 800e368:	464b      	mov	r3, r9
 800e36a:	4650      	mov	r0, sl
 800e36c:	4659      	mov	r1, fp
 800e36e:	f7f2 fa6d 	bl	800084c <__aeabi_ddiv>
 800e372:	4682      	mov	sl, r0
 800e374:	468b      	mov	fp, r1
 800e376:	e028      	b.n	800e3ca <_dtoa_r+0x3d2>
 800e378:	2502      	movs	r5, #2
 800e37a:	e7f2      	b.n	800e362 <_dtoa_r+0x36a>
 800e37c:	07f9      	lsls	r1, r7, #31
 800e37e:	d508      	bpl.n	800e392 <_dtoa_r+0x39a>
 800e380:	4640      	mov	r0, r8
 800e382:	4649      	mov	r1, r9
 800e384:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e388:	f7f2 f936 	bl	80005f8 <__aeabi_dmul>
 800e38c:	3501      	adds	r5, #1
 800e38e:	4680      	mov	r8, r0
 800e390:	4689      	mov	r9, r1
 800e392:	107f      	asrs	r7, r7, #1
 800e394:	3608      	adds	r6, #8
 800e396:	e7e5      	b.n	800e364 <_dtoa_r+0x36c>
 800e398:	f000 809b 	beq.w	800e4d2 <_dtoa_r+0x4da>
 800e39c:	9b00      	ldr	r3, [sp, #0]
 800e39e:	4f9d      	ldr	r7, [pc, #628]	; (800e614 <_dtoa_r+0x61c>)
 800e3a0:	425e      	negs	r6, r3
 800e3a2:	4b9b      	ldr	r3, [pc, #620]	; (800e610 <_dtoa_r+0x618>)
 800e3a4:	f006 020f 	and.w	r2, r6, #15
 800e3a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b0:	ec51 0b19 	vmov	r0, r1, d9
 800e3b4:	f7f2 f920 	bl	80005f8 <__aeabi_dmul>
 800e3b8:	1136      	asrs	r6, r6, #4
 800e3ba:	4682      	mov	sl, r0
 800e3bc:	468b      	mov	fp, r1
 800e3be:	2300      	movs	r3, #0
 800e3c0:	2502      	movs	r5, #2
 800e3c2:	2e00      	cmp	r6, #0
 800e3c4:	d17a      	bne.n	800e4bc <_dtoa_r+0x4c4>
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1d3      	bne.n	800e372 <_dtoa_r+0x37a>
 800e3ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 8082 	beq.w	800e4d6 <_dtoa_r+0x4de>
 800e3d2:	4b91      	ldr	r3, [pc, #580]	; (800e618 <_dtoa_r+0x620>)
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	4650      	mov	r0, sl
 800e3d8:	4659      	mov	r1, fp
 800e3da:	f7f2 fb7f 	bl	8000adc <__aeabi_dcmplt>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d079      	beq.n	800e4d6 <_dtoa_r+0x4de>
 800e3e2:	9b03      	ldr	r3, [sp, #12]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d076      	beq.n	800e4d6 <_dtoa_r+0x4de>
 800e3e8:	9b02      	ldr	r3, [sp, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	dd36      	ble.n	800e45c <_dtoa_r+0x464>
 800e3ee:	9b00      	ldr	r3, [sp, #0]
 800e3f0:	4650      	mov	r0, sl
 800e3f2:	4659      	mov	r1, fp
 800e3f4:	1e5f      	subs	r7, r3, #1
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	4b88      	ldr	r3, [pc, #544]	; (800e61c <_dtoa_r+0x624>)
 800e3fa:	f7f2 f8fd 	bl	80005f8 <__aeabi_dmul>
 800e3fe:	9e02      	ldr	r6, [sp, #8]
 800e400:	4682      	mov	sl, r0
 800e402:	468b      	mov	fp, r1
 800e404:	3501      	adds	r5, #1
 800e406:	4628      	mov	r0, r5
 800e408:	f7f2 f88c 	bl	8000524 <__aeabi_i2d>
 800e40c:	4652      	mov	r2, sl
 800e40e:	465b      	mov	r3, fp
 800e410:	f7f2 f8f2 	bl	80005f8 <__aeabi_dmul>
 800e414:	4b82      	ldr	r3, [pc, #520]	; (800e620 <_dtoa_r+0x628>)
 800e416:	2200      	movs	r2, #0
 800e418:	f7f1 ff38 	bl	800028c <__adddf3>
 800e41c:	46d0      	mov	r8, sl
 800e41e:	46d9      	mov	r9, fp
 800e420:	4682      	mov	sl, r0
 800e422:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e426:	2e00      	cmp	r6, #0
 800e428:	d158      	bne.n	800e4dc <_dtoa_r+0x4e4>
 800e42a:	4b7e      	ldr	r3, [pc, #504]	; (800e624 <_dtoa_r+0x62c>)
 800e42c:	2200      	movs	r2, #0
 800e42e:	4640      	mov	r0, r8
 800e430:	4649      	mov	r1, r9
 800e432:	f7f1 ff29 	bl	8000288 <__aeabi_dsub>
 800e436:	4652      	mov	r2, sl
 800e438:	465b      	mov	r3, fp
 800e43a:	4680      	mov	r8, r0
 800e43c:	4689      	mov	r9, r1
 800e43e:	f7f2 fb6b 	bl	8000b18 <__aeabi_dcmpgt>
 800e442:	2800      	cmp	r0, #0
 800e444:	f040 8295 	bne.w	800e972 <_dtoa_r+0x97a>
 800e448:	4652      	mov	r2, sl
 800e44a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e44e:	4640      	mov	r0, r8
 800e450:	4649      	mov	r1, r9
 800e452:	f7f2 fb43 	bl	8000adc <__aeabi_dcmplt>
 800e456:	2800      	cmp	r0, #0
 800e458:	f040 8289 	bne.w	800e96e <_dtoa_r+0x976>
 800e45c:	ec5b ab19 	vmov	sl, fp, d9
 800e460:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e462:	2b00      	cmp	r3, #0
 800e464:	f2c0 8148 	blt.w	800e6f8 <_dtoa_r+0x700>
 800e468:	9a00      	ldr	r2, [sp, #0]
 800e46a:	2a0e      	cmp	r2, #14
 800e46c:	f300 8144 	bgt.w	800e6f8 <_dtoa_r+0x700>
 800e470:	4b67      	ldr	r3, [pc, #412]	; (800e610 <_dtoa_r+0x618>)
 800e472:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e476:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e47a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f280 80d5 	bge.w	800e62c <_dtoa_r+0x634>
 800e482:	9b03      	ldr	r3, [sp, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	f300 80d1 	bgt.w	800e62c <_dtoa_r+0x634>
 800e48a:	f040 826f 	bne.w	800e96c <_dtoa_r+0x974>
 800e48e:	4b65      	ldr	r3, [pc, #404]	; (800e624 <_dtoa_r+0x62c>)
 800e490:	2200      	movs	r2, #0
 800e492:	4640      	mov	r0, r8
 800e494:	4649      	mov	r1, r9
 800e496:	f7f2 f8af 	bl	80005f8 <__aeabi_dmul>
 800e49a:	4652      	mov	r2, sl
 800e49c:	465b      	mov	r3, fp
 800e49e:	f7f2 fb31 	bl	8000b04 <__aeabi_dcmpge>
 800e4a2:	9e03      	ldr	r6, [sp, #12]
 800e4a4:	4637      	mov	r7, r6
 800e4a6:	2800      	cmp	r0, #0
 800e4a8:	f040 8245 	bne.w	800e936 <_dtoa_r+0x93e>
 800e4ac:	9d01      	ldr	r5, [sp, #4]
 800e4ae:	2331      	movs	r3, #49	; 0x31
 800e4b0:	f805 3b01 	strb.w	r3, [r5], #1
 800e4b4:	9b00      	ldr	r3, [sp, #0]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	e240      	b.n	800e93e <_dtoa_r+0x946>
 800e4bc:	07f2      	lsls	r2, r6, #31
 800e4be:	d505      	bpl.n	800e4cc <_dtoa_r+0x4d4>
 800e4c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e4c4:	f7f2 f898 	bl	80005f8 <__aeabi_dmul>
 800e4c8:	3501      	adds	r5, #1
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	1076      	asrs	r6, r6, #1
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	e777      	b.n	800e3c2 <_dtoa_r+0x3ca>
 800e4d2:	2502      	movs	r5, #2
 800e4d4:	e779      	b.n	800e3ca <_dtoa_r+0x3d2>
 800e4d6:	9f00      	ldr	r7, [sp, #0]
 800e4d8:	9e03      	ldr	r6, [sp, #12]
 800e4da:	e794      	b.n	800e406 <_dtoa_r+0x40e>
 800e4dc:	9901      	ldr	r1, [sp, #4]
 800e4de:	4b4c      	ldr	r3, [pc, #304]	; (800e610 <_dtoa_r+0x618>)
 800e4e0:	4431      	add	r1, r6
 800e4e2:	910d      	str	r1, [sp, #52]	; 0x34
 800e4e4:	9908      	ldr	r1, [sp, #32]
 800e4e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e4ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e4ee:	2900      	cmp	r1, #0
 800e4f0:	d043      	beq.n	800e57a <_dtoa_r+0x582>
 800e4f2:	494d      	ldr	r1, [pc, #308]	; (800e628 <_dtoa_r+0x630>)
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	f7f2 f9a9 	bl	800084c <__aeabi_ddiv>
 800e4fa:	4652      	mov	r2, sl
 800e4fc:	465b      	mov	r3, fp
 800e4fe:	f7f1 fec3 	bl	8000288 <__aeabi_dsub>
 800e502:	9d01      	ldr	r5, [sp, #4]
 800e504:	4682      	mov	sl, r0
 800e506:	468b      	mov	fp, r1
 800e508:	4649      	mov	r1, r9
 800e50a:	4640      	mov	r0, r8
 800e50c:	f7f2 fb24 	bl	8000b58 <__aeabi_d2iz>
 800e510:	4606      	mov	r6, r0
 800e512:	f7f2 f807 	bl	8000524 <__aeabi_i2d>
 800e516:	4602      	mov	r2, r0
 800e518:	460b      	mov	r3, r1
 800e51a:	4640      	mov	r0, r8
 800e51c:	4649      	mov	r1, r9
 800e51e:	f7f1 feb3 	bl	8000288 <__aeabi_dsub>
 800e522:	3630      	adds	r6, #48	; 0x30
 800e524:	f805 6b01 	strb.w	r6, [r5], #1
 800e528:	4652      	mov	r2, sl
 800e52a:	465b      	mov	r3, fp
 800e52c:	4680      	mov	r8, r0
 800e52e:	4689      	mov	r9, r1
 800e530:	f7f2 fad4 	bl	8000adc <__aeabi_dcmplt>
 800e534:	2800      	cmp	r0, #0
 800e536:	d163      	bne.n	800e600 <_dtoa_r+0x608>
 800e538:	4642      	mov	r2, r8
 800e53a:	464b      	mov	r3, r9
 800e53c:	4936      	ldr	r1, [pc, #216]	; (800e618 <_dtoa_r+0x620>)
 800e53e:	2000      	movs	r0, #0
 800e540:	f7f1 fea2 	bl	8000288 <__aeabi_dsub>
 800e544:	4652      	mov	r2, sl
 800e546:	465b      	mov	r3, fp
 800e548:	f7f2 fac8 	bl	8000adc <__aeabi_dcmplt>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	f040 80b5 	bne.w	800e6bc <_dtoa_r+0x6c4>
 800e552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e554:	429d      	cmp	r5, r3
 800e556:	d081      	beq.n	800e45c <_dtoa_r+0x464>
 800e558:	4b30      	ldr	r3, [pc, #192]	; (800e61c <_dtoa_r+0x624>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	4650      	mov	r0, sl
 800e55e:	4659      	mov	r1, fp
 800e560:	f7f2 f84a 	bl	80005f8 <__aeabi_dmul>
 800e564:	4b2d      	ldr	r3, [pc, #180]	; (800e61c <_dtoa_r+0x624>)
 800e566:	4682      	mov	sl, r0
 800e568:	468b      	mov	fp, r1
 800e56a:	4640      	mov	r0, r8
 800e56c:	4649      	mov	r1, r9
 800e56e:	2200      	movs	r2, #0
 800e570:	f7f2 f842 	bl	80005f8 <__aeabi_dmul>
 800e574:	4680      	mov	r8, r0
 800e576:	4689      	mov	r9, r1
 800e578:	e7c6      	b.n	800e508 <_dtoa_r+0x510>
 800e57a:	4650      	mov	r0, sl
 800e57c:	4659      	mov	r1, fp
 800e57e:	f7f2 f83b 	bl	80005f8 <__aeabi_dmul>
 800e582:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e584:	9d01      	ldr	r5, [sp, #4]
 800e586:	930f      	str	r3, [sp, #60]	; 0x3c
 800e588:	4682      	mov	sl, r0
 800e58a:	468b      	mov	fp, r1
 800e58c:	4649      	mov	r1, r9
 800e58e:	4640      	mov	r0, r8
 800e590:	f7f2 fae2 	bl	8000b58 <__aeabi_d2iz>
 800e594:	4606      	mov	r6, r0
 800e596:	f7f1 ffc5 	bl	8000524 <__aeabi_i2d>
 800e59a:	3630      	adds	r6, #48	; 0x30
 800e59c:	4602      	mov	r2, r0
 800e59e:	460b      	mov	r3, r1
 800e5a0:	4640      	mov	r0, r8
 800e5a2:	4649      	mov	r1, r9
 800e5a4:	f7f1 fe70 	bl	8000288 <__aeabi_dsub>
 800e5a8:	f805 6b01 	strb.w	r6, [r5], #1
 800e5ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e5ae:	429d      	cmp	r5, r3
 800e5b0:	4680      	mov	r8, r0
 800e5b2:	4689      	mov	r9, r1
 800e5b4:	f04f 0200 	mov.w	r2, #0
 800e5b8:	d124      	bne.n	800e604 <_dtoa_r+0x60c>
 800e5ba:	4b1b      	ldr	r3, [pc, #108]	; (800e628 <_dtoa_r+0x630>)
 800e5bc:	4650      	mov	r0, sl
 800e5be:	4659      	mov	r1, fp
 800e5c0:	f7f1 fe64 	bl	800028c <__adddf3>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	4640      	mov	r0, r8
 800e5ca:	4649      	mov	r1, r9
 800e5cc:	f7f2 faa4 	bl	8000b18 <__aeabi_dcmpgt>
 800e5d0:	2800      	cmp	r0, #0
 800e5d2:	d173      	bne.n	800e6bc <_dtoa_r+0x6c4>
 800e5d4:	4652      	mov	r2, sl
 800e5d6:	465b      	mov	r3, fp
 800e5d8:	4913      	ldr	r1, [pc, #76]	; (800e628 <_dtoa_r+0x630>)
 800e5da:	2000      	movs	r0, #0
 800e5dc:	f7f1 fe54 	bl	8000288 <__aeabi_dsub>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	4640      	mov	r0, r8
 800e5e6:	4649      	mov	r1, r9
 800e5e8:	f7f2 fa78 	bl	8000adc <__aeabi_dcmplt>
 800e5ec:	2800      	cmp	r0, #0
 800e5ee:	f43f af35 	beq.w	800e45c <_dtoa_r+0x464>
 800e5f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e5f4:	1e6b      	subs	r3, r5, #1
 800e5f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e5f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e5fc:	2b30      	cmp	r3, #48	; 0x30
 800e5fe:	d0f8      	beq.n	800e5f2 <_dtoa_r+0x5fa>
 800e600:	9700      	str	r7, [sp, #0]
 800e602:	e049      	b.n	800e698 <_dtoa_r+0x6a0>
 800e604:	4b05      	ldr	r3, [pc, #20]	; (800e61c <_dtoa_r+0x624>)
 800e606:	f7f1 fff7 	bl	80005f8 <__aeabi_dmul>
 800e60a:	4680      	mov	r8, r0
 800e60c:	4689      	mov	r9, r1
 800e60e:	e7bd      	b.n	800e58c <_dtoa_r+0x594>
 800e610:	08010128 	.word	0x08010128
 800e614:	08010100 	.word	0x08010100
 800e618:	3ff00000 	.word	0x3ff00000
 800e61c:	40240000 	.word	0x40240000
 800e620:	401c0000 	.word	0x401c0000
 800e624:	40140000 	.word	0x40140000
 800e628:	3fe00000 	.word	0x3fe00000
 800e62c:	9d01      	ldr	r5, [sp, #4]
 800e62e:	4656      	mov	r6, sl
 800e630:	465f      	mov	r7, fp
 800e632:	4642      	mov	r2, r8
 800e634:	464b      	mov	r3, r9
 800e636:	4630      	mov	r0, r6
 800e638:	4639      	mov	r1, r7
 800e63a:	f7f2 f907 	bl	800084c <__aeabi_ddiv>
 800e63e:	f7f2 fa8b 	bl	8000b58 <__aeabi_d2iz>
 800e642:	4682      	mov	sl, r0
 800e644:	f7f1 ff6e 	bl	8000524 <__aeabi_i2d>
 800e648:	4642      	mov	r2, r8
 800e64a:	464b      	mov	r3, r9
 800e64c:	f7f1 ffd4 	bl	80005f8 <__aeabi_dmul>
 800e650:	4602      	mov	r2, r0
 800e652:	460b      	mov	r3, r1
 800e654:	4630      	mov	r0, r6
 800e656:	4639      	mov	r1, r7
 800e658:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e65c:	f7f1 fe14 	bl	8000288 <__aeabi_dsub>
 800e660:	f805 6b01 	strb.w	r6, [r5], #1
 800e664:	9e01      	ldr	r6, [sp, #4]
 800e666:	9f03      	ldr	r7, [sp, #12]
 800e668:	1bae      	subs	r6, r5, r6
 800e66a:	42b7      	cmp	r7, r6
 800e66c:	4602      	mov	r2, r0
 800e66e:	460b      	mov	r3, r1
 800e670:	d135      	bne.n	800e6de <_dtoa_r+0x6e6>
 800e672:	f7f1 fe0b 	bl	800028c <__adddf3>
 800e676:	4642      	mov	r2, r8
 800e678:	464b      	mov	r3, r9
 800e67a:	4606      	mov	r6, r0
 800e67c:	460f      	mov	r7, r1
 800e67e:	f7f2 fa4b 	bl	8000b18 <__aeabi_dcmpgt>
 800e682:	b9d0      	cbnz	r0, 800e6ba <_dtoa_r+0x6c2>
 800e684:	4642      	mov	r2, r8
 800e686:	464b      	mov	r3, r9
 800e688:	4630      	mov	r0, r6
 800e68a:	4639      	mov	r1, r7
 800e68c:	f7f2 fa1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e690:	b110      	cbz	r0, 800e698 <_dtoa_r+0x6a0>
 800e692:	f01a 0f01 	tst.w	sl, #1
 800e696:	d110      	bne.n	800e6ba <_dtoa_r+0x6c2>
 800e698:	4620      	mov	r0, r4
 800e69a:	ee18 1a10 	vmov	r1, s16
 800e69e:	f000 fd13 	bl	800f0c8 <_Bfree>
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	9800      	ldr	r0, [sp, #0]
 800e6a6:	702b      	strb	r3, [r5, #0]
 800e6a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6aa:	3001      	adds	r0, #1
 800e6ac:	6018      	str	r0, [r3, #0]
 800e6ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f43f acf1 	beq.w	800e098 <_dtoa_r+0xa0>
 800e6b6:	601d      	str	r5, [r3, #0]
 800e6b8:	e4ee      	b.n	800e098 <_dtoa_r+0xa0>
 800e6ba:	9f00      	ldr	r7, [sp, #0]
 800e6bc:	462b      	mov	r3, r5
 800e6be:	461d      	mov	r5, r3
 800e6c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e6c4:	2a39      	cmp	r2, #57	; 0x39
 800e6c6:	d106      	bne.n	800e6d6 <_dtoa_r+0x6de>
 800e6c8:	9a01      	ldr	r2, [sp, #4]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d1f7      	bne.n	800e6be <_dtoa_r+0x6c6>
 800e6ce:	9901      	ldr	r1, [sp, #4]
 800e6d0:	2230      	movs	r2, #48	; 0x30
 800e6d2:	3701      	adds	r7, #1
 800e6d4:	700a      	strb	r2, [r1, #0]
 800e6d6:	781a      	ldrb	r2, [r3, #0]
 800e6d8:	3201      	adds	r2, #1
 800e6da:	701a      	strb	r2, [r3, #0]
 800e6dc:	e790      	b.n	800e600 <_dtoa_r+0x608>
 800e6de:	4ba6      	ldr	r3, [pc, #664]	; (800e978 <_dtoa_r+0x980>)
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f7f1 ff89 	bl	80005f8 <__aeabi_dmul>
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	4606      	mov	r6, r0
 800e6ec:	460f      	mov	r7, r1
 800e6ee:	f7f2 f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6f2:	2800      	cmp	r0, #0
 800e6f4:	d09d      	beq.n	800e632 <_dtoa_r+0x63a>
 800e6f6:	e7cf      	b.n	800e698 <_dtoa_r+0x6a0>
 800e6f8:	9a08      	ldr	r2, [sp, #32]
 800e6fa:	2a00      	cmp	r2, #0
 800e6fc:	f000 80d7 	beq.w	800e8ae <_dtoa_r+0x8b6>
 800e700:	9a06      	ldr	r2, [sp, #24]
 800e702:	2a01      	cmp	r2, #1
 800e704:	f300 80ba 	bgt.w	800e87c <_dtoa_r+0x884>
 800e708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e70a:	2a00      	cmp	r2, #0
 800e70c:	f000 80b2 	beq.w	800e874 <_dtoa_r+0x87c>
 800e710:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e714:	9e07      	ldr	r6, [sp, #28]
 800e716:	9d04      	ldr	r5, [sp, #16]
 800e718:	9a04      	ldr	r2, [sp, #16]
 800e71a:	441a      	add	r2, r3
 800e71c:	9204      	str	r2, [sp, #16]
 800e71e:	9a05      	ldr	r2, [sp, #20]
 800e720:	2101      	movs	r1, #1
 800e722:	441a      	add	r2, r3
 800e724:	4620      	mov	r0, r4
 800e726:	9205      	str	r2, [sp, #20]
 800e728:	f000 fd86 	bl	800f238 <__i2b>
 800e72c:	4607      	mov	r7, r0
 800e72e:	2d00      	cmp	r5, #0
 800e730:	dd0c      	ble.n	800e74c <_dtoa_r+0x754>
 800e732:	9b05      	ldr	r3, [sp, #20]
 800e734:	2b00      	cmp	r3, #0
 800e736:	dd09      	ble.n	800e74c <_dtoa_r+0x754>
 800e738:	42ab      	cmp	r3, r5
 800e73a:	9a04      	ldr	r2, [sp, #16]
 800e73c:	bfa8      	it	ge
 800e73e:	462b      	movge	r3, r5
 800e740:	1ad2      	subs	r2, r2, r3
 800e742:	9204      	str	r2, [sp, #16]
 800e744:	9a05      	ldr	r2, [sp, #20]
 800e746:	1aed      	subs	r5, r5, r3
 800e748:	1ad3      	subs	r3, r2, r3
 800e74a:	9305      	str	r3, [sp, #20]
 800e74c:	9b07      	ldr	r3, [sp, #28]
 800e74e:	b31b      	cbz	r3, 800e798 <_dtoa_r+0x7a0>
 800e750:	9b08      	ldr	r3, [sp, #32]
 800e752:	2b00      	cmp	r3, #0
 800e754:	f000 80af 	beq.w	800e8b6 <_dtoa_r+0x8be>
 800e758:	2e00      	cmp	r6, #0
 800e75a:	dd13      	ble.n	800e784 <_dtoa_r+0x78c>
 800e75c:	4639      	mov	r1, r7
 800e75e:	4632      	mov	r2, r6
 800e760:	4620      	mov	r0, r4
 800e762:	f000 fe29 	bl	800f3b8 <__pow5mult>
 800e766:	ee18 2a10 	vmov	r2, s16
 800e76a:	4601      	mov	r1, r0
 800e76c:	4607      	mov	r7, r0
 800e76e:	4620      	mov	r0, r4
 800e770:	f000 fd78 	bl	800f264 <__multiply>
 800e774:	ee18 1a10 	vmov	r1, s16
 800e778:	4680      	mov	r8, r0
 800e77a:	4620      	mov	r0, r4
 800e77c:	f000 fca4 	bl	800f0c8 <_Bfree>
 800e780:	ee08 8a10 	vmov	s16, r8
 800e784:	9b07      	ldr	r3, [sp, #28]
 800e786:	1b9a      	subs	r2, r3, r6
 800e788:	d006      	beq.n	800e798 <_dtoa_r+0x7a0>
 800e78a:	ee18 1a10 	vmov	r1, s16
 800e78e:	4620      	mov	r0, r4
 800e790:	f000 fe12 	bl	800f3b8 <__pow5mult>
 800e794:	ee08 0a10 	vmov	s16, r0
 800e798:	2101      	movs	r1, #1
 800e79a:	4620      	mov	r0, r4
 800e79c:	f000 fd4c 	bl	800f238 <__i2b>
 800e7a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	f340 8088 	ble.w	800e8ba <_dtoa_r+0x8c2>
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	4601      	mov	r1, r0
 800e7ae:	4620      	mov	r0, r4
 800e7b0:	f000 fe02 	bl	800f3b8 <__pow5mult>
 800e7b4:	9b06      	ldr	r3, [sp, #24]
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	4606      	mov	r6, r0
 800e7ba:	f340 8081 	ble.w	800e8c0 <_dtoa_r+0x8c8>
 800e7be:	f04f 0800 	mov.w	r8, #0
 800e7c2:	6933      	ldr	r3, [r6, #16]
 800e7c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e7c8:	6918      	ldr	r0, [r3, #16]
 800e7ca:	f000 fce5 	bl	800f198 <__hi0bits>
 800e7ce:	f1c0 0020 	rsb	r0, r0, #32
 800e7d2:	9b05      	ldr	r3, [sp, #20]
 800e7d4:	4418      	add	r0, r3
 800e7d6:	f010 001f 	ands.w	r0, r0, #31
 800e7da:	f000 8092 	beq.w	800e902 <_dtoa_r+0x90a>
 800e7de:	f1c0 0320 	rsb	r3, r0, #32
 800e7e2:	2b04      	cmp	r3, #4
 800e7e4:	f340 808a 	ble.w	800e8fc <_dtoa_r+0x904>
 800e7e8:	f1c0 001c 	rsb	r0, r0, #28
 800e7ec:	9b04      	ldr	r3, [sp, #16]
 800e7ee:	4403      	add	r3, r0
 800e7f0:	9304      	str	r3, [sp, #16]
 800e7f2:	9b05      	ldr	r3, [sp, #20]
 800e7f4:	4403      	add	r3, r0
 800e7f6:	4405      	add	r5, r0
 800e7f8:	9305      	str	r3, [sp, #20]
 800e7fa:	9b04      	ldr	r3, [sp, #16]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	dd07      	ble.n	800e810 <_dtoa_r+0x818>
 800e800:	ee18 1a10 	vmov	r1, s16
 800e804:	461a      	mov	r2, r3
 800e806:	4620      	mov	r0, r4
 800e808:	f000 fe30 	bl	800f46c <__lshift>
 800e80c:	ee08 0a10 	vmov	s16, r0
 800e810:	9b05      	ldr	r3, [sp, #20]
 800e812:	2b00      	cmp	r3, #0
 800e814:	dd05      	ble.n	800e822 <_dtoa_r+0x82a>
 800e816:	4631      	mov	r1, r6
 800e818:	461a      	mov	r2, r3
 800e81a:	4620      	mov	r0, r4
 800e81c:	f000 fe26 	bl	800f46c <__lshift>
 800e820:	4606      	mov	r6, r0
 800e822:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e824:	2b00      	cmp	r3, #0
 800e826:	d06e      	beq.n	800e906 <_dtoa_r+0x90e>
 800e828:	ee18 0a10 	vmov	r0, s16
 800e82c:	4631      	mov	r1, r6
 800e82e:	f000 fe8d 	bl	800f54c <__mcmp>
 800e832:	2800      	cmp	r0, #0
 800e834:	da67      	bge.n	800e906 <_dtoa_r+0x90e>
 800e836:	9b00      	ldr	r3, [sp, #0]
 800e838:	3b01      	subs	r3, #1
 800e83a:	ee18 1a10 	vmov	r1, s16
 800e83e:	9300      	str	r3, [sp, #0]
 800e840:	220a      	movs	r2, #10
 800e842:	2300      	movs	r3, #0
 800e844:	4620      	mov	r0, r4
 800e846:	f000 fc61 	bl	800f10c <__multadd>
 800e84a:	9b08      	ldr	r3, [sp, #32]
 800e84c:	ee08 0a10 	vmov	s16, r0
 800e850:	2b00      	cmp	r3, #0
 800e852:	f000 81b1 	beq.w	800ebb8 <_dtoa_r+0xbc0>
 800e856:	2300      	movs	r3, #0
 800e858:	4639      	mov	r1, r7
 800e85a:	220a      	movs	r2, #10
 800e85c:	4620      	mov	r0, r4
 800e85e:	f000 fc55 	bl	800f10c <__multadd>
 800e862:	9b02      	ldr	r3, [sp, #8]
 800e864:	2b00      	cmp	r3, #0
 800e866:	4607      	mov	r7, r0
 800e868:	f300 808e 	bgt.w	800e988 <_dtoa_r+0x990>
 800e86c:	9b06      	ldr	r3, [sp, #24]
 800e86e:	2b02      	cmp	r3, #2
 800e870:	dc51      	bgt.n	800e916 <_dtoa_r+0x91e>
 800e872:	e089      	b.n	800e988 <_dtoa_r+0x990>
 800e874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e876:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e87a:	e74b      	b.n	800e714 <_dtoa_r+0x71c>
 800e87c:	9b03      	ldr	r3, [sp, #12]
 800e87e:	1e5e      	subs	r6, r3, #1
 800e880:	9b07      	ldr	r3, [sp, #28]
 800e882:	42b3      	cmp	r3, r6
 800e884:	bfbf      	itttt	lt
 800e886:	9b07      	ldrlt	r3, [sp, #28]
 800e888:	9607      	strlt	r6, [sp, #28]
 800e88a:	1af2      	sublt	r2, r6, r3
 800e88c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e88e:	bfb6      	itet	lt
 800e890:	189b      	addlt	r3, r3, r2
 800e892:	1b9e      	subge	r6, r3, r6
 800e894:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e896:	9b03      	ldr	r3, [sp, #12]
 800e898:	bfb8      	it	lt
 800e89a:	2600      	movlt	r6, #0
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	bfb7      	itett	lt
 800e8a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e8a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e8a8:	1a9d      	sublt	r5, r3, r2
 800e8aa:	2300      	movlt	r3, #0
 800e8ac:	e734      	b.n	800e718 <_dtoa_r+0x720>
 800e8ae:	9e07      	ldr	r6, [sp, #28]
 800e8b0:	9d04      	ldr	r5, [sp, #16]
 800e8b2:	9f08      	ldr	r7, [sp, #32]
 800e8b4:	e73b      	b.n	800e72e <_dtoa_r+0x736>
 800e8b6:	9a07      	ldr	r2, [sp, #28]
 800e8b8:	e767      	b.n	800e78a <_dtoa_r+0x792>
 800e8ba:	9b06      	ldr	r3, [sp, #24]
 800e8bc:	2b01      	cmp	r3, #1
 800e8be:	dc18      	bgt.n	800e8f2 <_dtoa_r+0x8fa>
 800e8c0:	f1ba 0f00 	cmp.w	sl, #0
 800e8c4:	d115      	bne.n	800e8f2 <_dtoa_r+0x8fa>
 800e8c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e8ca:	b993      	cbnz	r3, 800e8f2 <_dtoa_r+0x8fa>
 800e8cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e8d0:	0d1b      	lsrs	r3, r3, #20
 800e8d2:	051b      	lsls	r3, r3, #20
 800e8d4:	b183      	cbz	r3, 800e8f8 <_dtoa_r+0x900>
 800e8d6:	9b04      	ldr	r3, [sp, #16]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	9304      	str	r3, [sp, #16]
 800e8dc:	9b05      	ldr	r3, [sp, #20]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	9305      	str	r3, [sp, #20]
 800e8e2:	f04f 0801 	mov.w	r8, #1
 800e8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f47f af6a 	bne.w	800e7c2 <_dtoa_r+0x7ca>
 800e8ee:	2001      	movs	r0, #1
 800e8f0:	e76f      	b.n	800e7d2 <_dtoa_r+0x7da>
 800e8f2:	f04f 0800 	mov.w	r8, #0
 800e8f6:	e7f6      	b.n	800e8e6 <_dtoa_r+0x8ee>
 800e8f8:	4698      	mov	r8, r3
 800e8fa:	e7f4      	b.n	800e8e6 <_dtoa_r+0x8ee>
 800e8fc:	f43f af7d 	beq.w	800e7fa <_dtoa_r+0x802>
 800e900:	4618      	mov	r0, r3
 800e902:	301c      	adds	r0, #28
 800e904:	e772      	b.n	800e7ec <_dtoa_r+0x7f4>
 800e906:	9b03      	ldr	r3, [sp, #12]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	dc37      	bgt.n	800e97c <_dtoa_r+0x984>
 800e90c:	9b06      	ldr	r3, [sp, #24]
 800e90e:	2b02      	cmp	r3, #2
 800e910:	dd34      	ble.n	800e97c <_dtoa_r+0x984>
 800e912:	9b03      	ldr	r3, [sp, #12]
 800e914:	9302      	str	r3, [sp, #8]
 800e916:	9b02      	ldr	r3, [sp, #8]
 800e918:	b96b      	cbnz	r3, 800e936 <_dtoa_r+0x93e>
 800e91a:	4631      	mov	r1, r6
 800e91c:	2205      	movs	r2, #5
 800e91e:	4620      	mov	r0, r4
 800e920:	f000 fbf4 	bl	800f10c <__multadd>
 800e924:	4601      	mov	r1, r0
 800e926:	4606      	mov	r6, r0
 800e928:	ee18 0a10 	vmov	r0, s16
 800e92c:	f000 fe0e 	bl	800f54c <__mcmp>
 800e930:	2800      	cmp	r0, #0
 800e932:	f73f adbb 	bgt.w	800e4ac <_dtoa_r+0x4b4>
 800e936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e938:	9d01      	ldr	r5, [sp, #4]
 800e93a:	43db      	mvns	r3, r3
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	f04f 0800 	mov.w	r8, #0
 800e942:	4631      	mov	r1, r6
 800e944:	4620      	mov	r0, r4
 800e946:	f000 fbbf 	bl	800f0c8 <_Bfree>
 800e94a:	2f00      	cmp	r7, #0
 800e94c:	f43f aea4 	beq.w	800e698 <_dtoa_r+0x6a0>
 800e950:	f1b8 0f00 	cmp.w	r8, #0
 800e954:	d005      	beq.n	800e962 <_dtoa_r+0x96a>
 800e956:	45b8      	cmp	r8, r7
 800e958:	d003      	beq.n	800e962 <_dtoa_r+0x96a>
 800e95a:	4641      	mov	r1, r8
 800e95c:	4620      	mov	r0, r4
 800e95e:	f000 fbb3 	bl	800f0c8 <_Bfree>
 800e962:	4639      	mov	r1, r7
 800e964:	4620      	mov	r0, r4
 800e966:	f000 fbaf 	bl	800f0c8 <_Bfree>
 800e96a:	e695      	b.n	800e698 <_dtoa_r+0x6a0>
 800e96c:	2600      	movs	r6, #0
 800e96e:	4637      	mov	r7, r6
 800e970:	e7e1      	b.n	800e936 <_dtoa_r+0x93e>
 800e972:	9700      	str	r7, [sp, #0]
 800e974:	4637      	mov	r7, r6
 800e976:	e599      	b.n	800e4ac <_dtoa_r+0x4b4>
 800e978:	40240000 	.word	0x40240000
 800e97c:	9b08      	ldr	r3, [sp, #32]
 800e97e:	2b00      	cmp	r3, #0
 800e980:	f000 80ca 	beq.w	800eb18 <_dtoa_r+0xb20>
 800e984:	9b03      	ldr	r3, [sp, #12]
 800e986:	9302      	str	r3, [sp, #8]
 800e988:	2d00      	cmp	r5, #0
 800e98a:	dd05      	ble.n	800e998 <_dtoa_r+0x9a0>
 800e98c:	4639      	mov	r1, r7
 800e98e:	462a      	mov	r2, r5
 800e990:	4620      	mov	r0, r4
 800e992:	f000 fd6b 	bl	800f46c <__lshift>
 800e996:	4607      	mov	r7, r0
 800e998:	f1b8 0f00 	cmp.w	r8, #0
 800e99c:	d05b      	beq.n	800ea56 <_dtoa_r+0xa5e>
 800e99e:	6879      	ldr	r1, [r7, #4]
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	f000 fb51 	bl	800f048 <_Balloc>
 800e9a6:	4605      	mov	r5, r0
 800e9a8:	b928      	cbnz	r0, 800e9b6 <_dtoa_r+0x9be>
 800e9aa:	4b87      	ldr	r3, [pc, #540]	; (800ebc8 <_dtoa_r+0xbd0>)
 800e9ac:	4602      	mov	r2, r0
 800e9ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e9b2:	f7ff bb3b 	b.w	800e02c <_dtoa_r+0x34>
 800e9b6:	693a      	ldr	r2, [r7, #16]
 800e9b8:	3202      	adds	r2, #2
 800e9ba:	0092      	lsls	r2, r2, #2
 800e9bc:	f107 010c 	add.w	r1, r7, #12
 800e9c0:	300c      	adds	r0, #12
 800e9c2:	f000 fb33 	bl	800f02c <memcpy>
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	4629      	mov	r1, r5
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	f000 fd4e 	bl	800f46c <__lshift>
 800e9d0:	9b01      	ldr	r3, [sp, #4]
 800e9d2:	f103 0901 	add.w	r9, r3, #1
 800e9d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e9da:	4413      	add	r3, r2
 800e9dc:	9305      	str	r3, [sp, #20]
 800e9de:	f00a 0301 	and.w	r3, sl, #1
 800e9e2:	46b8      	mov	r8, r7
 800e9e4:	9304      	str	r3, [sp, #16]
 800e9e6:	4607      	mov	r7, r0
 800e9e8:	4631      	mov	r1, r6
 800e9ea:	ee18 0a10 	vmov	r0, s16
 800e9ee:	f7ff fa77 	bl	800dee0 <quorem>
 800e9f2:	4641      	mov	r1, r8
 800e9f4:	9002      	str	r0, [sp, #8]
 800e9f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e9fa:	ee18 0a10 	vmov	r0, s16
 800e9fe:	f000 fda5 	bl	800f54c <__mcmp>
 800ea02:	463a      	mov	r2, r7
 800ea04:	9003      	str	r0, [sp, #12]
 800ea06:	4631      	mov	r1, r6
 800ea08:	4620      	mov	r0, r4
 800ea0a:	f000 fdbb 	bl	800f584 <__mdiff>
 800ea0e:	68c2      	ldr	r2, [r0, #12]
 800ea10:	f109 3bff 	add.w	fp, r9, #4294967295
 800ea14:	4605      	mov	r5, r0
 800ea16:	bb02      	cbnz	r2, 800ea5a <_dtoa_r+0xa62>
 800ea18:	4601      	mov	r1, r0
 800ea1a:	ee18 0a10 	vmov	r0, s16
 800ea1e:	f000 fd95 	bl	800f54c <__mcmp>
 800ea22:	4602      	mov	r2, r0
 800ea24:	4629      	mov	r1, r5
 800ea26:	4620      	mov	r0, r4
 800ea28:	9207      	str	r2, [sp, #28]
 800ea2a:	f000 fb4d 	bl	800f0c8 <_Bfree>
 800ea2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ea32:	ea43 0102 	orr.w	r1, r3, r2
 800ea36:	9b04      	ldr	r3, [sp, #16]
 800ea38:	430b      	orrs	r3, r1
 800ea3a:	464d      	mov	r5, r9
 800ea3c:	d10f      	bne.n	800ea5e <_dtoa_r+0xa66>
 800ea3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ea42:	d02a      	beq.n	800ea9a <_dtoa_r+0xaa2>
 800ea44:	9b03      	ldr	r3, [sp, #12]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	dd02      	ble.n	800ea50 <_dtoa_r+0xa58>
 800ea4a:	9b02      	ldr	r3, [sp, #8]
 800ea4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ea50:	f88b a000 	strb.w	sl, [fp]
 800ea54:	e775      	b.n	800e942 <_dtoa_r+0x94a>
 800ea56:	4638      	mov	r0, r7
 800ea58:	e7ba      	b.n	800e9d0 <_dtoa_r+0x9d8>
 800ea5a:	2201      	movs	r2, #1
 800ea5c:	e7e2      	b.n	800ea24 <_dtoa_r+0xa2c>
 800ea5e:	9b03      	ldr	r3, [sp, #12]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	db04      	blt.n	800ea6e <_dtoa_r+0xa76>
 800ea64:	9906      	ldr	r1, [sp, #24]
 800ea66:	430b      	orrs	r3, r1
 800ea68:	9904      	ldr	r1, [sp, #16]
 800ea6a:	430b      	orrs	r3, r1
 800ea6c:	d122      	bne.n	800eab4 <_dtoa_r+0xabc>
 800ea6e:	2a00      	cmp	r2, #0
 800ea70:	ddee      	ble.n	800ea50 <_dtoa_r+0xa58>
 800ea72:	ee18 1a10 	vmov	r1, s16
 800ea76:	2201      	movs	r2, #1
 800ea78:	4620      	mov	r0, r4
 800ea7a:	f000 fcf7 	bl	800f46c <__lshift>
 800ea7e:	4631      	mov	r1, r6
 800ea80:	ee08 0a10 	vmov	s16, r0
 800ea84:	f000 fd62 	bl	800f54c <__mcmp>
 800ea88:	2800      	cmp	r0, #0
 800ea8a:	dc03      	bgt.n	800ea94 <_dtoa_r+0xa9c>
 800ea8c:	d1e0      	bne.n	800ea50 <_dtoa_r+0xa58>
 800ea8e:	f01a 0f01 	tst.w	sl, #1
 800ea92:	d0dd      	beq.n	800ea50 <_dtoa_r+0xa58>
 800ea94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ea98:	d1d7      	bne.n	800ea4a <_dtoa_r+0xa52>
 800ea9a:	2339      	movs	r3, #57	; 0x39
 800ea9c:	f88b 3000 	strb.w	r3, [fp]
 800eaa0:	462b      	mov	r3, r5
 800eaa2:	461d      	mov	r5, r3
 800eaa4:	3b01      	subs	r3, #1
 800eaa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eaaa:	2a39      	cmp	r2, #57	; 0x39
 800eaac:	d071      	beq.n	800eb92 <_dtoa_r+0xb9a>
 800eaae:	3201      	adds	r2, #1
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	e746      	b.n	800e942 <_dtoa_r+0x94a>
 800eab4:	2a00      	cmp	r2, #0
 800eab6:	dd07      	ble.n	800eac8 <_dtoa_r+0xad0>
 800eab8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eabc:	d0ed      	beq.n	800ea9a <_dtoa_r+0xaa2>
 800eabe:	f10a 0301 	add.w	r3, sl, #1
 800eac2:	f88b 3000 	strb.w	r3, [fp]
 800eac6:	e73c      	b.n	800e942 <_dtoa_r+0x94a>
 800eac8:	9b05      	ldr	r3, [sp, #20]
 800eaca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800eace:	4599      	cmp	r9, r3
 800ead0:	d047      	beq.n	800eb62 <_dtoa_r+0xb6a>
 800ead2:	ee18 1a10 	vmov	r1, s16
 800ead6:	2300      	movs	r3, #0
 800ead8:	220a      	movs	r2, #10
 800eada:	4620      	mov	r0, r4
 800eadc:	f000 fb16 	bl	800f10c <__multadd>
 800eae0:	45b8      	cmp	r8, r7
 800eae2:	ee08 0a10 	vmov	s16, r0
 800eae6:	f04f 0300 	mov.w	r3, #0
 800eaea:	f04f 020a 	mov.w	r2, #10
 800eaee:	4641      	mov	r1, r8
 800eaf0:	4620      	mov	r0, r4
 800eaf2:	d106      	bne.n	800eb02 <_dtoa_r+0xb0a>
 800eaf4:	f000 fb0a 	bl	800f10c <__multadd>
 800eaf8:	4680      	mov	r8, r0
 800eafa:	4607      	mov	r7, r0
 800eafc:	f109 0901 	add.w	r9, r9, #1
 800eb00:	e772      	b.n	800e9e8 <_dtoa_r+0x9f0>
 800eb02:	f000 fb03 	bl	800f10c <__multadd>
 800eb06:	4639      	mov	r1, r7
 800eb08:	4680      	mov	r8, r0
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	220a      	movs	r2, #10
 800eb0e:	4620      	mov	r0, r4
 800eb10:	f000 fafc 	bl	800f10c <__multadd>
 800eb14:	4607      	mov	r7, r0
 800eb16:	e7f1      	b.n	800eafc <_dtoa_r+0xb04>
 800eb18:	9b03      	ldr	r3, [sp, #12]
 800eb1a:	9302      	str	r3, [sp, #8]
 800eb1c:	9d01      	ldr	r5, [sp, #4]
 800eb1e:	ee18 0a10 	vmov	r0, s16
 800eb22:	4631      	mov	r1, r6
 800eb24:	f7ff f9dc 	bl	800dee0 <quorem>
 800eb28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eb2c:	9b01      	ldr	r3, [sp, #4]
 800eb2e:	f805 ab01 	strb.w	sl, [r5], #1
 800eb32:	1aea      	subs	r2, r5, r3
 800eb34:	9b02      	ldr	r3, [sp, #8]
 800eb36:	4293      	cmp	r3, r2
 800eb38:	dd09      	ble.n	800eb4e <_dtoa_r+0xb56>
 800eb3a:	ee18 1a10 	vmov	r1, s16
 800eb3e:	2300      	movs	r3, #0
 800eb40:	220a      	movs	r2, #10
 800eb42:	4620      	mov	r0, r4
 800eb44:	f000 fae2 	bl	800f10c <__multadd>
 800eb48:	ee08 0a10 	vmov	s16, r0
 800eb4c:	e7e7      	b.n	800eb1e <_dtoa_r+0xb26>
 800eb4e:	9b02      	ldr	r3, [sp, #8]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	bfc8      	it	gt
 800eb54:	461d      	movgt	r5, r3
 800eb56:	9b01      	ldr	r3, [sp, #4]
 800eb58:	bfd8      	it	le
 800eb5a:	2501      	movle	r5, #1
 800eb5c:	441d      	add	r5, r3
 800eb5e:	f04f 0800 	mov.w	r8, #0
 800eb62:	ee18 1a10 	vmov	r1, s16
 800eb66:	2201      	movs	r2, #1
 800eb68:	4620      	mov	r0, r4
 800eb6a:	f000 fc7f 	bl	800f46c <__lshift>
 800eb6e:	4631      	mov	r1, r6
 800eb70:	ee08 0a10 	vmov	s16, r0
 800eb74:	f000 fcea 	bl	800f54c <__mcmp>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	dc91      	bgt.n	800eaa0 <_dtoa_r+0xaa8>
 800eb7c:	d102      	bne.n	800eb84 <_dtoa_r+0xb8c>
 800eb7e:	f01a 0f01 	tst.w	sl, #1
 800eb82:	d18d      	bne.n	800eaa0 <_dtoa_r+0xaa8>
 800eb84:	462b      	mov	r3, r5
 800eb86:	461d      	mov	r5, r3
 800eb88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eb8c:	2a30      	cmp	r2, #48	; 0x30
 800eb8e:	d0fa      	beq.n	800eb86 <_dtoa_r+0xb8e>
 800eb90:	e6d7      	b.n	800e942 <_dtoa_r+0x94a>
 800eb92:	9a01      	ldr	r2, [sp, #4]
 800eb94:	429a      	cmp	r2, r3
 800eb96:	d184      	bne.n	800eaa2 <_dtoa_r+0xaaa>
 800eb98:	9b00      	ldr	r3, [sp, #0]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	2331      	movs	r3, #49	; 0x31
 800eba0:	7013      	strb	r3, [r2, #0]
 800eba2:	e6ce      	b.n	800e942 <_dtoa_r+0x94a>
 800eba4:	4b09      	ldr	r3, [pc, #36]	; (800ebcc <_dtoa_r+0xbd4>)
 800eba6:	f7ff ba95 	b.w	800e0d4 <_dtoa_r+0xdc>
 800ebaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	f47f aa6e 	bne.w	800e08e <_dtoa_r+0x96>
 800ebb2:	4b07      	ldr	r3, [pc, #28]	; (800ebd0 <_dtoa_r+0xbd8>)
 800ebb4:	f7ff ba8e 	b.w	800e0d4 <_dtoa_r+0xdc>
 800ebb8:	9b02      	ldr	r3, [sp, #8]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	dcae      	bgt.n	800eb1c <_dtoa_r+0xb24>
 800ebbe:	9b06      	ldr	r3, [sp, #24]
 800ebc0:	2b02      	cmp	r3, #2
 800ebc2:	f73f aea8 	bgt.w	800e916 <_dtoa_r+0x91e>
 800ebc6:	e7a9      	b.n	800eb1c <_dtoa_r+0xb24>
 800ebc8:	08010033 	.word	0x08010033
 800ebcc:	0800ff90 	.word	0x0800ff90
 800ebd0:	0800ffb4 	.word	0x0800ffb4

0800ebd4 <__sflush_r>:
 800ebd4:	898a      	ldrh	r2, [r1, #12]
 800ebd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebda:	4605      	mov	r5, r0
 800ebdc:	0710      	lsls	r0, r2, #28
 800ebde:	460c      	mov	r4, r1
 800ebe0:	d458      	bmi.n	800ec94 <__sflush_r+0xc0>
 800ebe2:	684b      	ldr	r3, [r1, #4]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	dc05      	bgt.n	800ebf4 <__sflush_r+0x20>
 800ebe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	dc02      	bgt.n	800ebf4 <__sflush_r+0x20>
 800ebee:	2000      	movs	r0, #0
 800ebf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ebf6:	2e00      	cmp	r6, #0
 800ebf8:	d0f9      	beq.n	800ebee <__sflush_r+0x1a>
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec00:	682f      	ldr	r7, [r5, #0]
 800ec02:	602b      	str	r3, [r5, #0]
 800ec04:	d032      	beq.n	800ec6c <__sflush_r+0x98>
 800ec06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec08:	89a3      	ldrh	r3, [r4, #12]
 800ec0a:	075a      	lsls	r2, r3, #29
 800ec0c:	d505      	bpl.n	800ec1a <__sflush_r+0x46>
 800ec0e:	6863      	ldr	r3, [r4, #4]
 800ec10:	1ac0      	subs	r0, r0, r3
 800ec12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec14:	b10b      	cbz	r3, 800ec1a <__sflush_r+0x46>
 800ec16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec18:	1ac0      	subs	r0, r0, r3
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	4602      	mov	r2, r0
 800ec1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec20:	6a21      	ldr	r1, [r4, #32]
 800ec22:	4628      	mov	r0, r5
 800ec24:	47b0      	blx	r6
 800ec26:	1c43      	adds	r3, r0, #1
 800ec28:	89a3      	ldrh	r3, [r4, #12]
 800ec2a:	d106      	bne.n	800ec3a <__sflush_r+0x66>
 800ec2c:	6829      	ldr	r1, [r5, #0]
 800ec2e:	291d      	cmp	r1, #29
 800ec30:	d82c      	bhi.n	800ec8c <__sflush_r+0xb8>
 800ec32:	4a2a      	ldr	r2, [pc, #168]	; (800ecdc <__sflush_r+0x108>)
 800ec34:	40ca      	lsrs	r2, r1
 800ec36:	07d6      	lsls	r6, r2, #31
 800ec38:	d528      	bpl.n	800ec8c <__sflush_r+0xb8>
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	6062      	str	r2, [r4, #4]
 800ec3e:	04d9      	lsls	r1, r3, #19
 800ec40:	6922      	ldr	r2, [r4, #16]
 800ec42:	6022      	str	r2, [r4, #0]
 800ec44:	d504      	bpl.n	800ec50 <__sflush_r+0x7c>
 800ec46:	1c42      	adds	r2, r0, #1
 800ec48:	d101      	bne.n	800ec4e <__sflush_r+0x7a>
 800ec4a:	682b      	ldr	r3, [r5, #0]
 800ec4c:	b903      	cbnz	r3, 800ec50 <__sflush_r+0x7c>
 800ec4e:	6560      	str	r0, [r4, #84]	; 0x54
 800ec50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec52:	602f      	str	r7, [r5, #0]
 800ec54:	2900      	cmp	r1, #0
 800ec56:	d0ca      	beq.n	800ebee <__sflush_r+0x1a>
 800ec58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ec5c:	4299      	cmp	r1, r3
 800ec5e:	d002      	beq.n	800ec66 <__sflush_r+0x92>
 800ec60:	4628      	mov	r0, r5
 800ec62:	f000 fd8b 	bl	800f77c <_free_r>
 800ec66:	2000      	movs	r0, #0
 800ec68:	6360      	str	r0, [r4, #52]	; 0x34
 800ec6a:	e7c1      	b.n	800ebf0 <__sflush_r+0x1c>
 800ec6c:	6a21      	ldr	r1, [r4, #32]
 800ec6e:	2301      	movs	r3, #1
 800ec70:	4628      	mov	r0, r5
 800ec72:	47b0      	blx	r6
 800ec74:	1c41      	adds	r1, r0, #1
 800ec76:	d1c7      	bne.n	800ec08 <__sflush_r+0x34>
 800ec78:	682b      	ldr	r3, [r5, #0]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d0c4      	beq.n	800ec08 <__sflush_r+0x34>
 800ec7e:	2b1d      	cmp	r3, #29
 800ec80:	d001      	beq.n	800ec86 <__sflush_r+0xb2>
 800ec82:	2b16      	cmp	r3, #22
 800ec84:	d101      	bne.n	800ec8a <__sflush_r+0xb6>
 800ec86:	602f      	str	r7, [r5, #0]
 800ec88:	e7b1      	b.n	800ebee <__sflush_r+0x1a>
 800ec8a:	89a3      	ldrh	r3, [r4, #12]
 800ec8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec90:	81a3      	strh	r3, [r4, #12]
 800ec92:	e7ad      	b.n	800ebf0 <__sflush_r+0x1c>
 800ec94:	690f      	ldr	r7, [r1, #16]
 800ec96:	2f00      	cmp	r7, #0
 800ec98:	d0a9      	beq.n	800ebee <__sflush_r+0x1a>
 800ec9a:	0793      	lsls	r3, r2, #30
 800ec9c:	680e      	ldr	r6, [r1, #0]
 800ec9e:	bf08      	it	eq
 800eca0:	694b      	ldreq	r3, [r1, #20]
 800eca2:	600f      	str	r7, [r1, #0]
 800eca4:	bf18      	it	ne
 800eca6:	2300      	movne	r3, #0
 800eca8:	eba6 0807 	sub.w	r8, r6, r7
 800ecac:	608b      	str	r3, [r1, #8]
 800ecae:	f1b8 0f00 	cmp.w	r8, #0
 800ecb2:	dd9c      	ble.n	800ebee <__sflush_r+0x1a>
 800ecb4:	6a21      	ldr	r1, [r4, #32]
 800ecb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ecb8:	4643      	mov	r3, r8
 800ecba:	463a      	mov	r2, r7
 800ecbc:	4628      	mov	r0, r5
 800ecbe:	47b0      	blx	r6
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	dc06      	bgt.n	800ecd2 <__sflush_r+0xfe>
 800ecc4:	89a3      	ldrh	r3, [r4, #12]
 800ecc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecca:	81a3      	strh	r3, [r4, #12]
 800eccc:	f04f 30ff 	mov.w	r0, #4294967295
 800ecd0:	e78e      	b.n	800ebf0 <__sflush_r+0x1c>
 800ecd2:	4407      	add	r7, r0
 800ecd4:	eba8 0800 	sub.w	r8, r8, r0
 800ecd8:	e7e9      	b.n	800ecae <__sflush_r+0xda>
 800ecda:	bf00      	nop
 800ecdc:	20400001 	.word	0x20400001

0800ece0 <_fflush_r>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	690b      	ldr	r3, [r1, #16]
 800ece4:	4605      	mov	r5, r0
 800ece6:	460c      	mov	r4, r1
 800ece8:	b913      	cbnz	r3, 800ecf0 <_fflush_r+0x10>
 800ecea:	2500      	movs	r5, #0
 800ecec:	4628      	mov	r0, r5
 800ecee:	bd38      	pop	{r3, r4, r5, pc}
 800ecf0:	b118      	cbz	r0, 800ecfa <_fflush_r+0x1a>
 800ecf2:	6983      	ldr	r3, [r0, #24]
 800ecf4:	b90b      	cbnz	r3, 800ecfa <_fflush_r+0x1a>
 800ecf6:	f000 f887 	bl	800ee08 <__sinit>
 800ecfa:	4b14      	ldr	r3, [pc, #80]	; (800ed4c <_fflush_r+0x6c>)
 800ecfc:	429c      	cmp	r4, r3
 800ecfe:	d11b      	bne.n	800ed38 <_fflush_r+0x58>
 800ed00:	686c      	ldr	r4, [r5, #4]
 800ed02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d0ef      	beq.n	800ecea <_fflush_r+0xa>
 800ed0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed0c:	07d0      	lsls	r0, r2, #31
 800ed0e:	d404      	bmi.n	800ed1a <_fflush_r+0x3a>
 800ed10:	0599      	lsls	r1, r3, #22
 800ed12:	d402      	bmi.n	800ed1a <_fflush_r+0x3a>
 800ed14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed16:	f000 f91a 	bl	800ef4e <__retarget_lock_acquire_recursive>
 800ed1a:	4628      	mov	r0, r5
 800ed1c:	4621      	mov	r1, r4
 800ed1e:	f7ff ff59 	bl	800ebd4 <__sflush_r>
 800ed22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ed24:	07da      	lsls	r2, r3, #31
 800ed26:	4605      	mov	r5, r0
 800ed28:	d4e0      	bmi.n	800ecec <_fflush_r+0xc>
 800ed2a:	89a3      	ldrh	r3, [r4, #12]
 800ed2c:	059b      	lsls	r3, r3, #22
 800ed2e:	d4dd      	bmi.n	800ecec <_fflush_r+0xc>
 800ed30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed32:	f000 f90d 	bl	800ef50 <__retarget_lock_release_recursive>
 800ed36:	e7d9      	b.n	800ecec <_fflush_r+0xc>
 800ed38:	4b05      	ldr	r3, [pc, #20]	; (800ed50 <_fflush_r+0x70>)
 800ed3a:	429c      	cmp	r4, r3
 800ed3c:	d101      	bne.n	800ed42 <_fflush_r+0x62>
 800ed3e:	68ac      	ldr	r4, [r5, #8]
 800ed40:	e7df      	b.n	800ed02 <_fflush_r+0x22>
 800ed42:	4b04      	ldr	r3, [pc, #16]	; (800ed54 <_fflush_r+0x74>)
 800ed44:	429c      	cmp	r4, r3
 800ed46:	bf08      	it	eq
 800ed48:	68ec      	ldreq	r4, [r5, #12]
 800ed4a:	e7da      	b.n	800ed02 <_fflush_r+0x22>
 800ed4c:	08010064 	.word	0x08010064
 800ed50:	08010084 	.word	0x08010084
 800ed54:	08010044 	.word	0x08010044

0800ed58 <std>:
 800ed58:	2300      	movs	r3, #0
 800ed5a:	b510      	push	{r4, lr}
 800ed5c:	4604      	mov	r4, r0
 800ed5e:	e9c0 3300 	strd	r3, r3, [r0]
 800ed62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ed66:	6083      	str	r3, [r0, #8]
 800ed68:	8181      	strh	r1, [r0, #12]
 800ed6a:	6643      	str	r3, [r0, #100]	; 0x64
 800ed6c:	81c2      	strh	r2, [r0, #14]
 800ed6e:	6183      	str	r3, [r0, #24]
 800ed70:	4619      	mov	r1, r3
 800ed72:	2208      	movs	r2, #8
 800ed74:	305c      	adds	r0, #92	; 0x5c
 800ed76:	f7fe fb0b 	bl	800d390 <memset>
 800ed7a:	4b05      	ldr	r3, [pc, #20]	; (800ed90 <std+0x38>)
 800ed7c:	6263      	str	r3, [r4, #36]	; 0x24
 800ed7e:	4b05      	ldr	r3, [pc, #20]	; (800ed94 <std+0x3c>)
 800ed80:	62a3      	str	r3, [r4, #40]	; 0x28
 800ed82:	4b05      	ldr	r3, [pc, #20]	; (800ed98 <std+0x40>)
 800ed84:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ed86:	4b05      	ldr	r3, [pc, #20]	; (800ed9c <std+0x44>)
 800ed88:	6224      	str	r4, [r4, #32]
 800ed8a:	6323      	str	r3, [r4, #48]	; 0x30
 800ed8c:	bd10      	pop	{r4, pc}
 800ed8e:	bf00      	nop
 800ed90:	0800fc11 	.word	0x0800fc11
 800ed94:	0800fc33 	.word	0x0800fc33
 800ed98:	0800fc6b 	.word	0x0800fc6b
 800ed9c:	0800fc8f 	.word	0x0800fc8f

0800eda0 <_cleanup_r>:
 800eda0:	4901      	ldr	r1, [pc, #4]	; (800eda8 <_cleanup_r+0x8>)
 800eda2:	f000 b8af 	b.w	800ef04 <_fwalk_reent>
 800eda6:	bf00      	nop
 800eda8:	0800ece1 	.word	0x0800ece1

0800edac <__sfmoreglue>:
 800edac:	b570      	push	{r4, r5, r6, lr}
 800edae:	2268      	movs	r2, #104	; 0x68
 800edb0:	1e4d      	subs	r5, r1, #1
 800edb2:	4355      	muls	r5, r2
 800edb4:	460e      	mov	r6, r1
 800edb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800edba:	f000 fd4b 	bl	800f854 <_malloc_r>
 800edbe:	4604      	mov	r4, r0
 800edc0:	b140      	cbz	r0, 800edd4 <__sfmoreglue+0x28>
 800edc2:	2100      	movs	r1, #0
 800edc4:	e9c0 1600 	strd	r1, r6, [r0]
 800edc8:	300c      	adds	r0, #12
 800edca:	60a0      	str	r0, [r4, #8]
 800edcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800edd0:	f7fe fade 	bl	800d390 <memset>
 800edd4:	4620      	mov	r0, r4
 800edd6:	bd70      	pop	{r4, r5, r6, pc}

0800edd8 <__sfp_lock_acquire>:
 800edd8:	4801      	ldr	r0, [pc, #4]	; (800ede0 <__sfp_lock_acquire+0x8>)
 800edda:	f000 b8b8 	b.w	800ef4e <__retarget_lock_acquire_recursive>
 800edde:	bf00      	nop
 800ede0:	20000f0d 	.word	0x20000f0d

0800ede4 <__sfp_lock_release>:
 800ede4:	4801      	ldr	r0, [pc, #4]	; (800edec <__sfp_lock_release+0x8>)
 800ede6:	f000 b8b3 	b.w	800ef50 <__retarget_lock_release_recursive>
 800edea:	bf00      	nop
 800edec:	20000f0d 	.word	0x20000f0d

0800edf0 <__sinit_lock_acquire>:
 800edf0:	4801      	ldr	r0, [pc, #4]	; (800edf8 <__sinit_lock_acquire+0x8>)
 800edf2:	f000 b8ac 	b.w	800ef4e <__retarget_lock_acquire_recursive>
 800edf6:	bf00      	nop
 800edf8:	20000f0e 	.word	0x20000f0e

0800edfc <__sinit_lock_release>:
 800edfc:	4801      	ldr	r0, [pc, #4]	; (800ee04 <__sinit_lock_release+0x8>)
 800edfe:	f000 b8a7 	b.w	800ef50 <__retarget_lock_release_recursive>
 800ee02:	bf00      	nop
 800ee04:	20000f0e 	.word	0x20000f0e

0800ee08 <__sinit>:
 800ee08:	b510      	push	{r4, lr}
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	f7ff fff0 	bl	800edf0 <__sinit_lock_acquire>
 800ee10:	69a3      	ldr	r3, [r4, #24]
 800ee12:	b11b      	cbz	r3, 800ee1c <__sinit+0x14>
 800ee14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee18:	f7ff bff0 	b.w	800edfc <__sinit_lock_release>
 800ee1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ee20:	6523      	str	r3, [r4, #80]	; 0x50
 800ee22:	4b13      	ldr	r3, [pc, #76]	; (800ee70 <__sinit+0x68>)
 800ee24:	4a13      	ldr	r2, [pc, #76]	; (800ee74 <__sinit+0x6c>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	62a2      	str	r2, [r4, #40]	; 0x28
 800ee2a:	42a3      	cmp	r3, r4
 800ee2c:	bf04      	itt	eq
 800ee2e:	2301      	moveq	r3, #1
 800ee30:	61a3      	streq	r3, [r4, #24]
 800ee32:	4620      	mov	r0, r4
 800ee34:	f000 f820 	bl	800ee78 <__sfp>
 800ee38:	6060      	str	r0, [r4, #4]
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	f000 f81c 	bl	800ee78 <__sfp>
 800ee40:	60a0      	str	r0, [r4, #8]
 800ee42:	4620      	mov	r0, r4
 800ee44:	f000 f818 	bl	800ee78 <__sfp>
 800ee48:	2200      	movs	r2, #0
 800ee4a:	60e0      	str	r0, [r4, #12]
 800ee4c:	2104      	movs	r1, #4
 800ee4e:	6860      	ldr	r0, [r4, #4]
 800ee50:	f7ff ff82 	bl	800ed58 <std>
 800ee54:	68a0      	ldr	r0, [r4, #8]
 800ee56:	2201      	movs	r2, #1
 800ee58:	2109      	movs	r1, #9
 800ee5a:	f7ff ff7d 	bl	800ed58 <std>
 800ee5e:	68e0      	ldr	r0, [r4, #12]
 800ee60:	2202      	movs	r2, #2
 800ee62:	2112      	movs	r1, #18
 800ee64:	f7ff ff78 	bl	800ed58 <std>
 800ee68:	2301      	movs	r3, #1
 800ee6a:	61a3      	str	r3, [r4, #24]
 800ee6c:	e7d2      	b.n	800ee14 <__sinit+0xc>
 800ee6e:	bf00      	nop
 800ee70:	0800ff7c 	.word	0x0800ff7c
 800ee74:	0800eda1 	.word	0x0800eda1

0800ee78 <__sfp>:
 800ee78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee7a:	4607      	mov	r7, r0
 800ee7c:	f7ff ffac 	bl	800edd8 <__sfp_lock_acquire>
 800ee80:	4b1e      	ldr	r3, [pc, #120]	; (800eefc <__sfp+0x84>)
 800ee82:	681e      	ldr	r6, [r3, #0]
 800ee84:	69b3      	ldr	r3, [r6, #24]
 800ee86:	b913      	cbnz	r3, 800ee8e <__sfp+0x16>
 800ee88:	4630      	mov	r0, r6
 800ee8a:	f7ff ffbd 	bl	800ee08 <__sinit>
 800ee8e:	3648      	adds	r6, #72	; 0x48
 800ee90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ee94:	3b01      	subs	r3, #1
 800ee96:	d503      	bpl.n	800eea0 <__sfp+0x28>
 800ee98:	6833      	ldr	r3, [r6, #0]
 800ee9a:	b30b      	cbz	r3, 800eee0 <__sfp+0x68>
 800ee9c:	6836      	ldr	r6, [r6, #0]
 800ee9e:	e7f7      	b.n	800ee90 <__sfp+0x18>
 800eea0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800eea4:	b9d5      	cbnz	r5, 800eedc <__sfp+0x64>
 800eea6:	4b16      	ldr	r3, [pc, #88]	; (800ef00 <__sfp+0x88>)
 800eea8:	60e3      	str	r3, [r4, #12]
 800eeaa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800eeae:	6665      	str	r5, [r4, #100]	; 0x64
 800eeb0:	f000 f84c 	bl	800ef4c <__retarget_lock_init_recursive>
 800eeb4:	f7ff ff96 	bl	800ede4 <__sfp_lock_release>
 800eeb8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800eebc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800eec0:	6025      	str	r5, [r4, #0]
 800eec2:	61a5      	str	r5, [r4, #24]
 800eec4:	2208      	movs	r2, #8
 800eec6:	4629      	mov	r1, r5
 800eec8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eecc:	f7fe fa60 	bl	800d390 <memset>
 800eed0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eed4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800eed8:	4620      	mov	r0, r4
 800eeda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eedc:	3468      	adds	r4, #104	; 0x68
 800eede:	e7d9      	b.n	800ee94 <__sfp+0x1c>
 800eee0:	2104      	movs	r1, #4
 800eee2:	4638      	mov	r0, r7
 800eee4:	f7ff ff62 	bl	800edac <__sfmoreglue>
 800eee8:	4604      	mov	r4, r0
 800eeea:	6030      	str	r0, [r6, #0]
 800eeec:	2800      	cmp	r0, #0
 800eeee:	d1d5      	bne.n	800ee9c <__sfp+0x24>
 800eef0:	f7ff ff78 	bl	800ede4 <__sfp_lock_release>
 800eef4:	230c      	movs	r3, #12
 800eef6:	603b      	str	r3, [r7, #0]
 800eef8:	e7ee      	b.n	800eed8 <__sfp+0x60>
 800eefa:	bf00      	nop
 800eefc:	0800ff7c 	.word	0x0800ff7c
 800ef00:	ffff0001 	.word	0xffff0001

0800ef04 <_fwalk_reent>:
 800ef04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef08:	4606      	mov	r6, r0
 800ef0a:	4688      	mov	r8, r1
 800ef0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef10:	2700      	movs	r7, #0
 800ef12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef16:	f1b9 0901 	subs.w	r9, r9, #1
 800ef1a:	d505      	bpl.n	800ef28 <_fwalk_reent+0x24>
 800ef1c:	6824      	ldr	r4, [r4, #0]
 800ef1e:	2c00      	cmp	r4, #0
 800ef20:	d1f7      	bne.n	800ef12 <_fwalk_reent+0xe>
 800ef22:	4638      	mov	r0, r7
 800ef24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef28:	89ab      	ldrh	r3, [r5, #12]
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	d907      	bls.n	800ef3e <_fwalk_reent+0x3a>
 800ef2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ef32:	3301      	adds	r3, #1
 800ef34:	d003      	beq.n	800ef3e <_fwalk_reent+0x3a>
 800ef36:	4629      	mov	r1, r5
 800ef38:	4630      	mov	r0, r6
 800ef3a:	47c0      	blx	r8
 800ef3c:	4307      	orrs	r7, r0
 800ef3e:	3568      	adds	r5, #104	; 0x68
 800ef40:	e7e9      	b.n	800ef16 <_fwalk_reent+0x12>
	...

0800ef44 <_localeconv_r>:
 800ef44:	4800      	ldr	r0, [pc, #0]	; (800ef48 <_localeconv_r+0x4>)
 800ef46:	4770      	bx	lr
 800ef48:	200002c0 	.word	0x200002c0

0800ef4c <__retarget_lock_init_recursive>:
 800ef4c:	4770      	bx	lr

0800ef4e <__retarget_lock_acquire_recursive>:
 800ef4e:	4770      	bx	lr

0800ef50 <__retarget_lock_release_recursive>:
 800ef50:	4770      	bx	lr

0800ef52 <__swhatbuf_r>:
 800ef52:	b570      	push	{r4, r5, r6, lr}
 800ef54:	460e      	mov	r6, r1
 800ef56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef5a:	2900      	cmp	r1, #0
 800ef5c:	b096      	sub	sp, #88	; 0x58
 800ef5e:	4614      	mov	r4, r2
 800ef60:	461d      	mov	r5, r3
 800ef62:	da08      	bge.n	800ef76 <__swhatbuf_r+0x24>
 800ef64:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ef68:	2200      	movs	r2, #0
 800ef6a:	602a      	str	r2, [r5, #0]
 800ef6c:	061a      	lsls	r2, r3, #24
 800ef6e:	d410      	bmi.n	800ef92 <__swhatbuf_r+0x40>
 800ef70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef74:	e00e      	b.n	800ef94 <__swhatbuf_r+0x42>
 800ef76:	466a      	mov	r2, sp
 800ef78:	f000 fee0 	bl	800fd3c <_fstat_r>
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	dbf1      	blt.n	800ef64 <__swhatbuf_r+0x12>
 800ef80:	9a01      	ldr	r2, [sp, #4]
 800ef82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ef86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ef8a:	425a      	negs	r2, r3
 800ef8c:	415a      	adcs	r2, r3
 800ef8e:	602a      	str	r2, [r5, #0]
 800ef90:	e7ee      	b.n	800ef70 <__swhatbuf_r+0x1e>
 800ef92:	2340      	movs	r3, #64	; 0x40
 800ef94:	2000      	movs	r0, #0
 800ef96:	6023      	str	r3, [r4, #0]
 800ef98:	b016      	add	sp, #88	; 0x58
 800ef9a:	bd70      	pop	{r4, r5, r6, pc}

0800ef9c <__smakebuf_r>:
 800ef9c:	898b      	ldrh	r3, [r1, #12]
 800ef9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800efa0:	079d      	lsls	r5, r3, #30
 800efa2:	4606      	mov	r6, r0
 800efa4:	460c      	mov	r4, r1
 800efa6:	d507      	bpl.n	800efb8 <__smakebuf_r+0x1c>
 800efa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800efac:	6023      	str	r3, [r4, #0]
 800efae:	6123      	str	r3, [r4, #16]
 800efb0:	2301      	movs	r3, #1
 800efb2:	6163      	str	r3, [r4, #20]
 800efb4:	b002      	add	sp, #8
 800efb6:	bd70      	pop	{r4, r5, r6, pc}
 800efb8:	ab01      	add	r3, sp, #4
 800efba:	466a      	mov	r2, sp
 800efbc:	f7ff ffc9 	bl	800ef52 <__swhatbuf_r>
 800efc0:	9900      	ldr	r1, [sp, #0]
 800efc2:	4605      	mov	r5, r0
 800efc4:	4630      	mov	r0, r6
 800efc6:	f000 fc45 	bl	800f854 <_malloc_r>
 800efca:	b948      	cbnz	r0, 800efe0 <__smakebuf_r+0x44>
 800efcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efd0:	059a      	lsls	r2, r3, #22
 800efd2:	d4ef      	bmi.n	800efb4 <__smakebuf_r+0x18>
 800efd4:	f023 0303 	bic.w	r3, r3, #3
 800efd8:	f043 0302 	orr.w	r3, r3, #2
 800efdc:	81a3      	strh	r3, [r4, #12]
 800efde:	e7e3      	b.n	800efa8 <__smakebuf_r+0xc>
 800efe0:	4b0d      	ldr	r3, [pc, #52]	; (800f018 <__smakebuf_r+0x7c>)
 800efe2:	62b3      	str	r3, [r6, #40]	; 0x28
 800efe4:	89a3      	ldrh	r3, [r4, #12]
 800efe6:	6020      	str	r0, [r4, #0]
 800efe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efec:	81a3      	strh	r3, [r4, #12]
 800efee:	9b00      	ldr	r3, [sp, #0]
 800eff0:	6163      	str	r3, [r4, #20]
 800eff2:	9b01      	ldr	r3, [sp, #4]
 800eff4:	6120      	str	r0, [r4, #16]
 800eff6:	b15b      	cbz	r3, 800f010 <__smakebuf_r+0x74>
 800eff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800effc:	4630      	mov	r0, r6
 800effe:	f000 feaf 	bl	800fd60 <_isatty_r>
 800f002:	b128      	cbz	r0, 800f010 <__smakebuf_r+0x74>
 800f004:	89a3      	ldrh	r3, [r4, #12]
 800f006:	f023 0303 	bic.w	r3, r3, #3
 800f00a:	f043 0301 	orr.w	r3, r3, #1
 800f00e:	81a3      	strh	r3, [r4, #12]
 800f010:	89a0      	ldrh	r0, [r4, #12]
 800f012:	4305      	orrs	r5, r0
 800f014:	81a5      	strh	r5, [r4, #12]
 800f016:	e7cd      	b.n	800efb4 <__smakebuf_r+0x18>
 800f018:	0800eda1 	.word	0x0800eda1

0800f01c <malloc>:
 800f01c:	4b02      	ldr	r3, [pc, #8]	; (800f028 <malloc+0xc>)
 800f01e:	4601      	mov	r1, r0
 800f020:	6818      	ldr	r0, [r3, #0]
 800f022:	f000 bc17 	b.w	800f854 <_malloc_r>
 800f026:	bf00      	nop
 800f028:	2000016c 	.word	0x2000016c

0800f02c <memcpy>:
 800f02c:	440a      	add	r2, r1
 800f02e:	4291      	cmp	r1, r2
 800f030:	f100 33ff 	add.w	r3, r0, #4294967295
 800f034:	d100      	bne.n	800f038 <memcpy+0xc>
 800f036:	4770      	bx	lr
 800f038:	b510      	push	{r4, lr}
 800f03a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f03e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f042:	4291      	cmp	r1, r2
 800f044:	d1f9      	bne.n	800f03a <memcpy+0xe>
 800f046:	bd10      	pop	{r4, pc}

0800f048 <_Balloc>:
 800f048:	b570      	push	{r4, r5, r6, lr}
 800f04a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f04c:	4604      	mov	r4, r0
 800f04e:	460d      	mov	r5, r1
 800f050:	b976      	cbnz	r6, 800f070 <_Balloc+0x28>
 800f052:	2010      	movs	r0, #16
 800f054:	f7ff ffe2 	bl	800f01c <malloc>
 800f058:	4602      	mov	r2, r0
 800f05a:	6260      	str	r0, [r4, #36]	; 0x24
 800f05c:	b920      	cbnz	r0, 800f068 <_Balloc+0x20>
 800f05e:	4b18      	ldr	r3, [pc, #96]	; (800f0c0 <_Balloc+0x78>)
 800f060:	4818      	ldr	r0, [pc, #96]	; (800f0c4 <_Balloc+0x7c>)
 800f062:	2166      	movs	r1, #102	; 0x66
 800f064:	f000 fe2a 	bl	800fcbc <__assert_func>
 800f068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f06c:	6006      	str	r6, [r0, #0]
 800f06e:	60c6      	str	r6, [r0, #12]
 800f070:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f072:	68f3      	ldr	r3, [r6, #12]
 800f074:	b183      	cbz	r3, 800f098 <_Balloc+0x50>
 800f076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f078:	68db      	ldr	r3, [r3, #12]
 800f07a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f07e:	b9b8      	cbnz	r0, 800f0b0 <_Balloc+0x68>
 800f080:	2101      	movs	r1, #1
 800f082:	fa01 f605 	lsl.w	r6, r1, r5
 800f086:	1d72      	adds	r2, r6, #5
 800f088:	0092      	lsls	r2, r2, #2
 800f08a:	4620      	mov	r0, r4
 800f08c:	f000 fb60 	bl	800f750 <_calloc_r>
 800f090:	b160      	cbz	r0, 800f0ac <_Balloc+0x64>
 800f092:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f096:	e00e      	b.n	800f0b6 <_Balloc+0x6e>
 800f098:	2221      	movs	r2, #33	; 0x21
 800f09a:	2104      	movs	r1, #4
 800f09c:	4620      	mov	r0, r4
 800f09e:	f000 fb57 	bl	800f750 <_calloc_r>
 800f0a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f0a4:	60f0      	str	r0, [r6, #12]
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d1e4      	bne.n	800f076 <_Balloc+0x2e>
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	bd70      	pop	{r4, r5, r6, pc}
 800f0b0:	6802      	ldr	r2, [r0, #0]
 800f0b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f0bc:	e7f7      	b.n	800f0ae <_Balloc+0x66>
 800f0be:	bf00      	nop
 800f0c0:	0800ffc1 	.word	0x0800ffc1
 800f0c4:	080100a4 	.word	0x080100a4

0800f0c8 <_Bfree>:
 800f0c8:	b570      	push	{r4, r5, r6, lr}
 800f0ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f0cc:	4605      	mov	r5, r0
 800f0ce:	460c      	mov	r4, r1
 800f0d0:	b976      	cbnz	r6, 800f0f0 <_Bfree+0x28>
 800f0d2:	2010      	movs	r0, #16
 800f0d4:	f7ff ffa2 	bl	800f01c <malloc>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	6268      	str	r0, [r5, #36]	; 0x24
 800f0dc:	b920      	cbnz	r0, 800f0e8 <_Bfree+0x20>
 800f0de:	4b09      	ldr	r3, [pc, #36]	; (800f104 <_Bfree+0x3c>)
 800f0e0:	4809      	ldr	r0, [pc, #36]	; (800f108 <_Bfree+0x40>)
 800f0e2:	218a      	movs	r1, #138	; 0x8a
 800f0e4:	f000 fdea 	bl	800fcbc <__assert_func>
 800f0e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0ec:	6006      	str	r6, [r0, #0]
 800f0ee:	60c6      	str	r6, [r0, #12]
 800f0f0:	b13c      	cbz	r4, 800f102 <_Bfree+0x3a>
 800f0f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f0f4:	6862      	ldr	r2, [r4, #4]
 800f0f6:	68db      	ldr	r3, [r3, #12]
 800f0f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f0fc:	6021      	str	r1, [r4, #0]
 800f0fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f102:	bd70      	pop	{r4, r5, r6, pc}
 800f104:	0800ffc1 	.word	0x0800ffc1
 800f108:	080100a4 	.word	0x080100a4

0800f10c <__multadd>:
 800f10c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f110:	690d      	ldr	r5, [r1, #16]
 800f112:	4607      	mov	r7, r0
 800f114:	460c      	mov	r4, r1
 800f116:	461e      	mov	r6, r3
 800f118:	f101 0c14 	add.w	ip, r1, #20
 800f11c:	2000      	movs	r0, #0
 800f11e:	f8dc 3000 	ldr.w	r3, [ip]
 800f122:	b299      	uxth	r1, r3
 800f124:	fb02 6101 	mla	r1, r2, r1, r6
 800f128:	0c1e      	lsrs	r6, r3, #16
 800f12a:	0c0b      	lsrs	r3, r1, #16
 800f12c:	fb02 3306 	mla	r3, r2, r6, r3
 800f130:	b289      	uxth	r1, r1
 800f132:	3001      	adds	r0, #1
 800f134:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f138:	4285      	cmp	r5, r0
 800f13a:	f84c 1b04 	str.w	r1, [ip], #4
 800f13e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f142:	dcec      	bgt.n	800f11e <__multadd+0x12>
 800f144:	b30e      	cbz	r6, 800f18a <__multadd+0x7e>
 800f146:	68a3      	ldr	r3, [r4, #8]
 800f148:	42ab      	cmp	r3, r5
 800f14a:	dc19      	bgt.n	800f180 <__multadd+0x74>
 800f14c:	6861      	ldr	r1, [r4, #4]
 800f14e:	4638      	mov	r0, r7
 800f150:	3101      	adds	r1, #1
 800f152:	f7ff ff79 	bl	800f048 <_Balloc>
 800f156:	4680      	mov	r8, r0
 800f158:	b928      	cbnz	r0, 800f166 <__multadd+0x5a>
 800f15a:	4602      	mov	r2, r0
 800f15c:	4b0c      	ldr	r3, [pc, #48]	; (800f190 <__multadd+0x84>)
 800f15e:	480d      	ldr	r0, [pc, #52]	; (800f194 <__multadd+0x88>)
 800f160:	21b5      	movs	r1, #181	; 0xb5
 800f162:	f000 fdab 	bl	800fcbc <__assert_func>
 800f166:	6922      	ldr	r2, [r4, #16]
 800f168:	3202      	adds	r2, #2
 800f16a:	f104 010c 	add.w	r1, r4, #12
 800f16e:	0092      	lsls	r2, r2, #2
 800f170:	300c      	adds	r0, #12
 800f172:	f7ff ff5b 	bl	800f02c <memcpy>
 800f176:	4621      	mov	r1, r4
 800f178:	4638      	mov	r0, r7
 800f17a:	f7ff ffa5 	bl	800f0c8 <_Bfree>
 800f17e:	4644      	mov	r4, r8
 800f180:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f184:	3501      	adds	r5, #1
 800f186:	615e      	str	r6, [r3, #20]
 800f188:	6125      	str	r5, [r4, #16]
 800f18a:	4620      	mov	r0, r4
 800f18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f190:	08010033 	.word	0x08010033
 800f194:	080100a4 	.word	0x080100a4

0800f198 <__hi0bits>:
 800f198:	0c03      	lsrs	r3, r0, #16
 800f19a:	041b      	lsls	r3, r3, #16
 800f19c:	b9d3      	cbnz	r3, 800f1d4 <__hi0bits+0x3c>
 800f19e:	0400      	lsls	r0, r0, #16
 800f1a0:	2310      	movs	r3, #16
 800f1a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f1a6:	bf04      	itt	eq
 800f1a8:	0200      	lsleq	r0, r0, #8
 800f1aa:	3308      	addeq	r3, #8
 800f1ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f1b0:	bf04      	itt	eq
 800f1b2:	0100      	lsleq	r0, r0, #4
 800f1b4:	3304      	addeq	r3, #4
 800f1b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f1ba:	bf04      	itt	eq
 800f1bc:	0080      	lsleq	r0, r0, #2
 800f1be:	3302      	addeq	r3, #2
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	db05      	blt.n	800f1d0 <__hi0bits+0x38>
 800f1c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f1c8:	f103 0301 	add.w	r3, r3, #1
 800f1cc:	bf08      	it	eq
 800f1ce:	2320      	moveq	r3, #32
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	4770      	bx	lr
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	e7e4      	b.n	800f1a2 <__hi0bits+0xa>

0800f1d8 <__lo0bits>:
 800f1d8:	6803      	ldr	r3, [r0, #0]
 800f1da:	f013 0207 	ands.w	r2, r3, #7
 800f1de:	4601      	mov	r1, r0
 800f1e0:	d00b      	beq.n	800f1fa <__lo0bits+0x22>
 800f1e2:	07da      	lsls	r2, r3, #31
 800f1e4:	d423      	bmi.n	800f22e <__lo0bits+0x56>
 800f1e6:	0798      	lsls	r0, r3, #30
 800f1e8:	bf49      	itett	mi
 800f1ea:	085b      	lsrmi	r3, r3, #1
 800f1ec:	089b      	lsrpl	r3, r3, #2
 800f1ee:	2001      	movmi	r0, #1
 800f1f0:	600b      	strmi	r3, [r1, #0]
 800f1f2:	bf5c      	itt	pl
 800f1f4:	600b      	strpl	r3, [r1, #0]
 800f1f6:	2002      	movpl	r0, #2
 800f1f8:	4770      	bx	lr
 800f1fa:	b298      	uxth	r0, r3
 800f1fc:	b9a8      	cbnz	r0, 800f22a <__lo0bits+0x52>
 800f1fe:	0c1b      	lsrs	r3, r3, #16
 800f200:	2010      	movs	r0, #16
 800f202:	b2da      	uxtb	r2, r3
 800f204:	b90a      	cbnz	r2, 800f20a <__lo0bits+0x32>
 800f206:	3008      	adds	r0, #8
 800f208:	0a1b      	lsrs	r3, r3, #8
 800f20a:	071a      	lsls	r2, r3, #28
 800f20c:	bf04      	itt	eq
 800f20e:	091b      	lsreq	r3, r3, #4
 800f210:	3004      	addeq	r0, #4
 800f212:	079a      	lsls	r2, r3, #30
 800f214:	bf04      	itt	eq
 800f216:	089b      	lsreq	r3, r3, #2
 800f218:	3002      	addeq	r0, #2
 800f21a:	07da      	lsls	r2, r3, #31
 800f21c:	d403      	bmi.n	800f226 <__lo0bits+0x4e>
 800f21e:	085b      	lsrs	r3, r3, #1
 800f220:	f100 0001 	add.w	r0, r0, #1
 800f224:	d005      	beq.n	800f232 <__lo0bits+0x5a>
 800f226:	600b      	str	r3, [r1, #0]
 800f228:	4770      	bx	lr
 800f22a:	4610      	mov	r0, r2
 800f22c:	e7e9      	b.n	800f202 <__lo0bits+0x2a>
 800f22e:	2000      	movs	r0, #0
 800f230:	4770      	bx	lr
 800f232:	2020      	movs	r0, #32
 800f234:	4770      	bx	lr
	...

0800f238 <__i2b>:
 800f238:	b510      	push	{r4, lr}
 800f23a:	460c      	mov	r4, r1
 800f23c:	2101      	movs	r1, #1
 800f23e:	f7ff ff03 	bl	800f048 <_Balloc>
 800f242:	4602      	mov	r2, r0
 800f244:	b928      	cbnz	r0, 800f252 <__i2b+0x1a>
 800f246:	4b05      	ldr	r3, [pc, #20]	; (800f25c <__i2b+0x24>)
 800f248:	4805      	ldr	r0, [pc, #20]	; (800f260 <__i2b+0x28>)
 800f24a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f24e:	f000 fd35 	bl	800fcbc <__assert_func>
 800f252:	2301      	movs	r3, #1
 800f254:	6144      	str	r4, [r0, #20]
 800f256:	6103      	str	r3, [r0, #16]
 800f258:	bd10      	pop	{r4, pc}
 800f25a:	bf00      	nop
 800f25c:	08010033 	.word	0x08010033
 800f260:	080100a4 	.word	0x080100a4

0800f264 <__multiply>:
 800f264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f268:	4691      	mov	r9, r2
 800f26a:	690a      	ldr	r2, [r1, #16]
 800f26c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f270:	429a      	cmp	r2, r3
 800f272:	bfb8      	it	lt
 800f274:	460b      	movlt	r3, r1
 800f276:	460c      	mov	r4, r1
 800f278:	bfbc      	itt	lt
 800f27a:	464c      	movlt	r4, r9
 800f27c:	4699      	movlt	r9, r3
 800f27e:	6927      	ldr	r7, [r4, #16]
 800f280:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f284:	68a3      	ldr	r3, [r4, #8]
 800f286:	6861      	ldr	r1, [r4, #4]
 800f288:	eb07 060a 	add.w	r6, r7, sl
 800f28c:	42b3      	cmp	r3, r6
 800f28e:	b085      	sub	sp, #20
 800f290:	bfb8      	it	lt
 800f292:	3101      	addlt	r1, #1
 800f294:	f7ff fed8 	bl	800f048 <_Balloc>
 800f298:	b930      	cbnz	r0, 800f2a8 <__multiply+0x44>
 800f29a:	4602      	mov	r2, r0
 800f29c:	4b44      	ldr	r3, [pc, #272]	; (800f3b0 <__multiply+0x14c>)
 800f29e:	4845      	ldr	r0, [pc, #276]	; (800f3b4 <__multiply+0x150>)
 800f2a0:	f240 115d 	movw	r1, #349	; 0x15d
 800f2a4:	f000 fd0a 	bl	800fcbc <__assert_func>
 800f2a8:	f100 0514 	add.w	r5, r0, #20
 800f2ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f2b0:	462b      	mov	r3, r5
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	4543      	cmp	r3, r8
 800f2b6:	d321      	bcc.n	800f2fc <__multiply+0x98>
 800f2b8:	f104 0314 	add.w	r3, r4, #20
 800f2bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f2c0:	f109 0314 	add.w	r3, r9, #20
 800f2c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f2c8:	9202      	str	r2, [sp, #8]
 800f2ca:	1b3a      	subs	r2, r7, r4
 800f2cc:	3a15      	subs	r2, #21
 800f2ce:	f022 0203 	bic.w	r2, r2, #3
 800f2d2:	3204      	adds	r2, #4
 800f2d4:	f104 0115 	add.w	r1, r4, #21
 800f2d8:	428f      	cmp	r7, r1
 800f2da:	bf38      	it	cc
 800f2dc:	2204      	movcc	r2, #4
 800f2de:	9201      	str	r2, [sp, #4]
 800f2e0:	9a02      	ldr	r2, [sp, #8]
 800f2e2:	9303      	str	r3, [sp, #12]
 800f2e4:	429a      	cmp	r2, r3
 800f2e6:	d80c      	bhi.n	800f302 <__multiply+0x9e>
 800f2e8:	2e00      	cmp	r6, #0
 800f2ea:	dd03      	ble.n	800f2f4 <__multiply+0x90>
 800f2ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d05a      	beq.n	800f3aa <__multiply+0x146>
 800f2f4:	6106      	str	r6, [r0, #16]
 800f2f6:	b005      	add	sp, #20
 800f2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2fc:	f843 2b04 	str.w	r2, [r3], #4
 800f300:	e7d8      	b.n	800f2b4 <__multiply+0x50>
 800f302:	f8b3 a000 	ldrh.w	sl, [r3]
 800f306:	f1ba 0f00 	cmp.w	sl, #0
 800f30a:	d024      	beq.n	800f356 <__multiply+0xf2>
 800f30c:	f104 0e14 	add.w	lr, r4, #20
 800f310:	46a9      	mov	r9, r5
 800f312:	f04f 0c00 	mov.w	ip, #0
 800f316:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f31a:	f8d9 1000 	ldr.w	r1, [r9]
 800f31e:	fa1f fb82 	uxth.w	fp, r2
 800f322:	b289      	uxth	r1, r1
 800f324:	fb0a 110b 	mla	r1, sl, fp, r1
 800f328:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f32c:	f8d9 2000 	ldr.w	r2, [r9]
 800f330:	4461      	add	r1, ip
 800f332:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f336:	fb0a c20b 	mla	r2, sl, fp, ip
 800f33a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f33e:	b289      	uxth	r1, r1
 800f340:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f344:	4577      	cmp	r7, lr
 800f346:	f849 1b04 	str.w	r1, [r9], #4
 800f34a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f34e:	d8e2      	bhi.n	800f316 <__multiply+0xb2>
 800f350:	9a01      	ldr	r2, [sp, #4]
 800f352:	f845 c002 	str.w	ip, [r5, r2]
 800f356:	9a03      	ldr	r2, [sp, #12]
 800f358:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f35c:	3304      	adds	r3, #4
 800f35e:	f1b9 0f00 	cmp.w	r9, #0
 800f362:	d020      	beq.n	800f3a6 <__multiply+0x142>
 800f364:	6829      	ldr	r1, [r5, #0]
 800f366:	f104 0c14 	add.w	ip, r4, #20
 800f36a:	46ae      	mov	lr, r5
 800f36c:	f04f 0a00 	mov.w	sl, #0
 800f370:	f8bc b000 	ldrh.w	fp, [ip]
 800f374:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f378:	fb09 220b 	mla	r2, r9, fp, r2
 800f37c:	4492      	add	sl, r2
 800f37e:	b289      	uxth	r1, r1
 800f380:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f384:	f84e 1b04 	str.w	r1, [lr], #4
 800f388:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f38c:	f8be 1000 	ldrh.w	r1, [lr]
 800f390:	0c12      	lsrs	r2, r2, #16
 800f392:	fb09 1102 	mla	r1, r9, r2, r1
 800f396:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f39a:	4567      	cmp	r7, ip
 800f39c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f3a0:	d8e6      	bhi.n	800f370 <__multiply+0x10c>
 800f3a2:	9a01      	ldr	r2, [sp, #4]
 800f3a4:	50a9      	str	r1, [r5, r2]
 800f3a6:	3504      	adds	r5, #4
 800f3a8:	e79a      	b.n	800f2e0 <__multiply+0x7c>
 800f3aa:	3e01      	subs	r6, #1
 800f3ac:	e79c      	b.n	800f2e8 <__multiply+0x84>
 800f3ae:	bf00      	nop
 800f3b0:	08010033 	.word	0x08010033
 800f3b4:	080100a4 	.word	0x080100a4

0800f3b8 <__pow5mult>:
 800f3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3bc:	4615      	mov	r5, r2
 800f3be:	f012 0203 	ands.w	r2, r2, #3
 800f3c2:	4606      	mov	r6, r0
 800f3c4:	460f      	mov	r7, r1
 800f3c6:	d007      	beq.n	800f3d8 <__pow5mult+0x20>
 800f3c8:	4c25      	ldr	r4, [pc, #148]	; (800f460 <__pow5mult+0xa8>)
 800f3ca:	3a01      	subs	r2, #1
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f3d2:	f7ff fe9b 	bl	800f10c <__multadd>
 800f3d6:	4607      	mov	r7, r0
 800f3d8:	10ad      	asrs	r5, r5, #2
 800f3da:	d03d      	beq.n	800f458 <__pow5mult+0xa0>
 800f3dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f3de:	b97c      	cbnz	r4, 800f400 <__pow5mult+0x48>
 800f3e0:	2010      	movs	r0, #16
 800f3e2:	f7ff fe1b 	bl	800f01c <malloc>
 800f3e6:	4602      	mov	r2, r0
 800f3e8:	6270      	str	r0, [r6, #36]	; 0x24
 800f3ea:	b928      	cbnz	r0, 800f3f8 <__pow5mult+0x40>
 800f3ec:	4b1d      	ldr	r3, [pc, #116]	; (800f464 <__pow5mult+0xac>)
 800f3ee:	481e      	ldr	r0, [pc, #120]	; (800f468 <__pow5mult+0xb0>)
 800f3f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f3f4:	f000 fc62 	bl	800fcbc <__assert_func>
 800f3f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f3fc:	6004      	str	r4, [r0, #0]
 800f3fe:	60c4      	str	r4, [r0, #12]
 800f400:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f404:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f408:	b94c      	cbnz	r4, 800f41e <__pow5mult+0x66>
 800f40a:	f240 2171 	movw	r1, #625	; 0x271
 800f40e:	4630      	mov	r0, r6
 800f410:	f7ff ff12 	bl	800f238 <__i2b>
 800f414:	2300      	movs	r3, #0
 800f416:	f8c8 0008 	str.w	r0, [r8, #8]
 800f41a:	4604      	mov	r4, r0
 800f41c:	6003      	str	r3, [r0, #0]
 800f41e:	f04f 0900 	mov.w	r9, #0
 800f422:	07eb      	lsls	r3, r5, #31
 800f424:	d50a      	bpl.n	800f43c <__pow5mult+0x84>
 800f426:	4639      	mov	r1, r7
 800f428:	4622      	mov	r2, r4
 800f42a:	4630      	mov	r0, r6
 800f42c:	f7ff ff1a 	bl	800f264 <__multiply>
 800f430:	4639      	mov	r1, r7
 800f432:	4680      	mov	r8, r0
 800f434:	4630      	mov	r0, r6
 800f436:	f7ff fe47 	bl	800f0c8 <_Bfree>
 800f43a:	4647      	mov	r7, r8
 800f43c:	106d      	asrs	r5, r5, #1
 800f43e:	d00b      	beq.n	800f458 <__pow5mult+0xa0>
 800f440:	6820      	ldr	r0, [r4, #0]
 800f442:	b938      	cbnz	r0, 800f454 <__pow5mult+0x9c>
 800f444:	4622      	mov	r2, r4
 800f446:	4621      	mov	r1, r4
 800f448:	4630      	mov	r0, r6
 800f44a:	f7ff ff0b 	bl	800f264 <__multiply>
 800f44e:	6020      	str	r0, [r4, #0]
 800f450:	f8c0 9000 	str.w	r9, [r0]
 800f454:	4604      	mov	r4, r0
 800f456:	e7e4      	b.n	800f422 <__pow5mult+0x6a>
 800f458:	4638      	mov	r0, r7
 800f45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f45e:	bf00      	nop
 800f460:	080101f0 	.word	0x080101f0
 800f464:	0800ffc1 	.word	0x0800ffc1
 800f468:	080100a4 	.word	0x080100a4

0800f46c <__lshift>:
 800f46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f470:	460c      	mov	r4, r1
 800f472:	6849      	ldr	r1, [r1, #4]
 800f474:	6923      	ldr	r3, [r4, #16]
 800f476:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f47a:	68a3      	ldr	r3, [r4, #8]
 800f47c:	4607      	mov	r7, r0
 800f47e:	4691      	mov	r9, r2
 800f480:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f484:	f108 0601 	add.w	r6, r8, #1
 800f488:	42b3      	cmp	r3, r6
 800f48a:	db0b      	blt.n	800f4a4 <__lshift+0x38>
 800f48c:	4638      	mov	r0, r7
 800f48e:	f7ff fddb 	bl	800f048 <_Balloc>
 800f492:	4605      	mov	r5, r0
 800f494:	b948      	cbnz	r0, 800f4aa <__lshift+0x3e>
 800f496:	4602      	mov	r2, r0
 800f498:	4b2a      	ldr	r3, [pc, #168]	; (800f544 <__lshift+0xd8>)
 800f49a:	482b      	ldr	r0, [pc, #172]	; (800f548 <__lshift+0xdc>)
 800f49c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f4a0:	f000 fc0c 	bl	800fcbc <__assert_func>
 800f4a4:	3101      	adds	r1, #1
 800f4a6:	005b      	lsls	r3, r3, #1
 800f4a8:	e7ee      	b.n	800f488 <__lshift+0x1c>
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	f100 0114 	add.w	r1, r0, #20
 800f4b0:	f100 0210 	add.w	r2, r0, #16
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	4553      	cmp	r3, sl
 800f4b8:	db37      	blt.n	800f52a <__lshift+0xbe>
 800f4ba:	6920      	ldr	r0, [r4, #16]
 800f4bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f4c0:	f104 0314 	add.w	r3, r4, #20
 800f4c4:	f019 091f 	ands.w	r9, r9, #31
 800f4c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f4cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f4d0:	d02f      	beq.n	800f532 <__lshift+0xc6>
 800f4d2:	f1c9 0e20 	rsb	lr, r9, #32
 800f4d6:	468a      	mov	sl, r1
 800f4d8:	f04f 0c00 	mov.w	ip, #0
 800f4dc:	681a      	ldr	r2, [r3, #0]
 800f4de:	fa02 f209 	lsl.w	r2, r2, r9
 800f4e2:	ea42 020c 	orr.w	r2, r2, ip
 800f4e6:	f84a 2b04 	str.w	r2, [sl], #4
 800f4ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4ee:	4298      	cmp	r0, r3
 800f4f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f4f4:	d8f2      	bhi.n	800f4dc <__lshift+0x70>
 800f4f6:	1b03      	subs	r3, r0, r4
 800f4f8:	3b15      	subs	r3, #21
 800f4fa:	f023 0303 	bic.w	r3, r3, #3
 800f4fe:	3304      	adds	r3, #4
 800f500:	f104 0215 	add.w	r2, r4, #21
 800f504:	4290      	cmp	r0, r2
 800f506:	bf38      	it	cc
 800f508:	2304      	movcc	r3, #4
 800f50a:	f841 c003 	str.w	ip, [r1, r3]
 800f50e:	f1bc 0f00 	cmp.w	ip, #0
 800f512:	d001      	beq.n	800f518 <__lshift+0xac>
 800f514:	f108 0602 	add.w	r6, r8, #2
 800f518:	3e01      	subs	r6, #1
 800f51a:	4638      	mov	r0, r7
 800f51c:	612e      	str	r6, [r5, #16]
 800f51e:	4621      	mov	r1, r4
 800f520:	f7ff fdd2 	bl	800f0c8 <_Bfree>
 800f524:	4628      	mov	r0, r5
 800f526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f52a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f52e:	3301      	adds	r3, #1
 800f530:	e7c1      	b.n	800f4b6 <__lshift+0x4a>
 800f532:	3904      	subs	r1, #4
 800f534:	f853 2b04 	ldr.w	r2, [r3], #4
 800f538:	f841 2f04 	str.w	r2, [r1, #4]!
 800f53c:	4298      	cmp	r0, r3
 800f53e:	d8f9      	bhi.n	800f534 <__lshift+0xc8>
 800f540:	e7ea      	b.n	800f518 <__lshift+0xac>
 800f542:	bf00      	nop
 800f544:	08010033 	.word	0x08010033
 800f548:	080100a4 	.word	0x080100a4

0800f54c <__mcmp>:
 800f54c:	b530      	push	{r4, r5, lr}
 800f54e:	6902      	ldr	r2, [r0, #16]
 800f550:	690c      	ldr	r4, [r1, #16]
 800f552:	1b12      	subs	r2, r2, r4
 800f554:	d10e      	bne.n	800f574 <__mcmp+0x28>
 800f556:	f100 0314 	add.w	r3, r0, #20
 800f55a:	3114      	adds	r1, #20
 800f55c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f560:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f564:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f568:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f56c:	42a5      	cmp	r5, r4
 800f56e:	d003      	beq.n	800f578 <__mcmp+0x2c>
 800f570:	d305      	bcc.n	800f57e <__mcmp+0x32>
 800f572:	2201      	movs	r2, #1
 800f574:	4610      	mov	r0, r2
 800f576:	bd30      	pop	{r4, r5, pc}
 800f578:	4283      	cmp	r3, r0
 800f57a:	d3f3      	bcc.n	800f564 <__mcmp+0x18>
 800f57c:	e7fa      	b.n	800f574 <__mcmp+0x28>
 800f57e:	f04f 32ff 	mov.w	r2, #4294967295
 800f582:	e7f7      	b.n	800f574 <__mcmp+0x28>

0800f584 <__mdiff>:
 800f584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f588:	460c      	mov	r4, r1
 800f58a:	4606      	mov	r6, r0
 800f58c:	4611      	mov	r1, r2
 800f58e:	4620      	mov	r0, r4
 800f590:	4690      	mov	r8, r2
 800f592:	f7ff ffdb 	bl	800f54c <__mcmp>
 800f596:	1e05      	subs	r5, r0, #0
 800f598:	d110      	bne.n	800f5bc <__mdiff+0x38>
 800f59a:	4629      	mov	r1, r5
 800f59c:	4630      	mov	r0, r6
 800f59e:	f7ff fd53 	bl	800f048 <_Balloc>
 800f5a2:	b930      	cbnz	r0, 800f5b2 <__mdiff+0x2e>
 800f5a4:	4b3a      	ldr	r3, [pc, #232]	; (800f690 <__mdiff+0x10c>)
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	f240 2132 	movw	r1, #562	; 0x232
 800f5ac:	4839      	ldr	r0, [pc, #228]	; (800f694 <__mdiff+0x110>)
 800f5ae:	f000 fb85 	bl	800fcbc <__assert_func>
 800f5b2:	2301      	movs	r3, #1
 800f5b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5bc:	bfa4      	itt	ge
 800f5be:	4643      	movge	r3, r8
 800f5c0:	46a0      	movge	r8, r4
 800f5c2:	4630      	mov	r0, r6
 800f5c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f5c8:	bfa6      	itte	ge
 800f5ca:	461c      	movge	r4, r3
 800f5cc:	2500      	movge	r5, #0
 800f5ce:	2501      	movlt	r5, #1
 800f5d0:	f7ff fd3a 	bl	800f048 <_Balloc>
 800f5d4:	b920      	cbnz	r0, 800f5e0 <__mdiff+0x5c>
 800f5d6:	4b2e      	ldr	r3, [pc, #184]	; (800f690 <__mdiff+0x10c>)
 800f5d8:	4602      	mov	r2, r0
 800f5da:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f5de:	e7e5      	b.n	800f5ac <__mdiff+0x28>
 800f5e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f5e4:	6926      	ldr	r6, [r4, #16]
 800f5e6:	60c5      	str	r5, [r0, #12]
 800f5e8:	f104 0914 	add.w	r9, r4, #20
 800f5ec:	f108 0514 	add.w	r5, r8, #20
 800f5f0:	f100 0e14 	add.w	lr, r0, #20
 800f5f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f5f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f5fc:	f108 0210 	add.w	r2, r8, #16
 800f600:	46f2      	mov	sl, lr
 800f602:	2100      	movs	r1, #0
 800f604:	f859 3b04 	ldr.w	r3, [r9], #4
 800f608:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f60c:	fa1f f883 	uxth.w	r8, r3
 800f610:	fa11 f18b 	uxtah	r1, r1, fp
 800f614:	0c1b      	lsrs	r3, r3, #16
 800f616:	eba1 0808 	sub.w	r8, r1, r8
 800f61a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f61e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f622:	fa1f f888 	uxth.w	r8, r8
 800f626:	1419      	asrs	r1, r3, #16
 800f628:	454e      	cmp	r6, r9
 800f62a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f62e:	f84a 3b04 	str.w	r3, [sl], #4
 800f632:	d8e7      	bhi.n	800f604 <__mdiff+0x80>
 800f634:	1b33      	subs	r3, r6, r4
 800f636:	3b15      	subs	r3, #21
 800f638:	f023 0303 	bic.w	r3, r3, #3
 800f63c:	3304      	adds	r3, #4
 800f63e:	3415      	adds	r4, #21
 800f640:	42a6      	cmp	r6, r4
 800f642:	bf38      	it	cc
 800f644:	2304      	movcc	r3, #4
 800f646:	441d      	add	r5, r3
 800f648:	4473      	add	r3, lr
 800f64a:	469e      	mov	lr, r3
 800f64c:	462e      	mov	r6, r5
 800f64e:	4566      	cmp	r6, ip
 800f650:	d30e      	bcc.n	800f670 <__mdiff+0xec>
 800f652:	f10c 0203 	add.w	r2, ip, #3
 800f656:	1b52      	subs	r2, r2, r5
 800f658:	f022 0203 	bic.w	r2, r2, #3
 800f65c:	3d03      	subs	r5, #3
 800f65e:	45ac      	cmp	ip, r5
 800f660:	bf38      	it	cc
 800f662:	2200      	movcc	r2, #0
 800f664:	441a      	add	r2, r3
 800f666:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f66a:	b17b      	cbz	r3, 800f68c <__mdiff+0x108>
 800f66c:	6107      	str	r7, [r0, #16]
 800f66e:	e7a3      	b.n	800f5b8 <__mdiff+0x34>
 800f670:	f856 8b04 	ldr.w	r8, [r6], #4
 800f674:	fa11 f288 	uxtah	r2, r1, r8
 800f678:	1414      	asrs	r4, r2, #16
 800f67a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f67e:	b292      	uxth	r2, r2
 800f680:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f684:	f84e 2b04 	str.w	r2, [lr], #4
 800f688:	1421      	asrs	r1, r4, #16
 800f68a:	e7e0      	b.n	800f64e <__mdiff+0xca>
 800f68c:	3f01      	subs	r7, #1
 800f68e:	e7ea      	b.n	800f666 <__mdiff+0xe2>
 800f690:	08010033 	.word	0x08010033
 800f694:	080100a4 	.word	0x080100a4

0800f698 <__d2b>:
 800f698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f69c:	4689      	mov	r9, r1
 800f69e:	2101      	movs	r1, #1
 800f6a0:	ec57 6b10 	vmov	r6, r7, d0
 800f6a4:	4690      	mov	r8, r2
 800f6a6:	f7ff fccf 	bl	800f048 <_Balloc>
 800f6aa:	4604      	mov	r4, r0
 800f6ac:	b930      	cbnz	r0, 800f6bc <__d2b+0x24>
 800f6ae:	4602      	mov	r2, r0
 800f6b0:	4b25      	ldr	r3, [pc, #148]	; (800f748 <__d2b+0xb0>)
 800f6b2:	4826      	ldr	r0, [pc, #152]	; (800f74c <__d2b+0xb4>)
 800f6b4:	f240 310a 	movw	r1, #778	; 0x30a
 800f6b8:	f000 fb00 	bl	800fcbc <__assert_func>
 800f6bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f6c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f6c4:	bb35      	cbnz	r5, 800f714 <__d2b+0x7c>
 800f6c6:	2e00      	cmp	r6, #0
 800f6c8:	9301      	str	r3, [sp, #4]
 800f6ca:	d028      	beq.n	800f71e <__d2b+0x86>
 800f6cc:	4668      	mov	r0, sp
 800f6ce:	9600      	str	r6, [sp, #0]
 800f6d0:	f7ff fd82 	bl	800f1d8 <__lo0bits>
 800f6d4:	9900      	ldr	r1, [sp, #0]
 800f6d6:	b300      	cbz	r0, 800f71a <__d2b+0x82>
 800f6d8:	9a01      	ldr	r2, [sp, #4]
 800f6da:	f1c0 0320 	rsb	r3, r0, #32
 800f6de:	fa02 f303 	lsl.w	r3, r2, r3
 800f6e2:	430b      	orrs	r3, r1
 800f6e4:	40c2      	lsrs	r2, r0
 800f6e6:	6163      	str	r3, [r4, #20]
 800f6e8:	9201      	str	r2, [sp, #4]
 800f6ea:	9b01      	ldr	r3, [sp, #4]
 800f6ec:	61a3      	str	r3, [r4, #24]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	bf14      	ite	ne
 800f6f2:	2202      	movne	r2, #2
 800f6f4:	2201      	moveq	r2, #1
 800f6f6:	6122      	str	r2, [r4, #16]
 800f6f8:	b1d5      	cbz	r5, 800f730 <__d2b+0x98>
 800f6fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f6fe:	4405      	add	r5, r0
 800f700:	f8c9 5000 	str.w	r5, [r9]
 800f704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f708:	f8c8 0000 	str.w	r0, [r8]
 800f70c:	4620      	mov	r0, r4
 800f70e:	b003      	add	sp, #12
 800f710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f718:	e7d5      	b.n	800f6c6 <__d2b+0x2e>
 800f71a:	6161      	str	r1, [r4, #20]
 800f71c:	e7e5      	b.n	800f6ea <__d2b+0x52>
 800f71e:	a801      	add	r0, sp, #4
 800f720:	f7ff fd5a 	bl	800f1d8 <__lo0bits>
 800f724:	9b01      	ldr	r3, [sp, #4]
 800f726:	6163      	str	r3, [r4, #20]
 800f728:	2201      	movs	r2, #1
 800f72a:	6122      	str	r2, [r4, #16]
 800f72c:	3020      	adds	r0, #32
 800f72e:	e7e3      	b.n	800f6f8 <__d2b+0x60>
 800f730:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f734:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f738:	f8c9 0000 	str.w	r0, [r9]
 800f73c:	6918      	ldr	r0, [r3, #16]
 800f73e:	f7ff fd2b 	bl	800f198 <__hi0bits>
 800f742:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f746:	e7df      	b.n	800f708 <__d2b+0x70>
 800f748:	08010033 	.word	0x08010033
 800f74c:	080100a4 	.word	0x080100a4

0800f750 <_calloc_r>:
 800f750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f752:	fba1 2402 	umull	r2, r4, r1, r2
 800f756:	b94c      	cbnz	r4, 800f76c <_calloc_r+0x1c>
 800f758:	4611      	mov	r1, r2
 800f75a:	9201      	str	r2, [sp, #4]
 800f75c:	f000 f87a 	bl	800f854 <_malloc_r>
 800f760:	9a01      	ldr	r2, [sp, #4]
 800f762:	4605      	mov	r5, r0
 800f764:	b930      	cbnz	r0, 800f774 <_calloc_r+0x24>
 800f766:	4628      	mov	r0, r5
 800f768:	b003      	add	sp, #12
 800f76a:	bd30      	pop	{r4, r5, pc}
 800f76c:	220c      	movs	r2, #12
 800f76e:	6002      	str	r2, [r0, #0]
 800f770:	2500      	movs	r5, #0
 800f772:	e7f8      	b.n	800f766 <_calloc_r+0x16>
 800f774:	4621      	mov	r1, r4
 800f776:	f7fd fe0b 	bl	800d390 <memset>
 800f77a:	e7f4      	b.n	800f766 <_calloc_r+0x16>

0800f77c <_free_r>:
 800f77c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f77e:	2900      	cmp	r1, #0
 800f780:	d044      	beq.n	800f80c <_free_r+0x90>
 800f782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f786:	9001      	str	r0, [sp, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	f1a1 0404 	sub.w	r4, r1, #4
 800f78e:	bfb8      	it	lt
 800f790:	18e4      	addlt	r4, r4, r3
 800f792:	f000 fb19 	bl	800fdc8 <__malloc_lock>
 800f796:	4a1e      	ldr	r2, [pc, #120]	; (800f810 <_free_r+0x94>)
 800f798:	9801      	ldr	r0, [sp, #4]
 800f79a:	6813      	ldr	r3, [r2, #0]
 800f79c:	b933      	cbnz	r3, 800f7ac <_free_r+0x30>
 800f79e:	6063      	str	r3, [r4, #4]
 800f7a0:	6014      	str	r4, [r2, #0]
 800f7a2:	b003      	add	sp, #12
 800f7a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7a8:	f000 bb14 	b.w	800fdd4 <__malloc_unlock>
 800f7ac:	42a3      	cmp	r3, r4
 800f7ae:	d908      	bls.n	800f7c2 <_free_r+0x46>
 800f7b0:	6825      	ldr	r5, [r4, #0]
 800f7b2:	1961      	adds	r1, r4, r5
 800f7b4:	428b      	cmp	r3, r1
 800f7b6:	bf01      	itttt	eq
 800f7b8:	6819      	ldreq	r1, [r3, #0]
 800f7ba:	685b      	ldreq	r3, [r3, #4]
 800f7bc:	1949      	addeq	r1, r1, r5
 800f7be:	6021      	streq	r1, [r4, #0]
 800f7c0:	e7ed      	b.n	800f79e <_free_r+0x22>
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	b10b      	cbz	r3, 800f7cc <_free_r+0x50>
 800f7c8:	42a3      	cmp	r3, r4
 800f7ca:	d9fa      	bls.n	800f7c2 <_free_r+0x46>
 800f7cc:	6811      	ldr	r1, [r2, #0]
 800f7ce:	1855      	adds	r5, r2, r1
 800f7d0:	42a5      	cmp	r5, r4
 800f7d2:	d10b      	bne.n	800f7ec <_free_r+0x70>
 800f7d4:	6824      	ldr	r4, [r4, #0]
 800f7d6:	4421      	add	r1, r4
 800f7d8:	1854      	adds	r4, r2, r1
 800f7da:	42a3      	cmp	r3, r4
 800f7dc:	6011      	str	r1, [r2, #0]
 800f7de:	d1e0      	bne.n	800f7a2 <_free_r+0x26>
 800f7e0:	681c      	ldr	r4, [r3, #0]
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	6053      	str	r3, [r2, #4]
 800f7e6:	4421      	add	r1, r4
 800f7e8:	6011      	str	r1, [r2, #0]
 800f7ea:	e7da      	b.n	800f7a2 <_free_r+0x26>
 800f7ec:	d902      	bls.n	800f7f4 <_free_r+0x78>
 800f7ee:	230c      	movs	r3, #12
 800f7f0:	6003      	str	r3, [r0, #0]
 800f7f2:	e7d6      	b.n	800f7a2 <_free_r+0x26>
 800f7f4:	6825      	ldr	r5, [r4, #0]
 800f7f6:	1961      	adds	r1, r4, r5
 800f7f8:	428b      	cmp	r3, r1
 800f7fa:	bf04      	itt	eq
 800f7fc:	6819      	ldreq	r1, [r3, #0]
 800f7fe:	685b      	ldreq	r3, [r3, #4]
 800f800:	6063      	str	r3, [r4, #4]
 800f802:	bf04      	itt	eq
 800f804:	1949      	addeq	r1, r1, r5
 800f806:	6021      	streq	r1, [r4, #0]
 800f808:	6054      	str	r4, [r2, #4]
 800f80a:	e7ca      	b.n	800f7a2 <_free_r+0x26>
 800f80c:	b003      	add	sp, #12
 800f80e:	bd30      	pop	{r4, r5, pc}
 800f810:	20000f10 	.word	0x20000f10

0800f814 <sbrk_aligned>:
 800f814:	b570      	push	{r4, r5, r6, lr}
 800f816:	4e0e      	ldr	r6, [pc, #56]	; (800f850 <sbrk_aligned+0x3c>)
 800f818:	460c      	mov	r4, r1
 800f81a:	6831      	ldr	r1, [r6, #0]
 800f81c:	4605      	mov	r5, r0
 800f81e:	b911      	cbnz	r1, 800f826 <sbrk_aligned+0x12>
 800f820:	f000 f9e6 	bl	800fbf0 <_sbrk_r>
 800f824:	6030      	str	r0, [r6, #0]
 800f826:	4621      	mov	r1, r4
 800f828:	4628      	mov	r0, r5
 800f82a:	f000 f9e1 	bl	800fbf0 <_sbrk_r>
 800f82e:	1c43      	adds	r3, r0, #1
 800f830:	d00a      	beq.n	800f848 <sbrk_aligned+0x34>
 800f832:	1cc4      	adds	r4, r0, #3
 800f834:	f024 0403 	bic.w	r4, r4, #3
 800f838:	42a0      	cmp	r0, r4
 800f83a:	d007      	beq.n	800f84c <sbrk_aligned+0x38>
 800f83c:	1a21      	subs	r1, r4, r0
 800f83e:	4628      	mov	r0, r5
 800f840:	f000 f9d6 	bl	800fbf0 <_sbrk_r>
 800f844:	3001      	adds	r0, #1
 800f846:	d101      	bne.n	800f84c <sbrk_aligned+0x38>
 800f848:	f04f 34ff 	mov.w	r4, #4294967295
 800f84c:	4620      	mov	r0, r4
 800f84e:	bd70      	pop	{r4, r5, r6, pc}
 800f850:	20000f14 	.word	0x20000f14

0800f854 <_malloc_r>:
 800f854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f858:	1ccd      	adds	r5, r1, #3
 800f85a:	f025 0503 	bic.w	r5, r5, #3
 800f85e:	3508      	adds	r5, #8
 800f860:	2d0c      	cmp	r5, #12
 800f862:	bf38      	it	cc
 800f864:	250c      	movcc	r5, #12
 800f866:	2d00      	cmp	r5, #0
 800f868:	4607      	mov	r7, r0
 800f86a:	db01      	blt.n	800f870 <_malloc_r+0x1c>
 800f86c:	42a9      	cmp	r1, r5
 800f86e:	d905      	bls.n	800f87c <_malloc_r+0x28>
 800f870:	230c      	movs	r3, #12
 800f872:	603b      	str	r3, [r7, #0]
 800f874:	2600      	movs	r6, #0
 800f876:	4630      	mov	r0, r6
 800f878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f87c:	4e2e      	ldr	r6, [pc, #184]	; (800f938 <_malloc_r+0xe4>)
 800f87e:	f000 faa3 	bl	800fdc8 <__malloc_lock>
 800f882:	6833      	ldr	r3, [r6, #0]
 800f884:	461c      	mov	r4, r3
 800f886:	bb34      	cbnz	r4, 800f8d6 <_malloc_r+0x82>
 800f888:	4629      	mov	r1, r5
 800f88a:	4638      	mov	r0, r7
 800f88c:	f7ff ffc2 	bl	800f814 <sbrk_aligned>
 800f890:	1c43      	adds	r3, r0, #1
 800f892:	4604      	mov	r4, r0
 800f894:	d14d      	bne.n	800f932 <_malloc_r+0xde>
 800f896:	6834      	ldr	r4, [r6, #0]
 800f898:	4626      	mov	r6, r4
 800f89a:	2e00      	cmp	r6, #0
 800f89c:	d140      	bne.n	800f920 <_malloc_r+0xcc>
 800f89e:	6823      	ldr	r3, [r4, #0]
 800f8a0:	4631      	mov	r1, r6
 800f8a2:	4638      	mov	r0, r7
 800f8a4:	eb04 0803 	add.w	r8, r4, r3
 800f8a8:	f000 f9a2 	bl	800fbf0 <_sbrk_r>
 800f8ac:	4580      	cmp	r8, r0
 800f8ae:	d13a      	bne.n	800f926 <_malloc_r+0xd2>
 800f8b0:	6821      	ldr	r1, [r4, #0]
 800f8b2:	3503      	adds	r5, #3
 800f8b4:	1a6d      	subs	r5, r5, r1
 800f8b6:	f025 0503 	bic.w	r5, r5, #3
 800f8ba:	3508      	adds	r5, #8
 800f8bc:	2d0c      	cmp	r5, #12
 800f8be:	bf38      	it	cc
 800f8c0:	250c      	movcc	r5, #12
 800f8c2:	4629      	mov	r1, r5
 800f8c4:	4638      	mov	r0, r7
 800f8c6:	f7ff ffa5 	bl	800f814 <sbrk_aligned>
 800f8ca:	3001      	adds	r0, #1
 800f8cc:	d02b      	beq.n	800f926 <_malloc_r+0xd2>
 800f8ce:	6823      	ldr	r3, [r4, #0]
 800f8d0:	442b      	add	r3, r5
 800f8d2:	6023      	str	r3, [r4, #0]
 800f8d4:	e00e      	b.n	800f8f4 <_malloc_r+0xa0>
 800f8d6:	6822      	ldr	r2, [r4, #0]
 800f8d8:	1b52      	subs	r2, r2, r5
 800f8da:	d41e      	bmi.n	800f91a <_malloc_r+0xc6>
 800f8dc:	2a0b      	cmp	r2, #11
 800f8de:	d916      	bls.n	800f90e <_malloc_r+0xba>
 800f8e0:	1961      	adds	r1, r4, r5
 800f8e2:	42a3      	cmp	r3, r4
 800f8e4:	6025      	str	r5, [r4, #0]
 800f8e6:	bf18      	it	ne
 800f8e8:	6059      	strne	r1, [r3, #4]
 800f8ea:	6863      	ldr	r3, [r4, #4]
 800f8ec:	bf08      	it	eq
 800f8ee:	6031      	streq	r1, [r6, #0]
 800f8f0:	5162      	str	r2, [r4, r5]
 800f8f2:	604b      	str	r3, [r1, #4]
 800f8f4:	4638      	mov	r0, r7
 800f8f6:	f104 060b 	add.w	r6, r4, #11
 800f8fa:	f000 fa6b 	bl	800fdd4 <__malloc_unlock>
 800f8fe:	f026 0607 	bic.w	r6, r6, #7
 800f902:	1d23      	adds	r3, r4, #4
 800f904:	1af2      	subs	r2, r6, r3
 800f906:	d0b6      	beq.n	800f876 <_malloc_r+0x22>
 800f908:	1b9b      	subs	r3, r3, r6
 800f90a:	50a3      	str	r3, [r4, r2]
 800f90c:	e7b3      	b.n	800f876 <_malloc_r+0x22>
 800f90e:	6862      	ldr	r2, [r4, #4]
 800f910:	42a3      	cmp	r3, r4
 800f912:	bf0c      	ite	eq
 800f914:	6032      	streq	r2, [r6, #0]
 800f916:	605a      	strne	r2, [r3, #4]
 800f918:	e7ec      	b.n	800f8f4 <_malloc_r+0xa0>
 800f91a:	4623      	mov	r3, r4
 800f91c:	6864      	ldr	r4, [r4, #4]
 800f91e:	e7b2      	b.n	800f886 <_malloc_r+0x32>
 800f920:	4634      	mov	r4, r6
 800f922:	6876      	ldr	r6, [r6, #4]
 800f924:	e7b9      	b.n	800f89a <_malloc_r+0x46>
 800f926:	230c      	movs	r3, #12
 800f928:	603b      	str	r3, [r7, #0]
 800f92a:	4638      	mov	r0, r7
 800f92c:	f000 fa52 	bl	800fdd4 <__malloc_unlock>
 800f930:	e7a1      	b.n	800f876 <_malloc_r+0x22>
 800f932:	6025      	str	r5, [r4, #0]
 800f934:	e7de      	b.n	800f8f4 <_malloc_r+0xa0>
 800f936:	bf00      	nop
 800f938:	20000f10 	.word	0x20000f10

0800f93c <__sfputc_r>:
 800f93c:	6893      	ldr	r3, [r2, #8]
 800f93e:	3b01      	subs	r3, #1
 800f940:	2b00      	cmp	r3, #0
 800f942:	b410      	push	{r4}
 800f944:	6093      	str	r3, [r2, #8]
 800f946:	da08      	bge.n	800f95a <__sfputc_r+0x1e>
 800f948:	6994      	ldr	r4, [r2, #24]
 800f94a:	42a3      	cmp	r3, r4
 800f94c:	db01      	blt.n	800f952 <__sfputc_r+0x16>
 800f94e:	290a      	cmp	r1, #10
 800f950:	d103      	bne.n	800f95a <__sfputc_r+0x1e>
 800f952:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f956:	f7fe ba03 	b.w	800dd60 <__swbuf_r>
 800f95a:	6813      	ldr	r3, [r2, #0]
 800f95c:	1c58      	adds	r0, r3, #1
 800f95e:	6010      	str	r0, [r2, #0]
 800f960:	7019      	strb	r1, [r3, #0]
 800f962:	4608      	mov	r0, r1
 800f964:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f968:	4770      	bx	lr

0800f96a <__sfputs_r>:
 800f96a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96c:	4606      	mov	r6, r0
 800f96e:	460f      	mov	r7, r1
 800f970:	4614      	mov	r4, r2
 800f972:	18d5      	adds	r5, r2, r3
 800f974:	42ac      	cmp	r4, r5
 800f976:	d101      	bne.n	800f97c <__sfputs_r+0x12>
 800f978:	2000      	movs	r0, #0
 800f97a:	e007      	b.n	800f98c <__sfputs_r+0x22>
 800f97c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f980:	463a      	mov	r2, r7
 800f982:	4630      	mov	r0, r6
 800f984:	f7ff ffda 	bl	800f93c <__sfputc_r>
 800f988:	1c43      	adds	r3, r0, #1
 800f98a:	d1f3      	bne.n	800f974 <__sfputs_r+0xa>
 800f98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f990 <_vfiprintf_r>:
 800f990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f994:	460d      	mov	r5, r1
 800f996:	b09d      	sub	sp, #116	; 0x74
 800f998:	4614      	mov	r4, r2
 800f99a:	4698      	mov	r8, r3
 800f99c:	4606      	mov	r6, r0
 800f99e:	b118      	cbz	r0, 800f9a8 <_vfiprintf_r+0x18>
 800f9a0:	6983      	ldr	r3, [r0, #24]
 800f9a2:	b90b      	cbnz	r3, 800f9a8 <_vfiprintf_r+0x18>
 800f9a4:	f7ff fa30 	bl	800ee08 <__sinit>
 800f9a8:	4b89      	ldr	r3, [pc, #548]	; (800fbd0 <_vfiprintf_r+0x240>)
 800f9aa:	429d      	cmp	r5, r3
 800f9ac:	d11b      	bne.n	800f9e6 <_vfiprintf_r+0x56>
 800f9ae:	6875      	ldr	r5, [r6, #4]
 800f9b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9b2:	07d9      	lsls	r1, r3, #31
 800f9b4:	d405      	bmi.n	800f9c2 <_vfiprintf_r+0x32>
 800f9b6:	89ab      	ldrh	r3, [r5, #12]
 800f9b8:	059a      	lsls	r2, r3, #22
 800f9ba:	d402      	bmi.n	800f9c2 <_vfiprintf_r+0x32>
 800f9bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9be:	f7ff fac6 	bl	800ef4e <__retarget_lock_acquire_recursive>
 800f9c2:	89ab      	ldrh	r3, [r5, #12]
 800f9c4:	071b      	lsls	r3, r3, #28
 800f9c6:	d501      	bpl.n	800f9cc <_vfiprintf_r+0x3c>
 800f9c8:	692b      	ldr	r3, [r5, #16]
 800f9ca:	b9eb      	cbnz	r3, 800fa08 <_vfiprintf_r+0x78>
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	f7fe fa18 	bl	800de04 <__swsetup_r>
 800f9d4:	b1c0      	cbz	r0, 800fa08 <_vfiprintf_r+0x78>
 800f9d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9d8:	07dc      	lsls	r4, r3, #31
 800f9da:	d50e      	bpl.n	800f9fa <_vfiprintf_r+0x6a>
 800f9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f9e0:	b01d      	add	sp, #116	; 0x74
 800f9e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e6:	4b7b      	ldr	r3, [pc, #492]	; (800fbd4 <_vfiprintf_r+0x244>)
 800f9e8:	429d      	cmp	r5, r3
 800f9ea:	d101      	bne.n	800f9f0 <_vfiprintf_r+0x60>
 800f9ec:	68b5      	ldr	r5, [r6, #8]
 800f9ee:	e7df      	b.n	800f9b0 <_vfiprintf_r+0x20>
 800f9f0:	4b79      	ldr	r3, [pc, #484]	; (800fbd8 <_vfiprintf_r+0x248>)
 800f9f2:	429d      	cmp	r5, r3
 800f9f4:	bf08      	it	eq
 800f9f6:	68f5      	ldreq	r5, [r6, #12]
 800f9f8:	e7da      	b.n	800f9b0 <_vfiprintf_r+0x20>
 800f9fa:	89ab      	ldrh	r3, [r5, #12]
 800f9fc:	0598      	lsls	r0, r3, #22
 800f9fe:	d4ed      	bmi.n	800f9dc <_vfiprintf_r+0x4c>
 800fa00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa02:	f7ff faa5 	bl	800ef50 <__retarget_lock_release_recursive>
 800fa06:	e7e9      	b.n	800f9dc <_vfiprintf_r+0x4c>
 800fa08:	2300      	movs	r3, #0
 800fa0a:	9309      	str	r3, [sp, #36]	; 0x24
 800fa0c:	2320      	movs	r3, #32
 800fa0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa12:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa16:	2330      	movs	r3, #48	; 0x30
 800fa18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fbdc <_vfiprintf_r+0x24c>
 800fa1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa20:	f04f 0901 	mov.w	r9, #1
 800fa24:	4623      	mov	r3, r4
 800fa26:	469a      	mov	sl, r3
 800fa28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa2c:	b10a      	cbz	r2, 800fa32 <_vfiprintf_r+0xa2>
 800fa2e:	2a25      	cmp	r2, #37	; 0x25
 800fa30:	d1f9      	bne.n	800fa26 <_vfiprintf_r+0x96>
 800fa32:	ebba 0b04 	subs.w	fp, sl, r4
 800fa36:	d00b      	beq.n	800fa50 <_vfiprintf_r+0xc0>
 800fa38:	465b      	mov	r3, fp
 800fa3a:	4622      	mov	r2, r4
 800fa3c:	4629      	mov	r1, r5
 800fa3e:	4630      	mov	r0, r6
 800fa40:	f7ff ff93 	bl	800f96a <__sfputs_r>
 800fa44:	3001      	adds	r0, #1
 800fa46:	f000 80aa 	beq.w	800fb9e <_vfiprintf_r+0x20e>
 800fa4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fa4c:	445a      	add	r2, fp
 800fa4e:	9209      	str	r2, [sp, #36]	; 0x24
 800fa50:	f89a 3000 	ldrb.w	r3, [sl]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	f000 80a2 	beq.w	800fb9e <_vfiprintf_r+0x20e>
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	f04f 32ff 	mov.w	r2, #4294967295
 800fa60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa64:	f10a 0a01 	add.w	sl, sl, #1
 800fa68:	9304      	str	r3, [sp, #16]
 800fa6a:	9307      	str	r3, [sp, #28]
 800fa6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa70:	931a      	str	r3, [sp, #104]	; 0x68
 800fa72:	4654      	mov	r4, sl
 800fa74:	2205      	movs	r2, #5
 800fa76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa7a:	4858      	ldr	r0, [pc, #352]	; (800fbdc <_vfiprintf_r+0x24c>)
 800fa7c:	f7f0 fbb0 	bl	80001e0 <memchr>
 800fa80:	9a04      	ldr	r2, [sp, #16]
 800fa82:	b9d8      	cbnz	r0, 800fabc <_vfiprintf_r+0x12c>
 800fa84:	06d1      	lsls	r1, r2, #27
 800fa86:	bf44      	itt	mi
 800fa88:	2320      	movmi	r3, #32
 800fa8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa8e:	0713      	lsls	r3, r2, #28
 800fa90:	bf44      	itt	mi
 800fa92:	232b      	movmi	r3, #43	; 0x2b
 800fa94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa98:	f89a 3000 	ldrb.w	r3, [sl]
 800fa9c:	2b2a      	cmp	r3, #42	; 0x2a
 800fa9e:	d015      	beq.n	800facc <_vfiprintf_r+0x13c>
 800faa0:	9a07      	ldr	r2, [sp, #28]
 800faa2:	4654      	mov	r4, sl
 800faa4:	2000      	movs	r0, #0
 800faa6:	f04f 0c0a 	mov.w	ip, #10
 800faaa:	4621      	mov	r1, r4
 800faac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fab0:	3b30      	subs	r3, #48	; 0x30
 800fab2:	2b09      	cmp	r3, #9
 800fab4:	d94e      	bls.n	800fb54 <_vfiprintf_r+0x1c4>
 800fab6:	b1b0      	cbz	r0, 800fae6 <_vfiprintf_r+0x156>
 800fab8:	9207      	str	r2, [sp, #28]
 800faba:	e014      	b.n	800fae6 <_vfiprintf_r+0x156>
 800fabc:	eba0 0308 	sub.w	r3, r0, r8
 800fac0:	fa09 f303 	lsl.w	r3, r9, r3
 800fac4:	4313      	orrs	r3, r2
 800fac6:	9304      	str	r3, [sp, #16]
 800fac8:	46a2      	mov	sl, r4
 800faca:	e7d2      	b.n	800fa72 <_vfiprintf_r+0xe2>
 800facc:	9b03      	ldr	r3, [sp, #12]
 800face:	1d19      	adds	r1, r3, #4
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	9103      	str	r1, [sp, #12]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	bfbb      	ittet	lt
 800fad8:	425b      	neglt	r3, r3
 800fada:	f042 0202 	orrlt.w	r2, r2, #2
 800fade:	9307      	strge	r3, [sp, #28]
 800fae0:	9307      	strlt	r3, [sp, #28]
 800fae2:	bfb8      	it	lt
 800fae4:	9204      	strlt	r2, [sp, #16]
 800fae6:	7823      	ldrb	r3, [r4, #0]
 800fae8:	2b2e      	cmp	r3, #46	; 0x2e
 800faea:	d10c      	bne.n	800fb06 <_vfiprintf_r+0x176>
 800faec:	7863      	ldrb	r3, [r4, #1]
 800faee:	2b2a      	cmp	r3, #42	; 0x2a
 800faf0:	d135      	bne.n	800fb5e <_vfiprintf_r+0x1ce>
 800faf2:	9b03      	ldr	r3, [sp, #12]
 800faf4:	1d1a      	adds	r2, r3, #4
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	9203      	str	r2, [sp, #12]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	bfb8      	it	lt
 800fafe:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb02:	3402      	adds	r4, #2
 800fb04:	9305      	str	r3, [sp, #20]
 800fb06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fbec <_vfiprintf_r+0x25c>
 800fb0a:	7821      	ldrb	r1, [r4, #0]
 800fb0c:	2203      	movs	r2, #3
 800fb0e:	4650      	mov	r0, sl
 800fb10:	f7f0 fb66 	bl	80001e0 <memchr>
 800fb14:	b140      	cbz	r0, 800fb28 <_vfiprintf_r+0x198>
 800fb16:	2340      	movs	r3, #64	; 0x40
 800fb18:	eba0 000a 	sub.w	r0, r0, sl
 800fb1c:	fa03 f000 	lsl.w	r0, r3, r0
 800fb20:	9b04      	ldr	r3, [sp, #16]
 800fb22:	4303      	orrs	r3, r0
 800fb24:	3401      	adds	r4, #1
 800fb26:	9304      	str	r3, [sp, #16]
 800fb28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb2c:	482c      	ldr	r0, [pc, #176]	; (800fbe0 <_vfiprintf_r+0x250>)
 800fb2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb32:	2206      	movs	r2, #6
 800fb34:	f7f0 fb54 	bl	80001e0 <memchr>
 800fb38:	2800      	cmp	r0, #0
 800fb3a:	d03f      	beq.n	800fbbc <_vfiprintf_r+0x22c>
 800fb3c:	4b29      	ldr	r3, [pc, #164]	; (800fbe4 <_vfiprintf_r+0x254>)
 800fb3e:	bb1b      	cbnz	r3, 800fb88 <_vfiprintf_r+0x1f8>
 800fb40:	9b03      	ldr	r3, [sp, #12]
 800fb42:	3307      	adds	r3, #7
 800fb44:	f023 0307 	bic.w	r3, r3, #7
 800fb48:	3308      	adds	r3, #8
 800fb4a:	9303      	str	r3, [sp, #12]
 800fb4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb4e:	443b      	add	r3, r7
 800fb50:	9309      	str	r3, [sp, #36]	; 0x24
 800fb52:	e767      	b.n	800fa24 <_vfiprintf_r+0x94>
 800fb54:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb58:	460c      	mov	r4, r1
 800fb5a:	2001      	movs	r0, #1
 800fb5c:	e7a5      	b.n	800faaa <_vfiprintf_r+0x11a>
 800fb5e:	2300      	movs	r3, #0
 800fb60:	3401      	adds	r4, #1
 800fb62:	9305      	str	r3, [sp, #20]
 800fb64:	4619      	mov	r1, r3
 800fb66:	f04f 0c0a 	mov.w	ip, #10
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb70:	3a30      	subs	r2, #48	; 0x30
 800fb72:	2a09      	cmp	r2, #9
 800fb74:	d903      	bls.n	800fb7e <_vfiprintf_r+0x1ee>
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d0c5      	beq.n	800fb06 <_vfiprintf_r+0x176>
 800fb7a:	9105      	str	r1, [sp, #20]
 800fb7c:	e7c3      	b.n	800fb06 <_vfiprintf_r+0x176>
 800fb7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb82:	4604      	mov	r4, r0
 800fb84:	2301      	movs	r3, #1
 800fb86:	e7f0      	b.n	800fb6a <_vfiprintf_r+0x1da>
 800fb88:	ab03      	add	r3, sp, #12
 800fb8a:	9300      	str	r3, [sp, #0]
 800fb8c:	462a      	mov	r2, r5
 800fb8e:	4b16      	ldr	r3, [pc, #88]	; (800fbe8 <_vfiprintf_r+0x258>)
 800fb90:	a904      	add	r1, sp, #16
 800fb92:	4630      	mov	r0, r6
 800fb94:	f7fd fca4 	bl	800d4e0 <_printf_float>
 800fb98:	4607      	mov	r7, r0
 800fb9a:	1c78      	adds	r0, r7, #1
 800fb9c:	d1d6      	bne.n	800fb4c <_vfiprintf_r+0x1bc>
 800fb9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fba0:	07d9      	lsls	r1, r3, #31
 800fba2:	d405      	bmi.n	800fbb0 <_vfiprintf_r+0x220>
 800fba4:	89ab      	ldrh	r3, [r5, #12]
 800fba6:	059a      	lsls	r2, r3, #22
 800fba8:	d402      	bmi.n	800fbb0 <_vfiprintf_r+0x220>
 800fbaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fbac:	f7ff f9d0 	bl	800ef50 <__retarget_lock_release_recursive>
 800fbb0:	89ab      	ldrh	r3, [r5, #12]
 800fbb2:	065b      	lsls	r3, r3, #25
 800fbb4:	f53f af12 	bmi.w	800f9dc <_vfiprintf_r+0x4c>
 800fbb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fbba:	e711      	b.n	800f9e0 <_vfiprintf_r+0x50>
 800fbbc:	ab03      	add	r3, sp, #12
 800fbbe:	9300      	str	r3, [sp, #0]
 800fbc0:	462a      	mov	r2, r5
 800fbc2:	4b09      	ldr	r3, [pc, #36]	; (800fbe8 <_vfiprintf_r+0x258>)
 800fbc4:	a904      	add	r1, sp, #16
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	f7fd ff2e 	bl	800da28 <_printf_i>
 800fbcc:	e7e4      	b.n	800fb98 <_vfiprintf_r+0x208>
 800fbce:	bf00      	nop
 800fbd0:	08010064 	.word	0x08010064
 800fbd4:	08010084 	.word	0x08010084
 800fbd8:	08010044 	.word	0x08010044
 800fbdc:	080101fc 	.word	0x080101fc
 800fbe0:	08010206 	.word	0x08010206
 800fbe4:	0800d4e1 	.word	0x0800d4e1
 800fbe8:	0800f96b 	.word	0x0800f96b
 800fbec:	08010202 	.word	0x08010202

0800fbf0 <_sbrk_r>:
 800fbf0:	b538      	push	{r3, r4, r5, lr}
 800fbf2:	4d06      	ldr	r5, [pc, #24]	; (800fc0c <_sbrk_r+0x1c>)
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	4604      	mov	r4, r0
 800fbf8:	4608      	mov	r0, r1
 800fbfa:	602b      	str	r3, [r5, #0]
 800fbfc:	f7f2 fc52 	bl	80024a4 <_sbrk>
 800fc00:	1c43      	adds	r3, r0, #1
 800fc02:	d102      	bne.n	800fc0a <_sbrk_r+0x1a>
 800fc04:	682b      	ldr	r3, [r5, #0]
 800fc06:	b103      	cbz	r3, 800fc0a <_sbrk_r+0x1a>
 800fc08:	6023      	str	r3, [r4, #0]
 800fc0a:	bd38      	pop	{r3, r4, r5, pc}
 800fc0c:	20000f18 	.word	0x20000f18

0800fc10 <__sread>:
 800fc10:	b510      	push	{r4, lr}
 800fc12:	460c      	mov	r4, r1
 800fc14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc18:	f000 f8e2 	bl	800fde0 <_read_r>
 800fc1c:	2800      	cmp	r0, #0
 800fc1e:	bfab      	itete	ge
 800fc20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800fc22:	89a3      	ldrhlt	r3, [r4, #12]
 800fc24:	181b      	addge	r3, r3, r0
 800fc26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800fc2a:	bfac      	ite	ge
 800fc2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800fc2e:	81a3      	strhlt	r3, [r4, #12]
 800fc30:	bd10      	pop	{r4, pc}

0800fc32 <__swrite>:
 800fc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc36:	461f      	mov	r7, r3
 800fc38:	898b      	ldrh	r3, [r1, #12]
 800fc3a:	05db      	lsls	r3, r3, #23
 800fc3c:	4605      	mov	r5, r0
 800fc3e:	460c      	mov	r4, r1
 800fc40:	4616      	mov	r6, r2
 800fc42:	d505      	bpl.n	800fc50 <__swrite+0x1e>
 800fc44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc48:	2302      	movs	r3, #2
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f000 f898 	bl	800fd80 <_lseek_r>
 800fc50:	89a3      	ldrh	r3, [r4, #12]
 800fc52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fc5a:	81a3      	strh	r3, [r4, #12]
 800fc5c:	4632      	mov	r2, r6
 800fc5e:	463b      	mov	r3, r7
 800fc60:	4628      	mov	r0, r5
 800fc62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc66:	f000 b817 	b.w	800fc98 <_write_r>

0800fc6a <__sseek>:
 800fc6a:	b510      	push	{r4, lr}
 800fc6c:	460c      	mov	r4, r1
 800fc6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc72:	f000 f885 	bl	800fd80 <_lseek_r>
 800fc76:	1c43      	adds	r3, r0, #1
 800fc78:	89a3      	ldrh	r3, [r4, #12]
 800fc7a:	bf15      	itete	ne
 800fc7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800fc7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800fc82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800fc86:	81a3      	strheq	r3, [r4, #12]
 800fc88:	bf18      	it	ne
 800fc8a:	81a3      	strhne	r3, [r4, #12]
 800fc8c:	bd10      	pop	{r4, pc}

0800fc8e <__sclose>:
 800fc8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc92:	f000 b831 	b.w	800fcf8 <_close_r>
	...

0800fc98 <_write_r>:
 800fc98:	b538      	push	{r3, r4, r5, lr}
 800fc9a:	4d07      	ldr	r5, [pc, #28]	; (800fcb8 <_write_r+0x20>)
 800fc9c:	4604      	mov	r4, r0
 800fc9e:	4608      	mov	r0, r1
 800fca0:	4611      	mov	r1, r2
 800fca2:	2200      	movs	r2, #0
 800fca4:	602a      	str	r2, [r5, #0]
 800fca6:	461a      	mov	r2, r3
 800fca8:	f7f2 fbab 	bl	8002402 <_write>
 800fcac:	1c43      	adds	r3, r0, #1
 800fcae:	d102      	bne.n	800fcb6 <_write_r+0x1e>
 800fcb0:	682b      	ldr	r3, [r5, #0]
 800fcb2:	b103      	cbz	r3, 800fcb6 <_write_r+0x1e>
 800fcb4:	6023      	str	r3, [r4, #0]
 800fcb6:	bd38      	pop	{r3, r4, r5, pc}
 800fcb8:	20000f18 	.word	0x20000f18

0800fcbc <__assert_func>:
 800fcbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fcbe:	4614      	mov	r4, r2
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	4b09      	ldr	r3, [pc, #36]	; (800fce8 <__assert_func+0x2c>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	4605      	mov	r5, r0
 800fcc8:	68d8      	ldr	r0, [r3, #12]
 800fcca:	b14c      	cbz	r4, 800fce0 <__assert_func+0x24>
 800fccc:	4b07      	ldr	r3, [pc, #28]	; (800fcec <__assert_func+0x30>)
 800fcce:	9100      	str	r1, [sp, #0]
 800fcd0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fcd4:	4906      	ldr	r1, [pc, #24]	; (800fcf0 <__assert_func+0x34>)
 800fcd6:	462b      	mov	r3, r5
 800fcd8:	f000 f81e 	bl	800fd18 <fiprintf>
 800fcdc:	f000 f89f 	bl	800fe1e <abort>
 800fce0:	4b04      	ldr	r3, [pc, #16]	; (800fcf4 <__assert_func+0x38>)
 800fce2:	461c      	mov	r4, r3
 800fce4:	e7f3      	b.n	800fcce <__assert_func+0x12>
 800fce6:	bf00      	nop
 800fce8:	2000016c 	.word	0x2000016c
 800fcec:	0801020d 	.word	0x0801020d
 800fcf0:	0801021a 	.word	0x0801021a
 800fcf4:	08010248 	.word	0x08010248

0800fcf8 <_close_r>:
 800fcf8:	b538      	push	{r3, r4, r5, lr}
 800fcfa:	4d06      	ldr	r5, [pc, #24]	; (800fd14 <_close_r+0x1c>)
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	4604      	mov	r4, r0
 800fd00:	4608      	mov	r0, r1
 800fd02:	602b      	str	r3, [r5, #0]
 800fd04:	f7f2 fb99 	bl	800243a <_close>
 800fd08:	1c43      	adds	r3, r0, #1
 800fd0a:	d102      	bne.n	800fd12 <_close_r+0x1a>
 800fd0c:	682b      	ldr	r3, [r5, #0]
 800fd0e:	b103      	cbz	r3, 800fd12 <_close_r+0x1a>
 800fd10:	6023      	str	r3, [r4, #0]
 800fd12:	bd38      	pop	{r3, r4, r5, pc}
 800fd14:	20000f18 	.word	0x20000f18

0800fd18 <fiprintf>:
 800fd18:	b40e      	push	{r1, r2, r3}
 800fd1a:	b503      	push	{r0, r1, lr}
 800fd1c:	4601      	mov	r1, r0
 800fd1e:	ab03      	add	r3, sp, #12
 800fd20:	4805      	ldr	r0, [pc, #20]	; (800fd38 <fiprintf+0x20>)
 800fd22:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd26:	6800      	ldr	r0, [r0, #0]
 800fd28:	9301      	str	r3, [sp, #4]
 800fd2a:	f7ff fe31 	bl	800f990 <_vfiprintf_r>
 800fd2e:	b002      	add	sp, #8
 800fd30:	f85d eb04 	ldr.w	lr, [sp], #4
 800fd34:	b003      	add	sp, #12
 800fd36:	4770      	bx	lr
 800fd38:	2000016c 	.word	0x2000016c

0800fd3c <_fstat_r>:
 800fd3c:	b538      	push	{r3, r4, r5, lr}
 800fd3e:	4d07      	ldr	r5, [pc, #28]	; (800fd5c <_fstat_r+0x20>)
 800fd40:	2300      	movs	r3, #0
 800fd42:	4604      	mov	r4, r0
 800fd44:	4608      	mov	r0, r1
 800fd46:	4611      	mov	r1, r2
 800fd48:	602b      	str	r3, [r5, #0]
 800fd4a:	f7f2 fb82 	bl	8002452 <_fstat>
 800fd4e:	1c43      	adds	r3, r0, #1
 800fd50:	d102      	bne.n	800fd58 <_fstat_r+0x1c>
 800fd52:	682b      	ldr	r3, [r5, #0]
 800fd54:	b103      	cbz	r3, 800fd58 <_fstat_r+0x1c>
 800fd56:	6023      	str	r3, [r4, #0]
 800fd58:	bd38      	pop	{r3, r4, r5, pc}
 800fd5a:	bf00      	nop
 800fd5c:	20000f18 	.word	0x20000f18

0800fd60 <_isatty_r>:
 800fd60:	b538      	push	{r3, r4, r5, lr}
 800fd62:	4d06      	ldr	r5, [pc, #24]	; (800fd7c <_isatty_r+0x1c>)
 800fd64:	2300      	movs	r3, #0
 800fd66:	4604      	mov	r4, r0
 800fd68:	4608      	mov	r0, r1
 800fd6a:	602b      	str	r3, [r5, #0]
 800fd6c:	f7f2 fb81 	bl	8002472 <_isatty>
 800fd70:	1c43      	adds	r3, r0, #1
 800fd72:	d102      	bne.n	800fd7a <_isatty_r+0x1a>
 800fd74:	682b      	ldr	r3, [r5, #0]
 800fd76:	b103      	cbz	r3, 800fd7a <_isatty_r+0x1a>
 800fd78:	6023      	str	r3, [r4, #0]
 800fd7a:	bd38      	pop	{r3, r4, r5, pc}
 800fd7c:	20000f18 	.word	0x20000f18

0800fd80 <_lseek_r>:
 800fd80:	b538      	push	{r3, r4, r5, lr}
 800fd82:	4d07      	ldr	r5, [pc, #28]	; (800fda0 <_lseek_r+0x20>)
 800fd84:	4604      	mov	r4, r0
 800fd86:	4608      	mov	r0, r1
 800fd88:	4611      	mov	r1, r2
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	602a      	str	r2, [r5, #0]
 800fd8e:	461a      	mov	r2, r3
 800fd90:	f7f2 fb7a 	bl	8002488 <_lseek>
 800fd94:	1c43      	adds	r3, r0, #1
 800fd96:	d102      	bne.n	800fd9e <_lseek_r+0x1e>
 800fd98:	682b      	ldr	r3, [r5, #0]
 800fd9a:	b103      	cbz	r3, 800fd9e <_lseek_r+0x1e>
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	bd38      	pop	{r3, r4, r5, pc}
 800fda0:	20000f18 	.word	0x20000f18

0800fda4 <__ascii_mbtowc>:
 800fda4:	b082      	sub	sp, #8
 800fda6:	b901      	cbnz	r1, 800fdaa <__ascii_mbtowc+0x6>
 800fda8:	a901      	add	r1, sp, #4
 800fdaa:	b142      	cbz	r2, 800fdbe <__ascii_mbtowc+0x1a>
 800fdac:	b14b      	cbz	r3, 800fdc2 <__ascii_mbtowc+0x1e>
 800fdae:	7813      	ldrb	r3, [r2, #0]
 800fdb0:	600b      	str	r3, [r1, #0]
 800fdb2:	7812      	ldrb	r2, [r2, #0]
 800fdb4:	1e10      	subs	r0, r2, #0
 800fdb6:	bf18      	it	ne
 800fdb8:	2001      	movne	r0, #1
 800fdba:	b002      	add	sp, #8
 800fdbc:	4770      	bx	lr
 800fdbe:	4610      	mov	r0, r2
 800fdc0:	e7fb      	b.n	800fdba <__ascii_mbtowc+0x16>
 800fdc2:	f06f 0001 	mvn.w	r0, #1
 800fdc6:	e7f8      	b.n	800fdba <__ascii_mbtowc+0x16>

0800fdc8 <__malloc_lock>:
 800fdc8:	4801      	ldr	r0, [pc, #4]	; (800fdd0 <__malloc_lock+0x8>)
 800fdca:	f7ff b8c0 	b.w	800ef4e <__retarget_lock_acquire_recursive>
 800fdce:	bf00      	nop
 800fdd0:	20000f0c 	.word	0x20000f0c

0800fdd4 <__malloc_unlock>:
 800fdd4:	4801      	ldr	r0, [pc, #4]	; (800fddc <__malloc_unlock+0x8>)
 800fdd6:	f7ff b8bb 	b.w	800ef50 <__retarget_lock_release_recursive>
 800fdda:	bf00      	nop
 800fddc:	20000f0c 	.word	0x20000f0c

0800fde0 <_read_r>:
 800fde0:	b538      	push	{r3, r4, r5, lr}
 800fde2:	4d07      	ldr	r5, [pc, #28]	; (800fe00 <_read_r+0x20>)
 800fde4:	4604      	mov	r4, r0
 800fde6:	4608      	mov	r0, r1
 800fde8:	4611      	mov	r1, r2
 800fdea:	2200      	movs	r2, #0
 800fdec:	602a      	str	r2, [r5, #0]
 800fdee:	461a      	mov	r2, r3
 800fdf0:	f7f2 faea 	bl	80023c8 <_read>
 800fdf4:	1c43      	adds	r3, r0, #1
 800fdf6:	d102      	bne.n	800fdfe <_read_r+0x1e>
 800fdf8:	682b      	ldr	r3, [r5, #0]
 800fdfa:	b103      	cbz	r3, 800fdfe <_read_r+0x1e>
 800fdfc:	6023      	str	r3, [r4, #0]
 800fdfe:	bd38      	pop	{r3, r4, r5, pc}
 800fe00:	20000f18 	.word	0x20000f18

0800fe04 <__ascii_wctomb>:
 800fe04:	b149      	cbz	r1, 800fe1a <__ascii_wctomb+0x16>
 800fe06:	2aff      	cmp	r2, #255	; 0xff
 800fe08:	bf85      	ittet	hi
 800fe0a:	238a      	movhi	r3, #138	; 0x8a
 800fe0c:	6003      	strhi	r3, [r0, #0]
 800fe0e:	700a      	strbls	r2, [r1, #0]
 800fe10:	f04f 30ff 	movhi.w	r0, #4294967295
 800fe14:	bf98      	it	ls
 800fe16:	2001      	movls	r0, #1
 800fe18:	4770      	bx	lr
 800fe1a:	4608      	mov	r0, r1
 800fe1c:	4770      	bx	lr

0800fe1e <abort>:
 800fe1e:	b508      	push	{r3, lr}
 800fe20:	2006      	movs	r0, #6
 800fe22:	f000 f82b 	bl	800fe7c <raise>
 800fe26:	2001      	movs	r0, #1
 800fe28:	f7f2 fac4 	bl	80023b4 <_exit>

0800fe2c <_raise_r>:
 800fe2c:	291f      	cmp	r1, #31
 800fe2e:	b538      	push	{r3, r4, r5, lr}
 800fe30:	4604      	mov	r4, r0
 800fe32:	460d      	mov	r5, r1
 800fe34:	d904      	bls.n	800fe40 <_raise_r+0x14>
 800fe36:	2316      	movs	r3, #22
 800fe38:	6003      	str	r3, [r0, #0]
 800fe3a:	f04f 30ff 	mov.w	r0, #4294967295
 800fe3e:	bd38      	pop	{r3, r4, r5, pc}
 800fe40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fe42:	b112      	cbz	r2, 800fe4a <_raise_r+0x1e>
 800fe44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe48:	b94b      	cbnz	r3, 800fe5e <_raise_r+0x32>
 800fe4a:	4620      	mov	r0, r4
 800fe4c:	f000 f830 	bl	800feb0 <_getpid_r>
 800fe50:	462a      	mov	r2, r5
 800fe52:	4601      	mov	r1, r0
 800fe54:	4620      	mov	r0, r4
 800fe56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe5a:	f000 b817 	b.w	800fe8c <_kill_r>
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d00a      	beq.n	800fe78 <_raise_r+0x4c>
 800fe62:	1c59      	adds	r1, r3, #1
 800fe64:	d103      	bne.n	800fe6e <_raise_r+0x42>
 800fe66:	2316      	movs	r3, #22
 800fe68:	6003      	str	r3, [r0, #0]
 800fe6a:	2001      	movs	r0, #1
 800fe6c:	e7e7      	b.n	800fe3e <_raise_r+0x12>
 800fe6e:	2400      	movs	r4, #0
 800fe70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fe74:	4628      	mov	r0, r5
 800fe76:	4798      	blx	r3
 800fe78:	2000      	movs	r0, #0
 800fe7a:	e7e0      	b.n	800fe3e <_raise_r+0x12>

0800fe7c <raise>:
 800fe7c:	4b02      	ldr	r3, [pc, #8]	; (800fe88 <raise+0xc>)
 800fe7e:	4601      	mov	r1, r0
 800fe80:	6818      	ldr	r0, [r3, #0]
 800fe82:	f7ff bfd3 	b.w	800fe2c <_raise_r>
 800fe86:	bf00      	nop
 800fe88:	2000016c 	.word	0x2000016c

0800fe8c <_kill_r>:
 800fe8c:	b538      	push	{r3, r4, r5, lr}
 800fe8e:	4d07      	ldr	r5, [pc, #28]	; (800feac <_kill_r+0x20>)
 800fe90:	2300      	movs	r3, #0
 800fe92:	4604      	mov	r4, r0
 800fe94:	4608      	mov	r0, r1
 800fe96:	4611      	mov	r1, r2
 800fe98:	602b      	str	r3, [r5, #0]
 800fe9a:	f7f2 fa7b 	bl	8002394 <_kill>
 800fe9e:	1c43      	adds	r3, r0, #1
 800fea0:	d102      	bne.n	800fea8 <_kill_r+0x1c>
 800fea2:	682b      	ldr	r3, [r5, #0]
 800fea4:	b103      	cbz	r3, 800fea8 <_kill_r+0x1c>
 800fea6:	6023      	str	r3, [r4, #0]
 800fea8:	bd38      	pop	{r3, r4, r5, pc}
 800feaa:	bf00      	nop
 800feac:	20000f18 	.word	0x20000f18

0800feb0 <_getpid_r>:
 800feb0:	f7f2 ba68 	b.w	8002384 <_getpid>

0800feb4 <_init>:
 800feb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800feb6:	bf00      	nop
 800feb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800feba:	bc08      	pop	{r3}
 800febc:	469e      	mov	lr, r3
 800febe:	4770      	bx	lr

0800fec0 <_fini>:
 800fec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fec2:	bf00      	nop
 800fec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fec6:	bc08      	pop	{r3}
 800fec8:	469e      	mov	lr, r3
 800feca:	4770      	bx	lr
