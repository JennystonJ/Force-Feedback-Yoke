
Force Feedback Yoke.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f564  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800f708  0800f708  00010708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fee0  0800fee0  000112e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fee0  0800fee0  00010ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fee8  0800fee8  000112e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fee8  0800fee8  00010ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800feec  0800feec  00010eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e4  20000000  0800fef0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ea8  200002e4  080101d4  000112e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000118c  080101d4  0001218c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e10e  00000000  00000000  00011314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e6a  00000000  00000000  0002f422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a68  00000000  00000000  00034290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001425  00000000  00000000  00035cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c1c6  00000000  00000000  0003711d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022e0d  00000000  00000000  000532e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000985ca  00000000  00000000  000760f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e6ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fcc  00000000  00000000  0010e700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001166cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e4 	.word	0x200002e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f6ec 	.word	0x0800f6ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e8 	.word	0x200002e8
 80001dc:	0800f6ec 	.word	0x0800f6ec

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_ldivmod>:
 8000bb8:	b97b      	cbnz	r3, 8000bda <__aeabi_ldivmod+0x22>
 8000bba:	b972      	cbnz	r2, 8000bda <__aeabi_ldivmod+0x22>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bfbe      	ittt	lt
 8000bc0:	2000      	movlt	r0, #0
 8000bc2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bc6:	e006      	blt.n	8000bd6 <__aeabi_ldivmod+0x1e>
 8000bc8:	bf08      	it	eq
 8000bca:	2800      	cmpeq	r0, #0
 8000bcc:	bf1c      	itt	ne
 8000bce:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd6:	f000 b9b5 	b.w	8000f44 <__aeabi_idiv0>
 8000bda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be2:	2900      	cmp	r1, #0
 8000be4:	db09      	blt.n	8000bfa <__aeabi_ldivmod+0x42>
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	db1a      	blt.n	8000c20 <__aeabi_ldivmod+0x68>
 8000bea:	f000 f84d 	bl	8000c88 <__udivmoddi4>
 8000bee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf6:	b004      	add	sp, #16
 8000bf8:	4770      	bx	lr
 8000bfa:	4240      	negs	r0, r0
 8000bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	db1b      	blt.n	8000c3c <__aeabi_ldivmod+0x84>
 8000c04:	f000 f840 	bl	8000c88 <__udivmoddi4>
 8000c08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c10:	b004      	add	sp, #16
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	4252      	negs	r2, r2
 8000c1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c1e:	4770      	bx	lr
 8000c20:	4252      	negs	r2, r2
 8000c22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c26:	f000 f82f 	bl	8000c88 <__udivmoddi4>
 8000c2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c32:	b004      	add	sp, #16
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	4770      	bx	lr
 8000c3c:	4252      	negs	r2, r2
 8000c3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c42:	f000 f821 	bl	8000c88 <__udivmoddi4>
 8000c46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4e:	b004      	add	sp, #16
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <ButtonInit>:
#include "button.h"
#include <stddef.h>

void ButtonInit(Button_t *button, int (*ButtonReadState)(Button_t *button)) {
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]

	button->ButtonReadState = ButtonReadState;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	683a      	ldr	r2, [r7, #0]
 8000f56:	601a      	str	r2, [r3, #0]
	button->ButtonStateChangedCallback = NULL;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	605a      	str	r2, [r3, #4]

	button->state = BUTTON_STATE_IDLE;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	741a      	strb	r2, [r3, #16]
	button->pressed = false;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	721a      	strb	r2, [r3, #8]
	button->previouslyPressed = button->pressed;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	7a1a      	ldrb	r2, [r3, #8]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	725a      	strb	r2, [r3, #9]
	button->steadyCount = 0;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]


}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <ButtonIsPressed>:

bool ButtonIsPressed(Button_t *button) {
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	return button->pressed;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7a1b      	ldrb	r3, [r3, #8]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <ButtonProcessInt>:

void ButtonProcessInt(Button_t *button) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

	// Read current state of button and check if there's a change
	bool readingPressed = button->ButtonReadState(button) == 1;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	4798      	blx	r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2301      	moveq	r3, #1
 8000fb4:	2300      	movne	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
	bool changedState = readingPressed != button->previouslyPressed;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	7a5b      	ldrb	r3, [r3, #9]
 8000fbc:	7bfa      	ldrb	r2, [r7, #15]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	bf14      	ite	ne
 8000fc2:	2301      	movne	r3, #1
 8000fc4:	2300      	moveq	r3, #0
 8000fc6:	73bb      	strb	r3, [r7, #14]

	if(button->state == BUTTON_STATE_IDLE && changedState) {
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7c1b      	ldrb	r3, [r3, #16]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d106      	bne.n	8000fde <ButtonProcessInt+0x42>
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <ButtonProcessInt+0x42>

		button->state = BUTTON_STATE_DEBOUNCING;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	741a      	strb	r2, [r3, #16]
 8000fdc:	e028      	b.n	8001030 <ButtonProcessInt+0x94>
	}
	else if(button->state == BUTTON_STATE_DEBOUNCING) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7c1b      	ldrb	r3, [r3, #16]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d121      	bne.n	800102a <ButtonProcessInt+0x8e>

		if(changedState) {
 8000fe6:	7bbb      	ldrb	r3, [r7, #14]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <ButtonProcessInt+0x58>
			// Button is unsteady, reset counter
			button->steadyCount = 0;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	e01d      	b.n	8001030 <ButtonProcessInt+0x94>
		}
		else {
			button->steadyCount++;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	1c5a      	adds	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	60da      	str	r2, [r3, #12]

			// Check if button has remained in the same state for
			// max steady count duration
			if(button->steadyCount >= BUTTON_MAX_STEADY_COUNT) {
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	2b09      	cmp	r3, #9
 8001004:	dd14      	ble.n	8001030 <ButtonProcessInt+0x94>
				// Reset counter and update button state
				button->steadyCount = 0;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	60da      	str	r2, [r3, #12]
				button->pressed = readingPressed;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	721a      	strb	r2, [r3, #8]
				button->state = BUTTON_STATE_IDLE;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	741a      	strb	r2, [r3, #16]

				// Perform callback for button state changed if available
				if(button->ButtonStateChangedCallback != NULL) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <ButtonProcessInt+0x94>
					button->ButtonStateChangedCallback(button);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	4798      	blx	r3
 8001028:	e002      	b.n	8001030 <ButtonProcessInt+0x94>
	}
	else {

		// If the button state is neither idle nor debouncing,
		// set to idle (code should not reach here)
		button->state = BUTTON_STATE_IDLE;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	741a      	strb	r2, [r3, #16]
	}

	// Update previous state for next iteration
	button->previouslyPressed = readingPressed;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7bfa      	ldrb	r2, [r7, #15]
 8001034:	725a      	strb	r2, [r3, #9]
}
 8001036:	bf00      	nop
 8001038:	3710      	adds	r7, #16
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <ButtonSetStateChangedCallback>:

void ButtonSetStateChangedCallback(Button_t *button,
		void (*ButtonStateChangedCallback)(Button_t *button)) {
 800103e:	b480      	push	{r7}
 8001040:	b083      	sub	sp, #12
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
	button->ButtonStateChangedCallback = ButtonStateChangedCallback;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	683a      	ldr	r2, [r7, #0]
 800104c:	605a      	str	r2, [r3, #4]
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
	...

0800105c <delayMsInit>:
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <delayMsInit+0x1c>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000300 	.word	0x20000300

0800107c <delayMs>:
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <delayMs+0x18>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	4798      	blx	r3
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000300 	.word	0x20000300

08001098 <EncoderInit>:
 *      Author: Jennyston
 */

#include "encoder.h"

void EncoderInit(Encoder_t *encoder, EncoderInterface_t interface) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	e883 0006 	stmia.w	r3, {r1, r2}
	encoder->interface = interface;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	461a      	mov	r2, r3
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010b0:	e882 0003 	stmia.w	r2, {r0, r1}

	encoder->countPerRev = ENCODER_DEFAULT_COUNT_PER_REV;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010ba:	611a      	str	r2, [r3, #16]
	encoder->totalCount = interface.GetEncoderSensorCount(&interface);
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	1d3a      	adds	r2, r7, #4
 80010c0:	4610      	mov	r0, r2
 80010c2:	4798      	blx	r3
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	609a      	str	r2, [r3, #8]
	encoder->prevHardCount = encoder->totalCount;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	60da      	str	r2, [r3, #12]
	encoder->speed = 0;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <EncoderGetCount>:

int EncoderGetCount(Encoder_t *encoder) {
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	return encoder->totalCount;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	689b      	ldr	r3, [r3, #8]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <EncoderSetCount>:

void EncoderSetCount(Encoder_t *encoder, int count) {
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
	encoder->totalCount = count;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	609a      	str	r2, [r3, #8]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <EncoderUpdate>:

int EncoderGetCountPerRev(Encoder_t *encoder) {
	return encoder->countPerRev;
}

void EncoderUpdate(Encoder_t *encoder, float deltaTimeMs) {
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	ed87 0a00 	vstr	s0, [r7]

	int deltaCount;
	int currentHardCount =
			encoder->interface.GetEncoderSensorCount(&encoder->interface);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	4610      	mov	r0, r2
 800112a:	4798      	blx	r3
 800112c:	6138      	str	r0, [r7, #16]
	int countPerRevHalf = encoder->countPerRev/2;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	0fda      	lsrs	r2, r3, #31
 8001134:	4413      	add	r3, r2
 8001136:	105b      	asrs	r3, r3, #1
 8001138:	60fb      	str	r3, [r7, #12]

	// Calculate deltaCount based on current and previous counts
	if(currentHardCount + countPerRevHalf < encoder->prevHardCount) {
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	441a      	add	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	da08      	bge.n	800115a <EncoderUpdate+0x44>
		// Handle overflow
		deltaCount = (encoder->countPerRev - encoder->prevHardCount) +
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4413      	add	r3, r2
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	e015      	b.n	8001186 <EncoderUpdate+0x70>
				currentHardCount;
	}
	else if(currentHardCount > encoder->prevHardCount + countPerRevHalf) {
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68da      	ldr	r2, [r3, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	dd09      	ble.n	800117c <EncoderUpdate+0x66>
		// Handle underflow
		deltaCount = -((encoder->countPerRev - currentHardCount) +
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691a      	ldr	r2, [r3, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad2      	subs	r2, r2, r3
				encoder->prevHardCount);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
		deltaCount = -((encoder->countPerRev - currentHardCount) +
 8001174:	4413      	add	r3, r2
 8001176:	425b      	negs	r3, r3
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	e004      	b.n	8001186 <EncoderUpdate+0x70>
	}
	else {
		// default, simply add to total count
		deltaCount = currentHardCount - encoder->prevHardCount;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	617b      	str	r3, [r7, #20]
	}

	// Calculate and update speed
	encoder->speed = deltaCount / deltaTimeMs;
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	ee07 3a90 	vmov	s15, r3
 800118c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001190:	ed97 7a00 	vldr	s14, [r7]
 8001194:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edc3 7a05 	vstr	s15, [r3, #20]

	// Update totalCount
	encoder->totalCount += deltaCount;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	441a      	add	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	609a      	str	r2, [r3, #8]

	// Update previous hardware count
	encoder->prevHardCount = currentHardCount;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	60da      	str	r2, [r3, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <UpdateFFBSpeed>:
#include "utilities/utilities.h"
#include "force_feedback_controller.h"
#include "delay.h"
#include <math.h>

void UpdateFFBSpeed(FFBController_t *ffb, int dt) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
	ffb->speedDt += dt;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	441a      	add	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	629a      	str	r2, [r3, #40]	@ 0x28

	// Check if required time for speed calculation has passed
	if(ffb->speedDt >= FFB_AVG_SPEED_DT) {
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80011d6:	4293      	cmp	r3, r2
 80011d8:	dd1e      	ble.n	8001218 <UpdateFFBSpeed+0x60>
		ffb->speedDt -= FFB_AVG_SPEED_DT;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011de:	f5a3 539c 	sub.w	r3, r3, #4992	@ 0x1380
 80011e2:	3b08      	subs	r3, #8
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6293      	str	r3, [r2, #40]	@ 0x28

		// Calculate new speed
		int encoderReading = EncoderGetCount(ffb->encoder);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff78 	bl	80010e2 <EncoderGetCount>
 80011f2:	60f8      	str	r0, [r7, #12]
		ffb->speed = (encoderReading - ffb->prevEncoderCountAvg)/
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001204:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001220 <UpdateFFBSpeed+0x68>
 8001208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
				(float)FFB_AVG_SPEED_DT;
		ffb->prevEncoderCountAvg = encoderReading;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	459c4000 	.word	0x459c4000

08001224 <FFBInit>:

void FFBInit(FFBController_t *ffb, Motor_t *motor, Encoder_t *encoder) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
	ffb->state = FFB_STOPPED;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2200      	movs	r2, #0
 8001234:	731a      	strb	r2, [r3, #12]
	ffb->homingState = FFB_UNHOMED;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2200      	movs	r2, #0
 800123a:	735a      	strb	r2, [r3, #13]

	ffb->motor = motor;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	601a      	str	r2, [r3, #0]
	ffb->encoder = encoder;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	609a      	str	r2, [r3, #8]

	ffb->constantGain = 1;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800124e:	615a      	str	r2, [r3, #20]
	ffb->periodicGain = 0;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
	ffb->springGain = 10;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4a31      	ldr	r2, [pc, #196]	@ (8001320 <FFBInit+0xfc>)
 800125c:	61da      	str	r2, [r3, #28]
	ffb->damperGain = 2;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001264:	621a      	str	r2, [r3, #32]

	// Temporarily disable assist until better implementation
	ffb->assistMin = 0;//450;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	631a      	str	r2, [r3, #48]	@ 0x30
	ffb->assistGain = 0;//40000;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	635a      	str	r2, [r3, #52]	@ 0x34

	ffb->gain = MOTOR_POWER_MAX;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	4a2a      	ldr	r2, [pc, #168]	@ (8001324 <FFBInit+0x100>)
 800127a:	611a      	str	r2, [r3, #16]
	ffb->motorKtConstant = 0.0265;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	4a2a      	ldr	r2, [pc, #168]	@ (8001328 <FFBInit+0x104>)
 8001280:	605a      	str	r2, [r3, #4]
	ffb->minLock = -1000;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4a29      	ldr	r2, [pc, #164]	@ (800132c <FFBInit+0x108>)
 8001286:	639a      	str	r2, [r3, #56]	@ 0x38
	ffb->maxLock = 1000;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800128e:	63da      	str	r2, [r3, #60]	@ 0x3c
	ffb->lockPower = 4000;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001296:	641a      	str	r2, [r3, #64]	@ 0x40
	ffb->lockKp = 0.0035f;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4a25      	ldr	r2, [pc, #148]	@ (8001330 <FFBInit+0x10c>)
 800129c:	645a      	str	r2, [r3, #68]	@ 0x44
	ffb->lockKd = 25000.0f;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4a24      	ldr	r2, [pc, #144]	@ (8001334 <FFBInit+0x110>)
 80012a2:	649a      	str	r2, [r3, #72]	@ 0x48

	ffb->prevEncoderCountAvg = EncoderGetCount(encoder);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ff1c 	bl	80010e2 <EncoderGetCount>
 80012aa:	4602      	mov	r2, r0
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	625a      	str	r2, [r3, #36]	@ 0x24
	ffb->speed = 0;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	ffb->speedDt = 0;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2200      	movs	r2, #0
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28

	// Initialize all forces to 0
	FFBSetConstantStrength(ffb, 0);
 80012be:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001338 <FFBInit+0x114>
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f000 f83a 	bl	800133c <FFBSetConstantStrength>
	FFBPeriodicInit(&ffb->param.periodic, 0, 0, 0);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3350      	adds	r3, #80	@ 0x50
 80012cc:	ed9f 1a1a 	vldr	s2, [pc, #104]	@ 8001338 <FFBInit+0x114>
 80012d0:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001338 <FFBInit+0x114>
 80012d4:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8001338 <FFBInit+0x114>
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fb75 	bl	80019c8 <FFBPeriodicInit>
	FFBSpringParam_t spring = {
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	f04f 0300 	mov.w	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
 80012ea:	f04f 0300 	mov.w	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
			.offset = 0,
			.strength = 0,
			.minimumSpringForce = 0
	};
	FFBSetSpringParams(ffb, spring);
 80012f0:	edd7 6a05 	vldr	s13, [r7, #20]
 80012f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80012f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80012fc:	eeb0 0a66 	vmov.f32	s0, s13
 8001300:	eef0 0a47 	vmov.f32	s1, s14
 8001304:	eeb0 1a67 	vmov.f32	s2, s15
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 f826 	bl	800135a <FFBSetSpringParams>
	FFBSetDamper(ffb, 0);
 800130e:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8001338 <FFBInit+0x114>
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f000 f83d 	bl	8001392 <FFBSetDamper>
}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	41200000 	.word	0x41200000
 8001324:	4595f800 	.word	0x4595f800
 8001328:	3cd91687 	.word	0x3cd91687
 800132c:	fffffc18 	.word	0xfffffc18
 8001330:	3b656042 	.word	0x3b656042
 8001334:	46c35000 	.word	0x46c35000
 8001338:	00000000 	.word	0x00000000

0800133c <FFBSetConstantStrength>:

void FFBSetConstantStrength(FFBController_t *ffb, float constantStrength) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	ed87 0a00 	vstr	s0, [r7]
	ffb->param.constantStrength = constantStrength;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <FFBSetSpringParams>:

void FFBSetPeriodicParams(FFBController_t *ffb, FFBPeriodicParam_t periodic) {
	ffb->param.periodic = periodic;
}

void FFBSetSpringParams(FFBController_t *ffb, FFBSpringParam_t spring) {
 800135a:	b480      	push	{r7}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	60f8      	str	r0, [r7, #12]
 8001362:	eef0 6a40 	vmov.f32	s13, s0
 8001366:	eeb0 7a60 	vmov.f32	s14, s1
 800136a:	eef0 7a41 	vmov.f32	s15, s2
 800136e:	edc7 6a00 	vstr	s13, [r7]
 8001372:	ed87 7a01 	vstr	s14, [r7, #4]
 8001376:	edc7 7a02 	vstr	s15, [r7, #8]
	ffb->param.spring = spring;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3360      	adds	r3, #96	@ 0x60
 800137e:	463a      	mov	r2, r7
 8001380:	ca07      	ldmia	r2, {r0, r1, r2}
 8001382:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <FFBSetDamper>:

void FFBSetDamper(FFBController_t *ffb, float damperStrength) {
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	ed87 0a00 	vstr	s0, [r7]
	ffb->param.damperStrength = damperStrength;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <FFBCalcForces>:

float FFBCalcForces(FFBController_t *ffb, float measuredPosition, float speed,
		int deltaTime) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	ed2d 8b02 	vpush	{d8}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	ed87 0a02 	vstr	s0, [r7, #8]
 80013c0:	edc7 0a01 	vstr	s1, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]

	// Check if axis is outside lock range
	if(measuredPosition < ffb->minLock) {
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80013d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013de:	d520      	bpl.n	8001422 <FFBCalcForces+0x72>

		return ffb->lockKp * powf(ffb->minLock - measuredPosition, 2.0f) -
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	ed93 8a11 	vldr	s16, [r3, #68]	@ 0x44
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fa:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80013fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001402:	f00a fc01 	bl	800bc08 <powf>
 8001406:	eef0 7a40 	vmov.f32	s15, s0
 800140a:	ee28 7a27 	vmul.f32	s14, s16, s15
				ffb->lockKd * speed;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8001414:	edd7 7a01 	vldr	s15, [r7, #4]
 8001418:	ee66 7aa7 	vmul.f32	s15, s13, s15
		return ffb->lockKp * powf(ffb->minLock - measuredPosition, 2.0f) -
 800141c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001420:	e093      	b.n	800154a <FFBCalcForces+0x19a>
	}
	else if(measuredPosition > ffb->maxLock) {
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143a:	dd22      	ble.n	8001482 <FFBCalcForces+0xd2>

		return -(ffb->lockKp * powf(ffb->maxLock - measuredPosition, 2.0f) -
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	ed93 8a11 	vldr	s16, [r3, #68]	@ 0x44
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001446:	ee07 3a90 	vmov	s15, r3
 800144a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800144e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001456:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800145a:	eeb0 0a67 	vmov.f32	s0, s15
 800145e:	f00a fbd3 	bl	800bc08 <powf>
 8001462:	eef0 7a40 	vmov.f32	s15, s0
 8001466:	ee28 7a27 	vmul.f32	s14, s16, s15
				ffb->lockKd * speed);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	edd3 6a12 	vldr	s13, [r3, #72]	@ 0x48
 8001470:	edd7 7a01 	vldr	s15, [r7, #4]
 8001474:	ee66 7aa7 	vmul.f32	s15, s13, s15
		return -(ffb->lockKp * powf(ffb->maxLock - measuredPosition, 2.0f) -
 8001478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147c:	eef1 7a67 	vneg.f32	s15, s15
 8001480:	e063      	b.n	800154a <FFBCalcForces+0x19a>
	}
	// Axis is within lock range, perform calculations
	else {

		float constantForce = FFBCalcConstantForce(ffb->constantGain,
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	edd3 7a05 	vldr	s15, [r3, #20]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800148e:	eef0 0a47 	vmov.f32	s1, s14
 8001492:	eeb0 0a67 	vmov.f32	s0, s15
 8001496:	f000 f9c5 	bl	8001824 <FFBCalcConstantForce>
 800149a:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
				ffb->param.constantStrength);

		float periodicForce = FFBCalcPeriodicForce(ffb->periodicGain,
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3350      	adds	r3, #80	@ 0x50
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	ee07 2a10 	vmov	s14, r2
 80014ae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014b2:	eef0 0a47 	vmov.f32	s1, s14
 80014b6:	4618      	mov	r0, r3
 80014b8:	eeb0 0a67 	vmov.f32	s0, s15
 80014bc:	f000 f9c6 	bl	800184c <FFBCalcPeriodicForce>
 80014c0:	ed87 0a08 	vstr	s0, [r7, #32]
				&ffb->param.periodic, deltaTime);

		float springForce = FFBCalcSpringForce(ffb->springGain, measuredPosition,
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	3360      	adds	r3, #96	@ 0x60
 80014ce:	4618      	mov	r0, r3
 80014d0:	edd7 0a02 	vldr	s1, [r7, #8]
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	f000 f9d4 	bl	8001884 <FFBCalcSpringForce>
 80014dc:	ed87 0a07 	vstr	s0, [r7, #28]
				&ffb->param.spring);

		float damperForce = FFBCalcDamperForce(ffb->damperGain,
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	edd3 7a08 	vldr	s15, [r3, #32]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	ed93 7a1b 	vldr	s14, [r3, #108]	@ 0x6c
 80014ec:	eef0 0a47 	vmov.f32	s1, s14
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	f000 fa15 	bl	8001922 <FFBCalcDamperForce>
 80014f8:	ed87 0a06 	vstr	s0, [r7, #24]
				ffb->param.damperStrength);

		float assistForce = FFBCalcAssist(ffb->assistGain, ffb->assistMin,
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001508:	ed97 1a01 	vldr	s2, [r7, #4]
 800150c:	eef0 0a47 	vmov.f32	s1, s14
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	f000 fa20 	bl	8001958 <FFBCalcAssist>
 8001518:	ed87 0a05 	vstr	s0, [r7, #20]
				speed);

		// Assist force gain is independent to prevent runaway
		return ffb->gain *
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	ed93 7a04 	vldr	s14, [r3, #16]
				(constantForce + periodicForce + springForce + damperForce) +
 8001522:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001526:	edd7 7a08 	vldr	s15, [r7, #32]
 800152a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800152e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001532:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001536:	edd7 7a06 	vldr	s15, [r7, #24]
 800153a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		return ffb->gain *
 800153e:	ee27 7a27 	vmul.f32	s14, s14, s15
				(constantForce + periodicForce + springForce + damperForce) +
 8001542:	edd7 7a05 	vldr	s15, [r7, #20]
 8001546:	ee77 7a27 	vadd.f32	s15, s14, s15
				assistForce;
	}
}
 800154a:	eeb0 0a67 	vmov.f32	s0, s15
 800154e:	3728      	adds	r7, #40	@ 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	ecbd 8b02 	vpop	{d8}
 8001556:	bd80      	pop	{r7, pc}

08001558 <FFBUpdate>:

void FFBUpdate(FFBController_t *ffb, int deltaTimeUs) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
	UpdateFFBSpeed(ffb, deltaTimeUs);
 8001562:	6839      	ldr	r1, [r7, #0]
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff fe27 	bl	80011b8 <UpdateFFBSpeed>

	switch(ffb->state){
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	7b1b      	ldrb	r3, [r3, #12]
 800156e:	2b02      	cmp	r3, #2
 8001570:	d036      	beq.n	80015e0 <FFBUpdate+0x88>
 8001572:	2b02      	cmp	r3, #2
 8001574:	dc2d      	bgt.n	80015d2 <FFBUpdate+0x7a>
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <FFBUpdate+0x28>
 800157a:	2b01      	cmp	r3, #1
 800157c:	d007      	beq.n	800158e <FFBUpdate+0x36>
 800157e:	e028      	b.n	80015d2 <FFBUpdate+0x7a>
	case FFB_STOPPED:
		MotorSetPower(ffb->motor, 0);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f000 fa89 	bl	8001a9e <MotorSetPower>
		break;
 800158c:	e029      	b.n	80015e2 <FFBUpdate+0x8a>
	case FFB_RUNNING:
		int motorPower = FFBCalcForces(ffb, EncoderGetCount(ffb->encoder),
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fda5 	bl	80010e2 <EncoderGetCount>
 8001598:	ee07 0a90 	vmov	s15, r0
 800159c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	eef0 0a47 	vmov.f32	s1, s14
 80015ac:	eeb0 0a67 	vmov.f32	s0, s15
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fefd 	bl	80013b0 <FFBCalcForces>
 80015b6:	eef0 7a40 	vmov.f32	s15, s0
 80015ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015be:	ee17 3a90 	vmov	r3, s15
 80015c2:	60fb      	str	r3, [r7, #12]
		//TODO: Remove: Scale down motor power and limit for testing and safety
//		motorPower /= 2;
//		motorPower = Constrain(motorPower, -MOTOR_POWER_MAX/2,
//				MOTOR_POWER_MAX/2);

		MotorSetPower(ffb->motor, motorPower);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68f9      	ldr	r1, [r7, #12]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 fa67 	bl	8001a9e <MotorSetPower>
		break;
 80015d0:	e007      	b.n	80015e2 <FFBUpdate+0x8a>
	case FFB_IDLE:
		break;
	default:
		// Should not reach here
		MotorSetPower(ffb->motor, 0);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 fa60 	bl	8001a9e <MotorSetPower>
		break;
 80015de:	e000      	b.n	80015e2 <FFBUpdate+0x8a>
		break;
 80015e0:	bf00      	nop
	}
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <FFBStop>:

void FFBStop(FFBController_t *ffb) {
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	ffb->state = FFB_STOPPED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2200      	movs	r2, #0
 80015f6:	731a      	strb	r2, [r3, #12]
	MotorSetPower(ffb->motor, 0);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2100      	movs	r1, #0
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 fa4d 	bl	8001a9e <MotorSetPower>
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <FFBStart>:

void FFBStart(FFBController_t *ffb) {
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	ffb->state = FFB_RUNNING;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	731a      	strb	r2, [r3, #12]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <FFBGetState>:

FFBControllerState_e FFBGetState(FFBController_t *ffb) {
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
	return ffb->state;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7b1b      	ldrb	r3, [r3, #12]
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <FFBSetControlRange>:

void FFBSetControlRange(FFBController_t *ffb, int min, int max) {
 800163e:	b480      	push	{r7}
 8001640:	b085      	sub	sp, #20
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
	ffb->minLock = min;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	639a      	str	r2, [r3, #56]	@ 0x38
	ffb->maxLock = max;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001656:	bf00      	nop
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <FFBGetMinControlRange>:

int FFBGetMinControlRange(FFBController_t *ffb) {
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
	return ffb->minLock;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <FFBGetMaxControlRange>:

int FFBGetMaxControlRange(FFBController_t *ffb) {
 800167a:	b480      	push	{r7}
 800167c:	b083      	sub	sp, #12
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
	return ffb->maxLock;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <FFBHome>:

void FFBHome(FFBController_t *ffb) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	@ 0x30
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	ffb->state = FFB_IDLE;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2202      	movs	r2, #2
 80016a0:	731a      	strb	r2, [r3, #12]
	/* Find home start */
	// Record motor position
	int previousPosition = EncoderGetCount(ffb->encoder);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fd1b 	bl	80010e2 <EncoderGetCount>
 80016ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
	// Reverse motor slowly
	MotorSetPower(ffb->motor, -FFB_CONTROL_HOME_POWER);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	495a      	ldr	r1, [pc, #360]	@ (800181c <FFBHome+0x188>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f9f2 	bl	8001a9e <MotorSetPower>
	// Wait for motor to move
	delayMs(300);
 80016ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80016be:	f7ff fcdd 	bl	800107c <delayMs>
	// Wait until motor stops moving (hit end)
	int steadyCount = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		int currentPosition = EncoderGetCount(ffb->encoder);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fd09 	bl	80010e2 <EncoderGetCount>
 80016d0:	6278      	str	r0, [r7, #36]	@ 0x24
		if(Abs(currentPosition-previousPosition) < 10) {
 80016d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fb40 	bl	8001d5e <Abs>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b09      	cmp	r3, #9
 80016e2:	dc03      	bgt.n	80016ec <FFBHome+0x58>
			steadyCount++;
 80016e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e6:	3301      	adds	r3, #1
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016ea:	e001      	b.n	80016f0 <FFBHome+0x5c>
		}
		else {
			steadyCount = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
		previousPosition = currentPosition;
 80016f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		delayMs(10);
 80016f4:	200a      	movs	r0, #10
 80016f6:	f7ff fcc1 	bl	800107c <delayMs>
	} while(steadyCount < 25);
 80016fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016fc:	2b18      	cmp	r3, #24
 80016fe:	dde2      	ble.n	80016c6 <FFBHome+0x32>
	// Record start position
	int startPosition = EncoderGetCount(ffb->encoder);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fcec 	bl	80010e2 <EncoderGetCount>
 800170a:	6238      	str	r0, [r7, #32]
	// Stop motor
	MotorSetPower(ffb->motor, 0);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f9c3 	bl	8001a9e <MotorSetPower>
	delayMs(1000);
 8001718:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800171c:	f7ff fcae 	bl	800107c <delayMs>


	/* Find home end */
	// Record motor position
	previousPosition = EncoderGetCount(ffb->encoder);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fcdc 	bl	80010e2 <EncoderGetCount>
 800172a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	// move motor forward slowly
	MotorSetPower(ffb->motor, FFB_CONTROL_HOME_POWER);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f240 618f 	movw	r1, #1679	@ 0x68f
 8001734:	4618      	mov	r0, r3
 8001736:	f000 f9b2 	bl	8001a9e <MotorSetPower>
	// Wait for motor to move
	delayMs(300);
 800173a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800173e:	f7ff fc9d 	bl	800107c <delayMs>
	// Wait until motor stops moving (hit end)
	steadyCount = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		int currentPosition = EncoderGetCount(ffb->encoder);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff fcc9 	bl	80010e2 <EncoderGetCount>
 8001750:	61f8      	str	r0, [r7, #28]
		if(Abs(currentPosition-previousPosition) < 10) {
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f000 fb00 	bl	8001d5e <Abs>
 800175e:	4603      	mov	r3, r0
 8001760:	2b09      	cmp	r3, #9
 8001762:	dc03      	bgt.n	800176c <FFBHome+0xd8>
			steadyCount++;
 8001764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001766:	3301      	adds	r3, #1
 8001768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800176a:	e001      	b.n	8001770 <FFBHome+0xdc>
		}
		else {
			steadyCount = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	62bb      	str	r3, [r7, #40]	@ 0x28
		}
		previousPosition = currentPosition;
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	62fb      	str	r3, [r7, #44]	@ 0x2c
		delayMs(10);
 8001774:	200a      	movs	r0, #10
 8001776:	f7ff fc81 	bl	800107c <delayMs>
	} while(steadyCount < 25);
 800177a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800177c:	2b18      	cmp	r3, #24
 800177e:	dde2      	ble.n	8001746 <FFBHome+0xb2>
	// Record end position
	int endPosition = EncoderGetCount(ffb->encoder);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fcac 	bl	80010e2 <EncoderGetCount>
 800178a:	61b8      	str	r0, [r7, #24]
	// Stop motor
	MotorSetPower(ffb->motor, 0);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2100      	movs	r1, #0
 8001792:	4618      	mov	r0, r3
 8001794:	f000 f983 	bl	8001a9e <MotorSetPower>
	delayMs(1000);
 8001798:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800179c:	f7ff fc6e 	bl	800107c <delayMs>

	/* Calibrate center */
	int center = (endPosition - startPosition)/2;
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	0fda      	lsrs	r2, r3, #31
 80017a8:	4413      	add	r3, r2
 80017aa:	105b      	asrs	r3, r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
	EncoderSetCount(ffb->encoder, center);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	6979      	ldr	r1, [r7, #20]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fca0 	bl	80010fa <EncoderSetCount>
	ffb->prevEncoderCountAvg = 0;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	@ 0x24

	/* Go to center */
	FFBSpringParam_t centerForce = {
 80017c0:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <FFBHome+0x18c>)
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	f04f 0300 	mov.w	r3, #0
 80017ce:	613b      	str	r3, [r7, #16]
			.minimumSpringForce = 0,
			.offset = 0,
			.strength = 0.2,
	};
	FFBSetSpringParams(ffb, centerForce);
 80017d0:	edd7 6a02 	vldr	s13, [r7, #8]
 80017d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80017d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80017dc:	eeb0 0a66 	vmov.f32	s0, s13
 80017e0:	eef0 0a47 	vmov.f32	s1, s14
 80017e4:	eeb0 1a67 	vmov.f32	s2, s15
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff fdb6 	bl	800135a <FFBSetSpringParams>

	// Start
	FFBStart(ffb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ff0c 	bl	800160c <FFBStart>

	// Wait for center to be reached
	while(Abs(EncoderGetCount(ffb->encoder) - center) > 50) {
 80017f4:	bf00      	nop
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fc71 	bl	80010e2 <EncoderGetCount>
 8001800:	4602      	mov	r2, r0
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	4618      	mov	r0, r3
 8001808:	f000 faa9 	bl	8001d5e <Abs>
 800180c:	4603      	mov	r3, r0
 800180e:	2b32      	cmp	r3, #50	@ 0x32
 8001810:	dcf1      	bgt.n	80017f6 <FFBHome+0x162>
//			.minimumSpringForce = 0,
//			.offset = 0,
//			.strength = 0.35,
//	};
//	FFBSetSpringParams(ffb, newCenterForce);
}
 8001812:	bf00      	nop
 8001814:	bf00      	nop
 8001816:	3730      	adds	r7, #48	@ 0x30
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	fffff971 	.word	0xfffff971
 8001820:	3e4ccccd 	.word	0x3e4ccccd

08001824 <FFBCalcConstantForce>:

float FFBCalcMotorTorque(FFBController_t *ffb, float motorCurrent) {
	return ffb->motorKtConstant * motorCurrent;
}

float FFBCalcConstantForce(float gain, float amount) {
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	ed87 0a01 	vstr	s0, [r7, #4]
 800182e:	edc7 0a00 	vstr	s1, [r7]
	return gain * amount;
 8001832:	ed97 7a01 	vldr	s14, [r7, #4]
 8001836:	edd7 7a00 	vldr	s15, [r7]
 800183a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800183e:	eeb0 0a67 	vmov.f32	s0, s15
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <FFBCalcPeriodicForce>:

float FFBCalcPeriodicForce(float gain, FFBPeriodicParam_t *periodic,
		float deltaTime) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	ed87 0a03 	vstr	s0, [r7, #12]
 8001856:	60b8      	str	r0, [r7, #8]
 8001858:	edc7 0a01 	vstr	s1, [r7, #4]
	return gain *
			FFBPeriodicCalc(periodic, deltaTime);
 800185c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001860:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001864:	ee17 1a90 	vmov	r1, s15
 8001868:	68b8      	ldr	r0, [r7, #8]
 800186a:	f000 f8c9 	bl	8001a00 <FFBPeriodicCalc>
 800186e:	eeb0 7a40 	vmov.f32	s14, s0
	return gain *
 8001872:	edd7 7a03 	vldr	s15, [r7, #12]
 8001876:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800187a:	eeb0 0a67 	vmov.f32	s0, s15
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <FFBCalcSpringForce>:

float FFBCalcSpringForce(float gain, float measuredAngle,
		FFBSpringParam_t *springParam) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	ed87 0a03 	vstr	s0, [r7, #12]
 800188e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001892:	6078      	str	r0, [r7, #4]

	float constrainedStrength = ConstrainFloat(
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800189e:	eeff 0a00 	vmov.f32	s1, #240	@ 0xbf800000 -1.0
 80018a2:	eeb0 0a67 	vmov.f32	s0, s15
 80018a6:	f000 fa31 	bl	8001d0c <ConstrainFloat>
 80018aa:	ed87 0a04 	vstr	s0, [r7, #16]
			springParam->strength, -1.0f, 1.0f);

	float force = gain * (springParam->offset - measuredAngle) *
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80018b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	edc7 7a05 	vstr	s15, [r7, #20]
			constrainedStrength;

	//add/subtract minimum spring force based on force direction
	if(force < 0) {
 80018d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80018d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	d509      	bpl.n	80018f2 <FFBCalcSpringForce+0x6e>
		force -= springParam->minimumSpringForce;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80018e4:	ed97 7a05 	vldr	s14, [r7, #20]
 80018e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ec:	edc7 7a05 	vstr	s15, [r7, #20]
 80018f0:	e00f      	b.n	8001912 <FFBCalcSpringForce+0x8e>
	}
	else if (force > 0) {
 80018f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	dd08      	ble.n	8001912 <FFBCalcSpringForce+0x8e>
		force += springParam->minimumSpringForce;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	edd3 7a02 	vldr	s15, [r3, #8]
 8001906:	ed97 7a05 	vldr	s14, [r7, #20]
 800190a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800190e:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return force;
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	ee07 3a90 	vmov	s15, r3
}
 8001918:	eeb0 0a67 	vmov.f32	s0, s15
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <FFBCalcDamperForce>:

float FFBCalcDamperForce(float gain, float magnitude) {
 8001922:	b480      	push	{r7}
 8001924:	b085      	sub	sp, #20
 8001926:	af00      	add	r7, sp, #0
 8001928:	ed87 0a01 	vstr	s0, [r7, #4]
 800192c:	edc7 0a00 	vstr	s1, [r7]
	float force = gain * -magnitude;
 8001930:	edd7 7a00 	vldr	s15, [r7]
 8001934:	eef1 7a67 	vneg.f32	s15, s15
 8001938:	ed97 7a01 	vldr	s14, [r7, #4]
 800193c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001940:	edc7 7a03 	vstr	s15, [r7, #12]
	return force;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	ee07 3a90 	vmov	s15, r3
}
 800194a:	eeb0 0a67 	vmov.f32	s0, s15
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <FFBCalcAssist>:

float FFBCalcAssist(float gain, float min, float speed) {
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001962:	edc7 0a02 	vstr	s1, [r7, #8]
 8001966:	ed87 1a01 	vstr	s2, [r7, #4]
	if(speed < 0) {
 800196a:	edd7 7a01 	vldr	s15, [r7, #4]
 800196e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	d50a      	bpl.n	800198e <FFBCalcAssist+0x36>
		return gain*speed - min;
 8001978:	ed97 7a03 	vldr	s14, [r7, #12]
 800197c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001980:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001984:	edd7 7a02 	vldr	s15, [r7, #8]
 8001988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800198c:	e013      	b.n	80019b6 <FFBCalcAssist+0x5e>
	}
	else if(speed > 0) {
 800198e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001992:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800199a:	dd0a      	ble.n	80019b2 <FFBCalcAssist+0x5a>
		return gain*speed + min;
 800199c:	ed97 7a03 	vldr	s14, [r7, #12]
 80019a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80019a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b0:	e001      	b.n	80019b6 <FFBCalcAssist+0x5e>
	}
	else {
		return 0;
 80019b2:	eddf 7a04 	vldr	s15, [pc, #16]	@ 80019c4 <FFBCalcAssist+0x6c>
	}
}
 80019b6:	eeb0 0a67 	vmov.f32	s0, s15
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	00000000 	.word	0x00000000

080019c8 <FFBPeriodicInit>:
#include <math.h>

#define PI 3.141592653589793f

void FFBPeriodicInit(FFBPeriodicParam_t *peri, float amplitude, float frequency,
		float offset) {
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80019d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80019d8:	ed87 1a00 	vstr	s2, [r7]
	// Initialize FFB periodic parameters
	peri->amplitude = amplitude;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	601a      	str	r2, [r3, #0]
	peri->frequency = frequency;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	605a      	str	r2, [r3, #4]
	peri->offset = offset;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	609a      	str	r2, [r3, #8]

	// Reset time to 0
	peri->time = 0;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <FFBPeriodicCalc>:

float FFBPeriodicCalc(FFBPeriodicParam_t *peri, int dt) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]

	// Update time
	peri->time += dt;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68da      	ldr	r2, [r3, #12]
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	441a      	add	r2, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60da      	str	r2, [r3, #12]

	// Calculate force
	float force = sinf(peri->frequency * (2*PI) * (peri->time/1000.0f)) *
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a1c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001a70 <FFBPeriodicCalc+0x70>
 8001a20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a30:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8001a74 <FFBPeriodicCalc+0x74>
 8001a34:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001a40:	f00a f93a 	bl	800bcb8 <sinf>
 8001a44:	eeb0 7a40 	vmov.f32	s14, s0
			peri->amplitude + peri->offset;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
	float force = sinf(peri->frequency * (2*PI) * (peri->time/1000.0f)) *
 8001a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
			peri->amplitude + peri->offset;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	edd3 7a02 	vldr	s15, [r3, #8]
	float force = sinf(peri->frequency * (2*PI) * (peri->time/1000.0f)) *
 8001a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5c:	edc7 7a03 	vstr	s15, [r7, #12]

	return force;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	ee07 3a90 	vmov	s15, r3
}
 8001a66:	eeb0 0a67 	vmov.f32	s0, s15
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40c90fdb 	.word	0x40c90fdb
 8001a74:	447a0000 	.word	0x447a0000

08001a78 <MotorInit>:

#include "motor.h"
#include "utilities/utilities.h"
#include <stdbool.h>

void MotorInit(Motor_t *motor, MotorInterface_t interface) {
 8001a78:	b490      	push	{r4, r7}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	4638      	mov	r0, r7
 8001a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	motor->interface = interface;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	461c      	mov	r4, r3
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc90      	pop	{r4, r7}
 8001a9c:	4770      	bx	lr

08001a9e <MotorSetPower>:

int MotorGetPower(Motor_t *motor) {
	return motor->interface.MotorGetPower(&motor->interface);
}

void MotorSetPower(Motor_t *motor, int power) {
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
	motor->interface.MotorSetPower(&motor->interface, power);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4798      	blx	r3
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <UsbReportInit>:

#include "usb_report.h"
#include <string.h>


void UsbReportInit(UsbReport_t *report, PacketParser_t *parser) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
	report->reportId = 0;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]

	// Clear report data
	memset(report->data, 0, USB_REPORT_MAX_SIZE);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	2240      	movs	r2, #64	@ 0x40
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f00b ff7d 	bl	800d9d4 <memset>

	report->currentParseIndex = 0;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	//report->endianness = inEndian;
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <UsbReportLoad>:

void UsbReportLoad(UsbReport_t *report, uint8_t *buffer, uint16_t size) {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	4613      	mov	r3, r2
 8001af6:	80fb      	strh	r3, [r7, #6]
	// First index contains report id
	report->reportId = *buffer;
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	701a      	strb	r2, [r3, #0]

	// Following indices store data
	// Copy to report data
	memcpy(report->data, buffer+1, size-1);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1c58      	adds	r0, r3, #1
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	1c59      	adds	r1, r3, #1
 8001b08:	88fb      	ldrh	r3, [r7, #6]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f00b ffe0 	bl	800dad2 <memcpy>

	report->currentParseIndex = 0;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <UsbReportGetReportId>:

uint8_t UsbReportGetReportId(UsbReport_t *report) {
 8001b22:	b480      	push	{r7}
 8001b24:	b083      	sub	sp, #12
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
	return report->reportId;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	781b      	ldrb	r3, [r3, #0]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <UsbReportParseNextInt>:

int32_t UsbReportParseNextInt(UsbReport_t *report) {
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b084      	sub	sp, #16
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
	uint8_t *data = report->data + report->currentParseIndex;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3301      	adds	r3, #1
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	f8b2 2042 	ldrh.w	r2, [r2, #66]	@ 0x42
 8001b4c:	4413      	add	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]
	int32_t value;
	ParseBytesEndian(&value, data, sizeof(int32_t), report->endianness);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001b56:	f107 0008 	add.w	r0, r7, #8
 8001b5a:	2204      	movs	r2, #4
 8001b5c:	68f9      	ldr	r1, [r7, #12]
 8001b5e:	f000 f84c 	bl	8001bfa <ParseBytesEndian>

	// Increment parse index for next parse
	report->currentParseIndex += sizeof(uint32_t);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001b68:	3304      	adds	r3, #4
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	return value;
 8001b72:	68bb      	ldr	r3, [r7, #8]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <UsbReportParseNextByte>:

uint8_t UsbReportParseNextByte(UsbReport_t *report) {
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
	uint8_t data = report->data[report->currentParseIndex];
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	785b      	ldrb	r3, [r3, #1]
 8001b92:	73fb      	strb	r3, [r7, #15]

	// Increment parse index for next parse
	report->currentParseIndex += sizeof(uint8_t);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	return data;
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3714      	adds	r7, #20
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <UsbReportParseNextFloat>:

float UsbReportParseNextFloat(UsbReport_t *report) {
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b084      	sub	sp, #16
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
	uint8_t *data = report->data + report->currentParseIndex;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	f8b2 2042 	ldrh.w	r2, [r2, #66]	@ 0x42
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
	float value;
	ParseBytesEndian(&value, data, sizeof(float), report->endianness);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001bce:	f107 0008 	add.w	r0, r7, #8
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	f000 f810 	bl	8001bfa <ParseBytesEndian>

	// Increment parse index for next parse
	report->currentParseIndex += sizeof(float);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001be0:	3304      	adds	r3, #4
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42

	return value;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	ee07 3a90 	vmov	s15, r3
}
 8001bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <ParseBytesEndian>:

void ParseBytesEndian(void *dest, uint8_t *source, uint8_t length,
		int endianess) {
 8001bfa:	b480      	push	{r7}
 8001bfc:	b087      	sub	sp, #28
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	71fb      	strb	r3, [r7, #7]
	// Parse based on endianess
	switch(endianess) {
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d018      	beq.n	8001c42 <ParseBytesEndian+0x48>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d128      	bne.n	8001c68 <ParseBytesEndian+0x6e>
		case USB_REPORT_IN_BIG_ENDIAN:
			for(int i = 0; i < length; i++) {
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e00d      	b.n	8001c38 <ParseBytesEndian+0x3e>
				*((uint8_t *)dest+i) = *(source + length-i-1);
 8001c1c:	79fa      	ldrb	r2, [r7, #7]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	3b01      	subs	r3, #1
 8001c24:	68ba      	ldr	r2, [r7, #8]
 8001c26:	441a      	add	r2, r3
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	440b      	add	r3, r1
 8001c2e:	7812      	ldrb	r2, [r2, #0]
 8001c30:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < length; i++) {
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	3301      	adds	r3, #1
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	dbed      	blt.n	8001c1c <ParseBytesEndian+0x22>
			}
			break;
 8001c40:	e013      	b.n	8001c6a <ParseBytesEndian+0x70>
		case USB_REPORT_IN_LITTLE_ENDIAN:
			for(int i = 0; i < length; i++) {
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	e00a      	b.n	8001c5e <ParseBytesEndian+0x64>
				*((uint8_t *)dest+i) = *(source+i);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	441a      	add	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	68f9      	ldr	r1, [r7, #12]
 8001c52:	440b      	add	r3, r1
 8001c54:	7812      	ldrb	r2, [r2, #0]
 8001c56:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < length; i++) {
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	dbf0      	blt.n	8001c48 <ParseBytesEndian+0x4e>
			}
			break;
 8001c66:	e000      	b.n	8001c6a <ParseBytesEndian+0x70>
		default:
			// Invalid condition
			break;
 8001c68:	bf00      	nop
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <Map>:
 */

#include "utilities/utilities.h"

int32_t Map(int32_t in, int32_t inMin, int32_t inMax, int32_t outMin,
		int32_t outMax) {
 8001c76:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6178      	str	r0, [r7, #20]
 8001c80:	6139      	str	r1, [r7, #16]
 8001c82:	60fa      	str	r2, [r7, #12]
 8001c84:	60bb      	str	r3, [r7, #8]
	return (((int64_t)(in - inMin)*(outMax - outMin))/(inMax - inMin)) + outMin;
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	17da      	asrs	r2, r3, #31
 8001c8e:	469a      	mov	sl, r3
 8001c90:	4693      	mov	fp, r2
 8001c92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	17da      	asrs	r2, r3, #31
 8001c9a:	4698      	mov	r8, r3
 8001c9c:	4691      	mov	r9, r2
 8001c9e:	fb08 f20b 	mul.w	r2, r8, fp
 8001ca2:	fb0a f309 	mul.w	r3, sl, r9
 8001ca6:	4413      	add	r3, r2
 8001ca8:	fbaa 4508 	umull	r4, r5, sl, r8
 8001cac:	442b      	add	r3, r5
 8001cae:	461d      	mov	r5, r3
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	17da      	asrs	r2, r3, #31
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	f7fe ff78 	bl	8000bb8 <__aeabi_ldivmod>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4413      	add	r3, r2
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001cda <Constrain>:

int32_t Constrain(int32_t value, int32_t min, int32_t max) {
 8001cda:	b480      	push	{r7}
 8001cdc:	b085      	sub	sp, #20
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
	if(value < min) {
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	da01      	bge.n	8001cf2 <Constrain+0x18>
		return min;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	e006      	b.n	8001d00 <Constrain+0x26>
	}
	else if(value > max) {
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	dd01      	ble.n	8001cfe <Constrain+0x24>
		return max;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	e000      	b.n	8001d00 <Constrain+0x26>
	}
	else {
		return value;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <ConstrainFloat>:

float ConstrainFloat(float value, float min, float max) {
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	ed87 0a03 	vstr	s0, [r7, #12]
 8001d16:	edc7 0a02 	vstr	s1, [r7, #8]
 8001d1a:	ed87 1a01 	vstr	s2, [r7, #4]
	if(value < min) {
 8001d1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d22:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2e:	d501      	bpl.n	8001d34 <ConstrainFloat+0x28>
		return min;
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	e00b      	b.n	8001d4c <ConstrainFloat+0x40>
	}
	else if(value > max) {
 8001d34:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d38:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	dd01      	ble.n	8001d4a <ConstrainFloat+0x3e>
		return max;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	e000      	b.n	8001d4c <ConstrainFloat+0x40>
	}
	else {
		return value;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
	}
}
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eeb0 0a67 	vmov.f32	s0, s15
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <Abs>:

int32_t Abs(int32_t x) {
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
	return x > 0 ? x : -x;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	bfb8      	it	lt
 8001d6c:	425b      	neglt	r3, r3
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <ButtonStateChangedCallback>:
void CommandLineMode(void);
void ProcessUsbControlData(UsbReport_t *usbReport);
void ProcessUsbFFBData(UsbReport_t *usbReport);

// Callbacks
void ButtonStateChangedCallback(Button_t *button) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	if(button == &btnAccept) {
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a10      	ldr	r2, [pc, #64]	@ (8001dc8 <ButtonStateChangedCallback+0x4c>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d119      	bne.n	8001dc0 <ButtonStateChangedCallback+0x44>
		// Add implementation for accept button here
		if(ButtonIsPressed(&btnAccept)) {
 8001d8c:	480e      	ldr	r0, [pc, #56]	@ (8001dc8 <ButtonStateChangedCallback+0x4c>)
 8001d8e:	f7ff f8f9 	bl	8000f84 <ButtonIsPressed>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d013      	beq.n	8001dc0 <ButtonStateChangedCallback+0x44>
			switch (FFBGetState(&ffbPitch)) {
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <ButtonStateChangedCallback+0x50>)
 8001d9a:	f7ff fc44 	bl	8001626 <FFBGetState>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d005      	beq.n	8001db0 <ButtonStateChangedCallback+0x34>
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d107      	bne.n	8001db8 <ButtonStateChangedCallback+0x3c>
				case FFB_RUNNING:
					FFBStop(&ffbPitch);
 8001da8:	4808      	ldr	r0, [pc, #32]	@ (8001dcc <ButtonStateChangedCallback+0x50>)
 8001daa:	f7ff fc1e 	bl	80015ea <FFBStop>
					break;
 8001dae:	e007      	b.n	8001dc0 <ButtonStateChangedCallback+0x44>
				case FFB_STOPPED:
					FFBStart(&ffbPitch);
 8001db0:	4806      	ldr	r0, [pc, #24]	@ (8001dcc <ButtonStateChangedCallback+0x50>)
 8001db2:	f7ff fc2b 	bl	800160c <FFBStart>
					break;
 8001db6:	e003      	b.n	8001dc0 <ButtonStateChangedCallback+0x44>
				default:
					FFBStop(&ffbPitch);
 8001db8:	4804      	ldr	r0, [pc, #16]	@ (8001dcc <ButtonStateChangedCallback+0x50>)
 8001dba:	f7ff fc16 	bl	80015ea <FFBStop>
					break;
 8001dbe:	bf00      	nop
			}
//			MotorSetPower(&pitchMotor, MotorGetPower(&pitchMotor)+100);
		}
	}
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	20000398 	.word	0x20000398
 8001dcc:	200003ac 	.word	0x200003ac

08001dd0 <ButtonReadState>:

int ButtonReadState(Button_t *button) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	if(button == &btnAccept) {
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	4a09      	ldr	r2, [pc, #36]	@ (8001e00 <ButtonReadState+0x30>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d109      	bne.n	8001df4 <ButtonReadState+0x24>
		return GPIOGetState(&gpioAccept) == GPIO_HIGH ? 1 : 0;
 8001de0:	4808      	ldr	r0, [pc, #32]	@ (8001e04 <ButtonReadState+0x34>)
 8001de2:	f001 fa33 	bl	800324c <GPIOGetState>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	e000      	b.n	8001df6 <ButtonReadState+0x26>
	}

	return 0;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000398 	.word	0x20000398
 8001e04:	2000046c 	.word	0x2000046c

08001e08 <ApplicationInit>:

void ApplicationInit(void) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0

	appInitialized = false;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e4c <ApplicationInit+0x44>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
	appRunning = false;
 8001e12:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <ApplicationInit+0x48>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]

	UsbReportInit(&usbReport, USB_REPORT_IN_LITTLE_ENDIAN);
 8001e18:	2100      	movs	r1, #0
 8001e1a:	480e      	ldr	r0, [pc, #56]	@ (8001e54 <ApplicationInit+0x4c>)
 8001e1c:	f7ff fe4e 	bl	8001abc <UsbReportInit>

	ButtonInit(&btnAccept, &ButtonReadState);
 8001e20:	490d      	ldr	r1, [pc, #52]	@ (8001e58 <ApplicationInit+0x50>)
 8001e22:	480e      	ldr	r0, [pc, #56]	@ (8001e5c <ApplicationInit+0x54>)
 8001e24:	f7ff f890 	bl	8000f48 <ButtonInit>

	FFBInit(&ffbPitch, &pitchMotor, &pitchEncoder);
 8001e28:	4a0d      	ldr	r2, [pc, #52]	@ (8001e60 <ApplicationInit+0x58>)
 8001e2a:	490e      	ldr	r1, [pc, #56]	@ (8001e64 <ApplicationInit+0x5c>)
 8001e2c:	480e      	ldr	r0, [pc, #56]	@ (8001e68 <ApplicationInit+0x60>)
 8001e2e:	f7ff f9f9 	bl	8001224 <FFBInit>
	//FFBInit(&ffbRoll, &rollMotor, &rollEncoder);

	appInitialized = true;
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <ApplicationInit+0x44>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]
	printf("Ready!\r\n");
 8001e38:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <ApplicationInit+0x64>)
 8001e3a:	f00b fceb 	bl	800d814 <puts>
//	}
//	while(ButtonIsPressed(&btnAccept)) {
//	}

	// Register callback for future presses
	ButtonSetStateChangedCallback(&btnAccept, &ButtonStateChangedCallback);
 8001e3e:	490c      	ldr	r1, [pc, #48]	@ (8001e70 <ApplicationInit+0x68>)
 8001e40:	4806      	ldr	r0, [pc, #24]	@ (8001e5c <ApplicationInit+0x54>)
 8001e42:	f7ff f8fc 	bl	800103e <ButtonSetStateChangedCallback>

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000396 	.word	0x20000396
 8001e50:	20000397 	.word	0x20000397
 8001e54:	20000350 	.word	0x20000350
 8001e58:	08001dd1 	.word	0x08001dd1
 8001e5c:	20000398 	.word	0x20000398
 8001e60:	20000424 	.word	0x20000424
 8001e64:	20000454 	.word	0x20000454
 8001e68:	200003ac 	.word	0x200003ac
 8001e6c:	0800f708 	.word	0x0800f708
 8001e70:	08001d7d 	.word	0x08001d7d

08001e74 <ApplicationRun>:

void ApplicationRun(void) {
 8001e74:	b5b0      	push	{r4, r5, r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af02      	add	r7, sp, #8
	appRunning = true;
 8001e7a:	4b4c      	ldr	r3, [pc, #304]	@ (8001fac <ApplicationRun+0x138>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]

	FFBHome(&ffbPitch);
 8001e80:	484b      	ldr	r0, [pc, #300]	@ (8001fb0 <ApplicationRun+0x13c>)
 8001e82:	f7ff fc07 	bl	8001694 <FFBHome>

	// Indicate homing is complete
	GPIOSetState(&gpioStatus, GPIO_HIGH);
 8001e86:	2100      	movs	r1, #0
 8001e88:	484a      	ldr	r0, [pc, #296]	@ (8001fb4 <ApplicationRun+0x140>)
 8001e8a:	f001 f9fb 	bl	8003284 <GPIOSetState>

	// Remove spring force
	FFBSpringParam_t spring = {
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	f04f 0300 	mov.w	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
			.minimumSpringForce = 0,
			.offset = 0,
			.strength = 0,
	};
	FFBSetSpringParams(&ffbPitch, spring);
 8001ea0:	edd7 6a00 	vldr	s13, [r7]
 8001ea4:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ea8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eac:	eeb0 0a66 	vmov.f32	s0, s13
 8001eb0:	eef0 0a47 	vmov.f32	s1, s14
 8001eb4:	eeb0 1a67 	vmov.f32	s2, s15
 8001eb8:	483d      	ldr	r0, [pc, #244]	@ (8001fb0 <ApplicationRun+0x13c>)
 8001eba:	f7ff fa4e 	bl	800135a <FFBSetSpringParams>

	// Application is now running in loop
	while(1) {
		if(flag_rx == 1){
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb8 <ApplicationRun+0x144>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d15c      	bne.n	8001f80 <ApplicationRun+0x10c>

			flag_rx = 0;
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb8 <ApplicationRun+0x144>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]

			UsbReportLoad(&usbReport, report_buffer,
 8001ecc:	2210      	movs	r2, #16
 8001ece:	493b      	ldr	r1, [pc, #236]	@ (8001fbc <ApplicationRun+0x148>)
 8001ed0:	483b      	ldr	r0, [pc, #236]	@ (8001fc0 <ApplicationRun+0x14c>)
 8001ed2:	f7ff fe0a 	bl	8001aea <UsbReportLoad>
					USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
			switch(UsbReportGetReportId(&usbReport)) {
 8001ed6:	483a      	ldr	r0, [pc, #232]	@ (8001fc0 <ApplicationRun+0x14c>)
 8001ed8:	f7ff fe23 	bl	8001b22 <UsbReportGetReportId>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d002      	beq.n	8001ee8 <ApplicationRun+0x74>
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d004      	beq.n	8001ef0 <ApplicationRun+0x7c>
			case 0x02:
				ProcessUsbControlData(&usbReport);
				break;
			default:
				// Invalid reportID
				break;
 8001ee6:	e007      	b.n	8001ef8 <ApplicationRun+0x84>
				ProcessUsbFFBData(&usbReport);
 8001ee8:	4835      	ldr	r0, [pc, #212]	@ (8001fc0 <ApplicationRun+0x14c>)
 8001eea:	f000 f91f 	bl	800212c <ProcessUsbFFBData>
				break;
 8001eee:	e003      	b.n	8001ef8 <ApplicationRun+0x84>
				ProcessUsbControlData(&usbReport);
 8001ef0:	4833      	ldr	r0, [pc, #204]	@ (8001fc0 <ApplicationRun+0x14c>)
 8001ef2:	f000 f8c9 	bl	8002088 <ProcessUsbControlData>
				break;
 8001ef6:	bf00      	nop

			// TODO: Un-comment
//			int rollEncoderCountConstrained = Constrain(EncoderGetCount(
//					&rollEncoder), -32767, 32767);
			// TODO: Remove
			int rollEncoderCountConstrained = 0;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
//					FFBGetMinControlRange(&ffbRoll),
//					FFBGetMaxControlRange(&ffbRoll),
//					-32767, 32767);

			// Prepare elevator axis
			int pitchEncoderCountConstrained = Constrain(EncoderGetCount(
 8001efc:	4831      	ldr	r0, [pc, #196]	@ (8001fc4 <ApplicationRun+0x150>)
 8001efe:	f7ff f8f0 	bl	80010e2 <EncoderGetCount>
 8001f02:	4604      	mov	r4, r0
					&pitchEncoder),
					FFBGetMinControlRange(&ffbPitch),
 8001f04:	482a      	ldr	r0, [pc, #168]	@ (8001fb0 <ApplicationRun+0x13c>)
 8001f06:	f7ff fbac 	bl	8001662 <FFBGetMinControlRange>
 8001f0a:	4605      	mov	r5, r0
					FFBGetMaxControlRange(&ffbPitch));
 8001f0c:	4828      	ldr	r0, [pc, #160]	@ (8001fb0 <ApplicationRun+0x13c>)
 8001f0e:	f7ff fbb4 	bl	800167a <FFBGetMaxControlRange>
 8001f12:	4603      	mov	r3, r0
			int pitchEncoderCountConstrained = Constrain(EncoderGetCount(
 8001f14:	461a      	mov	r2, r3
 8001f16:	4629      	mov	r1, r5
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff fede 	bl	8001cda <Constrain>
 8001f1e:	6138      	str	r0, [r7, #16]

			// Map pitch values to pitch control range
			int16_t elevator = (int16_t)Map(pitchEncoderCountConstrained,
					FFBGetMinControlRange(&ffbPitch),
 8001f20:	4823      	ldr	r0, [pc, #140]	@ (8001fb0 <ApplicationRun+0x13c>)
 8001f22:	f7ff fb9e 	bl	8001662 <FFBGetMinControlRange>
 8001f26:	4604      	mov	r4, r0
					FFBGetMaxControlRange(&ffbPitch),
 8001f28:	4821      	ldr	r0, [pc, #132]	@ (8001fb0 <ApplicationRun+0x13c>)
 8001f2a:	f7ff fba6 	bl	800167a <FFBGetMaxControlRange>
 8001f2e:	4602      	mov	r2, r0
			int16_t elevator = (int16_t)Map(pitchEncoderCountConstrained,
 8001f30:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	4b24      	ldr	r3, [pc, #144]	@ (8001fc8 <ApplicationRun+0x154>)
 8001f38:	4621      	mov	r1, r4
 8001f3a:	6938      	ldr	r0, [r7, #16]
 8001f3c:	f7ff fe9b 	bl	8001c76 <Map>
 8001f40:	4603      	mov	r3, r0
 8001f42:	81fb      	strh	r3, [r7, #14]
					-32767, 32767);

			// Set report ID to 1 (Data)
			reportTxBuffer[0] = 0x01;
 8001f44:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <ApplicationRun+0x158>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
			reportTxBuffer[1] = 0;//aileron & 0xFF;
 8001f4a:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <ApplicationRun+0x158>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	705a      	strb	r2, [r3, #1]
			reportTxBuffer[2] = 0;//aileron >> 8;
 8001f50:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <ApplicationRun+0x158>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	709a      	strb	r2, [r3, #2]
			reportTxBuffer[3] = elevator >> 8;
 8001f56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f5a:	121b      	asrs	r3, r3, #8
 8001f5c:	b21b      	sxth	r3, r3
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <ApplicationRun+0x158>)
 8001f62:	70da      	strb	r2, [r3, #3]
			reportTxBuffer[4] = elevator & 0xFF;
 8001f64:	89fb      	ldrh	r3, [r7, #14]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <ApplicationRun+0x158>)
 8001f6a:	711a      	strb	r2, [r3, #4]

			USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, reportTxBuffer, 5);
 8001f6c:	2205      	movs	r2, #5
 8001f6e:	4917      	ldr	r1, [pc, #92]	@ (8001fcc <ApplicationRun+0x158>)
 8001f70:	4817      	ldr	r0, [pc, #92]	@ (8001fd0 <ApplicationRun+0x15c>)
 8001f72:	f007 fd91 	bl	8009a98 <USBD_CUSTOM_HID_SendReport>

			usbPacketCount++;
 8001f76:	4b17      	ldr	r3, [pc, #92]	@ (8001fd4 <ApplicationRun+0x160>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	4a15      	ldr	r2, [pc, #84]	@ (8001fd4 <ApplicationRun+0x160>)
 8001f7e:	6013      	str	r3, [r2, #0]
		}

		angle = (EncoderGetCount(&rollEncoder)/49152.0f)*360.0f;
 8001f80:	4815      	ldr	r0, [pc, #84]	@ (8001fd8 <ApplicationRun+0x164>)
 8001f82:	f7ff f8ae 	bl	80010e2 <EncoderGetCount>
 8001f86:	ee07 0a90 	vmov	s15, r0
 8001f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001fdc <ApplicationRun+0x168>
 8001f92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f96:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001fe0 <ApplicationRun+0x16c>
 8001f9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <ApplicationRun+0x170>)
 8001fa0:	edc3 7a00 	vstr	s15, [r3]

		HAL_Delay(5);
 8001fa4:	2005      	movs	r0, #5
 8001fa6:	f001 fa25 	bl	80033f4 <HAL_Delay>
		if(flag_rx == 1){
 8001faa:	e788      	b.n	8001ebe <ApplicationRun+0x4a>
 8001fac:	20000397 	.word	0x20000397
 8001fb0:	200003ac 	.word	0x200003ac
 8001fb4:	20000474 	.word	0x20000474
 8001fb8:	2000034c 	.word	0x2000034c
 8001fbc:	2000030c 	.word	0x2000030c
 8001fc0:	20000350 	.word	0x20000350
 8001fc4:	20000424 	.word	0x20000424
 8001fc8:	ffff8001 	.word	0xffff8001
 8001fcc:	20000304 	.word	0x20000304
 8001fd0:	20000658 	.word	0x20000658
 8001fd4:	20000420 	.word	0x20000420
 8001fd8:	2000043c 	.word	0x2000043c
 8001fdc:	47400000 	.word	0x47400000
 8001fe0:	43b40000 	.word	0x43b40000
 8001fe4:	2000041c 	.word	0x2000041c

08001fe8 <ApplicationUpdate>:

	}
}

void ApplicationUpdate(int deltaTimeUs) {
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	if(!appInitialized) {
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <ApplicationUpdate+0x2c>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	f083 0301 	eor.w	r3, r3, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d106      	bne.n	800200c <ApplicationUpdate+0x24>
		return;
	}

	ButtonProcessInt(&btnAccept);
 8001ffe:	4806      	ldr	r0, [pc, #24]	@ (8002018 <ApplicationUpdate+0x30>)
 8002000:	f7fe ffcc 	bl	8000f9c <ButtonProcessInt>
	ProcessEncoders(deltaTimeUs);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f809 	bl	800201c <ProcessEncoders>
 800200a:	e000      	b.n	800200e <ApplicationUpdate+0x26>
		return;
 800200c:	bf00      	nop

}
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000396 	.word	0x20000396
 8002018:	20000398 	.word	0x20000398

0800201c <ProcessEncoders>:

void ProcessEncoders(int deltaTimeUs) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	EncoderUpdate(&pitchEncoder, deltaTimeUs);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	ee07 3a90 	vmov	s15, r3
 800202a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800202e:	eeb0 0a67 	vmov.f32	s0, s15
 8002032:	4803      	ldr	r0, [pc, #12]	@ (8002040 <ProcessEncoders+0x24>)
 8002034:	f7ff f86f 	bl	8001116 <EncoderUpdate>
	//EncoderUpdate(&rollEncoder, deltaTimeUs);
}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000424 	.word	0x20000424

08002044 <ApplicationFFBUpdate>:

void ApplicationFFBUpdate(int deltaTimeUs) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	if(!appInitialized || !appRunning) {
 800204c:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <ApplicationFFBUpdate+0x38>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	f083 0301 	eor.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10b      	bne.n	8002072 <ApplicationFFBUpdate+0x2e>
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <ApplicationFFBUpdate+0x3c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d104      	bne.n	8002072 <ApplicationFFBUpdate+0x2e>
		return;
	}
	FFBUpdate(&ffbPitch, deltaTimeUs);
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4806      	ldr	r0, [pc, #24]	@ (8002084 <ApplicationFFBUpdate+0x40>)
 800206c:	f7ff fa74 	bl	8001558 <FFBUpdate>
 8002070:	e000      	b.n	8002074 <ApplicationFFBUpdate+0x30>
		return;
 8002072:	bf00      	nop
	//FFBUpdate(&ffbRoll, deltaTimeUs);
}
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000396 	.word	0x20000396
 8002080:	20000397 	.word	0x20000397
 8002084:	200003ac 	.word	0x200003ac

08002088 <ProcessUsbControlData>:

void ProcessUsbControlData(UsbReport_t *usbReport) {
 8002088:	b580      	push	{r7, lr}
 800208a:	b088      	sub	sp, #32
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
	// Parse USB report fields
	bool ffbOn = UsbReportParseNextByte(usbReport) == 0x01 ? true : false;
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fd73 	bl	8001b7c <UsbReportParseNextByte>
 8002096:	4603      	mov	r3, r0
 8002098:	2b01      	cmp	r3, #1
 800209a:	bf0c      	ite	eq
 800209c:	2301      	moveq	r3, #1
 800209e:	2300      	movne	r3, #0
 80020a0:	77fb      	strb	r3, [r7, #31]
	int aileronRangeInDeg = UsbReportParseNextInt(usbReport);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fd49 	bl	8001b3a <UsbReportParseNextInt>
 80020a8:	61b8      	str	r0, [r7, #24]
	int elevatorRangeInMM = UsbReportParseNextInt(usbReport);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff fd45 	bl	8001b3a <UsbReportParseNextInt>
 80020b0:	6178      	str	r0, [r7, #20]

	// FFB ON/OFF
	if(ffbOn) {
 80020b2:	7ffb      	ldrb	r3, [r7, #31]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <ProcessUsbControlData+0x38>
		//FFBStart(&ffbRoll);
		FFBStart(&ffbPitch);
 80020b8:	481a      	ldr	r0, [pc, #104]	@ (8002124 <ProcessUsbControlData+0x9c>)
 80020ba:	f7ff faa7 	bl	800160c <FFBStart>
 80020be:	e002      	b.n	80020c6 <ProcessUsbControlData+0x3e>
	}
	else {
		//FFBStop(&ffbRoll);
		FFBStop(&ffbPitch);
 80020c0:	4818      	ldr	r0, [pc, #96]	@ (8002124 <ProcessUsbControlData+0x9c>)
 80020c2:	f7ff fa92 	bl	80015ea <FFBStop>
	}

	/** FFB Control Ranges **/

	// Aileron encoder range
	int aileronEncoderRange = aileronRangeInDeg *
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	ee07 3a90 	vmov	s15, r3
 80020cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d0:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80020d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020dc:	ee17 3a90 	vmov	r3, s15
 80020e0:	613b      	str	r3, [r7, #16]
			PULLEY_AILERON_ENCODER_STEP_PER_DEGREE;
//	FFBSetControlRange(&ffbRoll, -aileronEncoderRange/2, aileronEncoderRange/2);

	// Elevator encoder range
	int elevatorEncoderRange = elevatorRangeInMM *
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ec:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002128 <ProcessUsbControlData+0xa0>
 80020f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f8:	ee17 3a90 	vmov	r3, s15
 80020fc:	60fb      	str	r3, [r7, #12]
			PULLEY_ELEVATOR_ENCODER_STEP_PER_MM;
	FFBSetControlRange(&ffbPitch, -elevatorEncoderRange/2,
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	0fda      	lsrs	r2, r3, #31
 8002102:	4413      	add	r3, r2
 8002104:	105b      	asrs	r3, r3, #1
 8002106:	425b      	negs	r3, r3
 8002108:	4619      	mov	r1, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	0fda      	lsrs	r2, r3, #31
 800210e:	4413      	add	r3, r2
 8002110:	105b      	asrs	r3, r3, #1
 8002112:	461a      	mov	r2, r3
 8002114:	4803      	ldr	r0, [pc, #12]	@ (8002124 <ProcessUsbControlData+0x9c>)
 8002116:	f7ff fa92 	bl	800163e <FFBSetControlRange>
			elevatorEncoderRange/2);

}
 800211a:	bf00      	nop
 800211c:	3720      	adds	r7, #32
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200003ac 	.word	0x200003ac
 8002128:	434cc8fb 	.word	0x434cc8fb

0800212c <ProcessUsbFFBData>:

void ProcessUsbFFBData(UsbReport_t *usbReport) {
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
	// Parse USB report fields
	float rollForce = UsbReportParseNextFloat(usbReport);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff fd3c 	bl	8001bb2 <UsbReportParseNextFloat>
 800213a:	ed87 0a03 	vstr	s0, [r7, #12]
	float pitchForce = UsbReportParseNextFloat(usbReport);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff fd37 	bl	8001bb2 <UsbReportParseNextFloat>
 8002144:	ed87 0a02 	vstr	s0, [r7, #8]

	// Assign forces
//	FFBSetConstantStrength(&ffbRoll, rollForce);
	FFBSetConstantStrength(&ffbPitch, pitchForce);
 8002148:	ed97 0a02 	vldr	s0, [r7, #8]
 800214c:	4803      	ldr	r0, [pc, #12]	@ (800215c <ProcessUsbFFBData+0x30>)
 800214e:	f7ff f8f5 	bl	800133c <FFBSetConstantStrength>
}
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200003ac 	.word	0x200003ac

08002160 <BspInit>:
void SetupEncoders(void);
void SetupMotors(void);
void SetupButtons(void);
void SetupLEDs(void);

void BspInit(void) {
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
	SetupEncoders();
 8002164:	f000 f820 	bl	80021a8 <SetupEncoders>
	SetupMotors();
 8002168:	f000 f852 	bl	8002210 <SetupMotors>
	SetupButtons();
 800216c:	f000 f884 	bl	8002278 <SetupButtons>
	SetupLEDs();
 8002170:	f000 f890 	bl	8002294 <SetupLEDs>

	// --- Timer setup ----
	// Motor PWM timer
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002174:	2100      	movs	r1, #0
 8002176:	480a      	ldr	r0, [pc, #40]	@ (80021a0 <BspInit+0x40>)
 8002178:	f004 fbbe 	bl	80068f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800217c:	2104      	movs	r1, #4
 800217e:	4808      	ldr	r0, [pc, #32]	@ (80021a0 <BspInit+0x40>)
 8002180:	f004 fbba 	bl	80068f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002184:	2108      	movs	r1, #8
 8002186:	4806      	ldr	r0, [pc, #24]	@ (80021a0 <BspInit+0x40>)
 8002188:	f004 fbb6 	bl	80068f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800218c:	210c      	movs	r1, #12
 800218e:	4804      	ldr	r0, [pc, #16]	@ (80021a0 <BspInit+0x40>)
 8002190:	f004 fbb2 	bl	80068f8 <HAL_TIM_PWM_Start>
	// Update timer
	HAL_TIM_Base_Start_IT(&htim10);
 8002194:	4803      	ldr	r0, [pc, #12]	@ (80021a4 <BspInit+0x44>)
 8002196:	f004 faf3 	bl	8006780 <HAL_TIM_Base_Start_IT>
	// Control loop timer
	//HAL_TIM_Base_Start_IT(&htim11);
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000574 	.word	0x20000574
 80021a4:	200005bc 	.word	0x200005bc

080021a8 <SetupEncoders>:

void SetupEncoders(void) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
	// Pitch
	AS5600Init(&pitchAS5600, &hi2c1);
 80021ae:	4912      	ldr	r1, [pc, #72]	@ (80021f8 <SetupEncoders+0x50>)
 80021b0:	4812      	ldr	r0, [pc, #72]	@ (80021fc <SetupEncoders+0x54>)
 80021b2:	f000 fddf 	bl	8002d74 <AS5600Init>
	EncoderInterface_t pitchEncoderI;
	AS5600InterfaceInit(&pitchEncoderI, &pitchAS5600);
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	4910      	ldr	r1, [pc, #64]	@ (80021fc <SetupEncoders+0x54>)
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 fe41 	bl	8002e44 <AS5600InterfaceInit>
	EncoderInit(&pitchEncoder, pitchEncoderI);
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021ca:	480d      	ldr	r0, [pc, #52]	@ (8002200 <SetupEncoders+0x58>)
 80021cc:	f7fe ff64 	bl	8001098 <EncoderInit>

	// Roll
	AS5600Init(&rollAS5600, &hi2c3);
 80021d0:	490c      	ldr	r1, [pc, #48]	@ (8002204 <SetupEncoders+0x5c>)
 80021d2:	480d      	ldr	r0, [pc, #52]	@ (8002208 <SetupEncoders+0x60>)
 80021d4:	f000 fdce 	bl	8002d74 <AS5600Init>
	EncoderInterface_t rollEncoderI;
	AS5600InterfaceInit(&rollEncoderI, &rollAS5600);
 80021d8:	463b      	mov	r3, r7
 80021da:	490b      	ldr	r1, [pc, #44]	@ (8002208 <SetupEncoders+0x60>)
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 fe31 	bl	8002e44 <AS5600InterfaceInit>
	EncoderInit(&rollEncoder, rollEncoderI);
 80021e2:	463b      	mov	r3, r7
 80021e4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80021e8:	4808      	ldr	r0, [pc, #32]	@ (800220c <SetupEncoders+0x64>)
 80021ea:	f7fe ff55 	bl	8001098 <EncoderInit>
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	200004cc 	.word	0x200004cc
 80021fc:	2000047c 	.word	0x2000047c
 8002200:	20000424 	.word	0x20000424
 8002204:	20000520 	.word	0x20000520
 8002208:	20000480 	.word	0x20000480
 800220c:	2000043c 	.word	0x2000043c

08002210 <SetupMotors>:

void SetupMotors(void) {
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
	// Pitch
	// Initialize driver
	BTS7960Init(&pitchDriver, &htim3, TIM_PITCH_F_CH, TIM_PITCH_R_CH);
 8002216:	2304      	movs	r3, #4
 8002218:	2200      	movs	r2, #0
 800221a:	4912      	ldr	r1, [pc, #72]	@ (8002264 <SetupMotors+0x54>)
 800221c:	4812      	ldr	r0, [pc, #72]	@ (8002268 <SetupMotors+0x58>)
 800221e:	f000 fe33 	bl	8002e88 <BTS7960Init>

	// Set up interface
	MotorInterface_t pitchMotorI;
	BTS7960InterfaceInit(&pitchMotorI, &pitchDriver);
 8002222:	f107 030c 	add.w	r3, r7, #12
 8002226:	4910      	ldr	r1, [pc, #64]	@ (8002268 <SetupMotors+0x58>)
 8002228:	4618      	mov	r0, r3
 800222a:	f000 ffc7 	bl	80031bc <BTS7960InterfaceInit>

	// Initialize motor
	MotorInit(&pitchMotor, pitchMotorI);
 800222e:	f107 030c 	add.w	r3, r7, #12
 8002232:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002234:	480d      	ldr	r0, [pc, #52]	@ (800226c <SetupMotors+0x5c>)
 8002236:	f7ff fc1f 	bl	8001a78 <MotorInit>

	// Roll
	// Initialize driver
	BTS7960Init(&rollDriver, &htim3, TIM_ROLL_F_CH, TIM_ROLL_R_CH);
 800223a:	230c      	movs	r3, #12
 800223c:	2208      	movs	r2, #8
 800223e:	4909      	ldr	r1, [pc, #36]	@ (8002264 <SetupMotors+0x54>)
 8002240:	480b      	ldr	r0, [pc, #44]	@ (8002270 <SetupMotors+0x60>)
 8002242:	f000 fe21 	bl	8002e88 <BTS7960Init>

	// Set up interface
	MotorInterface_t rollMotorI;
	BTS7960InterfaceInit(&rollMotorI, &rollDriver);
 8002246:	463b      	mov	r3, r7
 8002248:	4909      	ldr	r1, [pc, #36]	@ (8002270 <SetupMotors+0x60>)
 800224a:	4618      	mov	r0, r3
 800224c:	f000 ffb6 	bl	80031bc <BTS7960InterfaceInit>

	// Initialize motor
	MotorInit(&rollMotor, rollMotorI);
 8002250:	463b      	mov	r3, r7
 8002252:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002254:	4807      	ldr	r0, [pc, #28]	@ (8002274 <SetupMotors+0x64>)
 8002256:	f7ff fc0f 	bl	8001a78 <MotorInit>
}
 800225a:	bf00      	nop
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000574 	.word	0x20000574
 8002268:	20000484 	.word	0x20000484
 800226c:	20000454 	.word	0x20000454
 8002270:	200004a8 	.word	0x200004a8
 8002274:	20000460 	.word	0x20000460

08002278 <SetupButtons>:

void SetupButtons(void) {
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
	GPIOInit(&gpioAccept, BUTTON_ACCEPT_GPIO_Port, BUTTON_ACCEPT_Pin);
 800227c:	2201      	movs	r2, #1
 800227e:	4903      	ldr	r1, [pc, #12]	@ (800228c <SetupButtons+0x14>)
 8002280:	4803      	ldr	r0, [pc, #12]	@ (8002290 <SetupButtons+0x18>)
 8002282:	f000 ffd0 	bl	8003226 <GPIOInit>
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40020000 	.word	0x40020000
 8002290:	2000046c 	.word	0x2000046c

08002294 <SetupLEDs>:

void SetupLEDs(void) {
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
	GPIOInit(&gpioStatus, STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002298:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800229c:	4902      	ldr	r1, [pc, #8]	@ (80022a8 <SetupLEDs+0x14>)
 800229e:	4803      	ldr	r0, [pc, #12]	@ (80022ac <SetupLEDs+0x18>)
 80022a0:	f000 ffc1 	bl	8003226 <GPIOInit>
}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40020800 	.word	0x40020800
 80022ac:	20000474 	.word	0x20000474

080022b0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80022b8:	1d39      	adds	r1, r7, #4
 80022ba:	f04f 33ff 	mov.w	r3, #4294967295
 80022be:	2201      	movs	r2, #1
 80022c0:	4803      	ldr	r0, [pc, #12]	@ (80022d0 <__io_putchar+0x20>)
 80022c2:	f005 fa15 	bl	80076f0 <HAL_UART_Transmit>
  return ch;
 80022c6:	687b      	ldr	r3, [r7, #4]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000604 	.word	0x20000604

080022d4 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  uint8_t ch = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	71fb      	strb	r3, [r7, #7]

  /* Clear the Overrun flag just before receiving the first character */
  __HAL_UART_CLEAR_OREFLAG(&huart1);
 80022de:	2300      	movs	r3, #0
 80022e0:	603b      	str	r3, [r7, #0]
 80022e2:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <__io_getchar+0x48>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	603b      	str	r3, [r7, #0]
 80022ea:	4b0c      	ldr	r3, [pc, #48]	@ (800231c <__io_getchar+0x48>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	603b      	str	r3, [r7, #0]
 80022f2:	683b      	ldr	r3, [r7, #0]

  /* Wait for reception of a character on the USART RX line and echo this
   * character on console */
  HAL_UART_Receive(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80022f4:	1df9      	adds	r1, r7, #7
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	2201      	movs	r2, #1
 80022fc:	4807      	ldr	r0, [pc, #28]	@ (800231c <__io_getchar+0x48>)
 80022fe:	f005 fa82 	bl	8007806 <HAL_UART_Receive>
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002302:	1df9      	adds	r1, r7, #7
 8002304:	f04f 33ff 	mov.w	r3, #4294967295
 8002308:	2201      	movs	r2, #1
 800230a:	4804      	ldr	r0, [pc, #16]	@ (800231c <__io_getchar+0x48>)
 800230c:	f005 f9f0 	bl	80076f0 <HAL_UART_Transmit>
  return ch;
 8002310:	79fb      	ldrb	r3, [r7, #7]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000604 	.word	0x20000604

08002320 <HAL_TIM_PeriodElapsedCallback>:

/* Interrupt Service Routines (ISR)*/

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
	if(htim == &htim10) {
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a07      	ldr	r2, [pc, #28]	@ (8002348 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d107      	bne.n	8002340 <HAL_TIM_PeriodElapsedCallback+0x20>
		ApplicationUpdate(5000);
 8002330:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002334:	f7ff fe58 	bl	8001fe8 <ApplicationUpdate>
		ApplicationFFBUpdate(5000);
 8002338:	f241 3088 	movw	r0, #5000	@ 0x1388
 800233c:	f7ff fe82 	bl	8002044 <ApplicationFFBUpdate>
	}
}
 8002340:	bf00      	nop
 8002342:	3708      	adds	r7, #8
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200005bc 	.word	0x200005bc

0800234c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002350:	f000 ffde 	bl	8003310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002354:	f000 f81c 	bl	8002390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002358:	f000 f9c4 	bl	80026e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800235c:	f000 f880 	bl	8002460 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002360:	f000 f8ac 	bl	80024bc <MX_I2C3_Init>
  MX_TIM3_Init();
 8002364:	f000 f8d8 	bl	8002518 <MX_TIM3_Init>
  MX_TIM10_Init();
 8002368:	f000 f96e 	bl	8002648 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 800236c:	f000 f990 	bl	8002690 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8002370:	f008 ffdc 	bl	800b32c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  delayMsInit(&HAL_Delay);
 8002374:	4805      	ldr	r0, [pc, #20]	@ (800238c <main+0x40>)
 8002376:	f7fe fe71 	bl	800105c <delayMsInit>

  BspInit();
 800237a:	f7ff fef1 	bl	8002160 <BspInit>
  ApplicationInit();
 800237e:	f7ff fd43 	bl	8001e08 <ApplicationInit>
  ApplicationRun();
 8002382:	f7ff fd77 	bl	8001e74 <ApplicationRun>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002386:	bf00      	nop
 8002388:	e7fd      	b.n	8002386 <main+0x3a>
 800238a:	bf00      	nop
 800238c:	080033f5 	.word	0x080033f5

08002390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b094      	sub	sp, #80	@ 0x50
 8002394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002396:	f107 0320 	add.w	r3, r7, #32
 800239a:	2230      	movs	r2, #48	@ 0x30
 800239c:	2100      	movs	r1, #0
 800239e:	4618      	mov	r0, r3
 80023a0:	f00b fb18 	bl	800d9d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023a4:	f107 030c 	add.w	r3, r7, #12
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	60da      	str	r2, [r3, #12]
 80023b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	2300      	movs	r3, #0
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	4b27      	ldr	r3, [pc, #156]	@ (8002458 <SystemClock_Config+0xc8>)
 80023ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023bc:	4a26      	ldr	r2, [pc, #152]	@ (8002458 <SystemClock_Config+0xc8>)
 80023be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c4:	4b24      	ldr	r3, [pc, #144]	@ (8002458 <SystemClock_Config+0xc8>)
 80023c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023cc:	60bb      	str	r3, [r7, #8]
 80023ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023d0:	2300      	movs	r3, #0
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	4b21      	ldr	r3, [pc, #132]	@ (800245c <SystemClock_Config+0xcc>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a20      	ldr	r2, [pc, #128]	@ (800245c <SystemClock_Config+0xcc>)
 80023da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b1e      	ldr	r3, [pc, #120]	@ (800245c <SystemClock_Config+0xcc>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023ec:	2301      	movs	r3, #1
 80023ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023f6:	2302      	movs	r3, #2
 80023f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002400:	2319      	movs	r3, #25
 8002402:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002404:	23c0      	movs	r3, #192	@ 0xc0
 8002406:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002408:	2302      	movs	r3, #2
 800240a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800240c:	2304      	movs	r3, #4
 800240e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002410:	f107 0320 	add.w	r3, r7, #32
 8002414:	4618      	mov	r0, r3
 8002416:	f003 fd0b 	bl	8005e30 <HAL_RCC_OscConfig>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002420:	f000 f9e2 	bl	80027e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002424:	230f      	movs	r3, #15
 8002426:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002428:	2302      	movs	r3, #2
 800242a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002430:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002434:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	2103      	movs	r1, #3
 8002440:	4618      	mov	r0, r3
 8002442:	f003 ff6d 	bl	8006320 <HAL_RCC_ClockConfig>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800244c:	f000 f9cc 	bl	80027e8 <Error_Handler>
  }
}
 8002450:	bf00      	nop
 8002452:	3750      	adds	r7, #80	@ 0x50
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	40007000 	.word	0x40007000

08002460 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002464:	4b12      	ldr	r3, [pc, #72]	@ (80024b0 <MX_I2C1_Init+0x50>)
 8002466:	4a13      	ldr	r2, [pc, #76]	@ (80024b4 <MX_I2C1_Init+0x54>)
 8002468:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800246a:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <MX_I2C1_Init+0x50>)
 800246c:	4a12      	ldr	r2, [pc, #72]	@ (80024b8 <MX_I2C1_Init+0x58>)
 800246e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002470:	4b0f      	ldr	r3, [pc, #60]	@ (80024b0 <MX_I2C1_Init+0x50>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002476:	4b0e      	ldr	r3, [pc, #56]	@ (80024b0 <MX_I2C1_Init+0x50>)
 8002478:	2200      	movs	r2, #0
 800247a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800247c:	4b0c      	ldr	r3, [pc, #48]	@ (80024b0 <MX_I2C1_Init+0x50>)
 800247e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002482:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002484:	4b0a      	ldr	r3, [pc, #40]	@ (80024b0 <MX_I2C1_Init+0x50>)
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800248a:	4b09      	ldr	r3, [pc, #36]	@ (80024b0 <MX_I2C1_Init+0x50>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002490:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <MX_I2C1_Init+0x50>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002496:	4b06      	ldr	r3, [pc, #24]	@ (80024b0 <MX_I2C1_Init+0x50>)
 8002498:	2200      	movs	r2, #0
 800249a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800249c:	4804      	ldr	r0, [pc, #16]	@ (80024b0 <MX_I2C1_Init+0x50>)
 800249e:	f001 fa95 	bl	80039cc <HAL_I2C_Init>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024a8:	f000 f99e 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	200004cc 	.word	0x200004cc
 80024b4:	40005400 	.word	0x40005400
 80024b8:	000186a0 	.word	0x000186a0

080024bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024c0:	4b12      	ldr	r3, [pc, #72]	@ (800250c <MX_I2C3_Init+0x50>)
 80024c2:	4a13      	ldr	r2, [pc, #76]	@ (8002510 <MX_I2C3_Init+0x54>)
 80024c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80024c6:	4b11      	ldr	r3, [pc, #68]	@ (800250c <MX_I2C3_Init+0x50>)
 80024c8:	4a12      	ldr	r2, [pc, #72]	@ (8002514 <MX_I2C3_Init+0x58>)
 80024ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024cc:	4b0f      	ldr	r3, [pc, #60]	@ (800250c <MX_I2C3_Init+0x50>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <MX_I2C3_Init+0x50>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <MX_I2C3_Init+0x50>)
 80024da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024e0:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <MX_I2C3_Init+0x50>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80024e6:	4b09      	ldr	r3, [pc, #36]	@ (800250c <MX_I2C3_Init+0x50>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ec:	4b07      	ldr	r3, [pc, #28]	@ (800250c <MX_I2C3_Init+0x50>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <MX_I2C3_Init+0x50>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024f8:	4804      	ldr	r0, [pc, #16]	@ (800250c <MX_I2C3_Init+0x50>)
 80024fa:	f001 fa67 	bl	80039cc <HAL_I2C_Init>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002504:	f000 f970 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002508:	bf00      	nop
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20000520 	.word	0x20000520
 8002510:	40005c00 	.word	0x40005c00
 8002514:	000186a0 	.word	0x000186a0

08002518 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08e      	sub	sp, #56	@ 0x38
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	605a      	str	r2, [r3, #4]
 8002528:	609a      	str	r2, [r3, #8]
 800252a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800252c:	f107 0320 	add.w	r3, r7, #32
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
 8002544:	615a      	str	r2, [r3, #20]
 8002546:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002548:	4b3d      	ldr	r3, [pc, #244]	@ (8002640 <MX_TIM3_Init+0x128>)
 800254a:	4a3e      	ldr	r2, [pc, #248]	@ (8002644 <MX_TIM3_Init+0x12c>)
 800254c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800254e:	4b3c      	ldr	r3, [pc, #240]	@ (8002640 <MX_TIM3_Init+0x128>)
 8002550:	2200      	movs	r2, #0
 8002552:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002554:	4b3a      	ldr	r3, [pc, #232]	@ (8002640 <MX_TIM3_Init+0x128>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4800-1;
 800255a:	4b39      	ldr	r3, [pc, #228]	@ (8002640 <MX_TIM3_Init+0x128>)
 800255c:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8002560:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002562:	4b37      	ldr	r3, [pc, #220]	@ (8002640 <MX_TIM3_Init+0x128>)
 8002564:	2200      	movs	r2, #0
 8002566:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002568:	4b35      	ldr	r3, [pc, #212]	@ (8002640 <MX_TIM3_Init+0x128>)
 800256a:	2280      	movs	r2, #128	@ 0x80
 800256c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800256e:	4834      	ldr	r0, [pc, #208]	@ (8002640 <MX_TIM3_Init+0x128>)
 8002570:	f004 f8b6 	bl	80066e0 <HAL_TIM_Base_Init>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800257a:	f000 f935 	bl	80027e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002582:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002584:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002588:	4619      	mov	r1, r3
 800258a:	482d      	ldr	r0, [pc, #180]	@ (8002640 <MX_TIM3_Init+0x128>)
 800258c:	f004 fc16 	bl	8006dbc <HAL_TIM_ConfigClockSource>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002596:	f000 f927 	bl	80027e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800259a:	4829      	ldr	r0, [pc, #164]	@ (8002640 <MX_TIM3_Init+0x128>)
 800259c:	f004 f952 	bl	8006844 <HAL_TIM_PWM_Init>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d001      	beq.n	80025aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80025a6:	f000 f91f 	bl	80027e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025b2:	f107 0320 	add.w	r3, r7, #32
 80025b6:	4619      	mov	r1, r3
 80025b8:	4821      	ldr	r0, [pc, #132]	@ (8002640 <MX_TIM3_Init+0x128>)
 80025ba:	f004 ffc7 	bl	800754c <HAL_TIMEx_MasterConfigSynchronization>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80025c4:	f000 f910 	bl	80027e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025c8:	2360      	movs	r3, #96	@ 0x60
 80025ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	2200      	movs	r2, #0
 80025dc:	4619      	mov	r1, r3
 80025de:	4818      	ldr	r0, [pc, #96]	@ (8002640 <MX_TIM3_Init+0x128>)
 80025e0:	f004 fb2a 	bl	8006c38 <HAL_TIM_PWM_ConfigChannel>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80025ea:	f000 f8fd 	bl	80027e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025ee:	1d3b      	adds	r3, r7, #4
 80025f0:	2204      	movs	r2, #4
 80025f2:	4619      	mov	r1, r3
 80025f4:	4812      	ldr	r0, [pc, #72]	@ (8002640 <MX_TIM3_Init+0x128>)
 80025f6:	f004 fb1f 	bl	8006c38 <HAL_TIM_PWM_ConfigChannel>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002600:	f000 f8f2 	bl	80027e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	2208      	movs	r2, #8
 8002608:	4619      	mov	r1, r3
 800260a:	480d      	ldr	r0, [pc, #52]	@ (8002640 <MX_TIM3_Init+0x128>)
 800260c:	f004 fb14 	bl	8006c38 <HAL_TIM_PWM_ConfigChannel>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8002616:	f000 f8e7 	bl	80027e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	220c      	movs	r2, #12
 800261e:	4619      	mov	r1, r3
 8002620:	4807      	ldr	r0, [pc, #28]	@ (8002640 <MX_TIM3_Init+0x128>)
 8002622:	f004 fb09 	bl	8006c38 <HAL_TIM_PWM_ConfigChannel>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 800262c:	f000 f8dc 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002630:	4803      	ldr	r0, [pc, #12]	@ (8002640 <MX_TIM3_Init+0x128>)
 8002632:	f000 f9e1 	bl	80029f8 <HAL_TIM_MspPostInit>

}
 8002636:	bf00      	nop
 8002638:	3738      	adds	r7, #56	@ 0x38
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000574 	.word	0x20000574
 8002644:	40000400 	.word	0x40000400

08002648 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800264c:	4b0e      	ldr	r3, [pc, #56]	@ (8002688 <MX_TIM10_Init+0x40>)
 800264e:	4a0f      	ldr	r2, [pc, #60]	@ (800268c <MX_TIM10_Init+0x44>)
 8002650:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 96-1;
 8002652:	4b0d      	ldr	r3, [pc, #52]	@ (8002688 <MX_TIM10_Init+0x40>)
 8002654:	225f      	movs	r2, #95	@ 0x5f
 8002656:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002658:	4b0b      	ldr	r3, [pc, #44]	@ (8002688 <MX_TIM10_Init+0x40>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 5000-1;
 800265e:	4b0a      	ldr	r3, [pc, #40]	@ (8002688 <MX_TIM10_Init+0x40>)
 8002660:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002664:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002666:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <MX_TIM10_Init+0x40>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800266c:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <MX_TIM10_Init+0x40>)
 800266e:	2280      	movs	r2, #128	@ 0x80
 8002670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002672:	4805      	ldr	r0, [pc, #20]	@ (8002688 <MX_TIM10_Init+0x40>)
 8002674:	f004 f834 	bl	80066e0 <HAL_TIM_Base_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800267e:	f000 f8b3 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	200005bc 	.word	0x200005bc
 800268c:	40014400 	.word	0x40014400

08002690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002694:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <MX_USART1_UART_Init+0x4c>)
 8002696:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <MX_USART1_UART_Init+0x50>)
 8002698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <MX_USART1_UART_Init+0x4c>)
 800269c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80026a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <MX_USART1_UART_Init+0x4c>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <MX_USART1_UART_Init+0x4c>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <MX_USART1_UART_Init+0x4c>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026b4:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <MX_USART1_UART_Init+0x4c>)
 80026b6:	220c      	movs	r2, #12
 80026b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ba:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <MX_USART1_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c0:	4b06      	ldr	r3, [pc, #24]	@ (80026dc <MX_USART1_UART_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026c6:	4805      	ldr	r0, [pc, #20]	@ (80026dc <MX_USART1_UART_Init+0x4c>)
 80026c8:	f004 ffc2 	bl	8007650 <HAL_UART_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026d2:	f000 f889 	bl	80027e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000604 	.word	0x20000604
 80026e0:	40011000 	.word	0x40011000

080026e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b08a      	sub	sp, #40	@ 0x28
 80026e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	609a      	str	r2, [r3, #8]
 80026f6:	60da      	str	r2, [r3, #12]
 80026f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	4b37      	ldr	r3, [pc, #220]	@ (80027dc <MX_GPIO_Init+0xf8>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002702:	4a36      	ldr	r2, [pc, #216]	@ (80027dc <MX_GPIO_Init+0xf8>)
 8002704:	f043 0304 	orr.w	r3, r3, #4
 8002708:	6313      	str	r3, [r2, #48]	@ 0x30
 800270a:	4b34      	ldr	r3, [pc, #208]	@ (80027dc <MX_GPIO_Init+0xf8>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	4b30      	ldr	r3, [pc, #192]	@ (80027dc <MX_GPIO_Init+0xf8>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271e:	4a2f      	ldr	r2, [pc, #188]	@ (80027dc <MX_GPIO_Init+0xf8>)
 8002720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002724:	6313      	str	r3, [r2, #48]	@ 0x30
 8002726:	4b2d      	ldr	r3, [pc, #180]	@ (80027dc <MX_GPIO_Init+0xf8>)
 8002728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	4b29      	ldr	r3, [pc, #164]	@ (80027dc <MX_GPIO_Init+0xf8>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	4a28      	ldr	r2, [pc, #160]	@ (80027dc <MX_GPIO_Init+0xf8>)
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	6313      	str	r3, [r2, #48]	@ 0x30
 8002742:	4b26      	ldr	r3, [pc, #152]	@ (80027dc <MX_GPIO_Init+0xf8>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	607b      	str	r3, [r7, #4]
 8002752:	4b22      	ldr	r3, [pc, #136]	@ (80027dc <MX_GPIO_Init+0xf8>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002756:	4a21      	ldr	r2, [pc, #132]	@ (80027dc <MX_GPIO_Init+0xf8>)
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	6313      	str	r3, [r2, #48]	@ 0x30
 800275e:	4b1f      	ldr	r3, [pc, #124]	@ (80027dc <MX_GPIO_Init+0xf8>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	607b      	str	r3, [r7, #4]
 8002768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 800276a:	2200      	movs	r2, #0
 800276c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002770:	481b      	ldr	r0, [pc, #108]	@ (80027e0 <MX_GPIO_Init+0xfc>)
 8002772:	f001 f911 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_PITCH_F_EN_Pin|MOTOR_PITCH_R_EN_Pin, GPIO_PIN_RESET);
 8002776:	2200      	movs	r2, #0
 8002778:	2130      	movs	r1, #48	@ 0x30
 800277a:	481a      	ldr	r0, [pc, #104]	@ (80027e4 <MX_GPIO_Init+0x100>)
 800277c:	f001 f90c 	bl	8003998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : STATUS_LED_Pin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8002780:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002786:	2301      	movs	r3, #1
 8002788:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800278e:	2300      	movs	r3, #0
 8002790:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8002792:	f107 0314 	add.w	r3, r7, #20
 8002796:	4619      	mov	r1, r3
 8002798:	4811      	ldr	r0, [pc, #68]	@ (80027e0 <MX_GPIO_Init+0xfc>)
 800279a:	f000 ff61 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_ACCEPT_Pin */
  GPIO_InitStruct.Pin = BUTTON_ACCEPT_Pin;
 800279e:	2301      	movs	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80027a6:	2302      	movs	r3, #2
 80027a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_ACCEPT_GPIO_Port, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	480c      	ldr	r0, [pc, #48]	@ (80027e4 <MX_GPIO_Init+0x100>)
 80027b2:	f000 ff55 	bl	8003660 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_PITCH_F_EN_Pin MOTOR_PITCH_R_EN_Pin */
  GPIO_InitStruct.Pin = MOTOR_PITCH_F_EN_Pin|MOTOR_PITCH_R_EN_Pin;
 80027b6:	2330      	movs	r3, #48	@ 0x30
 80027b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ba:	2301      	movs	r3, #1
 80027bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027be:	2300      	movs	r3, #0
 80027c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4619      	mov	r1, r3
 80027cc:	4805      	ldr	r0, [pc, #20]	@ (80027e4 <MX_GPIO_Init+0x100>)
 80027ce:	f000 ff47 	bl	8003660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	@ 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40020800 	.word	0x40020800
 80027e4:	40020000 	.word	0x40020000

080027e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ec:	b672      	cpsid	i
}
 80027ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <Error_Handler+0x8>

080027f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	607b      	str	r3, [r7, #4]
 80027fe:	4b10      	ldr	r3, [pc, #64]	@ (8002840 <HAL_MspInit+0x4c>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002802:	4a0f      	ldr	r2, [pc, #60]	@ (8002840 <HAL_MspInit+0x4c>)
 8002804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002808:	6453      	str	r3, [r2, #68]	@ 0x44
 800280a:	4b0d      	ldr	r3, [pc, #52]	@ (8002840 <HAL_MspInit+0x4c>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	4b09      	ldr	r3, [pc, #36]	@ (8002840 <HAL_MspInit+0x4c>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	4a08      	ldr	r2, [pc, #32]	@ (8002840 <HAL_MspInit+0x4c>)
 8002820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002824:	6413      	str	r3, [r2, #64]	@ 0x40
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_MspInit+0x4c>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b08c      	sub	sp, #48	@ 0x30
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800284c:	f107 031c 	add.w	r3, r7, #28
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	60da      	str	r2, [r3, #12]
 800285a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a41      	ldr	r2, [pc, #260]	@ (8002968 <HAL_I2C_MspInit+0x124>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d12c      	bne.n	80028c0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	4b40      	ldr	r3, [pc, #256]	@ (800296c <HAL_I2C_MspInit+0x128>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	4a3f      	ldr	r2, [pc, #252]	@ (800296c <HAL_I2C_MspInit+0x128>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	6313      	str	r3, [r2, #48]	@ 0x30
 8002876:	4b3d      	ldr	r3, [pc, #244]	@ (800296c <HAL_I2C_MspInit+0x128>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002882:	23c0      	movs	r3, #192	@ 0xc0
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002886:	2312      	movs	r3, #18
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002892:	2304      	movs	r3, #4
 8002894:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	4834      	ldr	r0, [pc, #208]	@ (8002970 <HAL_I2C_MspInit+0x12c>)
 800289e:	f000 fedf 	bl	8003660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	4b31      	ldr	r3, [pc, #196]	@ (800296c <HAL_I2C_MspInit+0x128>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	4a30      	ldr	r2, [pc, #192]	@ (800296c <HAL_I2C_MspInit+0x128>)
 80028ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b2:	4b2e      	ldr	r3, [pc, #184]	@ (800296c <HAL_I2C_MspInit+0x128>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028be:	e04f      	b.n	8002960 <HAL_I2C_MspInit+0x11c>
  else if(hi2c->Instance==I2C3)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002974 <HAL_I2C_MspInit+0x130>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d14a      	bne.n	8002960 <HAL_I2C_MspInit+0x11c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	4b27      	ldr	r3, [pc, #156]	@ (800296c <HAL_I2C_MspInit+0x128>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	4a26      	ldr	r2, [pc, #152]	@ (800296c <HAL_I2C_MspInit+0x128>)
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028da:	4b24      	ldr	r3, [pc, #144]	@ (800296c <HAL_I2C_MspInit+0x128>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	613b      	str	r3, [r7, #16]
 80028e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	4b20      	ldr	r3, [pc, #128]	@ (800296c <HAL_I2C_MspInit+0x128>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	4a1f      	ldr	r2, [pc, #124]	@ (800296c <HAL_I2C_MspInit+0x128>)
 80028f0:	f043 0302 	orr.w	r3, r3, #2
 80028f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f6:	4b1d      	ldr	r3, [pc, #116]	@ (800296c <HAL_I2C_MspInit+0x128>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002902:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002906:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002908:	2312      	movs	r3, #18
 800290a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002910:	2303      	movs	r3, #3
 8002912:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002914:	2304      	movs	r3, #4
 8002916:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 031c 	add.w	r3, r7, #28
 800291c:	4619      	mov	r1, r3
 800291e:	4816      	ldr	r0, [pc, #88]	@ (8002978 <HAL_I2C_MspInit+0x134>)
 8002920:	f000 fe9e 	bl	8003660 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002924:	2310      	movs	r3, #16
 8002926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002928:	2312      	movs	r3, #18
 800292a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002930:	2303      	movs	r3, #3
 8002932:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002934:	2309      	movs	r3, #9
 8002936:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002938:	f107 031c 	add.w	r3, r7, #28
 800293c:	4619      	mov	r1, r3
 800293e:	480c      	ldr	r0, [pc, #48]	@ (8002970 <HAL_I2C_MspInit+0x12c>)
 8002940:	f000 fe8e 	bl	8003660 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	4b08      	ldr	r3, [pc, #32]	@ (800296c <HAL_I2C_MspInit+0x128>)
 800294a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294c:	4a07      	ldr	r2, [pc, #28]	@ (800296c <HAL_I2C_MspInit+0x128>)
 800294e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002952:	6413      	str	r3, [r2, #64]	@ 0x40
 8002954:	4b05      	ldr	r3, [pc, #20]	@ (800296c <HAL_I2C_MspInit+0x128>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
}
 8002960:	bf00      	nop
 8002962:	3730      	adds	r7, #48	@ 0x30
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40005400 	.word	0x40005400
 800296c:	40023800 	.word	0x40023800
 8002970:	40020400 	.word	0x40020400
 8002974:	40005c00 	.word	0x40005c00
 8002978:	40020000 	.word	0x40020000

0800297c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a18      	ldr	r2, [pc, #96]	@ (80029ec <HAL_TIM_Base_MspInit+0x70>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d10e      	bne.n	80029ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <HAL_TIM_Base_MspInit+0x74>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	4a16      	ldr	r2, [pc, #88]	@ (80029f0 <HAL_TIM_Base_MspInit+0x74>)
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	6413      	str	r3, [r2, #64]	@ 0x40
 800299e:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <HAL_TIM_Base_MspInit+0x74>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80029aa:	e01a      	b.n	80029e2 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a10      	ldr	r2, [pc, #64]	@ (80029f4 <HAL_TIM_Base_MspInit+0x78>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d115      	bne.n	80029e2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <HAL_TIM_Base_MspInit+0x74>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029be:	4a0c      	ldr	r2, [pc, #48]	@ (80029f0 <HAL_TIM_Base_MspInit+0x74>)
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029c6:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <HAL_TIM_Base_MspInit+0x74>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2100      	movs	r1, #0
 80029d6:	2019      	movs	r0, #25
 80029d8:	f000 fe0b 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80029dc:	2019      	movs	r0, #25
 80029de:	f000 fe24 	bl	800362a <HAL_NVIC_EnableIRQ>
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40014400 	.word	0x40014400

080029f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	@ 0x28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a00:	f107 0314 	add.w	r3, r7, #20
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
 8002a0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a21      	ldr	r2, [pc, #132]	@ (8002a9c <HAL_TIM_MspPostInit+0xa4>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d13b      	bne.n	8002a92 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <HAL_TIM_MspPostInit+0xa8>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	4a1f      	ldr	r2, [pc, #124]	@ (8002aa0 <HAL_TIM_MspPostInit+0xa8>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa0 <HAL_TIM_MspPostInit+0xa8>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_TIM_MspPostInit+0xa8>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a18      	ldr	r2, [pc, #96]	@ (8002aa0 <HAL_TIM_MspPostInit+0xa8>)
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b16      	ldr	r3, [pc, #88]	@ (8002aa0 <HAL_TIM_MspPostInit+0xa8>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PITCH_F_PWM_Pin|MOTOR_PITCH_R_PWM_Pin;
 8002a52:	23c0      	movs	r3, #192	@ 0xc0
 8002a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a56:	2302      	movs	r3, #2
 8002a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a62:	2302      	movs	r3, #2
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a66:	f107 0314 	add.w	r3, r7, #20
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	480d      	ldr	r0, [pc, #52]	@ (8002aa4 <HAL_TIM_MspPostInit+0xac>)
 8002a6e:	f000 fdf7 	bl	8003660 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_ROLL_F_PWM_Pin|MOTOR_ROLL_R_PWM_Pin;
 8002a72:	2303      	movs	r3, #3
 8002a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a76:	2302      	movs	r3, #2
 8002a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a82:	2302      	movs	r3, #2
 8002a84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4806      	ldr	r0, [pc, #24]	@ (8002aa8 <HAL_TIM_MspPostInit+0xb0>)
 8002a8e:	f000 fde7 	bl	8003660 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a92:	bf00      	nop
 8002a94:	3728      	adds	r7, #40	@ 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40000400 	.word	0x40000400
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40020400 	.word	0x40020400

08002aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	@ 0x28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	609a      	str	r2, [r3, #8]
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a19      	ldr	r2, [pc, #100]	@ (8002b30 <HAL_UART_MspInit+0x84>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d12c      	bne.n	8002b28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	4b18      	ldr	r3, [pc, #96]	@ (8002b34 <HAL_UART_MspInit+0x88>)
 8002ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad6:	4a17      	ldr	r2, [pc, #92]	@ (8002b34 <HAL_UART_MspInit+0x88>)
 8002ad8:	f043 0310 	orr.w	r3, r3, #16
 8002adc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ade:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <HAL_UART_MspInit+0x88>)
 8002ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	4b11      	ldr	r3, [pc, #68]	@ (8002b34 <HAL_UART_MspInit+0x88>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	4a10      	ldr	r2, [pc, #64]	@ (8002b34 <HAL_UART_MspInit+0x88>)
 8002af4:	f043 0301 	orr.w	r3, r3, #1
 8002af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afa:	4b0e      	ldr	r3, [pc, #56]	@ (8002b34 <HAL_UART_MspInit+0x88>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b06:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b14:	2303      	movs	r3, #3
 8002b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b18:	2307      	movs	r3, #7
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4619      	mov	r1, r3
 8002b22:	4805      	ldr	r0, [pc, #20]	@ (8002b38 <HAL_UART_MspInit+0x8c>)
 8002b24:	f000 fd9c 	bl	8003660 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002b28:	bf00      	nop
 8002b2a:	3728      	adds	r7, #40	@ 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40020000 	.word	0x40020000

08002b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b40:	bf00      	nop
 8002b42:	e7fd      	b.n	8002b40 <NMI_Handler+0x4>

08002b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b48:	bf00      	nop
 8002b4a:	e7fd      	b.n	8002b48 <HardFault_Handler+0x4>

08002b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b50:	bf00      	nop
 8002b52:	e7fd      	b.n	8002b50 <MemManage_Handler+0x4>

08002b54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b58:	bf00      	nop
 8002b5a:	e7fd      	b.n	8002b58 <BusFault_Handler+0x4>

08002b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <UsageFault_Handler+0x4>

08002b64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b76:	bf00      	nop
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b92:	f000 fc0f 	bl	80033b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002ba0:	4802      	ldr	r0, [pc, #8]	@ (8002bac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002ba2:	f003 ff59 	bl	8006a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	200005bc 	.word	0x200005bc

08002bb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002bb4:	4802      	ldr	r0, [pc, #8]	@ (8002bc0 <OTG_FS_IRQHandler+0x10>)
 8002bb6:	f002 f847 	bl	8004c48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000b34 	.word	0x20000b34

08002bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return 1;
 8002bc8:	2301      	movs	r3, #1
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <_kill>:

int _kill(int pid, int sig)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bde:	f00a ff4b 	bl	800da78 <__errno>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2216      	movs	r2, #22
 8002be6:	601a      	str	r2, [r3, #0]
  return -1;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_exit>:

void _exit (int status)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff ffe7 	bl	8002bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c06:	bf00      	nop
 8002c08:	e7fd      	b.n	8002c06 <_exit+0x12>

08002c0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b086      	sub	sp, #24
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	60b9      	str	r1, [r7, #8]
 8002c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e00a      	b.n	8002c32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c1c:	f7ff fb5a 	bl	80022d4 <__io_getchar>
 8002c20:	4601      	mov	r1, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	60ba      	str	r2, [r7, #8]
 8002c28:	b2ca      	uxtb	r2, r1
 8002c2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	dbf0      	blt.n	8002c1c <_read+0x12>
  }

  return len;
 8002c3a:	687b      	ldr	r3, [r7, #4]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e009      	b.n	8002c6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	60ba      	str	r2, [r7, #8]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff fb26 	bl	80022b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	3301      	adds	r3, #1
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	dbf1      	blt.n	8002c56 <_write+0x12>
  }
  return len;
 8002c72:	687b      	ldr	r3, [r7, #4]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <_close>:

int _close(int file)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ca4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <_isatty>:

int _isatty(int file)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cbc:	2301      	movs	r3, #1
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cec:	4a14      	ldr	r2, [pc, #80]	@ (8002d40 <_sbrk+0x5c>)
 8002cee:	4b15      	ldr	r3, [pc, #84]	@ (8002d44 <_sbrk+0x60>)
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf8:	4b13      	ldr	r3, [pc, #76]	@ (8002d48 <_sbrk+0x64>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d00:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <_sbrk+0x64>)
 8002d02:	4a12      	ldr	r2, [pc, #72]	@ (8002d4c <_sbrk+0x68>)
 8002d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d06:	4b10      	ldr	r3, [pc, #64]	@ (8002d48 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d207      	bcs.n	8002d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d14:	f00a feb0 	bl	800da78 <__errno>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	220c      	movs	r2, #12
 8002d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	e009      	b.n	8002d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d24:	4b08      	ldr	r3, [pc, #32]	@ (8002d48 <_sbrk+0x64>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d2a:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <_sbrk+0x64>)
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4413      	add	r3, r2
 8002d32:	4a05      	ldr	r2, [pc, #20]	@ (8002d48 <_sbrk+0x64>)
 8002d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d36:	68fb      	ldr	r3, [r7, #12]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20020000 	.word	0x20020000
 8002d44:	00000400 	.word	0x00000400
 8002d48:	2000064c 	.word	0x2000064c
 8002d4c:	20001190 	.word	0x20001190

08002d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d54:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <SystemInit+0x20>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5a:	4a05      	ldr	r2, [pc, #20]	@ (8002d70 <SystemInit+0x20>)
 8002d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <AS5600Init>:
static uint8_t ReadRegister(AS5600_t *device, AS5600Reg reg);
static void ReadRegisterBurst(AS5600_t *device, AS5600Reg reg, uint8_t *data,
		uint8_t length);
static uint16_t ReadRegister16(AS5600_t *device, AS5600Reg reg);

void AS5600Init(AS5600_t *device, I2C_HandleTypeDef *hi2c) {
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
	device->hi2c = hi2c;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	601a      	str	r2, [r3, #0]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <AS5600GetAngle>:

uint8_t AS5600GetStatus(AS5600_t *device) {
	return ReadRegister(device, AS5600_STATUS);
}

uint16_t AS5600GetAngle(AS5600_t *device) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	return ReadRegister16(device, AS5600_RAW_ANGLE_1);
 8002d98:	210c      	movs	r1, #12
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f833 	bl	8002e06 <ReadRegister16>
 8002da0:	4603      	mov	r3, r0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <ReadRegisterBurst>:

	return data;
}

static void ReadRegisterBurst(AS5600_t *device, AS5600Reg reg, uint8_t *data,
		uint8_t length) {
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b088      	sub	sp, #32
 8002dae:	af02      	add	r7, sp, #8
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	607a      	str	r2, [r7, #4]
 8002db4:	461a      	mov	r2, r3
 8002db6:	460b      	mov	r3, r1
 8002db8:	72fb      	strb	r3, [r7, #11]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	72bb      	strb	r3, [r7, #10]

	HAL_StatusTypeDef status;
	// Transmit register to access.
	status = HAL_I2C_Master_Transmit(device->hi2c, AS5600_I2C_ADDR, (uint8_t *)&reg, 1,
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6818      	ldr	r0, [r3, #0]
 8002dc2:	f107 020b 	add.w	r2, r7, #11
 8002dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	2301      	movs	r3, #1
 8002dce:	216c      	movs	r1, #108	@ 0x6c
 8002dd0:	f000 ff40 	bl	8003c54 <HAL_I2C_Master_Transmit>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);
	if(status != HAL_OK) {
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d10f      	bne.n	8002dfe <ReadRegisterBurst+0x54>
		return 0xFF;
	}

	// Receive data from specified register for specified length.
	status = HAL_I2C_Master_Receive(device->hi2c, AS5600_I2C_ADDR, data, length,
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6818      	ldr	r0, [r3, #0]
 8002de2:	7abb      	ldrb	r3, [r7, #10]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f04f 32ff 	mov.w	r2, #4294967295
 8002dea:	9200      	str	r2, [sp, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	216c      	movs	r1, #108	@ 0x6c
 8002df0:	f001 f82e 	bl	8003e50 <HAL_I2C_Master_Receive>
 8002df4:	4603      	mov	r3, r0
 8002df6:	75fb      	strb	r3, [r7, #23]
			HAL_MAX_DELAY);
	if(status != HAL_OK) {
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	e000      	b.n	8002e00 <ReadRegisterBurst+0x56>
		return 0xFF;
 8002dfe:	bf00      	nop
		return 0xFF;
	}
}
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}

08002e06 <ReadRegister16>:

static uint16_t ReadRegister16(AS5600_t *device, AS5600Reg reg) {
 8002e06:	b580      	push	{r7, lr}
 8002e08:	b084      	sub	sp, #16
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	70fb      	strb	r3, [r7, #3]
	uint16_t data;
	ReadRegisterBurst(device, reg, (uint8_t *)&data, 2);
 8002e12:	f107 020c 	add.w	r2, r7, #12
 8002e16:	78f9      	ldrb	r1, [r7, #3]
 8002e18:	2302      	movs	r3, #2
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff ffc5 	bl	8002daa <ReadRegisterBurst>

	//swap byte order (to little endian)
	uint8_t temp = (uint8_t)(data >> 8);
 8002e20:	89bb      	ldrh	r3, [r7, #12]
 8002e22:	0a1b      	lsrs	r3, r3, #8
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	73fb      	strb	r3, [r7, #15]
	data = (data << 8) | temp;
 8002e28:	89bb      	ldrh	r3, [r7, #12]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	b21a      	sxth	r2, r3
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	b21b      	sxth	r3, r3
 8002e32:	4313      	orrs	r3, r2
 8002e34:	b21b      	sxth	r3, r3
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	81bb      	strh	r3, [r7, #12]

	return data;
 8002e3a:	89bb      	ldrh	r3, [r7, #12]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <AS5600InterfaceInit>:

// Private function prototypes
int GetEncoderSensorCount(EncoderInterface_t *interface);


void AS5600InterfaceInit(EncoderInterface_t *interface, AS5600_t *hwEncoder) {
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
	interface->hardwareEncoder = hwEncoder;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	601a      	str	r2, [r3, #0]
	interface->GetEncoderSensorCount = &GetEncoderSensorCount;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a04      	ldr	r2, [pc, #16]	@ (8002e68 <AS5600InterfaceInit+0x24>)
 8002e58:	605a      	str	r2, [r3, #4]
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	08002e6d 	.word	0x08002e6d

08002e6c <GetEncoderSensorCount>:

int GetEncoderSensorCount(EncoderInterface_t *interface) {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
	return AS5600GetAngle((AS5600_t *)interface->hardwareEncoder);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff89 	bl	8002d90 <AS5600GetAngle>
 8002e7e:	4603      	mov	r3, r0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <BTS7960Init>:
	// Ensure motor is powered off for safety
	BTS7960SetPower(driver, 0);
}

void BTS7960Init(BTS7960_t *driver, TIM_HandleTypeDef *htim,
		uint32_t forwardPwmCh, uint32_t reversePwmCh) {
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	603b      	str	r3, [r7, #0]
	driver->enableInit = false;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
	driver->htim = htim;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	615a      	str	r2, [r3, #20]
	driver->forwardPwmCh = forwardPwmCh;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	619a      	str	r2, [r3, #24]
	driver->reversePwmCh = reversePwmCh;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	61da      	str	r2, [r3, #28]

	// Ensure motor is powered off for safety
	BTS7960SetPower(driver, 0);
 8002eae:	2100      	movs	r1, #0
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f805 	bl	8002ec0 <BTS7960SetPower>
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
	...

08002ec0 <BTS7960SetPower>:

void BTS7960SetPower(BTS7960_t *driver, int power) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
	driver->power = Constrain(power, -BTS7690_MAX_PWM_POWER,
 8002eca:	f241 22bf 	movw	r2, #4799	@ 0x12bf
 8002ece:	4998      	ldr	r1, [pc, #608]	@ (8003130 <BTS7960SetPower+0x270>)
 8002ed0:	6838      	ldr	r0, [r7, #0]
 8002ed2:	f7fe ff02 	bl	8001cda <Constrain>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	621a      	str	r2, [r3, #32]
			BTS7690_MAX_PWM_POWER);

	// Determine direction signals
	if(driver->power > 0) {
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a1b      	ldr	r3, [r3, #32]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	dd7a      	ble.n	8002fda <BTS7960SetPower+0x11a>
		if(driver->enableInit) {
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <BTS7960SetPower+0x44>
			GPIOSetState(&driver->forwardEn, GPIO_HIGH);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 f9c6 	bl	8003284 <GPIOSetState>
			GPIOSetState(&driver->reverseEn, GPIO_LOW);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	330c      	adds	r3, #12
 8002efc:	2101      	movs	r1, #1
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 f9c0 	bl	8003284 <GPIOSetState>
		}
		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10e      	bne.n	8002f2a <BTS7960SetPower+0x6a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a1b      	ldr	r3, [r3, #32]
 8002f10:	ee07 3a90 	vmov	s15, r3
 8002f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	ee17 2a90 	vmov	r2, s15
 8002f26:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f28:	e033      	b.n	8002f92 <BTS7960SetPower+0xd2>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d10e      	bne.n	8002f50 <BTS7960SetPower+0x90>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
 8002f36:	ee07 3a90 	vmov	s15, r3
 8002f3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	ee17 3a90 	vmov	r3, s15
 8002f4c:	6393      	str	r3, [r2, #56]	@ 0x38
 8002f4e:	e020      	b.n	8002f92 <BTS7960SetPower+0xd2>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d10e      	bne.n	8002f76 <BTS7960SetPower+0xb6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	ee17 3a90 	vmov	r3, s15
 8002f72:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002f74:	e00d      	b.n	8002f92 <BTS7960SetPower+0xd2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	ee17 3a90 	vmov	r3, s15
 8002f90:	6413      	str	r3, [r2, #64]	@ 0x40
				(int)(driver->power * BTS7690_FORWARD_DIR_POWER_SCALE));
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d105      	bne.n	8002fa6 <BTS7960SetPower+0xe6>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh, 0);
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
	}
}
 8002fa4:	e0f9      	b.n	800319a <BTS7960SetPower+0x2da>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d105      	bne.n	8002fba <BTS7960SetPower+0xfa>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	6393      	str	r3, [r2, #56]	@ 0x38
 8002fb8:	e0ef      	b.n	800319a <BTS7960SetPower+0x2da>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d105      	bne.n	8002fce <BTS7960SetPower+0x10e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2300      	movs	r3, #0
 8002fca:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002fcc:	e0e5      	b.n	800319a <BTS7960SetPower+0x2da>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002fd8:	e0df      	b.n	800319a <BTS7960SetPower+0x2da>
	else if(driver->power < 0) {
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f280 8082 	bge.w	80030e8 <BTS7960SetPower+0x228>
		if(driver->enableInit) {
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00b      	beq.n	8003004 <BTS7960SetPower+0x144>
			GPIOSetState(&driver->forwardEn, GPIO_LOW);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f946 	bl	8003284 <GPIOSetState>
			GPIOSetState(&driver->reverseEn, GPIO_HIGH);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	330c      	adds	r3, #12
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 f940 	bl	8003284 <GPIOSetState>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh, 0);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <BTS7960SetPower+0x158>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2200      	movs	r2, #0
 8003014:	635a      	str	r2, [r3, #52]	@ 0x34
 8003016:	e018      	b.n	800304a <BTS7960SetPower+0x18a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d105      	bne.n	800302c <BTS7960SetPower+0x16c>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	2300      	movs	r3, #0
 8003028:	6393      	str	r3, [r2, #56]	@ 0x38
 800302a:	e00e      	b.n	800304a <BTS7960SetPower+0x18a>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b08      	cmp	r3, #8
 8003032:	d105      	bne.n	8003040 <BTS7960SetPower+0x180>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	2300      	movs	r3, #0
 800303c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800303e:	e004      	b.n	800304a <BTS7960SetPower+0x18a>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2300      	movs	r3, #0
 8003048:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10f      	bne.n	8003072 <BTS7960SetPower+0x1b2>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	ee07 3a90 	vmov	s15, r3
 800305a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800305e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003062:	ee17 3a90 	vmov	r3, s15
 8003066:	425a      	negs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003070:	e093      	b.n	800319a <BTS7960SetPower+0x2da>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh,
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	2b04      	cmp	r3, #4
 8003078:	d110      	bne.n	800309c <BTS7960SetPower+0x1dc>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800308a:	ee17 3a90 	vmov	r3, s15
 800308e:	4259      	negs	r1, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	460b      	mov	r3, r1
 8003098:	6393      	str	r3, [r2, #56]	@ 0x38
 800309a:	e07e      	b.n	800319a <BTS7960SetPower+0x2da>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d110      	bne.n	80030c6 <BTS7960SetPower+0x206>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	ee07 3a90 	vmov	s15, r3
 80030ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030b4:	ee17 3a90 	vmov	r3, s15
 80030b8:	4259      	negs	r1, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	460b      	mov	r3, r1
 80030c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80030c4:	e069      	b.n	800319a <BTS7960SetPower+0x2da>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030d6:	ee17 3a90 	vmov	r3, s15
 80030da:	4259      	negs	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	695b      	ldr	r3, [r3, #20]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	460b      	mov	r3, r1
 80030e4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80030e6:	e058      	b.n	800319a <BTS7960SetPower+0x2da>
		if(driver->enableInit) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00b      	beq.n	8003108 <BTS7960SetPower+0x248>
			GPIOSetState(&driver->forwardEn, GPIO_LOW);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	2101      	movs	r1, #1
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f8c4 	bl	8003284 <GPIOSetState>
			GPIOSetState(&driver->reverseEn, GPIO_LOW);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	330c      	adds	r3, #12
 8003100:	2101      	movs	r1, #1
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f8be 	bl	8003284 <GPIOSetState>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->forwardPwmCh, 0);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <BTS7960SetPower+0x25c>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2200      	movs	r2, #0
 8003118:	635a      	str	r2, [r3, #52]	@ 0x34
 800311a:	e01a      	b.n	8003152 <BTS7960SetPower+0x292>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d107      	bne.n	8003134 <BTS7960SetPower+0x274>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	2300      	movs	r3, #0
 800312c:	6393      	str	r3, [r2, #56]	@ 0x38
 800312e:	e010      	b.n	8003152 <BTS7960SetPower+0x292>
 8003130:	ffffed41 	.word	0xffffed41
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b08      	cmp	r3, #8
 800313a:	d105      	bne.n	8003148 <BTS7960SetPower+0x288>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	2300      	movs	r3, #0
 8003144:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003146:	e004      	b.n	8003152 <BTS7960SetPower+0x292>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	2300      	movs	r3, #0
 8003150:	6413      	str	r3, [r2, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d105      	bne.n	8003166 <BTS7960SetPower+0x2a6>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2200      	movs	r2, #0
 8003162:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003164:	e019      	b.n	800319a <BTS7960SetPower+0x2da>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	2b04      	cmp	r3, #4
 800316c:	d105      	bne.n	800317a <BTS7960SetPower+0x2ba>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	2300      	movs	r3, #0
 8003176:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003178:	e00f      	b.n	800319a <BTS7960SetPower+0x2da>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	2b08      	cmp	r3, #8
 8003180:	d105      	bne.n	800318e <BTS7960SetPower+0x2ce>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2300      	movs	r3, #0
 800318a:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800318c:	e005      	b.n	800319a <BTS7960SetPower+0x2da>
		__HAL_TIM_SET_COMPARE(driver->htim, driver->reversePwmCh, 0);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2300      	movs	r3, #0
 8003196:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003198:	e7ff      	b.n	800319a <BTS7960SetPower+0x2da>
 800319a:	bf00      	nop
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop

080031a4 <BTS7960GetPower>:

int BTS7960GetPower(BTS7960_t *driver) {
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	return driver->power;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <BTS7960InterfaceInit>:

// Private function prototypes
int MotorIGetPower(MotorInterface_t *interface);
void MotorISetPower(MotorInterface_t *interface, int power);

void BTS7960InterfaceInit(MotorInterface_t *interface, BTS7960_t *driver) {
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
	interface->hardwareMotor = driver;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	601a      	str	r2, [r3, #0]
	interface->MotorGetPower = &MotorIGetPower;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a05      	ldr	r2, [pc, #20]	@ (80031e4 <BTS7960InterfaceInit+0x28>)
 80031d0:	605a      	str	r2, [r3, #4]
	interface->MotorSetPower = &MotorISetPower;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a04      	ldr	r2, [pc, #16]	@ (80031e8 <BTS7960InterfaceInit+0x2c>)
 80031d6:	609a      	str	r2, [r3, #8]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	080031ed 	.word	0x080031ed
 80031e8:	08003209 	.word	0x08003209

080031ec <MotorIGetPower>:

int MotorIGetPower(MotorInterface_t *interface) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	return BTS7960GetPower((BTS7960_t *)interface->hardwareMotor);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4618      	mov	r0, r3
 80031fa:	f7ff ffd3 	bl	80031a4 <BTS7960GetPower>
 80031fe:	4603      	mov	r3, r0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <MotorISetPower>:

void MotorISetPower(MotorInterface_t *interface, int power) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
	BTS7960SetPower((BTS7960_t *)interface->hardwareMotor, power);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6839      	ldr	r1, [r7, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fe51 	bl	8002ec0 <BTS7960SetPower>
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <GPIOInit>:
 *      Author: Jennyston
 */

#include "peripherals/gpio.h"

void GPIOInit(GPIO_t *gpio, GPIO_TypeDef *port, uint16_t pin) {
 8003226:	b480      	push	{r7}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	4613      	mov	r3, r2
 8003232:	80fb      	strh	r3, [r7, #6]
	gpio->port = port;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	601a      	str	r2, [r3, #0]
	gpio->pin = pin;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	88fa      	ldrh	r2, [r7, #6]
 800323e:	809a      	strh	r2, [r3, #4]
//	gpio->hcomp = NULL;
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <GPIOGetState>:
//	gpio->port = NULL;
//	gpio->pin = 0;
//	gpio->hcomp = hcomp;
//}

GPIOState GPIOGetState(GPIO_t *gpio) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	if(gpio->port != NULL) {
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00e      	beq.n	800327a <GPIOGetState+0x2e>
		return HAL_GPIO_ReadPin(gpio->port, gpio->pin) == GPIO_PIN_SET ?
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	889b      	ldrh	r3, [r3, #4]
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f000 fb7e 	bl	8003968 <HAL_GPIO_ReadPin>
 800326c:	4603      	mov	r3, r0
				GPIO_HIGH : GPIO_LOW;
 800326e:	2b01      	cmp	r3, #1
 8003270:	bf14      	ite	ne
 8003272:	2301      	movne	r3, #1
 8003274:	2300      	moveq	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	e000      	b.n	800327c <GPIOGetState+0x30>
//	else if (gpio->hcomp != NULL) {
//		return HAL_COMP_GetOutputLevel(gpio->hcomp) == COMP_OUTPUTLEVEL_HIGH ?
//				GPIO_HIGH : GPIO_LOW;
//	}
	else {
		return GPIO_LOW;
 800327a:	2301      	movs	r3, #1
	}
}
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <GPIOSetState>:

void GPIOSetState(GPIO_t *gpio, GPIOState state) {
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	460b      	mov	r3, r1
 800328e:	70fb      	strb	r3, [r7, #3]
	if(gpio->port != NULL) {
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00c      	beq.n	80032b2 <GPIOSetState+0x2e>
		HAL_GPIO_WritePin(gpio->port, gpio->pin, state == GPIO_HIGH ?
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6818      	ldr	r0, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	8899      	ldrh	r1, [r3, #4]
 80032a0:	78fb      	ldrb	r3, [r7, #3]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf0c      	ite	eq
 80032a6:	2301      	moveq	r3, #1
 80032a8:	2300      	movne	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	f000 fb73 	bl	8003998 <HAL_GPIO_WritePin>
				GPIO_PIN_SET : GPIO_PIN_RESET);
	}
}
 80032b2:	bf00      	nop
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80032bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032c0:	f7ff fd46 	bl	8002d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032c4:	480c      	ldr	r0, [pc, #48]	@ (80032f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032c6:	490d      	ldr	r1, [pc, #52]	@ (80032fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032c8:	4a0d      	ldr	r2, [pc, #52]	@ (8003300 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032cc:	e002      	b.n	80032d4 <LoopCopyDataInit>

080032ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032d2:	3304      	adds	r3, #4

080032d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d8:	d3f9      	bcc.n	80032ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032da:	4a0a      	ldr	r2, [pc, #40]	@ (8003304 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003308 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032e0:	e001      	b.n	80032e6 <LoopFillZerobss>

080032e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032e4:	3204      	adds	r2, #4

080032e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e8:	d3fb      	bcc.n	80032e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032ea:	f00a fbcb 	bl	800da84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ee:	f7ff f82d 	bl	800234c <main>
  bx  lr    
 80032f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80032f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032fc:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8003300:	0800fef0 	.word	0x0800fef0
  ldr r2, =_sbss
 8003304:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8003308:	2000118c 	.word	0x2000118c

0800330c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800330c:	e7fe      	b.n	800330c <ADC_IRQHandler>
	...

08003310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003314:	4b0e      	ldr	r3, [pc, #56]	@ (8003350 <HAL_Init+0x40>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a0d      	ldr	r2, [pc, #52]	@ (8003350 <HAL_Init+0x40>)
 800331a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800331e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003320:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_Init+0x40>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a0a      	ldr	r2, [pc, #40]	@ (8003350 <HAL_Init+0x40>)
 8003326:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800332a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800332c:	4b08      	ldr	r3, [pc, #32]	@ (8003350 <HAL_Init+0x40>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a07      	ldr	r2, [pc, #28]	@ (8003350 <HAL_Init+0x40>)
 8003332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003338:	2003      	movs	r0, #3
 800333a:	f000 f94f 	bl	80035dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800333e:	200f      	movs	r0, #15
 8003340:	f000 f808 	bl	8003354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003344:	f7ff fa56 	bl	80027f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023c00 	.word	0x40023c00

08003354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800335c:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <HAL_InitTick+0x54>)
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	4b12      	ldr	r3, [pc, #72]	@ (80033ac <HAL_InitTick+0x58>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	4619      	mov	r1, r3
 8003366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800336a:	fbb3 f3f1 	udiv	r3, r3, r1
 800336e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f967 	bl	8003646 <HAL_SYSTICK_Config>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e00e      	b.n	80033a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b0f      	cmp	r3, #15
 8003386:	d80a      	bhi.n	800339e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003388:	2200      	movs	r2, #0
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	f04f 30ff 	mov.w	r0, #4294967295
 8003390:	f000 f92f 	bl	80035f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003394:	4a06      	ldr	r2, [pc, #24]	@ (80033b0 <HAL_InitTick+0x5c>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	e000      	b.n	80033a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3708      	adds	r7, #8
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	20000000 	.word	0x20000000
 80033ac:	20000008 	.word	0x20000008
 80033b0:	20000004 	.word	0x20000004

080033b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033b8:	4b06      	ldr	r3, [pc, #24]	@ (80033d4 <HAL_IncTick+0x20>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <HAL_IncTick+0x24>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4413      	add	r3, r2
 80033c4:	4a04      	ldr	r2, [pc, #16]	@ (80033d8 <HAL_IncTick+0x24>)
 80033c6:	6013      	str	r3, [r2, #0]
}
 80033c8:	bf00      	nop
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000008 	.word	0x20000008
 80033d8:	20000650 	.word	0x20000650

080033dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  return uwTick;
 80033e0:	4b03      	ldr	r3, [pc, #12]	@ (80033f0 <HAL_GetTick+0x14>)
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000650 	.word	0x20000650

080033f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033fc:	f7ff ffee 	bl	80033dc <HAL_GetTick>
 8003400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d005      	beq.n	800341a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800340e:	4b0a      	ldr	r3, [pc, #40]	@ (8003438 <HAL_Delay+0x44>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4413      	add	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800341a:	bf00      	nop
 800341c:	f7ff ffde 	bl	80033dc <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	429a      	cmp	r2, r3
 800342a:	d8f7      	bhi.n	800341c <HAL_Delay+0x28>
  {
  }
}
 800342c:	bf00      	nop
 800342e:	bf00      	nop
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000008 	.word	0x20000008

0800343c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800344c:	4b0c      	ldr	r3, [pc, #48]	@ (8003480 <__NVIC_SetPriorityGrouping+0x44>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003458:	4013      	ands	r3, r2
 800345a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003464:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800346c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800346e:	4a04      	ldr	r2, [pc, #16]	@ (8003480 <__NVIC_SetPriorityGrouping+0x44>)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	60d3      	str	r3, [r2, #12]
}
 8003474:	bf00      	nop
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003488:	4b04      	ldr	r3, [pc, #16]	@ (800349c <__NVIC_GetPriorityGrouping+0x18>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	0a1b      	lsrs	r3, r3, #8
 800348e:	f003 0307 	and.w	r3, r3, #7
}
 8003492:	4618      	mov	r0, r3
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	db0b      	blt.n	80034ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	f003 021f 	and.w	r2, r3, #31
 80034b8:	4907      	ldr	r1, [pc, #28]	@ (80034d8 <__NVIC_EnableIRQ+0x38>)
 80034ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	2001      	movs	r0, #1
 80034c2:	fa00 f202 	lsl.w	r2, r0, r2
 80034c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	e000e100 	.word	0xe000e100

080034dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	6039      	str	r1, [r7, #0]
 80034e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	db0a      	blt.n	8003506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	b2da      	uxtb	r2, r3
 80034f4:	490c      	ldr	r1, [pc, #48]	@ (8003528 <__NVIC_SetPriority+0x4c>)
 80034f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034fa:	0112      	lsls	r2, r2, #4
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	440b      	add	r3, r1
 8003500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003504:	e00a      	b.n	800351c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	4908      	ldr	r1, [pc, #32]	@ (800352c <__NVIC_SetPriority+0x50>)
 800350c:	79fb      	ldrb	r3, [r7, #7]
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	3b04      	subs	r3, #4
 8003514:	0112      	lsls	r2, r2, #4
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	440b      	add	r3, r1
 800351a:	761a      	strb	r2, [r3, #24]
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	e000e100 	.word	0xe000e100
 800352c:	e000ed00 	.word	0xe000ed00

08003530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003530:	b480      	push	{r7}
 8003532:	b089      	sub	sp, #36	@ 0x24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f1c3 0307 	rsb	r3, r3, #7
 800354a:	2b04      	cmp	r3, #4
 800354c:	bf28      	it	cs
 800354e:	2304      	movcs	r3, #4
 8003550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	3304      	adds	r3, #4
 8003556:	2b06      	cmp	r3, #6
 8003558:	d902      	bls.n	8003560 <NVIC_EncodePriority+0x30>
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	3b03      	subs	r3, #3
 800355e:	e000      	b.n	8003562 <NVIC_EncodePriority+0x32>
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003564:	f04f 32ff 	mov.w	r2, #4294967295
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	43da      	mvns	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	401a      	ands	r2, r3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003578:	f04f 31ff 	mov.w	r1, #4294967295
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	fa01 f303 	lsl.w	r3, r1, r3
 8003582:	43d9      	mvns	r1, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003588:	4313      	orrs	r3, r2
         );
}
 800358a:	4618      	mov	r0, r3
 800358c:	3724      	adds	r7, #36	@ 0x24
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035a8:	d301      	bcc.n	80035ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00f      	b.n	80035ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ae:	4a0a      	ldr	r2, [pc, #40]	@ (80035d8 <SysTick_Config+0x40>)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035b6:	210f      	movs	r1, #15
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	f7ff ff8e 	bl	80034dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035c0:	4b05      	ldr	r3, [pc, #20]	@ (80035d8 <SysTick_Config+0x40>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035c6:	4b04      	ldr	r3, [pc, #16]	@ (80035d8 <SysTick_Config+0x40>)
 80035c8:	2207      	movs	r2, #7
 80035ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	e000e010 	.word	0xe000e010

080035dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7ff ff29 	bl	800343c <__NVIC_SetPriorityGrouping>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b086      	sub	sp, #24
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	4603      	mov	r3, r0
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
 80035fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003604:	f7ff ff3e 	bl	8003484 <__NVIC_GetPriorityGrouping>
 8003608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	6978      	ldr	r0, [r7, #20]
 8003610:	f7ff ff8e 	bl	8003530 <NVIC_EncodePriority>
 8003614:	4602      	mov	r2, r0
 8003616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff5d 	bl	80034dc <__NVIC_SetPriority>
}
 8003622:	bf00      	nop
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff31 	bl	80034a0 <__NVIC_EnableIRQ>
}
 800363e:	bf00      	nop
 8003640:	3708      	adds	r7, #8
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b082      	sub	sp, #8
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7ff ffa2 	bl	8003598 <SysTick_Config>
 8003654:	4603      	mov	r3, r0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003660:	b480      	push	{r7}
 8003662:	b089      	sub	sp, #36	@ 0x24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003672:	2300      	movs	r3, #0
 8003674:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003676:	2300      	movs	r3, #0
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	e159      	b.n	8003930 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800367c:	2201      	movs	r2, #1
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	4013      	ands	r3, r2
 800368e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	f040 8148 	bne.w	800392a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d005      	beq.n	80036b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d130      	bne.n	8003714 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	2203      	movs	r2, #3
 80036be:	fa02 f303 	lsl.w	r3, r2, r3
 80036c2:	43db      	mvns	r3, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4013      	ands	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4313      	orrs	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036e8:	2201      	movs	r2, #1
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 0201 	and.w	r2, r3, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	4313      	orrs	r3, r2
 800370c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f003 0303 	and.w	r3, r3, #3
 800371c:	2b03      	cmp	r3, #3
 800371e:	d017      	beq.n	8003750 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	2203      	movs	r2, #3
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	4013      	ands	r3, r2
 8003736:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4313      	orrs	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d123      	bne.n	80037a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	08da      	lsrs	r2, r3, #3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3208      	adds	r2, #8
 8003764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003768:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	220f      	movs	r2, #15
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	691a      	ldr	r2, [r3, #16]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	08da      	lsrs	r2, r3, #3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3208      	adds	r2, #8
 800379e:	69b9      	ldr	r1, [r7, #24]
 80037a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f003 0203 	and.w	r2, r3, #3
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80a2 	beq.w	800392a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	4b57      	ldr	r3, [pc, #348]	@ (8003948 <HAL_GPIO_Init+0x2e8>)
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	4a56      	ldr	r2, [pc, #344]	@ (8003948 <HAL_GPIO_Init+0x2e8>)
 80037f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f6:	4b54      	ldr	r3, [pc, #336]	@ (8003948 <HAL_GPIO_Init+0x2e8>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003802:	4a52      	ldr	r2, [pc, #328]	@ (800394c <HAL_GPIO_Init+0x2ec>)
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	089b      	lsrs	r3, r3, #2
 8003808:	3302      	adds	r3, #2
 800380a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800380e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	220f      	movs	r2, #15
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	4013      	ands	r3, r2
 8003824:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a49      	ldr	r2, [pc, #292]	@ (8003950 <HAL_GPIO_Init+0x2f0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d019      	beq.n	8003862 <HAL_GPIO_Init+0x202>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a48      	ldr	r2, [pc, #288]	@ (8003954 <HAL_GPIO_Init+0x2f4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_GPIO_Init+0x1fe>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a47      	ldr	r2, [pc, #284]	@ (8003958 <HAL_GPIO_Init+0x2f8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d00d      	beq.n	800385a <HAL_GPIO_Init+0x1fa>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a46      	ldr	r2, [pc, #280]	@ (800395c <HAL_GPIO_Init+0x2fc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d007      	beq.n	8003856 <HAL_GPIO_Init+0x1f6>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a45      	ldr	r2, [pc, #276]	@ (8003960 <HAL_GPIO_Init+0x300>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_GPIO_Init+0x1f2>
 800384e:	2304      	movs	r3, #4
 8003850:	e008      	b.n	8003864 <HAL_GPIO_Init+0x204>
 8003852:	2307      	movs	r3, #7
 8003854:	e006      	b.n	8003864 <HAL_GPIO_Init+0x204>
 8003856:	2303      	movs	r3, #3
 8003858:	e004      	b.n	8003864 <HAL_GPIO_Init+0x204>
 800385a:	2302      	movs	r3, #2
 800385c:	e002      	b.n	8003864 <HAL_GPIO_Init+0x204>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_GPIO_Init+0x204>
 8003862:	2300      	movs	r3, #0
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	f002 0203 	and.w	r2, r2, #3
 800386a:	0092      	lsls	r2, r2, #2
 800386c:	4093      	lsls	r3, r2
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003874:	4935      	ldr	r1, [pc, #212]	@ (800394c <HAL_GPIO_Init+0x2ec>)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	089b      	lsrs	r3, r3, #2
 800387a:	3302      	adds	r3, #2
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003882:	4b38      	ldr	r3, [pc, #224]	@ (8003964 <HAL_GPIO_Init+0x304>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003964 <HAL_GPIO_Init+0x304>)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003964 <HAL_GPIO_Init+0x304>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	43db      	mvns	r3, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4013      	ands	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d0:	4a24      	ldr	r2, [pc, #144]	@ (8003964 <HAL_GPIO_Init+0x304>)
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038d6:	4b23      	ldr	r3, [pc, #140]	@ (8003964 <HAL_GPIO_Init+0x304>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	43db      	mvns	r3, r3
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	4013      	ands	r3, r2
 80038e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003964 <HAL_GPIO_Init+0x304>)
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003900:	4b18      	ldr	r3, [pc, #96]	@ (8003964 <HAL_GPIO_Init+0x304>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	43db      	mvns	r3, r3
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	4013      	ands	r3, r2
 800390e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003924:	4a0f      	ldr	r2, [pc, #60]	@ (8003964 <HAL_GPIO_Init+0x304>)
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3301      	adds	r3, #1
 800392e:	61fb      	str	r3, [r7, #28]
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	2b0f      	cmp	r3, #15
 8003934:	f67f aea2 	bls.w	800367c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	3724      	adds	r7, #36	@ 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	40013800 	.word	0x40013800
 8003950:	40020000 	.word	0x40020000
 8003954:	40020400 	.word	0x40020400
 8003958:	40020800 	.word	0x40020800
 800395c:	40020c00 	.word	0x40020c00
 8003960:	40021000 	.word	0x40021000
 8003964:	40013c00 	.word	0x40013c00

08003968 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003968:	b480      	push	{r7}
 800396a:	b085      	sub	sp, #20
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	887b      	ldrh	r3, [r7, #2]
 800397a:	4013      	ands	r3, r2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
 8003984:	e001      	b.n	800398a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003986:	2300      	movs	r3, #0
 8003988:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]
 80039a4:	4613      	mov	r3, r2
 80039a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039a8:	787b      	ldrb	r3, [r7, #1]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039b4:	e003      	b.n	80039be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	041a      	lsls	r2, r3, #16
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	619a      	str	r2, [r3, #24]
}
 80039be:	bf00      	nop
 80039c0:	370c      	adds	r7, #12
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
	...

080039cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e12b      	b.n	8003c36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d106      	bne.n	80039f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7fe ff26 	bl	8002844 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2224      	movs	r2, #36	@ 0x24
 80039fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0201 	bic.w	r2, r2, #1
 8003a0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a30:	f002 fe2e 	bl	8006690 <HAL_RCC_GetPCLK1Freq>
 8003a34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	4a81      	ldr	r2, [pc, #516]	@ (8003c40 <HAL_I2C_Init+0x274>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d807      	bhi.n	8003a50 <HAL_I2C_Init+0x84>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4a80      	ldr	r2, [pc, #512]	@ (8003c44 <HAL_I2C_Init+0x278>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	bf94      	ite	ls
 8003a48:	2301      	movls	r3, #1
 8003a4a:	2300      	movhi	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	e006      	b.n	8003a5e <HAL_I2C_Init+0x92>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4a7d      	ldr	r2, [pc, #500]	@ (8003c48 <HAL_I2C_Init+0x27c>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	bf94      	ite	ls
 8003a58:	2301      	movls	r3, #1
 8003a5a:	2300      	movhi	r3, #0
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e0e7      	b.n	8003c36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a78      	ldr	r2, [pc, #480]	@ (8003c4c <HAL_I2C_Init+0x280>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	0c9b      	lsrs	r3, r3, #18
 8003a70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	4a6a      	ldr	r2, [pc, #424]	@ (8003c40 <HAL_I2C_Init+0x274>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d802      	bhi.n	8003aa0 <HAL_I2C_Init+0xd4>
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	e009      	b.n	8003ab4 <HAL_I2C_Init+0xe8>
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	4a69      	ldr	r2, [pc, #420]	@ (8003c50 <HAL_I2C_Init+0x284>)
 8003aac:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab0:	099b      	lsrs	r3, r3, #6
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6812      	ldr	r2, [r2, #0]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ac6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	495c      	ldr	r1, [pc, #368]	@ (8003c40 <HAL_I2C_Init+0x274>)
 8003ad0:	428b      	cmp	r3, r1
 8003ad2:	d819      	bhi.n	8003b08 <HAL_I2C_Init+0x13c>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1e59      	subs	r1, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003ae8:	400b      	ands	r3, r1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d00a      	beq.n	8003b04 <HAL_I2C_Init+0x138>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1e59      	subs	r1, r3, #1
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003afc:	3301      	adds	r3, #1
 8003afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b02:	e051      	b.n	8003ba8 <HAL_I2C_Init+0x1dc>
 8003b04:	2304      	movs	r3, #4
 8003b06:	e04f      	b.n	8003ba8 <HAL_I2C_Init+0x1dc>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d111      	bne.n	8003b34 <HAL_I2C_Init+0x168>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1e58      	subs	r0, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	440b      	add	r3, r1
 8003b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b22:	3301      	adds	r3, #1
 8003b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf0c      	ite	eq
 8003b2c:	2301      	moveq	r3, #1
 8003b2e:	2300      	movne	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e012      	b.n	8003b5a <HAL_I2C_Init+0x18e>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	1e58      	subs	r0, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6859      	ldr	r1, [r3, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	0099      	lsls	r1, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	bf0c      	ite	eq
 8003b54:	2301      	moveq	r3, #1
 8003b56:	2300      	movne	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Init+0x196>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e022      	b.n	8003ba8 <HAL_I2C_Init+0x1dc>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10e      	bne.n	8003b88 <HAL_I2C_Init+0x1bc>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1e58      	subs	r0, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6859      	ldr	r1, [r3, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	005b      	lsls	r3, r3, #1
 8003b76:	440b      	add	r3, r1
 8003b78:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b86:	e00f      	b.n	8003ba8 <HAL_I2C_Init+0x1dc>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	1e58      	subs	r0, r3, #1
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6859      	ldr	r1, [r3, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	0099      	lsls	r1, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	6809      	ldr	r1, [r1, #0]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69da      	ldr	r2, [r3, #28]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003bd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6911      	ldr	r1, [r2, #16]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68d2      	ldr	r2, [r2, #12]
 8003be2:	4311      	orrs	r1, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	000186a0 	.word	0x000186a0
 8003c44:	001e847f 	.word	0x001e847f
 8003c48:	003d08ff 	.word	0x003d08ff
 8003c4c:	431bde83 	.word	0x431bde83
 8003c50:	10624dd3 	.word	0x10624dd3

08003c54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b088      	sub	sp, #32
 8003c58:	af02      	add	r7, sp, #8
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	607a      	str	r2, [r7, #4]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	460b      	mov	r3, r1
 8003c62:	817b      	strh	r3, [r7, #10]
 8003c64:	4613      	mov	r3, r2
 8003c66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c68:	f7ff fbb8 	bl	80033dc <HAL_GetTick>
 8003c6c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	f040 80e0 	bne.w	8003e3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	2319      	movs	r3, #25
 8003c82:	2201      	movs	r2, #1
 8003c84:	4970      	ldr	r1, [pc, #448]	@ (8003e48 <HAL_I2C_Master_Transmit+0x1f4>)
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 fc64 	bl	8004554 <I2C_WaitOnFlagUntilTimeout>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
 8003c94:	e0d3      	b.n	8003e3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_I2C_Master_Transmit+0x50>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e0cc      	b.n	8003e3e <HAL_I2C_Master_Transmit+0x1ea>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d007      	beq.n	8003cca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2221      	movs	r2, #33	@ 0x21
 8003cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2210      	movs	r2, #16
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	893a      	ldrh	r2, [r7, #8]
 8003cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4a50      	ldr	r2, [pc, #320]	@ (8003e4c <HAL_I2C_Master_Transmit+0x1f8>)
 8003d0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d0c:	8979      	ldrh	r1, [r7, #10]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 face 	bl	80042b4 <I2C_MasterRequestWrite>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e08d      	b.n	8003e3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d22:	2300      	movs	r3, #0
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	613b      	str	r3, [r7, #16]
 8003d36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003d38:	e066      	b.n	8003e08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	6a39      	ldr	r1, [r7, #32]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fd22 	bl	8004788 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d00d      	beq.n	8003d66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	d107      	bne.n	8003d62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e06b      	b.n	8003e3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d6a:	781a      	ldrb	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d11b      	bne.n	8003ddc <HAL_I2C_Master_Transmit+0x188>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d017      	beq.n	8003ddc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db0:	781a      	ldrb	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	6a39      	ldr	r1, [r7, #32]
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 fd19 	bl	8004818 <I2C_WaitOnBTFFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00d      	beq.n	8003e08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	2b04      	cmp	r3, #4
 8003df2:	d107      	bne.n	8003e04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e01a      	b.n	8003e3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d194      	bne.n	8003d3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e000      	b.n	8003e3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
  }
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	00100002 	.word	0x00100002
 8003e4c:	ffff0000 	.word	0xffff0000

08003e50 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b08c      	sub	sp, #48	@ 0x30
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	817b      	strh	r3, [r7, #10]
 8003e60:	4613      	mov	r3, r2
 8003e62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e64:	f7ff faba 	bl	80033dc <HAL_GetTick>
 8003e68:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b20      	cmp	r3, #32
 8003e74:	f040 8217 	bne.w	80042a6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	9300      	str	r3, [sp, #0]
 8003e7c:	2319      	movs	r3, #25
 8003e7e:	2201      	movs	r2, #1
 8003e80:	497c      	ldr	r1, [pc, #496]	@ (8004074 <HAL_I2C_Master_Receive+0x224>)
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fb66 	bl	8004554 <I2C_WaitOnFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e20a      	b.n	80042a8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_I2C_Master_Receive+0x50>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e203      	b.n	80042a8 <HAL_I2C_Master_Receive+0x458>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d007      	beq.n	8003ec6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ed4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2222      	movs	r2, #34	@ 0x22
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2210      	movs	r2, #16
 8003ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	893a      	ldrh	r2, [r7, #8]
 8003ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a5c      	ldr	r2, [pc, #368]	@ (8004078 <HAL_I2C_Master_Receive+0x228>)
 8003f06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f08:	8979      	ldrh	r1, [r7, #10]
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fa52 	bl	80043b8 <I2C_MasterRequestRead>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e1c4      	b.n	80042a8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d113      	bne.n	8003f4e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f26:	2300      	movs	r3, #0
 8003f28:	623b      	str	r3, [r7, #32]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	623b      	str	r3, [r7, #32]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	623b      	str	r3, [r7, #32]
 8003f3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	e198      	b.n	8004280 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d11b      	bne.n	8003f8e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	699b      	ldr	r3, [r3, #24]
 8003f78:	61fb      	str	r3, [r7, #28]
 8003f7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	e178      	b.n	8004280 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d11b      	bne.n	8003fce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fa4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	61bb      	str	r3, [r7, #24]
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	e158      	b.n	8004280 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ff4:	e144      	b.n	8004280 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	f200 80f1 	bhi.w	80041e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004004:	2b01      	cmp	r3, #1
 8004006:	d123      	bne.n	8004050 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 fc4b 	bl	80048a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e145      	b.n	80042a8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004038:	3b01      	subs	r3, #1
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004044:	b29b      	uxth	r3, r3
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800404e:	e117      	b.n	8004280 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004054:	2b02      	cmp	r3, #2
 8004056:	d14e      	bne.n	80040f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	2200      	movs	r2, #0
 8004060:	4906      	ldr	r1, [pc, #24]	@ (800407c <HAL_I2C_Master_Receive+0x22c>)
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 fa76 	bl	8004554 <I2C_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e11a      	b.n	80042a8 <HAL_I2C_Master_Receive+0x458>
 8004072:	bf00      	nop
 8004074:	00100002 	.word	0x00100002
 8004078:	ffff0000 	.word	0xffff0000
 800407c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800408e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ac:	3b01      	subs	r3, #1
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b29a      	uxth	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	691a      	ldr	r2, [r3, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040cc:	b2d2      	uxtb	r2, r2
 80040ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040de:	3b01      	subs	r3, #1
 80040e0:	b29a      	uxth	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040f4:	e0c4      	b.n	8004280 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	2200      	movs	r2, #0
 80040fe:	496c      	ldr	r1, [pc, #432]	@ (80042b0 <HAL_I2C_Master_Receive+0x460>)
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f000 fa27 	bl	8004554 <I2C_WaitOnFlagUntilTimeout>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0cb      	b.n	80042a8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800411e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	691a      	ldr	r2, [r3, #16]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004158:	2200      	movs	r2, #0
 800415a:	4955      	ldr	r1, [pc, #340]	@ (80042b0 <HAL_I2C_Master_Receive+0x460>)
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f9f9 	bl	8004554 <I2C_WaitOnFlagUntilTimeout>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e09d      	b.n	80042a8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041e0:	e04e      	b.n	8004280 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f000 fb5e 	bl	80048a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e058      	b.n	80042a8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004200:	b2d2      	uxtb	r2, r2
 8004202:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695b      	ldr	r3, [r3, #20]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b04      	cmp	r3, #4
 8004234:	d124      	bne.n	8004280 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423a:	2b03      	cmp	r3, #3
 800423c:	d107      	bne.n	800424e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800424c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691a      	ldr	r2, [r3, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	f47f aeb6 	bne.w	8003ff6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e000      	b.n	80042a8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80042a6:	2302      	movs	r3, #2
  }
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3728      	adds	r7, #40	@ 0x28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	00010004 	.word	0x00010004

080042b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	607a      	str	r2, [r7, #4]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	460b      	mov	r3, r1
 80042c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d006      	beq.n	80042de <I2C_MasterRequestWrite+0x2a>
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d003      	beq.n	80042de <I2C_MasterRequestWrite+0x2a>
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042dc:	d108      	bne.n	80042f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	e00b      	b.n	8004308 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f4:	2b12      	cmp	r3, #18
 80042f6:	d107      	bne.n	8004308 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004306:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f91d 	bl	8004554 <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00d      	beq.n	800433c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800432a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800432e:	d103      	bne.n	8004338 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004336:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e035      	b.n	80043a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004344:	d108      	bne.n	8004358 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004346:	897b      	ldrh	r3, [r7, #10]
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004354:	611a      	str	r2, [r3, #16]
 8004356:	e01b      	b.n	8004390 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004358:	897b      	ldrh	r3, [r7, #10]
 800435a:	11db      	asrs	r3, r3, #7
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f003 0306 	and.w	r3, r3, #6
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f063 030f 	orn	r3, r3, #15
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	490e      	ldr	r1, [pc, #56]	@ (80043b0 <I2C_MasterRequestWrite+0xfc>)
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f966 	bl	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e010      	b.n	80043a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004386:	897b      	ldrh	r3, [r7, #10]
 8004388:	b2da      	uxtb	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	4907      	ldr	r1, [pc, #28]	@ (80043b4 <I2C_MasterRequestWrite+0x100>)
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 f956 	bl	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e000      	b.n	80043a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	00010008 	.word	0x00010008
 80043b4:	00010002 	.word	0x00010002

080043b8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	607a      	str	r2, [r7, #4]
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	460b      	mov	r3, r1
 80043c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043dc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d006      	beq.n	80043f2 <I2C_MasterRequestRead+0x3a>
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d003      	beq.n	80043f2 <I2C_MasterRequestRead+0x3a>
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80043f0:	d108      	bne.n	8004404 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	e00b      	b.n	800441c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004408:	2b11      	cmp	r3, #17
 800440a:	d107      	bne.n	800441c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800441a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f893 	bl	8004554 <I2C_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00d      	beq.n	8004450 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004442:	d103      	bne.n	800444c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800444a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e079      	b.n	8004544 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004458:	d108      	bne.n	800446c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800445a:	897b      	ldrh	r3, [r7, #10]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	f043 0301 	orr.w	r3, r3, #1
 8004462:	b2da      	uxtb	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	611a      	str	r2, [r3, #16]
 800446a:	e05f      	b.n	800452c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800446c:	897b      	ldrh	r3, [r7, #10]
 800446e:	11db      	asrs	r3, r3, #7
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 0306 	and.w	r3, r3, #6
 8004476:	b2db      	uxtb	r3, r3
 8004478:	f063 030f 	orn	r3, r3, #15
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4930      	ldr	r1, [pc, #192]	@ (800454c <I2C_MasterRequestRead+0x194>)
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f8dc 	bl	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e054      	b.n	8004544 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800449a:	897b      	ldrh	r3, [r7, #10]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	4929      	ldr	r1, [pc, #164]	@ (8004550 <I2C_MasterRequestRead+0x198>)
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f8cc 	bl	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e044      	b.n	8004544 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ba:	2300      	movs	r3, #0
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	613b      	str	r3, [r7, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044de:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f831 	bl	8004554 <I2C_WaitOnFlagUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004506:	d103      	bne.n	8004510 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800450e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e017      	b.n	8004544 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004514:	897b      	ldrh	r3, [r7, #10]
 8004516:	11db      	asrs	r3, r3, #7
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 0306 	and.w	r3, r3, #6
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f063 030e 	orn	r3, r3, #14
 8004524:	b2da      	uxtb	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	4907      	ldr	r1, [pc, #28]	@ (8004550 <I2C_MasterRequestRead+0x198>)
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 f888 	bl	8004648 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3718      	adds	r7, #24
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	00010008 	.word	0x00010008
 8004550:	00010002 	.word	0x00010002

08004554 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	4613      	mov	r3, r2
 8004562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004564:	e048      	b.n	80045f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d044      	beq.n	80045f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800456e:	f7fe ff35 	bl	80033dc <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d302      	bcc.n	8004584 <I2C_WaitOnFlagUntilTimeout+0x30>
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d139      	bne.n	80045f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b01      	cmp	r3, #1
 800458c:	d10d      	bne.n	80045aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	43da      	mvns	r2, r3
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4013      	ands	r3, r2
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	e00c      	b.n	80045c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	43da      	mvns	r2, r3
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4013      	ands	r3, r2
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	79fb      	ldrb	r3, [r7, #7]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d116      	bne.n	80045f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2220      	movs	r2, #32
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e4:	f043 0220 	orr.w	r2, r3, #32
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e023      	b.n	8004640 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	0c1b      	lsrs	r3, r3, #16
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d10d      	bne.n	800461e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	43da      	mvns	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	4013      	ands	r3, r2
 800460e:	b29b      	uxth	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	bf0c      	ite	eq
 8004614:	2301      	moveq	r3, #1
 8004616:	2300      	movne	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	461a      	mov	r2, r3
 800461c:	e00c      	b.n	8004638 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	43da      	mvns	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4013      	ands	r3, r2
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	429a      	cmp	r2, r3
 800463c:	d093      	beq.n	8004566 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004656:	e071      	b.n	800473c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004666:	d123      	bne.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004676:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004680:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	f043 0204 	orr.w	r2, r3, #4
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e067      	b.n	8004780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d041      	beq.n	800473c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b8:	f7fe fe90 	bl	80033dc <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d302      	bcc.n	80046ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d136      	bne.n	800473c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	0c1b      	lsrs	r3, r3, #16
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d10c      	bne.n	80046f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	43da      	mvns	r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4013      	ands	r3, r2
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bf14      	ite	ne
 80046ea:	2301      	movne	r3, #1
 80046ec:	2300      	moveq	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	e00b      	b.n	800470a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	43da      	mvns	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	4013      	ands	r3, r2
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf14      	ite	ne
 8004704:	2301      	movne	r3, #1
 8004706:	2300      	moveq	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b00      	cmp	r3, #0
 800470c:	d016      	beq.n	800473c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004728:	f043 0220 	orr.w	r2, r3, #32
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e021      	b.n	8004780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	0c1b      	lsrs	r3, r3, #16
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d10c      	bne.n	8004760 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	695b      	ldr	r3, [r3, #20]
 800474c:	43da      	mvns	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	4013      	ands	r3, r2
 8004752:	b29b      	uxth	r3, r3
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e00b      	b.n	8004778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	43da      	mvns	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4013      	ands	r3, r2
 800476c:	b29b      	uxth	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	bf14      	ite	ne
 8004772:	2301      	movne	r3, #1
 8004774:	2300      	moveq	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	f47f af6d 	bne.w	8004658 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004794:	e034      	b.n	8004800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f8e3 	bl	8004962 <I2C_IsAcknowledgeFailed>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e034      	b.n	8004810 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ac:	d028      	beq.n	8004800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7fe fe15 	bl	80033dc <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d11d      	bne.n	8004800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ce:	2b80      	cmp	r3, #128	@ 0x80
 80047d0:	d016      	beq.n	8004800 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ec:	f043 0220 	orr.w	r2, r3, #32
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e007      	b.n	8004810 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480a:	2b80      	cmp	r3, #128	@ 0x80
 800480c:	d1c3      	bne.n	8004796 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004824:	e034      	b.n	8004890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f89b 	bl	8004962 <I2C_IsAcknowledgeFailed>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d001      	beq.n	8004836 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e034      	b.n	80048a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d028      	beq.n	8004890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483e:	f7fe fdcd 	bl	80033dc <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	68ba      	ldr	r2, [r7, #8]
 800484a:	429a      	cmp	r2, r3
 800484c:	d302      	bcc.n	8004854 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d11d      	bne.n	8004890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b04      	cmp	r3, #4
 8004860:	d016      	beq.n	8004890 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	f043 0220 	orr.w	r2, r3, #32
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e007      	b.n	80048a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b04      	cmp	r3, #4
 800489c:	d1c3      	bne.n	8004826 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048b4:	e049      	b.n	800494a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d119      	bne.n	80048f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0210 	mvn.w	r2, #16
 80048cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e030      	b.n	800495a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f8:	f7fe fd70 	bl	80033dc <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	429a      	cmp	r2, r3
 8004906:	d302      	bcc.n	800490e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d11d      	bne.n	800494a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004918:	2b40      	cmp	r3, #64	@ 0x40
 800491a:	d016      	beq.n	800494a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004936:	f043 0220 	orr.w	r2, r3, #32
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e007      	b.n	800495a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004954:	2b40      	cmp	r3, #64	@ 0x40
 8004956:	d1ae      	bne.n	80048b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004978:	d11b      	bne.n	80049b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004982:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	f043 0204 	orr.w	r2, r3, #4
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af02      	add	r7, sp, #8
 80049c6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e101      	b.n	8004bd6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f006 fe13 	bl	800b618 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2203      	movs	r2, #3
 80049f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a00:	d102      	bne.n	8004a08 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f003 fbd8 	bl	80081c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6818      	ldr	r0, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	7c1a      	ldrb	r2, [r3, #16]
 8004a1a:	f88d 2000 	strb.w	r2, [sp]
 8004a1e:	3304      	adds	r3, #4
 8004a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a22:	f003 fab7 	bl	8007f94 <USB_CoreInit>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0ce      	b.n	8004bd6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2100      	movs	r1, #0
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f003 fbd0 	bl	80081e4 <USB_SetCurrentMode>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e0bf      	b.n	8004bd6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a56:	2300      	movs	r3, #0
 8004a58:	73fb      	strb	r3, [r7, #15]
 8004a5a:	e04a      	b.n	8004af2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a5c:	7bfa      	ldrb	r2, [r7, #15]
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	3315      	adds	r3, #21
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a70:	7bfa      	ldrb	r2, [r7, #15]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	3314      	adds	r3, #20
 8004a80:	7bfa      	ldrb	r2, [r7, #15]
 8004a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a84:	7bfa      	ldrb	r2, [r7, #15]
 8004a86:	7bfb      	ldrb	r3, [r7, #15]
 8004a88:	b298      	uxth	r0, r3
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	4413      	add	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	332e      	adds	r3, #46	@ 0x2e
 8004a98:	4602      	mov	r2, r0
 8004a9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a9c:	7bfa      	ldrb	r2, [r7, #15]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	3318      	adds	r3, #24
 8004aac:	2200      	movs	r2, #0
 8004aae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ab0:	7bfa      	ldrb	r2, [r7, #15]
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	331c      	adds	r3, #28
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ac4:	7bfa      	ldrb	r2, [r7, #15]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	00db      	lsls	r3, r3, #3
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	3320      	adds	r3, #32
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ad8:	7bfa      	ldrb	r2, [r7, #15]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	00db      	lsls	r3, r3, #3
 8004ae0:	4413      	add	r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	3324      	adds	r3, #36	@ 0x24
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	3301      	adds	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	791b      	ldrb	r3, [r3, #4]
 8004af6:	7bfa      	ldrb	r2, [r7, #15]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d3af      	bcc.n	8004a5c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004afc:	2300      	movs	r3, #0
 8004afe:	73fb      	strb	r3, [r7, #15]
 8004b00:	e044      	b.n	8004b8c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b02:	7bfa      	ldrb	r2, [r7, #15]
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	4613      	mov	r3, r2
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004b14:	2200      	movs	r2, #0
 8004b16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b18:	7bfa      	ldrb	r2, [r7, #15]
 8004b1a:	6879      	ldr	r1, [r7, #4]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	440b      	add	r3, r1
 8004b26:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004b2a:	7bfa      	ldrb	r2, [r7, #15]
 8004b2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	00db      	lsls	r3, r3, #3
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b44:	7bfa      	ldrb	r2, [r7, #15]
 8004b46:	6879      	ldr	r1, [r7, #4]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b5a:	7bfa      	ldrb	r2, [r7, #15]
 8004b5c:	6879      	ldr	r1, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b70:	7bfa      	ldrb	r2, [r7, #15]
 8004b72:	6879      	ldr	r1, [r7, #4]
 8004b74:	4613      	mov	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	440b      	add	r3, r1
 8004b7e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b82:	2200      	movs	r2, #0
 8004b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b86:	7bfb      	ldrb	r3, [r7, #15]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	73fb      	strb	r3, [r7, #15]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	791b      	ldrb	r3, [r3, #4]
 8004b90:	7bfa      	ldrb	r2, [r7, #15]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d3b5      	bcc.n	8004b02 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	7c1a      	ldrb	r2, [r3, #16]
 8004b9e:	f88d 2000 	strb.w	r2, [sp]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ba6:	f003 fb69 	bl	800827c <USB_DevInit>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d005      	beq.n	8004bbc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e00c      	b.n	8004bd6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f004 fbad 	bl	800932e <USB_DevDisconnect>

  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_PCD_Start+0x1c>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e022      	b.n	8004c40 <HAL_PCD_Start+0x62>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d009      	beq.n	8004c22 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d105      	bne.n	8004c22 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f003 faba 	bl	80081a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f004 fb5b 	bl	80092ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c48:	b590      	push	{r4, r7, lr}
 8004c4a:	b08d      	sub	sp, #52	@ 0x34
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c56:	6a3b      	ldr	r3, [r7, #32]
 8004c58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f004 fc19 	bl	8009496 <USB_GetMode>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f040 848c 	bne.w	8005584 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f004 fb7d 	bl	8009370 <USB_ReadInterrupts>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 8482 	beq.w	8005582 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f004 fb6a 	bl	8009370 <USB_ReadInterrupts>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d107      	bne.n	8004cb6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	695a      	ldr	r2, [r3, #20]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f002 0202 	and.w	r2, r2, #2
 8004cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f004 fb58 	bl	8009370 <USB_ReadInterrupts>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f003 0310 	and.w	r3, r3, #16
 8004cc6:	2b10      	cmp	r3, #16
 8004cc8:	d161      	bne.n	8004d8e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699a      	ldr	r2, [r3, #24]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f022 0210 	bic.w	r2, r2, #16
 8004cd8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f003 020f 	and.w	r2, r3, #15
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	4413      	add	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	0c5b      	lsrs	r3, r3, #17
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d124      	bne.n	8004d50 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d035      	beq.n	8004d7e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	091b      	lsrs	r3, r3, #4
 8004d1a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	6a38      	ldr	r0, [r7, #32]
 8004d26:	f004 f98f 	bl	8009048 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d36:	441a      	add	r2, r3
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	695a      	ldr	r2, [r3, #20]
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	091b      	lsrs	r3, r3, #4
 8004d44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d48:	441a      	add	r2, r3
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	615a      	str	r2, [r3, #20]
 8004d4e:	e016      	b.n	8004d7e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	0c5b      	lsrs	r3, r3, #17
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	2b06      	cmp	r3, #6
 8004d5a:	d110      	bne.n	8004d7e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004d62:	2208      	movs	r2, #8
 8004d64:	4619      	mov	r1, r3
 8004d66:	6a38      	ldr	r0, [r7, #32]
 8004d68:	f004 f96e 	bl	8009048 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	091b      	lsrs	r3, r3, #4
 8004d74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d78:	441a      	add	r2, r3
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f042 0210 	orr.w	r2, r2, #16
 8004d8c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4618      	mov	r0, r3
 8004d94:	f004 faec 	bl	8009370 <USB_ReadInterrupts>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d9e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004da2:	f040 80a7 	bne.w	8004ef4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f004 faf1 	bl	8009396 <USB_ReadDevAllOutEpInterrupt>
 8004db4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004db6:	e099      	b.n	8004eec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 808e 	beq.w	8004ee0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	4611      	mov	r1, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f004 fb15 	bl	80093fe <USB_ReadDevOutEPInterrupt>
 8004dd4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00c      	beq.n	8004dfa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dec:	461a      	mov	r2, r3
 8004dee:	2301      	movs	r3, #1
 8004df0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004df2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fe89 	bl	8005b0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00c      	beq.n	8004e1e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e10:	461a      	mov	r2, r3
 8004e12:	2308      	movs	r3, #8
 8004e14:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004e16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 ff5f 	bl	8005cdc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e34:	461a      	mov	r2, r3
 8004e36:	2310      	movs	r3, #16
 8004e38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d030      	beq.n	8004ea6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004e44:	6a3b      	ldr	r3, [r7, #32]
 8004e46:	695b      	ldr	r3, [r3, #20]
 8004e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4c:	2b80      	cmp	r3, #128	@ 0x80
 8004e4e:	d109      	bne.n	8004e64 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	69fa      	ldr	r2, [r7, #28]
 8004e5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e62:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004e64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	3304      	adds	r3, #4
 8004e78:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	78db      	ldrb	r3, [r3, #3]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d108      	bne.n	8004e94 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2200      	movs	r2, #0
 8004e86:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f006 fcbe 	bl	800b810 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2302      	movs	r3, #2
 8004ea4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d008      	beq.n	8004ec2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	015a      	lsls	r2, r3, #5
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	4413      	add	r3, r2
 8004eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2320      	movs	r3, #32
 8004ec0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ece:	015a      	lsls	r2, r3, #5
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ed8:	461a      	mov	r2, r3
 8004eda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ede:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	3301      	adds	r3, #1
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee8:	085b      	lsrs	r3, r3, #1
 8004eea:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f47f af62 	bne.w	8004db8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f004 fa39 	bl	8009370 <USB_ReadInterrupts>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f08:	f040 80db 	bne.w	80050c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f004 fa5a 	bl	80093ca <USB_ReadDevAllInEpInterrupt>
 8004f16:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004f1c:	e0cd      	b.n	80050ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 80c2 	beq.w	80050ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f30:	b2d2      	uxtb	r2, r2
 8004f32:	4611      	mov	r1, r2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f004 fa80 	bl	800943a <USB_ReadDevInEPInterrupt>
 8004f3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d057      	beq.n	8004ff6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f48:	f003 030f 	and.w	r3, r3, #15
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f52:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	69f9      	ldr	r1, [r7, #28]
 8004f62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f66:	4013      	ands	r3, r2
 8004f68:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f76:	461a      	mov	r2, r3
 8004f78:	2301      	movs	r3, #1
 8004f7a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	799b      	ldrb	r3, [r3, #6]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d132      	bne.n	8004fea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f84:	6879      	ldr	r1, [r7, #4]
 8004f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f88:	4613      	mov	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	3320      	adds	r3, #32
 8004f94:	6819      	ldr	r1, [r3, #0]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4403      	add	r3, r0
 8004fa4:	331c      	adds	r3, #28
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4419      	add	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fae:	4613      	mov	r3, r2
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	4413      	add	r3, r2
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	4403      	add	r3, r0
 8004fb8:	3320      	adds	r3, #32
 8004fba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d113      	bne.n	8004fea <HAL_PCD_IRQHandler+0x3a2>
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3324      	adds	r3, #36	@ 0x24
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d108      	bne.n	8004fea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	f004 fa87 	bl	80094f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	4619      	mov	r1, r3
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f006 fb92 	bl	800b71a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005002:	015a      	lsls	r2, r3, #5
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800500c:	461a      	mov	r2, r3
 800500e:	2308      	movs	r3, #8
 8005010:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b00      	cmp	r3, #0
 800501a:	d008      	beq.n	800502e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005028:	461a      	mov	r2, r3
 800502a:	2310      	movs	r3, #16
 800502c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005044:	461a      	mov	r2, r3
 8005046:	2340      	movs	r3, #64	@ 0x40
 8005048:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d023      	beq.n	800509c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005054:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005056:	6a38      	ldr	r0, [r7, #32]
 8005058:	f003 fa74 	bl	8008544 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800505c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800505e:	4613      	mov	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	3310      	adds	r3, #16
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	4413      	add	r3, r2
 800506c:	3304      	adds	r3, #4
 800506e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	78db      	ldrb	r3, [r3, #3]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d108      	bne.n	800508a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	2200      	movs	r2, #0
 800507c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	b2db      	uxtb	r3, r3
 8005082:	4619      	mov	r1, r3
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f006 fbd5 	bl	800b834 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005096:	461a      	mov	r2, r3
 8005098:	2302      	movs	r3, #2
 800509a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80050a6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fca3 	bl	80059f4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	3301      	adds	r3, #1
 80050b2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80050b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b6:	085b      	lsrs	r3, r3, #1
 80050b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80050ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f47f af2e 	bne.w	8004f1e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f004 f952 	bl	8009370 <USB_ReadInterrupts>
 80050cc:	4603      	mov	r3, r0
 80050ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050d6:	d122      	bne.n	800511e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	69fa      	ldr	r2, [r7, #28]
 80050e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050e6:	f023 0301 	bic.w	r3, r3, #1
 80050ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d108      	bne.n	8005108 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80050fe:	2100      	movs	r1, #0
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fe89 	bl	8005e18 <HAL_PCDEx_LPM_Callback>
 8005106:	e002      	b.n	800510e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f006 fb73 	bl	800b7f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695a      	ldr	r2, [r3, #20]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800511c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4618      	mov	r0, r3
 8005124:	f004 f924 	bl	8009370 <USB_ReadInterrupts>
 8005128:	4603      	mov	r3, r0
 800512a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800512e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005132:	d112      	bne.n	800515a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 0301 	and.w	r3, r3, #1
 8005140:	2b01      	cmp	r3, #1
 8005142:	d102      	bne.n	800514a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f006 fb2f 	bl	800b7a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695a      	ldr	r2, [r3, #20]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005158:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f004 f906 	bl	8009370 <USB_ReadInterrupts>
 8005164:	4603      	mov	r3, r0
 8005166:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800516a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800516e:	f040 80b7 	bne.w	80052e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	69fa      	ldr	r2, [r7, #28]
 800517c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005180:	f023 0301 	bic.w	r3, r3, #1
 8005184:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2110      	movs	r1, #16
 800518c:	4618      	mov	r0, r3
 800518e:	f003 f9d9 	bl	8008544 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005192:	2300      	movs	r3, #0
 8005194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005196:	e046      	b.n	8005226 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a4:	461a      	mov	r2, r3
 80051a6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80051cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d8:	461a      	mov	r2, r3
 80051da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80051e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80051fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800521a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800521e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005222:	3301      	adds	r3, #1
 8005224:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	791b      	ldrb	r3, [r3, #4]
 800522a:	461a      	mov	r2, r3
 800522c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800522e:	4293      	cmp	r3, r2
 8005230:	d3b2      	bcc.n	8005198 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005240:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005244:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	7bdb      	ldrb	r3, [r3, #15]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d016      	beq.n	800527c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800525e:	f043 030b 	orr.w	r3, r3, #11
 8005262:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800526c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005274:	f043 030b 	orr.w	r3, r3, #11
 8005278:	6453      	str	r3, [r2, #68]	@ 0x44
 800527a:	e015      	b.n	80052a8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800528a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800528e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005292:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052a2:	f043 030b 	orr.w	r3, r3, #11
 80052a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69fa      	ldr	r2, [r7, #28]
 80052b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052b6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80052ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052ca:	461a      	mov	r2, r3
 80052cc:	f004 f914 	bl	80094f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695a      	ldr	r2, [r3, #20]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80052de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f004 f843 	bl	8009370 <USB_ReadInterrupts>
 80052ea:	4603      	mov	r3, r0
 80052ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80052f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052f4:	d123      	bne.n	800533e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f004 f8d9 	bl	80094b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4618      	mov	r0, r3
 8005306:	f003 f996 	bl	8008636 <USB_GetDevSpeed>
 800530a:	4603      	mov	r3, r0
 800530c:	461a      	mov	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681c      	ldr	r4, [r3, #0]
 8005316:	f001 f9af 	bl	8006678 <HAL_RCC_GetHCLKFreq>
 800531a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005320:	461a      	mov	r2, r3
 8005322:	4620      	mov	r0, r4
 8005324:	f002 fe9a 	bl	800805c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f006 fa1e 	bl	800b76a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800533c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4618      	mov	r0, r3
 8005344:	f004 f814 	bl	8009370 <USB_ReadInterrupts>
 8005348:	4603      	mov	r3, r0
 800534a:	f003 0308 	and.w	r3, r3, #8
 800534e:	2b08      	cmp	r3, #8
 8005350:	d10a      	bne.n	8005368 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f006 f9fb 	bl	800b74e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f002 0208 	and.w	r2, r2, #8
 8005366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4618      	mov	r0, r3
 800536e:	f003 ffff 	bl	8009370 <USB_ReadInterrupts>
 8005372:	4603      	mov	r3, r0
 8005374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005378:	2b80      	cmp	r3, #128	@ 0x80
 800537a:	d123      	bne.n	80053c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005388:	2301      	movs	r3, #1
 800538a:	627b      	str	r3, [r7, #36]	@ 0x24
 800538c:	e014      	b.n	80053b8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800538e:	6879      	ldr	r1, [r7, #4]
 8005390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005392:	4613      	mov	r3, r2
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	440b      	add	r3, r1
 800539c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d105      	bne.n	80053b2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 faf0 	bl	8005992 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	3301      	adds	r3, #1
 80053b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	791b      	ldrb	r3, [r3, #4]
 80053bc:	461a      	mov	r2, r3
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d3e4      	bcc.n	800538e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f003 ffd1 	bl	8009370 <USB_ReadInterrupts>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80053d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053d8:	d13c      	bne.n	8005454 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053da:	2301      	movs	r3, #1
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80053de:	e02b      	b.n	8005438 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80053e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80053f0:	6879      	ldr	r1, [r7, #4]
 80053f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f4:	4613      	mov	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	3318      	adds	r3, #24
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d115      	bne.n	8005432 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005406:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005408:	2b00      	cmp	r3, #0
 800540a:	da12      	bge.n	8005432 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005410:	4613      	mov	r3, r2
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	3317      	adds	r3, #23
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005422:	b2db      	uxtb	r3, r3
 8005424:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005428:	b2db      	uxtb	r3, r3
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fab0 	bl	8005992 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005434:	3301      	adds	r3, #1
 8005436:	627b      	str	r3, [r7, #36]	@ 0x24
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	791b      	ldrb	r3, [r3, #4]
 800543c:	461a      	mov	r2, r3
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	4293      	cmp	r3, r2
 8005442:	d3cd      	bcc.n	80053e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695a      	ldr	r2, [r3, #20]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005452:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f003 ff89 	bl	8009370 <USB_ReadInterrupts>
 800545e:	4603      	mov	r3, r0
 8005460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005468:	d156      	bne.n	8005518 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800546a:	2301      	movs	r3, #1
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24
 800546e:	e045      	b.n	80054fc <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005484:	4613      	mov	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b01      	cmp	r3, #1
 8005496:	d12e      	bne.n	80054f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005498:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800549a:	2b00      	cmp	r3, #0
 800549c:	da2b      	bge.n	80054f6 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80054aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d121      	bne.n	80054f6 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80054b2:	6879      	ldr	r1, [r7, #4]
 80054b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054b6:	4613      	mov	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80054c4:	2201      	movs	r2, #1
 80054c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80054ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054f2:	6053      	str	r3, [r2, #4]
            break;
 80054f4:	e008      	b.n	8005508 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	3301      	adds	r3, #1
 80054fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	791b      	ldrb	r3, [r3, #4]
 8005500:	461a      	mov	r2, r3
 8005502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005504:	4293      	cmp	r3, r2
 8005506:	d3b3      	bcc.n	8005470 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005516:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f003 ff27 	bl	8009370 <USB_ReadInterrupts>
 8005522:	4603      	mov	r3, r0
 8005524:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800552c:	d10a      	bne.n	8005544 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f006 f992 	bl	800b858 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005542:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f003 ff11 	bl	8009370 <USB_ReadInterrupts>
 800554e:	4603      	mov	r3, r0
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b04      	cmp	r3, #4
 8005556:	d115      	bne.n	8005584 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	f003 0304 	and.w	r3, r3, #4
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f006 f982 	bl	800b874 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	430a      	orrs	r2, r1
 800557e:	605a      	str	r2, [r3, #4]
 8005580:	e000      	b.n	8005584 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005582:	bf00      	nop
    }
  }
}
 8005584:	3734      	adds	r7, #52	@ 0x34
 8005586:	46bd      	mov	sp, r7
 8005588:	bd90      	pop	{r4, r7, pc}

0800558a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
 8005592:	460b      	mov	r3, r1
 8005594:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_PCD_SetAddress+0x1a>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e012      	b.n	80055ca <HAL_PCD_SetAddress+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	78fa      	ldrb	r2, [r7, #3]
 80055b0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	78fa      	ldrb	r2, [r7, #3]
 80055b8:	4611      	mov	r1, r2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f003 fe70 	bl	80092a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	4608      	mov	r0, r1
 80055dc:	4611      	mov	r1, r2
 80055de:	461a      	mov	r2, r3
 80055e0:	4603      	mov	r3, r0
 80055e2:	70fb      	strb	r3, [r7, #3]
 80055e4:	460b      	mov	r3, r1
 80055e6:	803b      	strh	r3, [r7, #0]
 80055e8:	4613      	mov	r3, r2
 80055ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	da0f      	bge.n	8005618 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055f8:	78fb      	ldrb	r3, [r7, #3]
 80055fa:	f003 020f 	and.w	r2, r3, #15
 80055fe:	4613      	mov	r3, r2
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	3310      	adds	r3, #16
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	4413      	add	r3, r2
 800560c:	3304      	adds	r3, #4
 800560e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2201      	movs	r2, #1
 8005614:	705a      	strb	r2, [r3, #1]
 8005616:	e00f      	b.n	8005638 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	f003 020f 	and.w	r2, r3, #15
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	4413      	add	r3, r2
 800562e:	3304      	adds	r3, #4
 8005630:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	b2da      	uxtb	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005644:	883a      	ldrh	r2, [r7, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	78ba      	ldrb	r2, [r7, #2]
 800564e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	785b      	ldrb	r3, [r3, #1]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d004      	beq.n	8005662 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005662:	78bb      	ldrb	r3, [r7, #2]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d102      	bne.n	800566e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_PCD_EP_Open+0xaa>
 8005678:	2302      	movs	r3, #2
 800567a:	e00e      	b.n	800569a <HAL_PCD_EP_Open+0xc8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68f9      	ldr	r1, [r7, #12]
 800568a:	4618      	mov	r0, r3
 800568c:	f002 fff8 	bl	8008680 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005698:	7afb      	ldrb	r3, [r7, #11]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	da0f      	bge.n	80056d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056b6:	78fb      	ldrb	r3, [r7, #3]
 80056b8:	f003 020f 	and.w	r2, r3, #15
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	3310      	adds	r3, #16
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	4413      	add	r3, r2
 80056ca:	3304      	adds	r3, #4
 80056cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	705a      	strb	r2, [r3, #1]
 80056d4:	e00f      	b.n	80056f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	f003 020f 	and.w	r2, r3, #15
 80056dc:	4613      	mov	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	4413      	add	r3, r2
 80056ec:	3304      	adds	r3, #4
 80056ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2200      	movs	r2, #0
 80056f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_PCD_EP_Close+0x6e>
 800570c:	2302      	movs	r3, #2
 800570e:	e00e      	b.n	800572e <HAL_PCD_EP_Close+0x8c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68f9      	ldr	r1, [r7, #12]
 800571e:	4618      	mov	r0, r3
 8005720:	f003 f836 	bl	8008790 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b086      	sub	sp, #24
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
 8005742:	460b      	mov	r3, r1
 8005744:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005746:	7afb      	ldrb	r3, [r7, #11]
 8005748:	f003 020f 	and.w	r2, r3, #15
 800574c:	4613      	mov	r3, r2
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	4413      	add	r3, r2
 800575c:	3304      	adds	r3, #4
 800575e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2200      	movs	r2, #0
 8005770:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2200      	movs	r2, #0
 8005776:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005778:	7afb      	ldrb	r3, [r7, #11]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	b2da      	uxtb	r2, r3
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	799b      	ldrb	r3, [r3, #6]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d102      	bne.n	8005792 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	799b      	ldrb	r3, [r3, #6]
 800579a:	461a      	mov	r2, r3
 800579c:	6979      	ldr	r1, [r7, #20]
 800579e:	f003 f8d3 	bl	8008948 <USB_EPStartXfer>

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	607a      	str	r2, [r7, #4]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	460b      	mov	r3, r1
 80057ba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057bc:	7afb      	ldrb	r3, [r7, #11]
 80057be:	f003 020f 	and.w	r2, r3, #15
 80057c2:	4613      	mov	r3, r2
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	3310      	adds	r3, #16
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	3304      	adds	r3, #4
 80057d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2200      	movs	r2, #0
 80057e4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2201      	movs	r2, #1
 80057ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057ec:	7afb      	ldrb	r3, [r7, #11]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	b2da      	uxtb	r2, r3
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	799b      	ldrb	r3, [r3, #6]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d102      	bne.n	8005806 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6818      	ldr	r0, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	799b      	ldrb	r3, [r3, #6]
 800580e:	461a      	mov	r2, r3
 8005810:	6979      	ldr	r1, [r7, #20]
 8005812:	f003 f899 	bl	8008948 <USB_EPStartXfer>

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	460b      	mov	r3, r1
 800582a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800582c:	78fb      	ldrb	r3, [r7, #3]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	7912      	ldrb	r2, [r2, #4]
 8005836:	4293      	cmp	r3, r2
 8005838:	d901      	bls.n	800583e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e04f      	b.n	80058de <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800583e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005842:	2b00      	cmp	r3, #0
 8005844:	da0f      	bge.n	8005866 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005846:	78fb      	ldrb	r3, [r7, #3]
 8005848:	f003 020f 	and.w	r2, r3, #15
 800584c:	4613      	mov	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	4413      	add	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	3310      	adds	r3, #16
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	4413      	add	r3, r2
 800585a:	3304      	adds	r3, #4
 800585c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2201      	movs	r2, #1
 8005862:	705a      	strb	r2, [r3, #1]
 8005864:	e00d      	b.n	8005882 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005866:	78fa      	ldrb	r2, [r7, #3]
 8005868:	4613      	mov	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	4413      	add	r3, r2
 8005878:	3304      	adds	r3, #4
 800587a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005888:	78fb      	ldrb	r3, [r7, #3]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	b2da      	uxtb	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_PCD_EP_SetStall+0x82>
 800589e:	2302      	movs	r3, #2
 80058a0:	e01d      	b.n	80058de <HAL_PCD_EP_SetStall+0xbe>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68f9      	ldr	r1, [r7, #12]
 80058b0:	4618      	mov	r0, r3
 80058b2:	f003 fc21 	bl	80090f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058b6:	78fb      	ldrb	r3, [r7, #3]
 80058b8:	f003 030f 	and.w	r3, r3, #15
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	7999      	ldrb	r1, [r3, #6]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80058ce:	461a      	mov	r2, r3
 80058d0:	f003 fe12 	bl	80094f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	460b      	mov	r3, r1
 80058f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	7912      	ldrb	r2, [r2, #4]
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d901      	bls.n	8005904 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e042      	b.n	800598a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005908:	2b00      	cmp	r3, #0
 800590a:	da0f      	bge.n	800592c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	f003 020f 	and.w	r2, r3, #15
 8005912:	4613      	mov	r3, r2
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	3310      	adds	r3, #16
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	4413      	add	r3, r2
 8005920:	3304      	adds	r3, #4
 8005922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	705a      	strb	r2, [r3, #1]
 800592a:	e00f      	b.n	800594c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800592c:	78fb      	ldrb	r3, [r7, #3]
 800592e:	f003 020f 	and.w	r2, r3, #15
 8005932:	4613      	mov	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	4413      	add	r3, r2
 8005942:	3304      	adds	r3, #4
 8005944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	b2da      	uxtb	r2, r3
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_PCD_EP_ClrStall+0x86>
 8005968:	2302      	movs	r3, #2
 800596a:	e00e      	b.n	800598a <HAL_PCD_EP_ClrStall+0xa4>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68f9      	ldr	r1, [r7, #12]
 800597a:	4618      	mov	r0, r3
 800597c:	f003 fc2a 	bl	80091d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b084      	sub	sp, #16
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	460b      	mov	r3, r1
 800599c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800599e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	da0c      	bge.n	80059c0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059a6:	78fb      	ldrb	r3, [r7, #3]
 80059a8:	f003 020f 	and.w	r2, r3, #15
 80059ac:	4613      	mov	r3, r2
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	4413      	add	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	3310      	adds	r3, #16
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	4413      	add	r3, r2
 80059ba:	3304      	adds	r3, #4
 80059bc:	60fb      	str	r3, [r7, #12]
 80059be:	e00c      	b.n	80059da <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	f003 020f 	and.w	r2, r3, #15
 80059c6:	4613      	mov	r3, r2
 80059c8:	00db      	lsls	r3, r3, #3
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	4413      	add	r3, r2
 80059d6:	3304      	adds	r3, #4
 80059d8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	68f9      	ldr	r1, [r7, #12]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f003 fa49 	bl	8008e78 <USB_EPStopXfer>
 80059e6:	4603      	mov	r3, r0
 80059e8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80059ea:	7afb      	ldrb	r3, [r7, #11]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08a      	sub	sp, #40	@ 0x28
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	3310      	adds	r3, #16
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4413      	add	r3, r2
 8005a18:	3304      	adds	r3, #4
 8005a1a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d901      	bls.n	8005a2c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e06b      	b.n	8005b04 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	69fa      	ldr	r2, [r7, #28]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d902      	bls.n	8005a48 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	3303      	adds	r3, #3
 8005a4c:	089b      	lsrs	r3, r3, #2
 8005a4e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a50:	e02a      	b.n	8005aa8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	695b      	ldr	r3, [r3, #20]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d902      	bls.n	8005a6e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	3303      	adds	r3, #3
 8005a72:	089b      	lsrs	r3, r3, #2
 8005a74:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	68d9      	ldr	r1, [r3, #12]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	4603      	mov	r3, r0
 8005a8a:	6978      	ldr	r0, [r7, #20]
 8005a8c:	f003 fa9e 	bl	8008fcc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	441a      	add	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	695a      	ldr	r2, [r3, #20]
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	441a      	add	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	015a      	lsls	r2, r3, #5
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4413      	add	r3, r2
 8005ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d809      	bhi.n	8005ad2 <PCD_WriteEmptyTxFifo+0xde>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	695a      	ldr	r2, [r3, #20]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d203      	bcs.n	8005ad2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1bf      	bne.n	8005a52 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d811      	bhi.n	8005b02 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	f003 030f 	and.w	r3, r3, #15
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005af2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	43db      	mvns	r3, r3
 8005af8:	6939      	ldr	r1, [r7, #16]
 8005afa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005afe:	4013      	ands	r3, r2
 8005b00:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3720      	adds	r7, #32
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b088      	sub	sp, #32
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	333c      	adds	r3, #60	@ 0x3c
 8005b24:	3304      	adds	r3, #4
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	799b      	ldrb	r3, [r3, #6]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d17b      	bne.n	8005c3a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d015      	beq.n	8005b78 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	4a61      	ldr	r2, [pc, #388]	@ (8005cd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	f240 80b9 	bls.w	8005cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80b3 	beq.w	8005cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b6e:	461a      	mov	r2, r3
 8005b70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b74:	6093      	str	r3, [r2, #8]
 8005b76:	e0a7      	b.n	8005cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	f003 0320 	and.w	r3, r3, #32
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b8e:	461a      	mov	r2, r3
 8005b90:	2320      	movs	r3, #32
 8005b92:	6093      	str	r3, [r2, #8]
 8005b94:	e098      	b.n	8005cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f040 8093 	bne.w	8005cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8005cd4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d90f      	bls.n	8005bca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	015a      	lsls	r2, r3, #5
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	4413      	add	r3, r2
 8005bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bc6:	6093      	str	r3, [r2, #8]
 8005bc8:	e07e      	b.n	8005cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	4413      	add	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	4413      	add	r3, r2
 8005bdc:	3304      	adds	r3, #4
 8005bde:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	0159      	lsls	r1, r3, #5
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	440b      	add	r3, r1
 8005bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bf6:	1ad2      	subs	r2, r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d114      	bne.n	8005c2c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c14:	461a      	mov	r2, r3
 8005c16:	2101      	movs	r1, #1
 8005c18:	f003 fc6e 	bl	80094f8 <USB_EP0_OutStart>
 8005c1c:	e006      	b.n	8005c2c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	441a      	add	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f005 fd56 	bl	800b6e4 <HAL_PCD_DataOutStageCallback>
 8005c38:	e046      	b.n	8005cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	4a26      	ldr	r2, [pc, #152]	@ (8005cd8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d124      	bne.n	8005c8c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c5e:	6093      	str	r3, [r2, #8]
 8005c60:	e032      	b.n	8005cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f003 0320 	and.w	r3, r3, #32
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c78:	461a      	mov	r2, r3
 8005c7a:	2320      	movs	r3, #32
 8005c7c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	4619      	mov	r1, r3
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f005 fd2d 	bl	800b6e4 <HAL_PCD_DataOutStageCallback>
 8005c8a:	e01d      	b.n	8005cc8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d114      	bne.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1b0>
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d108      	bne.n	8005cbc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6818      	ldr	r0, [r3, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	f003 fc1e 	bl	80094f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f005 fd0e 	bl	800b6e4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005cc8:	2300      	movs	r3, #0
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	4f54300a 	.word	0x4f54300a
 8005cd8:	4f54310a 	.word	0x4f54310a

08005cdc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	333c      	adds	r3, #60	@ 0x3c
 8005cf4:	3304      	adds	r3, #4
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4a15      	ldr	r2, [pc, #84]	@ (8005d64 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d90e      	bls.n	8005d30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d009      	beq.n	8005d30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f005 fcc5 	bl	800b6c0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4a0a      	ldr	r2, [pc, #40]	@ (8005d64 <PCD_EP_OutSetupPacket_int+0x88>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d90c      	bls.n	8005d58 <PCD_EP_OutSetupPacket_int+0x7c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	799b      	ldrb	r3, [r3, #6]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d108      	bne.n	8005d58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d50:	461a      	mov	r2, r3
 8005d52:	2101      	movs	r1, #1
 8005d54:	f003 fbd0 	bl	80094f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	4f54300a 	.word	0x4f54300a

08005d68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
 8005d74:	4613      	mov	r3, r2
 8005d76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d107      	bne.n	8005d96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d86:	883b      	ldrh	r3, [r7, #0]
 8005d88:	0419      	lsls	r1, r3, #16
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d94:	e028      	b.n	8005de8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9c:	0c1b      	lsrs	r3, r3, #16
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	4413      	add	r3, r2
 8005da2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	e00d      	b.n	8005dc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	3340      	adds	r3, #64	@ 0x40
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	0c1b      	lsrs	r3, r3, #16
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005dc0:	7bfb      	ldrb	r3, [r7, #15]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	73fb      	strb	r3, [r7, #15]
 8005dc6:	7bfa      	ldrb	r2, [r7, #15]
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d3ec      	bcc.n	8005daa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005dd0:	883b      	ldrh	r3, [r7, #0]
 8005dd2:	0418      	lsls	r0, r3, #16
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6819      	ldr	r1, [r3, #0]
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	4302      	orrs	r2, r0
 8005de0:	3340      	adds	r3, #64	@ 0x40
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3714      	adds	r7, #20
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	887a      	ldrh	r2, [r7, #2]
 8005e08:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e267      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d075      	beq.n	8005f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e4e:	4b88      	ldr	r3, [pc, #544]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 030c 	and.w	r3, r3, #12
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d00c      	beq.n	8005e74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e5a:	4b85      	ldr	r3, [pc, #532]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	689b      	ldr	r3, [r3, #8]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005e62:	2b08      	cmp	r3, #8
 8005e64:	d112      	bne.n	8005e8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e66:	4b82      	ldr	r3, [pc, #520]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e72:	d10b      	bne.n	8005e8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e74:	4b7e      	ldr	r3, [pc, #504]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d05b      	beq.n	8005f38 <HAL_RCC_OscConfig+0x108>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d157      	bne.n	8005f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e242      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e94:	d106      	bne.n	8005ea4 <HAL_RCC_OscConfig+0x74>
 8005e96:	4b76      	ldr	r3, [pc, #472]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a75      	ldr	r2, [pc, #468]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e01d      	b.n	8005ee0 <HAL_RCC_OscConfig+0xb0>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x98>
 8005eae:	4b70      	ldr	r3, [pc, #448]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a6f      	ldr	r2, [pc, #444]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b6d      	ldr	r3, [pc, #436]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a6c      	ldr	r2, [pc, #432]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e00b      	b.n	8005ee0 <HAL_RCC_OscConfig+0xb0>
 8005ec8:	4b69      	ldr	r3, [pc, #420]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a68      	ldr	r2, [pc, #416]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	4b66      	ldr	r3, [pc, #408]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a65      	ldr	r2, [pc, #404]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d013      	beq.n	8005f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee8:	f7fd fa78 	bl	80033dc <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eee:	e008      	b.n	8005f02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ef0:	f7fd fa74 	bl	80033dc <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b64      	cmp	r3, #100	@ 0x64
 8005efc:	d901      	bls.n	8005f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e207      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f02:	4b5b      	ldr	r3, [pc, #364]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d0f0      	beq.n	8005ef0 <HAL_RCC_OscConfig+0xc0>
 8005f0e:	e014      	b.n	8005f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f10:	f7fd fa64 	bl	80033dc <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f18:	f7fd fa60 	bl	80033dc <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b64      	cmp	r3, #100	@ 0x64
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e1f3      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f2a:	4b51      	ldr	r3, [pc, #324]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d1f0      	bne.n	8005f18 <HAL_RCC_OscConfig+0xe8>
 8005f36:	e000      	b.n	8005f3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d063      	beq.n	800600e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f46:	4b4a      	ldr	r3, [pc, #296]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f003 030c 	and.w	r3, r3, #12
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00b      	beq.n	8005f6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f52:	4b47      	ldr	r3, [pc, #284]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005f5a:	2b08      	cmp	r3, #8
 8005f5c:	d11c      	bne.n	8005f98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f5e:	4b44      	ldr	r3, [pc, #272]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d116      	bne.n	8005f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6a:	4b41      	ldr	r3, [pc, #260]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d005      	beq.n	8005f82 <HAL_RCC_OscConfig+0x152>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d001      	beq.n	8005f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e1c7      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f82:	4b3b      	ldr	r3, [pc, #236]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	4937      	ldr	r1, [pc, #220]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f96:	e03a      	b.n	800600e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d020      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fa0:	4b34      	ldr	r3, [pc, #208]	@ (8006074 <HAL_RCC_OscConfig+0x244>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa6:	f7fd fa19 	bl	80033dc <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fae:	f7fd fa15 	bl	80033dc <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e1a8      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0302 	and.w	r3, r3, #2
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d0f0      	beq.n	8005fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fcc:	4b28      	ldr	r3, [pc, #160]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	4925      	ldr	r1, [pc, #148]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	600b      	str	r3, [r1, #0]
 8005fe0:	e015      	b.n	800600e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fe2:	4b24      	ldr	r3, [pc, #144]	@ (8006074 <HAL_RCC_OscConfig+0x244>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe8:	f7fd f9f8 	bl	80033dc <HAL_GetTick>
 8005fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ff0:	f7fd f9f4 	bl	80033dc <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e187      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006002:	4b1b      	ldr	r3, [pc, #108]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1f0      	bne.n	8005ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b00      	cmp	r3, #0
 8006018:	d036      	beq.n	8006088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d016      	beq.n	8006050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006022:	4b15      	ldr	r3, [pc, #84]	@ (8006078 <HAL_RCC_OscConfig+0x248>)
 8006024:	2201      	movs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006028:	f7fd f9d8 	bl	80033dc <HAL_GetTick>
 800602c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006030:	f7fd f9d4 	bl	80033dc <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e167      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006042:	4b0b      	ldr	r3, [pc, #44]	@ (8006070 <HAL_RCC_OscConfig+0x240>)
 8006044:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0x200>
 800604e:	e01b      	b.n	8006088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006050:	4b09      	ldr	r3, [pc, #36]	@ (8006078 <HAL_RCC_OscConfig+0x248>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006056:	f7fd f9c1 	bl	80033dc <HAL_GetTick>
 800605a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800605c:	e00e      	b.n	800607c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800605e:	f7fd f9bd 	bl	80033dc <HAL_GetTick>
 8006062:	4602      	mov	r2, r0
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d907      	bls.n	800607c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800606c:	2303      	movs	r3, #3
 800606e:	e150      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
 8006070:	40023800 	.word	0x40023800
 8006074:	42470000 	.word	0x42470000
 8006078:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800607c:	4b88      	ldr	r3, [pc, #544]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800607e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1ea      	bne.n	800605e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 8097 	beq.w	80061c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006096:	2300      	movs	r3, #0
 8006098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800609a:	4b81      	ldr	r3, [pc, #516]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800609c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10f      	bne.n	80060c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]
 80060aa:	4b7d      	ldr	r3, [pc, #500]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80060ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ae:	4a7c      	ldr	r2, [pc, #496]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80060b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80060b6:	4b7a      	ldr	r3, [pc, #488]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060be:	60bb      	str	r3, [r7, #8]
 80060c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060c2:	2301      	movs	r3, #1
 80060c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060c6:	4b77      	ldr	r3, [pc, #476]	@ (80062a4 <HAL_RCC_OscConfig+0x474>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d118      	bne.n	8006104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060d2:	4b74      	ldr	r3, [pc, #464]	@ (80062a4 <HAL_RCC_OscConfig+0x474>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a73      	ldr	r2, [pc, #460]	@ (80062a4 <HAL_RCC_OscConfig+0x474>)
 80060d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060de:	f7fd f97d 	bl	80033dc <HAL_GetTick>
 80060e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060e4:	e008      	b.n	80060f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060e6:	f7fd f979 	bl	80033dc <HAL_GetTick>
 80060ea:	4602      	mov	r2, r0
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	1ad3      	subs	r3, r2, r3
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d901      	bls.n	80060f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	e10c      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060f8:	4b6a      	ldr	r3, [pc, #424]	@ (80062a4 <HAL_RCC_OscConfig+0x474>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006100:	2b00      	cmp	r3, #0
 8006102:	d0f0      	beq.n	80060e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	2b01      	cmp	r3, #1
 800610a:	d106      	bne.n	800611a <HAL_RCC_OscConfig+0x2ea>
 800610c:	4b64      	ldr	r3, [pc, #400]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006110:	4a63      	ldr	r2, [pc, #396]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	6713      	str	r3, [r2, #112]	@ 0x70
 8006118:	e01c      	b.n	8006154 <HAL_RCC_OscConfig+0x324>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	2b05      	cmp	r3, #5
 8006120:	d10c      	bne.n	800613c <HAL_RCC_OscConfig+0x30c>
 8006122:	4b5f      	ldr	r3, [pc, #380]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006126:	4a5e      	ldr	r2, [pc, #376]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006128:	f043 0304 	orr.w	r3, r3, #4
 800612c:	6713      	str	r3, [r2, #112]	@ 0x70
 800612e:	4b5c      	ldr	r3, [pc, #368]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006132:	4a5b      	ldr	r2, [pc, #364]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006134:	f043 0301 	orr.w	r3, r3, #1
 8006138:	6713      	str	r3, [r2, #112]	@ 0x70
 800613a:	e00b      	b.n	8006154 <HAL_RCC_OscConfig+0x324>
 800613c:	4b58      	ldr	r3, [pc, #352]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800613e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006140:	4a57      	ldr	r2, [pc, #348]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006142:	f023 0301 	bic.w	r3, r3, #1
 8006146:	6713      	str	r3, [r2, #112]	@ 0x70
 8006148:	4b55      	ldr	r3, [pc, #340]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800614a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800614c:	4a54      	ldr	r2, [pc, #336]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800614e:	f023 0304 	bic.w	r3, r3, #4
 8006152:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d015      	beq.n	8006188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800615c:	f7fd f93e 	bl	80033dc <HAL_GetTick>
 8006160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006162:	e00a      	b.n	800617a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006164:	f7fd f93a 	bl	80033dc <HAL_GetTick>
 8006168:	4602      	mov	r2, r0
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006172:	4293      	cmp	r3, r2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e0cb      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800617a:	4b49      	ldr	r3, [pc, #292]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800617c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d0ee      	beq.n	8006164 <HAL_RCC_OscConfig+0x334>
 8006186:	e014      	b.n	80061b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006188:	f7fd f928 	bl	80033dc <HAL_GetTick>
 800618c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800618e:	e00a      	b.n	80061a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006190:	f7fd f924 	bl	80033dc <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800619e:	4293      	cmp	r3, r2
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e0b5      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a6:	4b3e      	ldr	r3, [pc, #248]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80061a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1ee      	bne.n	8006190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80061b2:	7dfb      	ldrb	r3, [r7, #23]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d105      	bne.n	80061c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b8:	4b39      	ldr	r3, [pc, #228]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80061ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061bc:	4a38      	ldr	r2, [pc, #224]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80061be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80a1 	beq.w	8006310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80061ce:	4b34      	ldr	r3, [pc, #208]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 030c 	and.w	r3, r3, #12
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d05c      	beq.n	8006294 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d141      	bne.n	8006266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061e2:	4b31      	ldr	r3, [pc, #196]	@ (80062a8 <HAL_RCC_OscConfig+0x478>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e8:	f7fd f8f8 	bl	80033dc <HAL_GetTick>
 80061ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061ee:	e008      	b.n	8006202 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f0:	f7fd f8f4 	bl	80033dc <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d901      	bls.n	8006202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	e087      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006202:	4b27      	ldr	r3, [pc, #156]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f0      	bne.n	80061f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69da      	ldr	r2, [r3, #28]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	431a      	orrs	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621c:	019b      	lsls	r3, r3, #6
 800621e:	431a      	orrs	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006224:	085b      	lsrs	r3, r3, #1
 8006226:	3b01      	subs	r3, #1
 8006228:	041b      	lsls	r3, r3, #16
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006230:	061b      	lsls	r3, r3, #24
 8006232:	491b      	ldr	r1, [pc, #108]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006234:	4313      	orrs	r3, r2
 8006236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006238:	4b1b      	ldr	r3, [pc, #108]	@ (80062a8 <HAL_RCC_OscConfig+0x478>)
 800623a:	2201      	movs	r2, #1
 800623c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800623e:	f7fd f8cd 	bl	80033dc <HAL_GetTick>
 8006242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006244:	e008      	b.n	8006258 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006246:	f7fd f8c9 	bl	80033dc <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	2b02      	cmp	r3, #2
 8006252:	d901      	bls.n	8006258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e05c      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006258:	4b11      	ldr	r3, [pc, #68]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0f0      	beq.n	8006246 <HAL_RCC_OscConfig+0x416>
 8006264:	e054      	b.n	8006310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006266:	4b10      	ldr	r3, [pc, #64]	@ (80062a8 <HAL_RCC_OscConfig+0x478>)
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800626c:	f7fd f8b6 	bl	80033dc <HAL_GetTick>
 8006270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006272:	e008      	b.n	8006286 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006274:	f7fd f8b2 	bl	80033dc <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	2b02      	cmp	r3, #2
 8006280:	d901      	bls.n	8006286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e045      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006286:	4b06      	ldr	r3, [pc, #24]	@ (80062a0 <HAL_RCC_OscConfig+0x470>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1f0      	bne.n	8006274 <HAL_RCC_OscConfig+0x444>
 8006292:	e03d      	b.n	8006310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d107      	bne.n	80062ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e038      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
 80062a0:	40023800 	.word	0x40023800
 80062a4:	40007000 	.word	0x40007000
 80062a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80062ac:	4b1b      	ldr	r3, [pc, #108]	@ (800631c <HAL_RCC_OscConfig+0x4ec>)
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d028      	beq.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d121      	bne.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d11a      	bne.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062dc:	4013      	ands	r3, r2
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d111      	bne.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	3b01      	subs	r3, #1
 80062f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d107      	bne.n	800630c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006308:	429a      	cmp	r2, r3
 800630a:	d001      	beq.n	8006310 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e000      	b.n	8006312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	40023800 	.word	0x40023800

08006320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e0cc      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006334:	4b68      	ldr	r3, [pc, #416]	@ (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	429a      	cmp	r2, r3
 8006340:	d90c      	bls.n	800635c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006342:	4b65      	ldr	r3, [pc, #404]	@ (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800634a:	4b63      	ldr	r3, [pc, #396]	@ (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f003 0307 	and.w	r3, r3, #7
 8006352:	683a      	ldr	r2, [r7, #0]
 8006354:	429a      	cmp	r2, r3
 8006356:	d001      	beq.n	800635c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e0b8      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d020      	beq.n	80063aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
 8006370:	2b00      	cmp	r3, #0
 8006372:	d005      	beq.n	8006380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006374:	4b59      	ldr	r3, [pc, #356]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	4a58      	ldr	r2, [pc, #352]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800637e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800638c:	4b53      	ldr	r3, [pc, #332]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	4a52      	ldr	r2, [pc, #328]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006392:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006398:	4b50      	ldr	r3, [pc, #320]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	494d      	ldr	r1, [pc, #308]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0301 	and.w	r3, r3, #1
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d044      	beq.n	8006440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d107      	bne.n	80063ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063be:	4b47      	ldr	r3, [pc, #284]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d119      	bne.n	80063fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e07f      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d003      	beq.n	80063de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d107      	bne.n	80063ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063de:	4b3f      	ldr	r3, [pc, #252]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e06f      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063ee:	4b3b      	ldr	r3, [pc, #236]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0302 	and.w	r3, r3, #2
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e067      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063fe:	4b37      	ldr	r3, [pc, #220]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f023 0203 	bic.w	r2, r3, #3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	4934      	ldr	r1, [pc, #208]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 800640c:	4313      	orrs	r3, r2
 800640e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006410:	f7fc ffe4 	bl	80033dc <HAL_GetTick>
 8006414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006416:	e00a      	b.n	800642e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006418:	f7fc ffe0 	bl	80033dc <HAL_GetTick>
 800641c:	4602      	mov	r2, r0
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006426:	4293      	cmp	r3, r2
 8006428:	d901      	bls.n	800642e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e04f      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800642e:	4b2b      	ldr	r3, [pc, #172]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	f003 020c 	and.w	r2, r3, #12
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	429a      	cmp	r2, r3
 800643e:	d1eb      	bne.n	8006418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006440:	4b25      	ldr	r3, [pc, #148]	@ (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d20c      	bcs.n	8006468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644e:	4b22      	ldr	r3, [pc, #136]	@ (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006456:	4b20      	ldr	r3, [pc, #128]	@ (80064d8 <HAL_RCC_ClockConfig+0x1b8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	429a      	cmp	r2, r3
 8006462:	d001      	beq.n	8006468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e032      	b.n	80064ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d008      	beq.n	8006486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006474:	4b19      	ldr	r3, [pc, #100]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	4916      	ldr	r1, [pc, #88]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006482:	4313      	orrs	r3, r2
 8006484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006492:	4b12      	ldr	r3, [pc, #72]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	490e      	ldr	r1, [pc, #56]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80064a6:	f000 f821 	bl	80064ec <HAL_RCC_GetSysClockFreq>
 80064aa:	4602      	mov	r2, r0
 80064ac:	4b0b      	ldr	r3, [pc, #44]	@ (80064dc <HAL_RCC_ClockConfig+0x1bc>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	091b      	lsrs	r3, r3, #4
 80064b2:	f003 030f 	and.w	r3, r3, #15
 80064b6:	490a      	ldr	r1, [pc, #40]	@ (80064e0 <HAL_RCC_ClockConfig+0x1c0>)
 80064b8:	5ccb      	ldrb	r3, [r1, r3]
 80064ba:	fa22 f303 	lsr.w	r3, r2, r3
 80064be:	4a09      	ldr	r2, [pc, #36]	@ (80064e4 <HAL_RCC_ClockConfig+0x1c4>)
 80064c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80064c2:	4b09      	ldr	r3, [pc, #36]	@ (80064e8 <HAL_RCC_ClockConfig+0x1c8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7fc ff44 	bl	8003354 <HAL_InitTick>

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	40023c00 	.word	0x40023c00
 80064dc:	40023800 	.word	0x40023800
 80064e0:	0800f770 	.word	0x0800f770
 80064e4:	20000000 	.word	0x20000000
 80064e8:	20000004 	.word	0x20000004

080064ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f0:	b090      	sub	sp, #64	@ 0x40
 80064f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f8:	2300      	movs	r3, #0
 80064fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064fc:	2300      	movs	r3, #0
 80064fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006504:	4b59      	ldr	r3, [pc, #356]	@ (800666c <HAL_RCC_GetSysClockFreq+0x180>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 030c 	and.w	r3, r3, #12
 800650c:	2b08      	cmp	r3, #8
 800650e:	d00d      	beq.n	800652c <HAL_RCC_GetSysClockFreq+0x40>
 8006510:	2b08      	cmp	r3, #8
 8006512:	f200 80a1 	bhi.w	8006658 <HAL_RCC_GetSysClockFreq+0x16c>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_RCC_GetSysClockFreq+0x34>
 800651a:	2b04      	cmp	r3, #4
 800651c:	d003      	beq.n	8006526 <HAL_RCC_GetSysClockFreq+0x3a>
 800651e:	e09b      	b.n	8006658 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006520:	4b53      	ldr	r3, [pc, #332]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x184>)
 8006522:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006524:	e09b      	b.n	800665e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006526:	4b53      	ldr	r3, [pc, #332]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x188>)
 8006528:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800652a:	e098      	b.n	800665e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800652c:	4b4f      	ldr	r3, [pc, #316]	@ (800666c <HAL_RCC_GetSysClockFreq+0x180>)
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006534:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006536:	4b4d      	ldr	r3, [pc, #308]	@ (800666c <HAL_RCC_GetSysClockFreq+0x180>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d028      	beq.n	8006594 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006542:	4b4a      	ldr	r3, [pc, #296]	@ (800666c <HAL_RCC_GetSysClockFreq+0x180>)
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	099b      	lsrs	r3, r3, #6
 8006548:	2200      	movs	r2, #0
 800654a:	623b      	str	r3, [r7, #32]
 800654c:	627a      	str	r2, [r7, #36]	@ 0x24
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006554:	2100      	movs	r1, #0
 8006556:	4b47      	ldr	r3, [pc, #284]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x188>)
 8006558:	fb03 f201 	mul.w	r2, r3, r1
 800655c:	2300      	movs	r3, #0
 800655e:	fb00 f303 	mul.w	r3, r0, r3
 8006562:	4413      	add	r3, r2
 8006564:	4a43      	ldr	r2, [pc, #268]	@ (8006674 <HAL_RCC_GetSysClockFreq+0x188>)
 8006566:	fba0 1202 	umull	r1, r2, r0, r2
 800656a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800656c:	460a      	mov	r2, r1
 800656e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006570:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006572:	4413      	add	r3, r2
 8006574:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006578:	2200      	movs	r2, #0
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	61fa      	str	r2, [r7, #28]
 800657e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006582:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006586:	f7fa fb67 	bl	8000c58 <__aeabi_uldivmod>
 800658a:	4602      	mov	r2, r0
 800658c:	460b      	mov	r3, r1
 800658e:	4613      	mov	r3, r2
 8006590:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006592:	e053      	b.n	800663c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006594:	4b35      	ldr	r3, [pc, #212]	@ (800666c <HAL_RCC_GetSysClockFreq+0x180>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	099b      	lsrs	r3, r3, #6
 800659a:	2200      	movs	r2, #0
 800659c:	613b      	str	r3, [r7, #16]
 800659e:	617a      	str	r2, [r7, #20]
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80065a6:	f04f 0b00 	mov.w	fp, #0
 80065aa:	4652      	mov	r2, sl
 80065ac:	465b      	mov	r3, fp
 80065ae:	f04f 0000 	mov.w	r0, #0
 80065b2:	f04f 0100 	mov.w	r1, #0
 80065b6:	0159      	lsls	r1, r3, #5
 80065b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065bc:	0150      	lsls	r0, r2, #5
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	ebb2 080a 	subs.w	r8, r2, sl
 80065c6:	eb63 090b 	sbc.w	r9, r3, fp
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80065d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80065da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80065de:	ebb2 0408 	subs.w	r4, r2, r8
 80065e2:	eb63 0509 	sbc.w	r5, r3, r9
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	00eb      	lsls	r3, r5, #3
 80065f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065f4:	00e2      	lsls	r2, r4, #3
 80065f6:	4614      	mov	r4, r2
 80065f8:	461d      	mov	r5, r3
 80065fa:	eb14 030a 	adds.w	r3, r4, sl
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	eb45 030b 	adc.w	r3, r5, fp
 8006604:	607b      	str	r3, [r7, #4]
 8006606:	f04f 0200 	mov.w	r2, #0
 800660a:	f04f 0300 	mov.w	r3, #0
 800660e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006612:	4629      	mov	r1, r5
 8006614:	028b      	lsls	r3, r1, #10
 8006616:	4621      	mov	r1, r4
 8006618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800661c:	4621      	mov	r1, r4
 800661e:	028a      	lsls	r2, r1, #10
 8006620:	4610      	mov	r0, r2
 8006622:	4619      	mov	r1, r3
 8006624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006626:	2200      	movs	r2, #0
 8006628:	60bb      	str	r3, [r7, #8]
 800662a:	60fa      	str	r2, [r7, #12]
 800662c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006630:	f7fa fb12 	bl	8000c58 <__aeabi_uldivmod>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4613      	mov	r3, r2
 800663a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800663c:	4b0b      	ldr	r3, [pc, #44]	@ (800666c <HAL_RCC_GetSysClockFreq+0x180>)
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	0c1b      	lsrs	r3, r3, #16
 8006642:	f003 0303 	and.w	r3, r3, #3
 8006646:	3301      	adds	r3, #1
 8006648:	005b      	lsls	r3, r3, #1
 800664a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800664c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800664e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006650:	fbb2 f3f3 	udiv	r3, r2, r3
 8006654:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006656:	e002      	b.n	800665e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006658:	4b05      	ldr	r3, [pc, #20]	@ (8006670 <HAL_RCC_GetSysClockFreq+0x184>)
 800665a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800665c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800665e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006660:	4618      	mov	r0, r3
 8006662:	3740      	adds	r7, #64	@ 0x40
 8006664:	46bd      	mov	sp, r7
 8006666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800666a:	bf00      	nop
 800666c:	40023800 	.word	0x40023800
 8006670:	00f42400 	.word	0x00f42400
 8006674:	017d7840 	.word	0x017d7840

08006678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800667c:	4b03      	ldr	r3, [pc, #12]	@ (800668c <HAL_RCC_GetHCLKFreq+0x14>)
 800667e:	681b      	ldr	r3, [r3, #0]
}
 8006680:	4618      	mov	r0, r3
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20000000 	.word	0x20000000

08006690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006694:	f7ff fff0 	bl	8006678 <HAL_RCC_GetHCLKFreq>
 8006698:	4602      	mov	r2, r0
 800669a:	4b05      	ldr	r3, [pc, #20]	@ (80066b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	0a9b      	lsrs	r3, r3, #10
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	4903      	ldr	r1, [pc, #12]	@ (80066b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80066a6:	5ccb      	ldrb	r3, [r1, r3]
 80066a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	40023800 	.word	0x40023800
 80066b4:	0800f780 	.word	0x0800f780

080066b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80066bc:	f7ff ffdc 	bl	8006678 <HAL_RCC_GetHCLKFreq>
 80066c0:	4602      	mov	r2, r0
 80066c2:	4b05      	ldr	r3, [pc, #20]	@ (80066d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80066c4:	689b      	ldr	r3, [r3, #8]
 80066c6:	0b5b      	lsrs	r3, r3, #13
 80066c8:	f003 0307 	and.w	r3, r3, #7
 80066cc:	4903      	ldr	r1, [pc, #12]	@ (80066dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80066ce:	5ccb      	ldrb	r3, [r1, r3]
 80066d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	40023800 	.word	0x40023800
 80066dc:	0800f780 	.word	0x0800f780

080066e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e041      	b.n	8006776 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fc f938 	bl	800297c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	3304      	adds	r3, #4
 800671c:	4619      	mov	r1, r3
 800671e:	4610      	mov	r0, r2
 8006720:	f000 fc3c 	bl	8006f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2201      	movs	r2, #1
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2201      	movs	r2, #1
 8006740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006774:	2300      	movs	r3, #0
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800678e:	b2db      	uxtb	r3, r3
 8006790:	2b01      	cmp	r3, #1
 8006792:	d001      	beq.n	8006798 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e044      	b.n	8006822 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2202      	movs	r2, #2
 800679c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1e      	ldr	r2, [pc, #120]	@ (8006830 <HAL_TIM_Base_Start_IT+0xb0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d018      	beq.n	80067ec <HAL_TIM_Base_Start_IT+0x6c>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c2:	d013      	beq.n	80067ec <HAL_TIM_Base_Start_IT+0x6c>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1a      	ldr	r2, [pc, #104]	@ (8006834 <HAL_TIM_Base_Start_IT+0xb4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d00e      	beq.n	80067ec <HAL_TIM_Base_Start_IT+0x6c>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a19      	ldr	r2, [pc, #100]	@ (8006838 <HAL_TIM_Base_Start_IT+0xb8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d009      	beq.n	80067ec <HAL_TIM_Base_Start_IT+0x6c>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a17      	ldr	r2, [pc, #92]	@ (800683c <HAL_TIM_Base_Start_IT+0xbc>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d004      	beq.n	80067ec <HAL_TIM_Base_Start_IT+0x6c>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a16      	ldr	r2, [pc, #88]	@ (8006840 <HAL_TIM_Base_Start_IT+0xc0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d111      	bne.n	8006810 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 0307 	and.w	r3, r3, #7
 80067f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b06      	cmp	r3, #6
 80067fc:	d010      	beq.n	8006820 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f042 0201 	orr.w	r2, r2, #1
 800680c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800680e:	e007      	b.n	8006820 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f042 0201 	orr.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40010000 	.word	0x40010000
 8006834:	40000400 	.word	0x40000400
 8006838:	40000800 	.word	0x40000800
 800683c:	40000c00 	.word	0x40000c00
 8006840:	40014000 	.word	0x40014000

08006844 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e041      	b.n	80068da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800685c:	b2db      	uxtb	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d106      	bne.n	8006870 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f839 	bl	80068e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	3304      	adds	r3, #4
 8006880:	4619      	mov	r1, r3
 8006882:	4610      	mov	r0, r2
 8006884:	f000 fb8a 	bl	8006f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3708      	adds	r7, #8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068e2:	b480      	push	{r7}
 80068e4:	b083      	sub	sp, #12
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068ea:	bf00      	nop
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
	...

080068f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d109      	bne.n	800691c <HAL_TIM_PWM_Start+0x24>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b01      	cmp	r3, #1
 8006912:	bf14      	ite	ne
 8006914:	2301      	movne	r3, #1
 8006916:	2300      	moveq	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	e022      	b.n	8006962 <HAL_TIM_PWM_Start+0x6a>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	2b04      	cmp	r3, #4
 8006920:	d109      	bne.n	8006936 <HAL_TIM_PWM_Start+0x3e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b01      	cmp	r3, #1
 800692c:	bf14      	ite	ne
 800692e:	2301      	movne	r3, #1
 8006930:	2300      	moveq	r3, #0
 8006932:	b2db      	uxtb	r3, r3
 8006934:	e015      	b.n	8006962 <HAL_TIM_PWM_Start+0x6a>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2b08      	cmp	r3, #8
 800693a:	d109      	bne.n	8006950 <HAL_TIM_PWM_Start+0x58>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b01      	cmp	r3, #1
 8006946:	bf14      	ite	ne
 8006948:	2301      	movne	r3, #1
 800694a:	2300      	moveq	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	e008      	b.n	8006962 <HAL_TIM_PWM_Start+0x6a>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b01      	cmp	r3, #1
 800695a:	bf14      	ite	ne
 800695c:	2301      	movne	r3, #1
 800695e:	2300      	moveq	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e068      	b.n	8006a3c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d104      	bne.n	800697a <HAL_TIM_PWM_Start+0x82>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006978:	e013      	b.n	80069a2 <HAL_TIM_PWM_Start+0xaa>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b04      	cmp	r3, #4
 800697e:	d104      	bne.n	800698a <HAL_TIM_PWM_Start+0x92>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006988:	e00b      	b.n	80069a2 <HAL_TIM_PWM_Start+0xaa>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b08      	cmp	r3, #8
 800698e:	d104      	bne.n	800699a <HAL_TIM_PWM_Start+0xa2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006998:	e003      	b.n	80069a2 <HAL_TIM_PWM_Start+0xaa>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2202      	movs	r2, #2
 800699e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2201      	movs	r2, #1
 80069a8:	6839      	ldr	r1, [r7, #0]
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fda8 	bl	8007500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a23      	ldr	r2, [pc, #140]	@ (8006a44 <HAL_TIM_PWM_Start+0x14c>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d107      	bne.n	80069ca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80069c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006a44 <HAL_TIM_PWM_Start+0x14c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d018      	beq.n	8006a06 <HAL_TIM_PWM_Start+0x10e>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069dc:	d013      	beq.n	8006a06 <HAL_TIM_PWM_Start+0x10e>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a19      	ldr	r2, [pc, #100]	@ (8006a48 <HAL_TIM_PWM_Start+0x150>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d00e      	beq.n	8006a06 <HAL_TIM_PWM_Start+0x10e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a17      	ldr	r2, [pc, #92]	@ (8006a4c <HAL_TIM_PWM_Start+0x154>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d009      	beq.n	8006a06 <HAL_TIM_PWM_Start+0x10e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a16      	ldr	r2, [pc, #88]	@ (8006a50 <HAL_TIM_PWM_Start+0x158>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d004      	beq.n	8006a06 <HAL_TIM_PWM_Start+0x10e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a14      	ldr	r2, [pc, #80]	@ (8006a54 <HAL_TIM_PWM_Start+0x15c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d111      	bne.n	8006a2a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b06      	cmp	r3, #6
 8006a16:	d010      	beq.n	8006a3a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f042 0201 	orr.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a28:	e007      	b.n	8006a3a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f042 0201 	orr.w	r2, r2, #1
 8006a38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3710      	adds	r7, #16
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40010000 	.word	0x40010000
 8006a48:	40000400 	.word	0x40000400
 8006a4c:	40000800 	.word	0x40000800
 8006a50:	40000c00 	.word	0x40000c00
 8006a54:	40014000 	.word	0x40014000

08006a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d020      	beq.n	8006abc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f003 0302 	and.w	r3, r3, #2
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01b      	beq.n	8006abc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0202 	mvn.w	r2, #2
 8006a8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fa5b 	bl	8006f5e <HAL_TIM_IC_CaptureCallback>
 8006aa8:	e005      	b.n	8006ab6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fa4d 	bl	8006f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fa5e 	bl	8006f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f003 0304 	and.w	r3, r3, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d020      	beq.n	8006b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f003 0304 	and.w	r3, r3, #4
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d01b      	beq.n	8006b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f06f 0204 	mvn.w	r2, #4
 8006ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2202      	movs	r2, #2
 8006ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fa35 	bl	8006f5e <HAL_TIM_IC_CaptureCallback>
 8006af4:	e005      	b.n	8006b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa27 	bl	8006f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fa38 	bl	8006f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f003 0308 	and.w	r3, r3, #8
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d020      	beq.n	8006b54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f003 0308 	and.w	r3, r3, #8
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01b      	beq.n	8006b54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0208 	mvn.w	r2, #8
 8006b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2204      	movs	r2, #4
 8006b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69db      	ldr	r3, [r3, #28]
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fa0f 	bl	8006f5e <HAL_TIM_IC_CaptureCallback>
 8006b40:	e005      	b.n	8006b4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa01 	bl	8006f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fa12 	bl	8006f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 0310 	and.w	r3, r3, #16
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d020      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0310 	and.w	r3, r3, #16
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d01b      	beq.n	8006ba0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0210 	mvn.w	r2, #16
 8006b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2208      	movs	r2, #8
 8006b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	69db      	ldr	r3, [r3, #28]
 8006b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 f9e9 	bl	8006f5e <HAL_TIM_IC_CaptureCallback>
 8006b8c:	e005      	b.n	8006b9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f9db 	bl	8006f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 f9ec 	bl	8006f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00c      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d007      	beq.n	8006bc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0201 	mvn.w	r2, #1
 8006bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fb fbae 	bl	8002320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d00c      	beq.n	8006be8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d007      	beq.n	8006be8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fd2a 	bl	800763c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00c      	beq.n	8006c0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d007      	beq.n	8006c0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f9bd 	bl	8006f86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00c      	beq.n	8006c30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d007      	beq.n	8006c30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f06f 0220 	mvn.w	r2, #32
 8006c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fcfc 	bl	8007628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c30:	bf00      	nop
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d101      	bne.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c52:	2302      	movs	r3, #2
 8006c54:	e0ae      	b.n	8006db4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b0c      	cmp	r3, #12
 8006c62:	f200 809f 	bhi.w	8006da4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c66:	a201      	add	r2, pc, #4	@ (adr r2, 8006c6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c6c:	08006ca1 	.word	0x08006ca1
 8006c70:	08006da5 	.word	0x08006da5
 8006c74:	08006da5 	.word	0x08006da5
 8006c78:	08006da5 	.word	0x08006da5
 8006c7c:	08006ce1 	.word	0x08006ce1
 8006c80:	08006da5 	.word	0x08006da5
 8006c84:	08006da5 	.word	0x08006da5
 8006c88:	08006da5 	.word	0x08006da5
 8006c8c:	08006d23 	.word	0x08006d23
 8006c90:	08006da5 	.word	0x08006da5
 8006c94:	08006da5 	.word	0x08006da5
 8006c98:	08006da5 	.word	0x08006da5
 8006c9c:	08006d63 	.word	0x08006d63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 fa04 	bl	80070b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	699a      	ldr	r2, [r3, #24]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0208 	orr.w	r2, r2, #8
 8006cba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	699a      	ldr	r2, [r3, #24]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0204 	bic.w	r2, r2, #4
 8006cca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6999      	ldr	r1, [r3, #24]
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	691a      	ldr	r2, [r3, #16]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	619a      	str	r2, [r3, #24]
      break;
 8006cde:	e064      	b.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68b9      	ldr	r1, [r7, #8]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f000 fa4a 	bl	8007180 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699a      	ldr	r2, [r3, #24]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6999      	ldr	r1, [r3, #24]
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	021a      	lsls	r2, r3, #8
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	619a      	str	r2, [r3, #24]
      break;
 8006d20:	e043      	b.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68b9      	ldr	r1, [r7, #8]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 fa95 	bl	8007258 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0208 	orr.w	r2, r2, #8
 8006d3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	69da      	ldr	r2, [r3, #28]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f022 0204 	bic.w	r2, r2, #4
 8006d4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69d9      	ldr	r1, [r3, #28]
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	691a      	ldr	r2, [r3, #16]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	61da      	str	r2, [r3, #28]
      break;
 8006d60:	e023      	b.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f000 fadf 	bl	800732c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69da      	ldr	r2, [r3, #28]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69da      	ldr	r2, [r3, #28]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	69d9      	ldr	r1, [r3, #28]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	021a      	lsls	r2, r3, #8
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	61da      	str	r2, [r3, #28]
      break;
 8006da2:	e002      	b.n	8006daa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]
      break;
 8006da8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3718      	adds	r7, #24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e0b4      	b.n	8006f42 <HAL_TIM_ConfigClockSource+0x186>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2202      	movs	r2, #2
 8006de4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e10:	d03e      	beq.n	8006e90 <HAL_TIM_ConfigClockSource+0xd4>
 8006e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e16:	f200 8087 	bhi.w	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e1e:	f000 8086 	beq.w	8006f2e <HAL_TIM_ConfigClockSource+0x172>
 8006e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e26:	d87f      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e28:	2b70      	cmp	r3, #112	@ 0x70
 8006e2a:	d01a      	beq.n	8006e62 <HAL_TIM_ConfigClockSource+0xa6>
 8006e2c:	2b70      	cmp	r3, #112	@ 0x70
 8006e2e:	d87b      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e30:	2b60      	cmp	r3, #96	@ 0x60
 8006e32:	d050      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x11a>
 8006e34:	2b60      	cmp	r3, #96	@ 0x60
 8006e36:	d877      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e38:	2b50      	cmp	r3, #80	@ 0x50
 8006e3a:	d03c      	beq.n	8006eb6 <HAL_TIM_ConfigClockSource+0xfa>
 8006e3c:	2b50      	cmp	r3, #80	@ 0x50
 8006e3e:	d873      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e40:	2b40      	cmp	r3, #64	@ 0x40
 8006e42:	d058      	beq.n	8006ef6 <HAL_TIM_ConfigClockSource+0x13a>
 8006e44:	2b40      	cmp	r3, #64	@ 0x40
 8006e46:	d86f      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e48:	2b30      	cmp	r3, #48	@ 0x30
 8006e4a:	d064      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0x15a>
 8006e4c:	2b30      	cmp	r3, #48	@ 0x30
 8006e4e:	d86b      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	d060      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0x15a>
 8006e54:	2b20      	cmp	r3, #32
 8006e56:	d867      	bhi.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d05c      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0x15a>
 8006e5c:	2b10      	cmp	r3, #16
 8006e5e:	d05a      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0x15a>
 8006e60:	e062      	b.n	8006f28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e72:	f000 fb25 	bl	80074c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68ba      	ldr	r2, [r7, #8]
 8006e8c:	609a      	str	r2, [r3, #8]
      break;
 8006e8e:	e04f      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ea0:	f000 fb0e 	bl	80074c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689a      	ldr	r2, [r3, #8]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006eb2:	609a      	str	r2, [r3, #8]
      break;
 8006eb4:	e03c      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f000 fa82 	bl	80073cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2150      	movs	r1, #80	@ 0x50
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fadb 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006ed4:	e02c      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f000 faa1 	bl	800742a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2160      	movs	r1, #96	@ 0x60
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f000 facb 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006ef4:	e01c      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f02:	461a      	mov	r2, r3
 8006f04:	f000 fa62 	bl	80073cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2140      	movs	r1, #64	@ 0x40
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fabb 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006f14:	e00c      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	4610      	mov	r0, r2
 8006f22:	f000 fab2 	bl	800748a <TIM_ITRx_SetConfig>
      break;
 8006f26:	e003      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f2c:	e000      	b.n	8006f30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	b083      	sub	sp, #12
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f72:	b480      	push	{r7}
 8006f74:	b083      	sub	sp, #12
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr

08006f86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b083      	sub	sp, #12
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b085      	sub	sp, #20
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a3a      	ldr	r2, [pc, #232]	@ (8007098 <TIM_Base_SetConfig+0xfc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d00f      	beq.n	8006fd4 <TIM_Base_SetConfig+0x38>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fba:	d00b      	beq.n	8006fd4 <TIM_Base_SetConfig+0x38>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a37      	ldr	r2, [pc, #220]	@ (800709c <TIM_Base_SetConfig+0x100>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d007      	beq.n	8006fd4 <TIM_Base_SetConfig+0x38>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a36      	ldr	r2, [pc, #216]	@ (80070a0 <TIM_Base_SetConfig+0x104>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d003      	beq.n	8006fd4 <TIM_Base_SetConfig+0x38>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a35      	ldr	r2, [pc, #212]	@ (80070a4 <TIM_Base_SetConfig+0x108>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d108      	bne.n	8006fe6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8007098 <TIM_Base_SetConfig+0xfc>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d01b      	beq.n	8007026 <TIM_Base_SetConfig+0x8a>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff4:	d017      	beq.n	8007026 <TIM_Base_SetConfig+0x8a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a28      	ldr	r2, [pc, #160]	@ (800709c <TIM_Base_SetConfig+0x100>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <TIM_Base_SetConfig+0x8a>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a27      	ldr	r2, [pc, #156]	@ (80070a0 <TIM_Base_SetConfig+0x104>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d00f      	beq.n	8007026 <TIM_Base_SetConfig+0x8a>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	4a26      	ldr	r2, [pc, #152]	@ (80070a4 <TIM_Base_SetConfig+0x108>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d00b      	beq.n	8007026 <TIM_Base_SetConfig+0x8a>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a25      	ldr	r2, [pc, #148]	@ (80070a8 <TIM_Base_SetConfig+0x10c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d007      	beq.n	8007026 <TIM_Base_SetConfig+0x8a>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	4a24      	ldr	r2, [pc, #144]	@ (80070ac <TIM_Base_SetConfig+0x110>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d003      	beq.n	8007026 <TIM_Base_SetConfig+0x8a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	4a23      	ldr	r2, [pc, #140]	@ (80070b0 <TIM_Base_SetConfig+0x114>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d108      	bne.n	8007038 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800702c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	4313      	orrs	r3, r2
 8007036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	695b      	ldr	r3, [r3, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a0e      	ldr	r2, [pc, #56]	@ (8007098 <TIM_Base_SetConfig+0xfc>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d103      	bne.n	800706c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b01      	cmp	r3, #1
 800707c:	d105      	bne.n	800708a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	f023 0201 	bic.w	r2, r3, #1
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	611a      	str	r2, [r3, #16]
  }
}
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	40010000 	.word	0x40010000
 800709c:	40000400 	.word	0x40000400
 80070a0:	40000800 	.word	0x40000800
 80070a4:	40000c00 	.word	0x40000c00
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40014400 	.word	0x40014400
 80070b0:	40014800 	.word	0x40014800

080070b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a1b      	ldr	r3, [r3, #32]
 80070c8:	f023 0201 	bic.w	r2, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 0303 	bic.w	r3, r3, #3
 80070ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68fa      	ldr	r2, [r7, #12]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f023 0302 	bic.w	r3, r3, #2
 80070fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4313      	orrs	r3, r2
 8007106:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a1c      	ldr	r2, [pc, #112]	@ (800717c <TIM_OC1_SetConfig+0xc8>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d10c      	bne.n	800712a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f023 0308 	bic.w	r3, r3, #8
 8007116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	f023 0304 	bic.w	r3, r3, #4
 8007128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a13      	ldr	r2, [pc, #76]	@ (800717c <TIM_OC1_SetConfig+0xc8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d111      	bne.n	8007156 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007138:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007140:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	695b      	ldr	r3, [r3, #20]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	699b      	ldr	r3, [r3, #24]
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	4313      	orrs	r3, r2
 8007154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	68fa      	ldr	r2, [r7, #12]
 8007160:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	621a      	str	r2, [r3, #32]
}
 8007170:	bf00      	nop
 8007172:	371c      	adds	r7, #28
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	40010000 	.word	0x40010000

08007180 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	f023 0210 	bic.w	r2, r3, #16
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	699b      	ldr	r3, [r3, #24]
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	021b      	lsls	r3, r3, #8
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	f023 0320 	bic.w	r3, r3, #32
 80071ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a1e      	ldr	r2, [pc, #120]	@ (8007254 <TIM_OC2_SetConfig+0xd4>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d10d      	bne.n	80071fc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	68db      	ldr	r3, [r3, #12]
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	697a      	ldr	r2, [r7, #20]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80071fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a15      	ldr	r2, [pc, #84]	@ (8007254 <TIM_OC2_SetConfig+0xd4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d113      	bne.n	800722c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800720a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	4313      	orrs	r3, r2
 800721e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	4313      	orrs	r3, r2
 800722a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	621a      	str	r2, [r3, #32]
}
 8007246:	bf00      	nop
 8007248:	371c      	adds	r7, #28
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	40010000 	.word	0x40010000

08007258 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007258:	b480      	push	{r7}
 800725a:	b087      	sub	sp, #28
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	69db      	ldr	r3, [r3, #28]
 800727e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0303 	bic.w	r3, r3, #3
 800728e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80072a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	021b      	lsls	r3, r3, #8
 80072a8:	697a      	ldr	r2, [r7, #20]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007328 <TIM_OC3_SetConfig+0xd0>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d10d      	bne.n	80072d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	021b      	lsls	r3, r3, #8
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a14      	ldr	r2, [pc, #80]	@ (8007328 <TIM_OC3_SetConfig+0xd0>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d113      	bne.n	8007302 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80072e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	011b      	lsls	r3, r3, #4
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	4313      	orrs	r3, r2
 8007300:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	693a      	ldr	r2, [r7, #16]
 8007306:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	621a      	str	r2, [r3, #32]
}
 800731c:	bf00      	nop
 800731e:	371c      	adds	r7, #28
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	40010000 	.word	0x40010000

0800732c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800735a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007362:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	4313      	orrs	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007376:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	031b      	lsls	r3, r3, #12
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a10      	ldr	r2, [pc, #64]	@ (80073c8 <TIM_OC4_SetConfig+0x9c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d109      	bne.n	80073a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007392:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	019b      	lsls	r3, r3, #6
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	621a      	str	r2, [r3, #32]
}
 80073ba:	bf00      	nop
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	40010000 	.word	0x40010000

080073cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	f023 0201 	bic.w	r2, r3, #1
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80073f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4313      	orrs	r3, r2
 8007400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f023 030a 	bic.w	r3, r3, #10
 8007408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800740a:	697a      	ldr	r2, [r7, #20]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4313      	orrs	r3, r2
 8007410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	697a      	ldr	r2, [r7, #20]
 800741c:	621a      	str	r2, [r3, #32]
}
 800741e:	bf00      	nop
 8007420:	371c      	adds	r7, #28
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr

0800742a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800742a:	b480      	push	{r7}
 800742c:	b087      	sub	sp, #28
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	f023 0210 	bic.w	r2, r3, #16
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007454:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	031b      	lsls	r3, r3, #12
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	4313      	orrs	r3, r2
 800745e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007466:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	011b      	lsls	r3, r3, #4
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	621a      	str	r2, [r3, #32]
}
 800747e:	bf00      	nop
 8007480:	371c      	adds	r7, #28
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f043 0307 	orr.w	r3, r3, #7
 80074ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	609a      	str	r2, [r3, #8]
}
 80074b4:	bf00      	nop
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	60f8      	str	r0, [r7, #12]
 80074c8:	60b9      	str	r1, [r7, #8]
 80074ca:	607a      	str	r2, [r7, #4]
 80074cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	021a      	lsls	r2, r3, #8
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	431a      	orrs	r2, r3
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	609a      	str	r2, [r3, #8]
}
 80074f4:	bf00      	nop
 80074f6:	371c      	adds	r7, #28
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	f003 031f 	and.w	r3, r3, #31
 8007512:	2201      	movs	r2, #1
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a1a      	ldr	r2, [r3, #32]
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	43db      	mvns	r3, r3
 8007522:	401a      	ands	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6a1a      	ldr	r2, [r3, #32]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	f003 031f 	and.w	r3, r3, #31
 8007532:	6879      	ldr	r1, [r7, #4]
 8007534:	fa01 f303 	lsl.w	r3, r1, r3
 8007538:	431a      	orrs	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
	...

0800754c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007560:	2302      	movs	r3, #2
 8007562:	e050      	b.n	8007606 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007614 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d018      	beq.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075b0:	d013      	beq.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a18      	ldr	r2, [pc, #96]	@ (8007618 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d00e      	beq.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a16      	ldr	r2, [pc, #88]	@ (800761c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d009      	beq.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a15      	ldr	r2, [pc, #84]	@ (8007620 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d004      	beq.n	80075da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a13      	ldr	r2, [pc, #76]	@ (8007624 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d10c      	bne.n	80075f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	68ba      	ldr	r2, [r7, #8]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007604:	2300      	movs	r3, #0
}
 8007606:	4618      	mov	r0, r3
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	40010000 	.word	0x40010000
 8007618:	40000400 	.word	0x40000400
 800761c:	40000800 	.word	0x40000800
 8007620:	40000c00 	.word	0x40000c00
 8007624:	40014000 	.word	0x40014000

08007628 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e042      	b.n	80076e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d106      	bne.n	800767c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7fb fa18 	bl	8002aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2224      	movs	r2, #36	@ 0x24
 8007680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f000 fa09 	bl	8007aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	691a      	ldr	r2, [r3, #16]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	695a      	ldr	r2, [r3, #20]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80076b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68da      	ldr	r2, [r3, #12]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80076c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2220      	movs	r2, #32
 80076dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08a      	sub	sp, #40	@ 0x28
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	4613      	mov	r3, r2
 80076fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800770a:	b2db      	uxtb	r3, r3
 800770c:	2b20      	cmp	r3, #32
 800770e:	d175      	bne.n	80077fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <HAL_UART_Transmit+0x2c>
 8007716:	88fb      	ldrh	r3, [r7, #6]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d101      	bne.n	8007720 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e06e      	b.n	80077fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2200      	movs	r2, #0
 8007724:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2221      	movs	r2, #33	@ 0x21
 800772a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800772e:	f7fb fe55 	bl	80033dc <HAL_GetTick>
 8007732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	88fa      	ldrh	r2, [r7, #6]
 8007738:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	88fa      	ldrh	r2, [r7, #6]
 800773e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007748:	d108      	bne.n	800775c <HAL_UART_Transmit+0x6c>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d104      	bne.n	800775c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007752:	2300      	movs	r3, #0
 8007754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	61bb      	str	r3, [r7, #24]
 800775a:	e003      	b.n	8007764 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007760:	2300      	movs	r3, #0
 8007762:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007764:	e02e      	b.n	80077c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2200      	movs	r2, #0
 800776e:	2180      	movs	r1, #128	@ 0x80
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 f8df 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2220      	movs	r2, #32
 8007780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e03a      	b.n	80077fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10b      	bne.n	80077a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	881b      	ldrh	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800779c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	3302      	adds	r3, #2
 80077a2:	61bb      	str	r3, [r7, #24]
 80077a4:	e007      	b.n	80077b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	781a      	ldrb	r2, [r3, #0]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	3301      	adds	r3, #1
 80077b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3b01      	subs	r3, #1
 80077be:	b29a      	uxth	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d1cb      	bne.n	8007766 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2200      	movs	r2, #0
 80077d6:	2140      	movs	r1, #64	@ 0x40
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f8ab 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e006      	b.n	80077fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e000      	b.n	80077fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80077fc:	2302      	movs	r3, #2
  }
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3720      	adds	r7, #32
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b08a      	sub	sp, #40	@ 0x28
 800780a:	af02      	add	r7, sp, #8
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	603b      	str	r3, [r7, #0]
 8007812:	4613      	mov	r3, r2
 8007814:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007816:	2300      	movs	r3, #0
 8007818:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b20      	cmp	r3, #32
 8007824:	f040 8081 	bne.w	800792a <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_UART_Receive+0x2e>
 800782e:	88fb      	ldrh	r3, [r7, #6]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e079      	b.n	800792c <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2222      	movs	r2, #34	@ 0x22
 8007842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800784c:	f7fb fdc6 	bl	80033dc <HAL_GetTick>
 8007850:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	88fa      	ldrh	r2, [r7, #6]
 8007856:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	88fa      	ldrh	r2, [r7, #6]
 800785c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007866:	d108      	bne.n	800787a <HAL_UART_Receive+0x74>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d104      	bne.n	800787a <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007870:	2300      	movs	r3, #0
 8007872:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	61bb      	str	r3, [r7, #24]
 8007878:	e003      	b.n	8007882 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800787e:	2300      	movs	r3, #0
 8007880:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007882:	e047      	b.n	8007914 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	9300      	str	r3, [sp, #0]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	2200      	movs	r2, #0
 800788c:	2120      	movs	r1, #32
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 f850 	bl	8007934 <UART_WaitOnFlagUntilTimeout>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d005      	beq.n	80078a6 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2220      	movs	r2, #32
 800789e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e042      	b.n	800792c <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d10c      	bne.n	80078c6 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	3302      	adds	r3, #2
 80078c2:	61bb      	str	r3, [r7, #24]
 80078c4:	e01f      	b.n	8007906 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80078ce:	d007      	beq.n	80078e0 <HAL_UART_Receive+0xda>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <HAL_UART_Receive+0xe8>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	691b      	ldr	r3, [r3, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d106      	bne.n	80078ee <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	e008      	b.n	8007900 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	69fb      	ldr	r3, [r7, #28]
 80078fe:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	3301      	adds	r3, #1
 8007904:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800790a:	b29b      	uxth	r3, r3
 800790c:	3b01      	subs	r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007918:	b29b      	uxth	r3, r3
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1b2      	bne.n	8007884 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2220      	movs	r2, #32
 8007922:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	e000      	b.n	800792c <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800792a:	2302      	movs	r3, #2
  }
}
 800792c:	4618      	mov	r0, r3
 800792e:	3720      	adds	r7, #32
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	603b      	str	r3, [r7, #0]
 8007940:	4613      	mov	r3, r2
 8007942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007944:	e03b      	b.n	80079be <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794c:	d037      	beq.n	80079be <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800794e:	f7fb fd45 	bl	80033dc <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	6a3a      	ldr	r2, [r7, #32]
 800795a:	429a      	cmp	r2, r3
 800795c:	d302      	bcc.n	8007964 <UART_WaitOnFlagUntilTimeout+0x30>
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d101      	bne.n	8007968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007964:	2303      	movs	r3, #3
 8007966:	e03a      	b.n	80079de <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f003 0304 	and.w	r3, r3, #4
 8007972:	2b00      	cmp	r3, #0
 8007974:	d023      	beq.n	80079be <UART_WaitOnFlagUntilTimeout+0x8a>
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b80      	cmp	r3, #128	@ 0x80
 800797a:	d020      	beq.n	80079be <UART_WaitOnFlagUntilTimeout+0x8a>
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b40      	cmp	r3, #64	@ 0x40
 8007980:	d01d      	beq.n	80079be <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f003 0308 	and.w	r3, r3, #8
 800798c:	2b08      	cmp	r3, #8
 800798e:	d116      	bne.n	80079be <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007990:	2300      	movs	r3, #0
 8007992:	617b      	str	r3, [r7, #20]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	617b      	str	r3, [r7, #20]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	617b      	str	r3, [r7, #20]
 80079a4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f81d 	bl	80079e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	2208      	movs	r2, #8
 80079b0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e00f      	b.n	80079de <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	4013      	ands	r3, r2
 80079c8:	68ba      	ldr	r2, [r7, #8]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	bf0c      	ite	eq
 80079ce:	2301      	moveq	r3, #1
 80079d0:	2300      	movne	r3, #0
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	79fb      	ldrb	r3, [r7, #7]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d0b4      	beq.n	8007946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b095      	sub	sp, #84	@ 0x54
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	330c      	adds	r3, #12
 80079f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	330c      	adds	r3, #12
 8007a0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e5      	bne.n	80079ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	3314      	adds	r3, #20
 8007a28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2a:	6a3b      	ldr	r3, [r7, #32]
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	f023 0301 	bic.w	r3, r3, #1
 8007a38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	3314      	adds	r3, #20
 8007a40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a4a:	e841 2300 	strex	r3, r2, [r1]
 8007a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d1e5      	bne.n	8007a22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d119      	bne.n	8007a92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	330c      	adds	r3, #12
 8007a64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f023 0310 	bic.w	r3, r3, #16
 8007a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	330c      	adds	r3, #12
 8007a7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a7e:	61ba      	str	r2, [r7, #24]
 8007a80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a82:	6979      	ldr	r1, [r7, #20]
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	e841 2300 	strex	r3, r2, [r1]
 8007a8a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1e5      	bne.n	8007a5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2220      	movs	r2, #32
 8007a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007aa0:	bf00      	nop
 8007aa2:	3754      	adds	r7, #84	@ 0x54
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ab0:	b0c0      	sub	sp, #256	@ 0x100
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac8:	68d9      	ldr	r1, [r3, #12]
 8007aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	ea40 0301 	orr.w	r3, r0, r1
 8007ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	431a      	orrs	r2, r3
 8007aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007b04:	f021 010c 	bic.w	r1, r1, #12
 8007b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007b12:	430b      	orrs	r3, r1
 8007b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b26:	6999      	ldr	r1, [r3, #24]
 8007b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2c:	681a      	ldr	r2, [r3, #0]
 8007b2e:	ea40 0301 	orr.w	r3, r0, r1
 8007b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	4b8f      	ldr	r3, [pc, #572]	@ (8007d78 <UART_SetConfig+0x2cc>)
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d005      	beq.n	8007b4c <UART_SetConfig+0xa0>
 8007b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4b8d      	ldr	r3, [pc, #564]	@ (8007d7c <UART_SetConfig+0x2d0>)
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d104      	bne.n	8007b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b4c:	f7fe fdb4 	bl	80066b8 <HAL_RCC_GetPCLK2Freq>
 8007b50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007b54:	e003      	b.n	8007b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b56:	f7fe fd9b 	bl	8006690 <HAL_RCC_GetPCLK1Freq>
 8007b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b68:	f040 810c 	bne.w	8007d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b70:	2200      	movs	r2, #0
 8007b72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007b7e:	4622      	mov	r2, r4
 8007b80:	462b      	mov	r3, r5
 8007b82:	1891      	adds	r1, r2, r2
 8007b84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007b86:	415b      	adcs	r3, r3
 8007b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b8e:	4621      	mov	r1, r4
 8007b90:	eb12 0801 	adds.w	r8, r2, r1
 8007b94:	4629      	mov	r1, r5
 8007b96:	eb43 0901 	adc.w	r9, r3, r1
 8007b9a:	f04f 0200 	mov.w	r2, #0
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bae:	4690      	mov	r8, r2
 8007bb0:	4699      	mov	r9, r3
 8007bb2:	4623      	mov	r3, r4
 8007bb4:	eb18 0303 	adds.w	r3, r8, r3
 8007bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007bbc:	462b      	mov	r3, r5
 8007bbe:	eb49 0303 	adc.w	r3, r9, r3
 8007bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bca:	685b      	ldr	r3, [r3, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007bda:	460b      	mov	r3, r1
 8007bdc:	18db      	adds	r3, r3, r3
 8007bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8007be0:	4613      	mov	r3, r2
 8007be2:	eb42 0303 	adc.w	r3, r2, r3
 8007be6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007bf0:	f7f9 f832 	bl	8000c58 <__aeabi_uldivmod>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4b61      	ldr	r3, [pc, #388]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8007bfe:	095b      	lsrs	r3, r3, #5
 8007c00:	011c      	lsls	r4, r3, #4
 8007c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c06:	2200      	movs	r2, #0
 8007c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007c14:	4642      	mov	r2, r8
 8007c16:	464b      	mov	r3, r9
 8007c18:	1891      	adds	r1, r2, r2
 8007c1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007c1c:	415b      	adcs	r3, r3
 8007c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007c24:	4641      	mov	r1, r8
 8007c26:	eb12 0a01 	adds.w	sl, r2, r1
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8007c30:	f04f 0200 	mov.w	r2, #0
 8007c34:	f04f 0300 	mov.w	r3, #0
 8007c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c44:	4692      	mov	sl, r2
 8007c46:	469b      	mov	fp, r3
 8007c48:	4643      	mov	r3, r8
 8007c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8007c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c52:	464b      	mov	r3, r9
 8007c54:	eb4b 0303 	adc.w	r3, fp, r3
 8007c58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c70:	460b      	mov	r3, r1
 8007c72:	18db      	adds	r3, r3, r3
 8007c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c76:	4613      	mov	r3, r2
 8007c78:	eb42 0303 	adc.w	r3, r2, r3
 8007c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007c86:	f7f8 ffe7 	bl	8000c58 <__aeabi_uldivmod>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4b3b      	ldr	r3, [pc, #236]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007c92:	fba3 2301 	umull	r2, r3, r3, r1
 8007c96:	095b      	lsrs	r3, r3, #5
 8007c98:	2264      	movs	r2, #100	@ 0x64
 8007c9a:	fb02 f303 	mul.w	r3, r2, r3
 8007c9e:	1acb      	subs	r3, r1, r3
 8007ca0:	00db      	lsls	r3, r3, #3
 8007ca2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ca6:	4b36      	ldr	r3, [pc, #216]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8007cac:	095b      	lsrs	r3, r3, #5
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007cb4:	441c      	add	r4, r3
 8007cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007cc8:	4642      	mov	r2, r8
 8007cca:	464b      	mov	r3, r9
 8007ccc:	1891      	adds	r1, r2, r2
 8007cce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007cd0:	415b      	adcs	r3, r3
 8007cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007cd8:	4641      	mov	r1, r8
 8007cda:	1851      	adds	r1, r2, r1
 8007cdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8007cde:	4649      	mov	r1, r9
 8007ce0:	414b      	adcs	r3, r1
 8007ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce4:	f04f 0200 	mov.w	r2, #0
 8007ce8:	f04f 0300 	mov.w	r3, #0
 8007cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007cf0:	4659      	mov	r1, fp
 8007cf2:	00cb      	lsls	r3, r1, #3
 8007cf4:	4651      	mov	r1, sl
 8007cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cfa:	4651      	mov	r1, sl
 8007cfc:	00ca      	lsls	r2, r1, #3
 8007cfe:	4610      	mov	r0, r2
 8007d00:	4619      	mov	r1, r3
 8007d02:	4603      	mov	r3, r0
 8007d04:	4642      	mov	r2, r8
 8007d06:	189b      	adds	r3, r3, r2
 8007d08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d0c:	464b      	mov	r3, r9
 8007d0e:	460a      	mov	r2, r1
 8007d10:	eb42 0303 	adc.w	r3, r2, r3
 8007d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007d24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	18db      	adds	r3, r3, r3
 8007d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d32:	4613      	mov	r3, r2
 8007d34:	eb42 0303 	adc.w	r3, r2, r3
 8007d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007d42:	f7f8 ff89 	bl	8000c58 <__aeabi_uldivmod>
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007d50:	095b      	lsrs	r3, r3, #5
 8007d52:	2164      	movs	r1, #100	@ 0x64
 8007d54:	fb01 f303 	mul.w	r3, r1, r3
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	3332      	adds	r3, #50	@ 0x32
 8007d5e:	4a08      	ldr	r2, [pc, #32]	@ (8007d80 <UART_SetConfig+0x2d4>)
 8007d60:	fba2 2303 	umull	r2, r3, r2, r3
 8007d64:	095b      	lsrs	r3, r3, #5
 8007d66:	f003 0207 	and.w	r2, r3, #7
 8007d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4422      	add	r2, r4
 8007d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d74:	e106      	b.n	8007f84 <UART_SetConfig+0x4d8>
 8007d76:	bf00      	nop
 8007d78:	40011000 	.word	0x40011000
 8007d7c:	40011400 	.word	0x40011400
 8007d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007d96:	4642      	mov	r2, r8
 8007d98:	464b      	mov	r3, r9
 8007d9a:	1891      	adds	r1, r2, r2
 8007d9c:	6239      	str	r1, [r7, #32]
 8007d9e:	415b      	adcs	r3, r3
 8007da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007da6:	4641      	mov	r1, r8
 8007da8:	1854      	adds	r4, r2, r1
 8007daa:	4649      	mov	r1, r9
 8007dac:	eb43 0501 	adc.w	r5, r3, r1
 8007db0:	f04f 0200 	mov.w	r2, #0
 8007db4:	f04f 0300 	mov.w	r3, #0
 8007db8:	00eb      	lsls	r3, r5, #3
 8007dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dbe:	00e2      	lsls	r2, r4, #3
 8007dc0:	4614      	mov	r4, r2
 8007dc2:	461d      	mov	r5, r3
 8007dc4:	4643      	mov	r3, r8
 8007dc6:	18e3      	adds	r3, r4, r3
 8007dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007dcc:	464b      	mov	r3, r9
 8007dce:	eb45 0303 	adc.w	r3, r5, r3
 8007dd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007de2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007de6:	f04f 0200 	mov.w	r2, #0
 8007dea:	f04f 0300 	mov.w	r3, #0
 8007dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007df2:	4629      	mov	r1, r5
 8007df4:	008b      	lsls	r3, r1, #2
 8007df6:	4621      	mov	r1, r4
 8007df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007dfc:	4621      	mov	r1, r4
 8007dfe:	008a      	lsls	r2, r1, #2
 8007e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007e04:	f7f8 ff28 	bl	8000c58 <__aeabi_uldivmod>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	4b60      	ldr	r3, [pc, #384]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e12:	095b      	lsrs	r3, r3, #5
 8007e14:	011c      	lsls	r4, r3, #4
 8007e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007e28:	4642      	mov	r2, r8
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	1891      	adds	r1, r2, r2
 8007e2e:	61b9      	str	r1, [r7, #24]
 8007e30:	415b      	adcs	r3, r3
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e38:	4641      	mov	r1, r8
 8007e3a:	1851      	adds	r1, r2, r1
 8007e3c:	6139      	str	r1, [r7, #16]
 8007e3e:	4649      	mov	r1, r9
 8007e40:	414b      	adcs	r3, r1
 8007e42:	617b      	str	r3, [r7, #20]
 8007e44:	f04f 0200 	mov.w	r2, #0
 8007e48:	f04f 0300 	mov.w	r3, #0
 8007e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e50:	4659      	mov	r1, fp
 8007e52:	00cb      	lsls	r3, r1, #3
 8007e54:	4651      	mov	r1, sl
 8007e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e5a:	4651      	mov	r1, sl
 8007e5c:	00ca      	lsls	r2, r1, #3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	4619      	mov	r1, r3
 8007e62:	4603      	mov	r3, r0
 8007e64:	4642      	mov	r2, r8
 8007e66:	189b      	adds	r3, r3, r2
 8007e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e6c:	464b      	mov	r3, r9
 8007e6e:	460a      	mov	r2, r1
 8007e70:	eb42 0303 	adc.w	r3, r2, r3
 8007e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e90:	4649      	mov	r1, r9
 8007e92:	008b      	lsls	r3, r1, #2
 8007e94:	4641      	mov	r1, r8
 8007e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e9a:	4641      	mov	r1, r8
 8007e9c:	008a      	lsls	r2, r1, #2
 8007e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ea2:	f7f8 fed9 	bl	8000c58 <__aeabi_uldivmod>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	4611      	mov	r1, r2
 8007eac:	4b38      	ldr	r3, [pc, #224]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007eae:	fba3 2301 	umull	r2, r3, r3, r1
 8007eb2:	095b      	lsrs	r3, r3, #5
 8007eb4:	2264      	movs	r2, #100	@ 0x64
 8007eb6:	fb02 f303 	mul.w	r3, r2, r3
 8007eba:	1acb      	subs	r3, r1, r3
 8007ebc:	011b      	lsls	r3, r3, #4
 8007ebe:	3332      	adds	r3, #50	@ 0x32
 8007ec0:	4a33      	ldr	r2, [pc, #204]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec6:	095b      	lsrs	r3, r3, #5
 8007ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007ecc:	441c      	add	r4, r3
 8007ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ed6:	677a      	str	r2, [r7, #116]	@ 0x74
 8007ed8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007edc:	4642      	mov	r2, r8
 8007ede:	464b      	mov	r3, r9
 8007ee0:	1891      	adds	r1, r2, r2
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	415b      	adcs	r3, r3
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007eec:	4641      	mov	r1, r8
 8007eee:	1851      	adds	r1, r2, r1
 8007ef0:	6039      	str	r1, [r7, #0]
 8007ef2:	4649      	mov	r1, r9
 8007ef4:	414b      	adcs	r3, r1
 8007ef6:	607b      	str	r3, [r7, #4]
 8007ef8:	f04f 0200 	mov.w	r2, #0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f04:	4659      	mov	r1, fp
 8007f06:	00cb      	lsls	r3, r1, #3
 8007f08:	4651      	mov	r1, sl
 8007f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f0e:	4651      	mov	r1, sl
 8007f10:	00ca      	lsls	r2, r1, #3
 8007f12:	4610      	mov	r0, r2
 8007f14:	4619      	mov	r1, r3
 8007f16:	4603      	mov	r3, r0
 8007f18:	4642      	mov	r2, r8
 8007f1a:	189b      	adds	r3, r3, r2
 8007f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f1e:	464b      	mov	r3, r9
 8007f20:	460a      	mov	r2, r1
 8007f22:	eb42 0303 	adc.w	r3, r2, r3
 8007f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f32:	667a      	str	r2, [r7, #100]	@ 0x64
 8007f34:	f04f 0200 	mov.w	r2, #0
 8007f38:	f04f 0300 	mov.w	r3, #0
 8007f3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007f40:	4649      	mov	r1, r9
 8007f42:	008b      	lsls	r3, r1, #2
 8007f44:	4641      	mov	r1, r8
 8007f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f4a:	4641      	mov	r1, r8
 8007f4c:	008a      	lsls	r2, r1, #2
 8007f4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007f52:	f7f8 fe81 	bl	8000c58 <__aeabi_uldivmod>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f60:	095b      	lsrs	r3, r3, #5
 8007f62:	2164      	movs	r1, #100	@ 0x64
 8007f64:	fb01 f303 	mul.w	r3, r1, r3
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	3332      	adds	r3, #50	@ 0x32
 8007f6e:	4a08      	ldr	r2, [pc, #32]	@ (8007f90 <UART_SetConfig+0x4e4>)
 8007f70:	fba2 2303 	umull	r2, r3, r2, r3
 8007f74:	095b      	lsrs	r3, r3, #5
 8007f76:	f003 020f 	and.w	r2, r3, #15
 8007f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4422      	add	r2, r4
 8007f82:	609a      	str	r2, [r3, #8]
}
 8007f84:	bf00      	nop
 8007f86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f90:	51eb851f 	.word	0x51eb851f

08007f94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f94:	b084      	sub	sp, #16
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	f107 001c 	add.w	r0, r7, #28
 8007fa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fa6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d123      	bne.n	8007ff6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	68db      	ldr	r3, [r3, #12]
 8007fbe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007fd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d105      	bne.n	8007fea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 fae2 	bl	80095b4 <USB_CoreReset>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73fb      	strb	r3, [r7, #15]
 8007ff4:	e01b      	b.n	800802e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f001 fad6 	bl	80095b4 <USB_CoreReset>
 8008008:	4603      	mov	r3, r0
 800800a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800800c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008018:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008020:	e005      	b.n	800802e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008026:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800802e:	7fbb      	ldrb	r3, [r7, #30]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d10b      	bne.n	800804c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	f043 0206 	orr.w	r2, r3, #6
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f043 0220 	orr.w	r2, r3, #32
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800804c:	7bfb      	ldrb	r3, [r7, #15]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008058:	b004      	add	sp, #16
 800805a:	4770      	bx	lr

0800805c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800805c:	b480      	push	{r7}
 800805e:	b087      	sub	sp, #28
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	4613      	mov	r3, r2
 8008068:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800806a:	79fb      	ldrb	r3, [r7, #7]
 800806c:	2b02      	cmp	r3, #2
 800806e:	d165      	bne.n	800813c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	4a41      	ldr	r2, [pc, #260]	@ (8008178 <USB_SetTurnaroundTime+0x11c>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d906      	bls.n	8008086 <USB_SetTurnaroundTime+0x2a>
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	4a40      	ldr	r2, [pc, #256]	@ (800817c <USB_SetTurnaroundTime+0x120>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d202      	bcs.n	8008086 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008080:	230f      	movs	r3, #15
 8008082:	617b      	str	r3, [r7, #20]
 8008084:	e062      	b.n	800814c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	4a3c      	ldr	r2, [pc, #240]	@ (800817c <USB_SetTurnaroundTime+0x120>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d306      	bcc.n	800809c <USB_SetTurnaroundTime+0x40>
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	4a3b      	ldr	r2, [pc, #236]	@ (8008180 <USB_SetTurnaroundTime+0x124>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d202      	bcs.n	800809c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008096:	230e      	movs	r3, #14
 8008098:	617b      	str	r3, [r7, #20]
 800809a:	e057      	b.n	800814c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	4a38      	ldr	r2, [pc, #224]	@ (8008180 <USB_SetTurnaroundTime+0x124>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d306      	bcc.n	80080b2 <USB_SetTurnaroundTime+0x56>
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	4a37      	ldr	r2, [pc, #220]	@ (8008184 <USB_SetTurnaroundTime+0x128>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d202      	bcs.n	80080b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80080ac:	230d      	movs	r3, #13
 80080ae:	617b      	str	r3, [r7, #20]
 80080b0:	e04c      	b.n	800814c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	4a33      	ldr	r2, [pc, #204]	@ (8008184 <USB_SetTurnaroundTime+0x128>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d306      	bcc.n	80080c8 <USB_SetTurnaroundTime+0x6c>
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	4a32      	ldr	r2, [pc, #200]	@ (8008188 <USB_SetTurnaroundTime+0x12c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d802      	bhi.n	80080c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80080c2:	230c      	movs	r3, #12
 80080c4:	617b      	str	r3, [r7, #20]
 80080c6:	e041      	b.n	800814c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	4a2f      	ldr	r2, [pc, #188]	@ (8008188 <USB_SetTurnaroundTime+0x12c>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d906      	bls.n	80080de <USB_SetTurnaroundTime+0x82>
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	4a2e      	ldr	r2, [pc, #184]	@ (800818c <USB_SetTurnaroundTime+0x130>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d802      	bhi.n	80080de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80080d8:	230b      	movs	r3, #11
 80080da:	617b      	str	r3, [r7, #20]
 80080dc:	e036      	b.n	800814c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	4a2a      	ldr	r2, [pc, #168]	@ (800818c <USB_SetTurnaroundTime+0x130>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d906      	bls.n	80080f4 <USB_SetTurnaroundTime+0x98>
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	4a29      	ldr	r2, [pc, #164]	@ (8008190 <USB_SetTurnaroundTime+0x134>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d802      	bhi.n	80080f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80080ee:	230a      	movs	r3, #10
 80080f0:	617b      	str	r3, [r7, #20]
 80080f2:	e02b      	b.n	800814c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4a26      	ldr	r2, [pc, #152]	@ (8008190 <USB_SetTurnaroundTime+0x134>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d906      	bls.n	800810a <USB_SetTurnaroundTime+0xae>
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	4a25      	ldr	r2, [pc, #148]	@ (8008194 <USB_SetTurnaroundTime+0x138>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d202      	bcs.n	800810a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008104:	2309      	movs	r3, #9
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e020      	b.n	800814c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	4a21      	ldr	r2, [pc, #132]	@ (8008194 <USB_SetTurnaroundTime+0x138>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d306      	bcc.n	8008120 <USB_SetTurnaroundTime+0xc4>
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	4a20      	ldr	r2, [pc, #128]	@ (8008198 <USB_SetTurnaroundTime+0x13c>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d802      	bhi.n	8008120 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800811a:	2308      	movs	r3, #8
 800811c:	617b      	str	r3, [r7, #20]
 800811e:	e015      	b.n	800814c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4a1d      	ldr	r2, [pc, #116]	@ (8008198 <USB_SetTurnaroundTime+0x13c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d906      	bls.n	8008136 <USB_SetTurnaroundTime+0xda>
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	4a1c      	ldr	r2, [pc, #112]	@ (800819c <USB_SetTurnaroundTime+0x140>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d202      	bcs.n	8008136 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008130:	2307      	movs	r3, #7
 8008132:	617b      	str	r3, [r7, #20]
 8008134:	e00a      	b.n	800814c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008136:	2306      	movs	r3, #6
 8008138:	617b      	str	r3, [r7, #20]
 800813a:	e007      	b.n	800814c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d102      	bne.n	8008148 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008142:	2309      	movs	r3, #9
 8008144:	617b      	str	r3, [r7, #20]
 8008146:	e001      	b.n	800814c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008148:	2309      	movs	r3, #9
 800814a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	68da      	ldr	r2, [r3, #12]
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	029b      	lsls	r3, r3, #10
 8008160:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008164:	431a      	orrs	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	371c      	adds	r7, #28
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr
 8008178:	00d8acbf 	.word	0x00d8acbf
 800817c:	00e4e1c0 	.word	0x00e4e1c0
 8008180:	00f42400 	.word	0x00f42400
 8008184:	01067380 	.word	0x01067380
 8008188:	011a499f 	.word	0x011a499f
 800818c:	01312cff 	.word	0x01312cff
 8008190:	014ca43f 	.word	0x014ca43f
 8008194:	016e3600 	.word	0x016e3600
 8008198:	01a6ab1f 	.word	0x01a6ab1f
 800819c:	01e84800 	.word	0x01e84800

080081a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b083      	sub	sp, #12
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f043 0201 	orr.w	r2, r3, #1
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081b4:	2300      	movs	r3, #0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	370c      	adds	r7, #12
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b083      	sub	sp, #12
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f023 0201 	bic.w	r2, r3, #1
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	460b      	mov	r3, r1
 80081ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008200:	78fb      	ldrb	r3, [r7, #3]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d115      	bne.n	8008232 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008212:	200a      	movs	r0, #10
 8008214:	f7fb f8ee 	bl	80033f4 <HAL_Delay>
      ms += 10U;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	330a      	adds	r3, #10
 800821c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f001 f939 	bl	8009496 <USB_GetMode>
 8008224:	4603      	mov	r3, r0
 8008226:	2b01      	cmp	r3, #1
 8008228:	d01e      	beq.n	8008268 <USB_SetCurrentMode+0x84>
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2bc7      	cmp	r3, #199	@ 0xc7
 800822e:	d9f0      	bls.n	8008212 <USB_SetCurrentMode+0x2e>
 8008230:	e01a      	b.n	8008268 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008232:	78fb      	ldrb	r3, [r7, #3]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d115      	bne.n	8008264 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008244:	200a      	movs	r0, #10
 8008246:	f7fb f8d5 	bl	80033f4 <HAL_Delay>
      ms += 10U;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	330a      	adds	r3, #10
 800824e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 f920 	bl	8009496 <USB_GetMode>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d005      	beq.n	8008268 <USB_SetCurrentMode+0x84>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008260:	d9f0      	bls.n	8008244 <USB_SetCurrentMode+0x60>
 8008262:	e001      	b.n	8008268 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e005      	b.n	8008274 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2bc8      	cmp	r3, #200	@ 0xc8
 800826c:	d101      	bne.n	8008272 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800826e:	2301      	movs	r3, #1
 8008270:	e000      	b.n	8008274 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3710      	adds	r7, #16
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800827c:	b084      	sub	sp, #16
 800827e:	b580      	push	{r7, lr}
 8008280:	b086      	sub	sp, #24
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800828a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008296:	2300      	movs	r3, #0
 8008298:	613b      	str	r3, [r7, #16]
 800829a:	e009      	b.n	80082b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	3340      	adds	r3, #64	@ 0x40
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	2200      	movs	r2, #0
 80082a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	3301      	adds	r3, #1
 80082ae:	613b      	str	r3, [r7, #16]
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	2b0e      	cmp	r3, #14
 80082b4:	d9f2      	bls.n	800829c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d11c      	bne.n	80082f8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80082cc:	f043 0302 	orr.w	r3, r3, #2
 80082d0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80082f6:	e00b      	b.n	8008310 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008308:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008316:	461a      	mov	r2, r3
 8008318:	2300      	movs	r3, #0
 800831a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800831c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008320:	2b01      	cmp	r3, #1
 8008322:	d10d      	bne.n	8008340 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800832c:	2100      	movs	r1, #0
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f968 	bl	8008604 <USB_SetDevSpeed>
 8008334:	e008      	b.n	8008348 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008336:	2101      	movs	r1, #1
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f963 	bl	8008604 <USB_SetDevSpeed>
 800833e:	e003      	b.n	8008348 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008340:	2103      	movs	r1, #3
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 f95e 	bl	8008604 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008348:	2110      	movs	r1, #16
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f8fa 	bl	8008544 <USB_FlushTxFifo>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f924 	bl	80085a8 <USB_FlushRxFifo>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008370:	461a      	mov	r2, r3
 8008372:	2300      	movs	r3, #0
 8008374:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837c:	461a      	mov	r2, r3
 800837e:	2300      	movs	r3, #0
 8008380:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008388:	461a      	mov	r2, r3
 800838a:	2300      	movs	r3, #0
 800838c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800838e:	2300      	movs	r3, #0
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	e043      	b.n	800841c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083aa:	d118      	bne.n	80083de <USB_DevInit+0x162>
    {
      if (i == 0U)
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10a      	bne.n	80083c8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083be:	461a      	mov	r2, r3
 80083c0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80083c4:	6013      	str	r3, [r2, #0]
 80083c6:	e013      	b.n	80083f0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083d4:	461a      	mov	r2, r3
 80083d6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	e008      	b.n	80083f0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ea:	461a      	mov	r2, r3
 80083ec:	2300      	movs	r3, #0
 80083ee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083fc:	461a      	mov	r2, r3
 80083fe:	2300      	movs	r3, #0
 8008400:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	015a      	lsls	r2, r3, #5
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4413      	add	r3, r2
 800840a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800840e:	461a      	mov	r2, r3
 8008410:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008414:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	3301      	adds	r3, #1
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008420:	461a      	mov	r2, r3
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	4293      	cmp	r3, r2
 8008426:	d3b5      	bcc.n	8008394 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008428:	2300      	movs	r3, #0
 800842a:	613b      	str	r3, [r7, #16]
 800842c:	e043      	b.n	80084b6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008440:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008444:	d118      	bne.n	8008478 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008458:	461a      	mov	r2, r3
 800845a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800845e:	6013      	str	r3, [r2, #0]
 8008460:	e013      	b.n	800848a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	015a      	lsls	r2, r3, #5
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	4413      	add	r3, r2
 800846a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800846e:	461a      	mov	r2, r3
 8008470:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008474:	6013      	str	r3, [r2, #0]
 8008476:	e008      	b.n	800848a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008484:	461a      	mov	r2, r3
 8008486:	2300      	movs	r3, #0
 8008488:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008496:	461a      	mov	r2, r3
 8008498:	2300      	movs	r3, #0
 800849a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a8:	461a      	mov	r2, r3
 80084aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80084ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	3301      	adds	r3, #1
 80084b4:	613b      	str	r3, [r7, #16]
 80084b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80084ba:	461a      	mov	r2, r3
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	4293      	cmp	r3, r2
 80084c0:	d3b5      	bcc.n	800842e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084d4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80084e2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80084e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d105      	bne.n	80084f8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	f043 0210 	orr.w	r2, r3, #16
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	699a      	ldr	r2, [r3, #24]
 80084fc:	4b10      	ldr	r3, [pc, #64]	@ (8008540 <USB_DevInit+0x2c4>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008504:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008508:	2b00      	cmp	r3, #0
 800850a:	d005      	beq.n	8008518 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	699b      	ldr	r3, [r3, #24]
 8008510:	f043 0208 	orr.w	r2, r3, #8
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008518:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800851c:	2b01      	cmp	r3, #1
 800851e:	d107      	bne.n	8008530 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699b      	ldr	r3, [r3, #24]
 8008524:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008528:	f043 0304 	orr.w	r3, r3, #4
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008530:	7dfb      	ldrb	r3, [r7, #23]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800853c:	b004      	add	sp, #16
 800853e:	4770      	bx	lr
 8008540:	803c3800 	.word	0x803c3800

08008544 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3301      	adds	r3, #1
 8008556:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800855e:	d901      	bls.n	8008564 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	e01b      	b.n	800859c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	daf2      	bge.n	8008552 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800856c:	2300      	movs	r3, #0
 800856e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	019b      	lsls	r3, r3, #6
 8008574:	f043 0220 	orr.w	r2, r3, #32
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3301      	adds	r3, #1
 8008580:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008588:	d901      	bls.n	800858e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e006      	b.n	800859c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	f003 0320 	and.w	r3, r3, #32
 8008596:	2b20      	cmp	r3, #32
 8008598:	d0f0      	beq.n	800857c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	3301      	adds	r3, #1
 80085b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085c0:	d901      	bls.n	80085c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085c2:	2303      	movs	r3, #3
 80085c4:	e018      	b.n	80085f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	daf2      	bge.n	80085b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2210      	movs	r2, #16
 80085d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	3301      	adds	r3, #1
 80085dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80085e4:	d901      	bls.n	80085ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e006      	b.n	80085f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	f003 0310 	and.w	r3, r3, #16
 80085f2:	2b10      	cmp	r3, #16
 80085f4:	d0f0      	beq.n	80085d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3714      	adds	r7, #20
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr

08008604 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	68f9      	ldr	r1, [r7, #12]
 8008620:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008624:	4313      	orrs	r3, r2
 8008626:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr

08008636 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008636:	b480      	push	{r7}
 8008638:	b087      	sub	sp, #28
 800863a:	af00      	add	r7, sp, #0
 800863c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f003 0306 	and.w	r3, r3, #6
 800864e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d102      	bne.n	800865c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008656:	2300      	movs	r3, #0
 8008658:	75fb      	strb	r3, [r7, #23]
 800865a:	e00a      	b.n	8008672 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2b02      	cmp	r3, #2
 8008660:	d002      	beq.n	8008668 <USB_GetDevSpeed+0x32>
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b06      	cmp	r3, #6
 8008666:	d102      	bne.n	800866e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008668:	2302      	movs	r3, #2
 800866a:	75fb      	strb	r3, [r7, #23]
 800866c:	e001      	b.n	8008672 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800866e:	230f      	movs	r3, #15
 8008670:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008672:	7dfb      	ldrb	r3, [r7, #23]
}
 8008674:	4618      	mov	r0, r3
 8008676:	371c      	adds	r7, #28
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr

08008680 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	785b      	ldrb	r3, [r3, #1]
 8008698:	2b01      	cmp	r3, #1
 800869a:	d13a      	bne.n	8008712 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80086a2:	69da      	ldr	r2, [r3, #28]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	f003 030f 	and.w	r3, r3, #15
 80086ac:	2101      	movs	r1, #1
 80086ae:	fa01 f303 	lsl.w	r3, r1, r3
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	68f9      	ldr	r1, [r7, #12]
 80086b6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086ba:	4313      	orrs	r3, r2
 80086bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	015a      	lsls	r2, r3, #5
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4413      	add	r3, r2
 80086c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d155      	bne.n	8008780 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	791b      	ldrb	r3, [r3, #4]
 80086ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	059b      	lsls	r3, r3, #22
 80086f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80086f8:	4313      	orrs	r3, r2
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	0151      	lsls	r1, r2, #5
 80086fe:	68fa      	ldr	r2, [r7, #12]
 8008700:	440a      	add	r2, r1
 8008702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800870a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	e036      	b.n	8008780 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008718:	69da      	ldr	r2, [r3, #28]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	2101      	movs	r1, #1
 8008724:	fa01 f303 	lsl.w	r3, r1, r3
 8008728:	041b      	lsls	r3, r3, #16
 800872a:	68f9      	ldr	r1, [r7, #12]
 800872c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008730:	4313      	orrs	r3, r2
 8008732:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	015a      	lsls	r2, r3, #5
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	4413      	add	r3, r2
 800873c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d11a      	bne.n	8008780 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	015a      	lsls	r2, r3, #5
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	4413      	add	r3, r2
 8008752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	791b      	ldrb	r3, [r3, #4]
 8008764:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008766:	430b      	orrs	r3, r1
 8008768:	4313      	orrs	r3, r2
 800876a:	68ba      	ldr	r2, [r7, #8]
 800876c:	0151      	lsls	r1, r2, #5
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	440a      	add	r2, r1
 8008772:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800877a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800877e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	785b      	ldrb	r3, [r3, #1]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d161      	bne.n	8008870 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087be:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087c2:	d11f      	bne.n	8008804 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	0151      	lsls	r1, r2, #5
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	440a      	add	r2, r1
 80087da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087de:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	0151      	lsls	r1, r2, #5
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	440a      	add	r2, r1
 80087fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008802:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800880a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	f003 030f 	and.w	r3, r3, #15
 8008814:	2101      	movs	r1, #1
 8008816:	fa01 f303 	lsl.w	r3, r1, r3
 800881a:	b29b      	uxth	r3, r3
 800881c:	43db      	mvns	r3, r3
 800881e:	68f9      	ldr	r1, [r7, #12]
 8008820:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008824:	4013      	ands	r3, r2
 8008826:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800882e:	69da      	ldr	r2, [r3, #28]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	2101      	movs	r1, #1
 800883a:	fa01 f303 	lsl.w	r3, r1, r3
 800883e:	b29b      	uxth	r3, r3
 8008840:	43db      	mvns	r3, r3
 8008842:	68f9      	ldr	r1, [r7, #12]
 8008844:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008848:	4013      	ands	r3, r2
 800884a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	015a      	lsls	r2, r3, #5
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4413      	add	r3, r2
 8008854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	0159      	lsls	r1, r3, #5
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	440b      	add	r3, r1
 8008862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008866:	4619      	mov	r1, r3
 8008868:	4b35      	ldr	r3, [pc, #212]	@ (8008940 <USB_DeactivateEndpoint+0x1b0>)
 800886a:	4013      	ands	r3, r2
 800886c:	600b      	str	r3, [r1, #0]
 800886e:	e060      	b.n	8008932 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	015a      	lsls	r2, r3, #5
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	4413      	add	r3, r2
 8008878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008882:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008886:	d11f      	bne.n	80088c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	015a      	lsls	r2, r3, #5
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	4413      	add	r3, r2
 8008890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	0151      	lsls	r1, r2, #5
 800889a:	68fa      	ldr	r2, [r7, #12]
 800889c:	440a      	add	r2, r1
 800889e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80088a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	0151      	lsls	r1, r2, #5
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	440a      	add	r2, r1
 80088be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80088c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80088c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	781b      	ldrb	r3, [r3, #0]
 80088d4:	f003 030f 	and.w	r3, r3, #15
 80088d8:	2101      	movs	r1, #1
 80088da:	fa01 f303 	lsl.w	r3, r1, r3
 80088de:	041b      	lsls	r3, r3, #16
 80088e0:	43db      	mvns	r3, r3
 80088e2:	68f9      	ldr	r1, [r7, #12]
 80088e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088e8:	4013      	ands	r3, r2
 80088ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088f2:	69da      	ldr	r2, [r3, #28]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	f003 030f 	and.w	r3, r3, #15
 80088fc:	2101      	movs	r1, #1
 80088fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008902:	041b      	lsls	r3, r3, #16
 8008904:	43db      	mvns	r3, r3
 8008906:	68f9      	ldr	r1, [r7, #12]
 8008908:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800890c:	4013      	ands	r3, r2
 800890e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	0159      	lsls	r1, r3, #5
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	440b      	add	r3, r1
 8008926:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800892a:	4619      	mov	r1, r3
 800892c:	4b05      	ldr	r3, [pc, #20]	@ (8008944 <USB_DeactivateEndpoint+0x1b4>)
 800892e:	4013      	ands	r3, r2
 8008930:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	ec337800 	.word	0xec337800
 8008944:	eff37800 	.word	0xeff37800

08008948 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b08a      	sub	sp, #40	@ 0x28
 800894c:	af02      	add	r7, sp, #8
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4613      	mov	r3, r2
 8008954:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	785b      	ldrb	r3, [r3, #1]
 8008964:	2b01      	cmp	r3, #1
 8008966:	f040 817a 	bne.w	8008c5e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d132      	bne.n	80089d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	015a      	lsls	r2, r3, #5
 8008976:	69fb      	ldr	r3, [r7, #28]
 8008978:	4413      	add	r3, r2
 800897a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800897e:	691b      	ldr	r3, [r3, #16]
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	0151      	lsls	r1, r2, #5
 8008984:	69fa      	ldr	r2, [r7, #28]
 8008986:	440a      	add	r2, r1
 8008988:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800898c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008990:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008994:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089a2:	691b      	ldr	r3, [r3, #16]
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	0151      	lsls	r1, r2, #5
 80089a8:	69fa      	ldr	r2, [r7, #28]
 80089aa:	440a      	add	r2, r1
 80089ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	0151      	lsls	r1, r2, #5
 80089c8:	69fa      	ldr	r2, [r7, #28]
 80089ca:	440a      	add	r2, r1
 80089cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089d0:	0cdb      	lsrs	r3, r3, #19
 80089d2:	04db      	lsls	r3, r3, #19
 80089d4:	6113      	str	r3, [r2, #16]
 80089d6:	e092      	b.n	8008afe <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089d8:	69bb      	ldr	r3, [r7, #24]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	69ba      	ldr	r2, [r7, #24]
 80089e8:	0151      	lsls	r1, r2, #5
 80089ea:	69fa      	ldr	r2, [r7, #28]
 80089ec:	440a      	add	r2, r1
 80089ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089f2:	0cdb      	lsrs	r3, r3, #19
 80089f4:	04db      	lsls	r3, r3, #19
 80089f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089f8:	69bb      	ldr	r3, [r7, #24]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	69ba      	ldr	r2, [r7, #24]
 8008a08:	0151      	lsls	r1, r2, #5
 8008a0a:	69fa      	ldr	r2, [r7, #28]
 8008a0c:	440a      	add	r2, r1
 8008a0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a12:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a16:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a1a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d11a      	bne.n	8008a58 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	691a      	ldr	r2, [r3, #16]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d903      	bls.n	8008a36 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	689a      	ldr	r2, [r3, #8]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	0151      	lsls	r1, r2, #5
 8008a48:	69fa      	ldr	r2, [r7, #28]
 8008a4a:	440a      	add	r2, r1
 8008a4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008a54:	6113      	str	r3, [r2, #16]
 8008a56:	e01b      	b.n	8008a90 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a58:	69bb      	ldr	r3, [r7, #24]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a64:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	6919      	ldr	r1, [r3, #16]
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	440b      	add	r3, r1
 8008a70:	1e59      	subs	r1, r3, #1
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a7a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a7c:	4ba2      	ldr	r3, [pc, #648]	@ (8008d08 <USB_EPStartXfer+0x3c0>)
 8008a7e:	400b      	ands	r3, r1
 8008a80:	69b9      	ldr	r1, [r7, #24]
 8008a82:	0148      	lsls	r0, r1, #5
 8008a84:	69f9      	ldr	r1, [r7, #28]
 8008a86:	4401      	add	r1, r0
 8008a88:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a9c:	691a      	ldr	r2, [r3, #16]
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008aa6:	69b9      	ldr	r1, [r7, #24]
 8008aa8:	0148      	lsls	r0, r1, #5
 8008aaa:	69f9      	ldr	r1, [r7, #28]
 8008aac:	4401      	add	r1, r0
 8008aae:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	791b      	ldrb	r3, [r3, #4]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d11f      	bne.n	8008afe <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	0151      	lsls	r1, r2, #5
 8008ad0:	69fa      	ldr	r2, [r7, #28]
 8008ad2:	440a      	add	r2, r1
 8008ad4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ad8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008adc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008aea:	691b      	ldr	r3, [r3, #16]
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	69fa      	ldr	r2, [r7, #28]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008af8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008afc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d14b      	bne.n	8008b9c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	69db      	ldr	r3, [r3, #28]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d009      	beq.n	8008b20 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b18:	461a      	mov	r2, r3
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	791b      	ldrb	r3, [r3, #4]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d128      	bne.n	8008b7a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d110      	bne.n	8008b5a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	015a      	lsls	r2, r3, #5
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	4413      	add	r3, r2
 8008b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	0151      	lsls	r1, r2, #5
 8008b4a:	69fa      	ldr	r2, [r7, #28]
 8008b4c:	440a      	add	r2, r1
 8008b4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b52:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b56:	6013      	str	r3, [r2, #0]
 8008b58:	e00f      	b.n	8008b7a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	0151      	lsls	r1, r2, #5
 8008b6c:	69fa      	ldr	r2, [r7, #28]
 8008b6e:	440a      	add	r2, r1
 8008b70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b78:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	0151      	lsls	r1, r2, #5
 8008b8c:	69fa      	ldr	r2, [r7, #28]
 8008b8e:	440a      	add	r2, r1
 8008b90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b94:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b98:	6013      	str	r3, [r2, #0]
 8008b9a:	e165      	b.n	8008e68 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	015a      	lsls	r2, r3, #5
 8008ba0:	69fb      	ldr	r3, [r7, #28]
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	69ba      	ldr	r2, [r7, #24]
 8008bac:	0151      	lsls	r1, r2, #5
 8008bae:	69fa      	ldr	r2, [r7, #28]
 8008bb0:	440a      	add	r2, r1
 8008bb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008bb6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008bba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	791b      	ldrb	r3, [r3, #4]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d015      	beq.n	8008bf0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	691b      	ldr	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 814d 	beq.w	8008e68 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	f003 030f 	and.w	r3, r3, #15
 8008bde:	2101      	movs	r1, #1
 8008be0:	fa01 f303 	lsl.w	r3, r1, r3
 8008be4:	69f9      	ldr	r1, [r7, #28]
 8008be6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bea:	4313      	orrs	r3, r2
 8008bec:	634b      	str	r3, [r1, #52]	@ 0x34
 8008bee:	e13b      	b.n	8008e68 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d110      	bne.n	8008c22 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	69fa      	ldr	r2, [r7, #28]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c1a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	e00f      	b.n	8008c42 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	015a      	lsls	r2, r3, #5
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	4413      	add	r3, r2
 8008c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	0151      	lsls	r1, r2, #5
 8008c34:	69fa      	ldr	r2, [r7, #28]
 8008c36:	440a      	add	r2, r1
 8008c38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c40:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	68d9      	ldr	r1, [r3, #12]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	781a      	ldrb	r2, [r3, #0]
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	691b      	ldr	r3, [r3, #16]
 8008c4e:	b298      	uxth	r0, r3
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	4603      	mov	r3, r0
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f9b8 	bl	8008fcc <USB_WritePacket>
 8008c5c:	e104      	b.n	8008e68 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	0151      	lsls	r1, r2, #5
 8008c70:	69fa      	ldr	r2, [r7, #28]
 8008c72:	440a      	add	r2, r1
 8008c74:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c78:	0cdb      	lsrs	r3, r3, #19
 8008c7a:	04db      	lsls	r3, r3, #19
 8008c7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	015a      	lsls	r2, r3, #5
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	4413      	add	r3, r2
 8008c86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	0151      	lsls	r1, r2, #5
 8008c90:	69fa      	ldr	r2, [r7, #28]
 8008c92:	440a      	add	r2, r1
 8008c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c98:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008c9c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008ca0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d131      	bne.n	8008d0c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	691b      	ldr	r3, [r3, #16]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	689a      	ldr	r2, [r3, #8]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ccc:	691a      	ldr	r2, [r3, #16]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cd6:	69b9      	ldr	r1, [r7, #24]
 8008cd8:	0148      	lsls	r0, r1, #5
 8008cda:	69f9      	ldr	r1, [r7, #28]
 8008cdc:	4401      	add	r1, r0
 8008cde:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008ce2:	4313      	orrs	r3, r2
 8008ce4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	69ba      	ldr	r2, [r7, #24]
 8008cf6:	0151      	lsls	r1, r2, #5
 8008cf8:	69fa      	ldr	r2, [r7, #28]
 8008cfa:	440a      	add	r2, r1
 8008cfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d04:	6113      	str	r3, [r2, #16]
 8008d06:	e061      	b.n	8008dcc <USB_EPStartXfer+0x484>
 8008d08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d123      	bne.n	8008d5c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d20:	691a      	ldr	r2, [r3, #16]
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d2a:	69b9      	ldr	r1, [r7, #24]
 8008d2c:	0148      	lsls	r0, r1, #5
 8008d2e:	69f9      	ldr	r1, [r7, #28]
 8008d30:	4401      	add	r1, r0
 8008d32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d36:	4313      	orrs	r3, r2
 8008d38:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d3a:	69bb      	ldr	r3, [r7, #24]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	0151      	lsls	r1, r2, #5
 8008d4c:	69fa      	ldr	r2, [r7, #28]
 8008d4e:	440a      	add	r2, r1
 8008d50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d58:	6113      	str	r3, [r2, #16]
 8008d5a:	e037      	b.n	8008dcc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	691a      	ldr	r2, [r3, #16]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	4413      	add	r3, r2
 8008d66:	1e5a      	subs	r2, r3, #1
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d70:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	8afa      	ldrh	r2, [r7, #22]
 8008d78:	fb03 f202 	mul.w	r2, r3, r2
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	8afb      	ldrh	r3, [r7, #22]
 8008d90:	04d9      	lsls	r1, r3, #19
 8008d92:	4b38      	ldr	r3, [pc, #224]	@ (8008e74 <USB_EPStartXfer+0x52c>)
 8008d94:	400b      	ands	r3, r1
 8008d96:	69b9      	ldr	r1, [r7, #24]
 8008d98:	0148      	lsls	r0, r1, #5
 8008d9a:	69f9      	ldr	r1, [r7, #28]
 8008d9c:	4401      	add	r1, r0
 8008d9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008da2:	4313      	orrs	r3, r2
 8008da4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	015a      	lsls	r2, r3, #5
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	4413      	add	r3, r2
 8008dae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008db2:	691a      	ldr	r2, [r3, #16]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	6a1b      	ldr	r3, [r3, #32]
 8008db8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dbc:	69b9      	ldr	r1, [r7, #24]
 8008dbe:	0148      	lsls	r0, r1, #5
 8008dc0:	69f9      	ldr	r1, [r7, #28]
 8008dc2:	4401      	add	r1, r0
 8008dc4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008dcc:	79fb      	ldrb	r3, [r7, #7]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d10d      	bne.n	8008dee <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d009      	beq.n	8008dee <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	68d9      	ldr	r1, [r3, #12]
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	69fb      	ldr	r3, [r7, #28]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008dea:	460a      	mov	r2, r1
 8008dec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	791b      	ldrb	r3, [r3, #4]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d128      	bne.n	8008e48 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d110      	bne.n	8008e28 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	0151      	lsls	r1, r2, #5
 8008e18:	69fa      	ldr	r2, [r7, #28]
 8008e1a:	440a      	add	r2, r1
 8008e1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	e00f      	b.n	8008e48 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	0151      	lsls	r1, r2, #5
 8008e3a:	69fa      	ldr	r2, [r7, #28]
 8008e3c:	440a      	add	r2, r1
 8008e3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69ba      	ldr	r2, [r7, #24]
 8008e58:	0151      	lsls	r1, r2, #5
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	440a      	add	r2, r1
 8008e5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008e62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3720      	adds	r7, #32
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	1ff80000 	.word	0x1ff80000

08008e78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d14a      	bne.n	8008f2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	015a      	lsls	r2, r3, #5
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008eae:	f040 8086 	bne.w	8008fbe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	683a      	ldr	r2, [r7, #0]
 8008ec4:	7812      	ldrb	r2, [r2, #0]
 8008ec6:	0151      	lsls	r1, r2, #5
 8008ec8:	693a      	ldr	r2, [r7, #16]
 8008eca:	440a      	add	r2, r1
 8008ecc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ed0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008ed4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	7812      	ldrb	r2, [r2, #0]
 8008eea:	0151      	lsls	r1, r2, #5
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	440a      	add	r2, r1
 8008ef0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ef4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ef8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d902      	bls.n	8008f10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f0e:	e056      	b.n	8008fbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f28:	d0e7      	beq.n	8008efa <USB_EPStopXfer+0x82>
 8008f2a:	e048      	b.n	8008fbe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f44:	d13b      	bne.n	8008fbe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	7812      	ldrb	r2, [r2, #0]
 8008f5a:	0151      	lsls	r1, r2, #5
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	440a      	add	r2, r1
 8008f60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008f68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	7812      	ldrb	r2, [r2, #0]
 8008f7e:	0151      	lsls	r1, r2, #5
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	440a      	add	r2, r1
 8008f84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008f8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	3301      	adds	r3, #1
 8008f92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d902      	bls.n	8008fa4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	75fb      	strb	r3, [r7, #23]
          break;
 8008fa2:	e00c      	b.n	8008fbe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008fbc:	d0e7      	beq.n	8008f8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	371c      	adds	r7, #28
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b089      	sub	sp, #36	@ 0x24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	461a      	mov	r2, r3
 8008fda:	460b      	mov	r3, r1
 8008fdc:	71fb      	strb	r3, [r7, #7]
 8008fde:	4613      	mov	r3, r2
 8008fe0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008fea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d123      	bne.n	800903a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008ff2:	88bb      	ldrh	r3, [r7, #4]
 8008ff4:	3303      	adds	r3, #3
 8008ff6:	089b      	lsrs	r3, r3, #2
 8008ff8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	61bb      	str	r3, [r7, #24]
 8008ffe:	e018      	b.n	8009032 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009000:	79fb      	ldrb	r3, [r7, #7]
 8009002:	031a      	lsls	r2, r3, #12
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	4413      	add	r3, r2
 8009008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800900c:	461a      	mov	r2, r3
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009014:	69fb      	ldr	r3, [r7, #28]
 8009016:	3301      	adds	r3, #1
 8009018:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800901a:	69fb      	ldr	r3, [r7, #28]
 800901c:	3301      	adds	r3, #1
 800901e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	3301      	adds	r3, #1
 8009024:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009026:	69fb      	ldr	r3, [r7, #28]
 8009028:	3301      	adds	r3, #1
 800902a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	3301      	adds	r3, #1
 8009030:	61bb      	str	r3, [r7, #24]
 8009032:	69ba      	ldr	r2, [r7, #24]
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	429a      	cmp	r2, r3
 8009038:	d3e2      	bcc.n	8009000 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3724      	adds	r7, #36	@ 0x24
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009048:	b480      	push	{r7}
 800904a:	b08b      	sub	sp, #44	@ 0x2c
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	4613      	mov	r3, r2
 8009054:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800905e:	88fb      	ldrh	r3, [r7, #6]
 8009060:	089b      	lsrs	r3, r3, #2
 8009062:	b29b      	uxth	r3, r3
 8009064:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009066:	88fb      	ldrh	r3, [r7, #6]
 8009068:	f003 0303 	and.w	r3, r3, #3
 800906c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800906e:	2300      	movs	r3, #0
 8009070:	623b      	str	r3, [r7, #32]
 8009072:	e014      	b.n	800909e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800907e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009082:	3301      	adds	r3, #1
 8009084:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009088:	3301      	adds	r3, #1
 800908a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800908c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800908e:	3301      	adds	r3, #1
 8009090:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009094:	3301      	adds	r3, #1
 8009096:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009098:	6a3b      	ldr	r3, [r7, #32]
 800909a:	3301      	adds	r3, #1
 800909c:	623b      	str	r3, [r7, #32]
 800909e:	6a3a      	ldr	r2, [r7, #32]
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d3e6      	bcc.n	8009074 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80090a6:	8bfb      	ldrh	r3, [r7, #30]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d01e      	beq.n	80090ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80090ac:	2300      	movs	r3, #0
 80090ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80090b0:	69bb      	ldr	r3, [r7, #24]
 80090b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80090b6:	461a      	mov	r2, r3
 80090b8:	f107 0310 	add.w	r3, r7, #16
 80090bc:	6812      	ldr	r2, [r2, #0]
 80090be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	b2db      	uxtb	r3, r3
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	fa22 f303 	lsr.w	r3, r2, r3
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	701a      	strb	r2, [r3, #0]
      i++;
 80090d2:	6a3b      	ldr	r3, [r7, #32]
 80090d4:	3301      	adds	r3, #1
 80090d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80090d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090da:	3301      	adds	r3, #1
 80090dc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80090de:	8bfb      	ldrh	r3, [r7, #30]
 80090e0:	3b01      	subs	r3, #1
 80090e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80090e4:	8bfb      	ldrh	r3, [r7, #30]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1ea      	bne.n	80090c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80090ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	372c      	adds	r7, #44	@ 0x2c
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	785b      	ldrb	r3, [r3, #1]
 8009110:	2b01      	cmp	r3, #1
 8009112:	d12c      	bne.n	800916e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	4413      	add	r3, r2
 800911c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	db12      	blt.n	800914c <USB_EPSetStall+0x54>
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d00f      	beq.n	800914c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	0151      	lsls	r1, r2, #5
 800913e:	68fa      	ldr	r2, [r7, #12]
 8009140:	440a      	add	r2, r1
 8009142:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009146:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800914a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	0151      	lsls	r1, r2, #5
 800915e:	68fa      	ldr	r2, [r7, #12]
 8009160:	440a      	add	r2, r1
 8009162:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009166:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	e02b      	b.n	80091c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	015a      	lsls	r2, r3, #5
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	4413      	add	r3, r2
 8009176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	db12      	blt.n	80091a6 <USB_EPSetStall+0xae>
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00f      	beq.n	80091a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	015a      	lsls	r2, r3, #5
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	4413      	add	r3, r2
 800918e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	0151      	lsls	r1, r2, #5
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	440a      	add	r2, r1
 800919c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80091a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	015a      	lsls	r2, r3, #5
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	4413      	add	r3, r2
 80091ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	68ba      	ldr	r2, [r7, #8]
 80091b6:	0151      	lsls	r1, r2, #5
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	440a      	add	r2, r1
 80091bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80091c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	785b      	ldrb	r3, [r3, #1]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d128      	bne.n	8009242 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68ba      	ldr	r2, [r7, #8]
 8009200:	0151      	lsls	r1, r2, #5
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	440a      	add	r2, r1
 8009206:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800920a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800920e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	791b      	ldrb	r3, [r3, #4]
 8009214:	2b03      	cmp	r3, #3
 8009216:	d003      	beq.n	8009220 <USB_EPClearStall+0x4c>
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	791b      	ldrb	r3, [r3, #4]
 800921c:	2b02      	cmp	r3, #2
 800921e:	d138      	bne.n	8009292 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68ba      	ldr	r2, [r7, #8]
 8009230:	0151      	lsls	r1, r2, #5
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	440a      	add	r2, r1
 8009236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800923a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	e027      	b.n	8009292 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	0151      	lsls	r1, r2, #5
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	440a      	add	r2, r1
 8009258:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800925c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009260:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	791b      	ldrb	r3, [r3, #4]
 8009266:	2b03      	cmp	r3, #3
 8009268:	d003      	beq.n	8009272 <USB_EPClearStall+0x9e>
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	791b      	ldrb	r3, [r3, #4]
 800926e:	2b02      	cmp	r3, #2
 8009270:	d10f      	bne.n	8009292 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	015a      	lsls	r2, r3, #5
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	4413      	add	r3, r2
 800927a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	0151      	lsls	r1, r2, #5
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	440a      	add	r2, r1
 8009288:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800928c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009290:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80092c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	011b      	lsls	r3, r3, #4
 80092d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80092d4:	68f9      	ldr	r1, [r7, #12]
 80092d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092da:	4313      	orrs	r3, r2
 80092dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80092ec:	b480      	push	{r7}
 80092ee:	b085      	sub	sp, #20
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009306:	f023 0303 	bic.w	r3, r3, #3
 800930a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800931a:	f023 0302 	bic.w	r3, r3, #2
 800931e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800932e:	b480      	push	{r7}
 8009330:	b085      	sub	sp, #20
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009348:	f023 0303 	bic.w	r3, r3, #3
 800934c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	68fa      	ldr	r2, [r7, #12]
 8009358:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800935c:	f043 0302 	orr.w	r3, r3, #2
 8009360:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009362:	2300      	movs	r3, #0
}
 8009364:	4618      	mov	r0, r3
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009370:	b480      	push	{r7}
 8009372:	b085      	sub	sp, #20
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	695b      	ldr	r3, [r3, #20]
 800937c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	4013      	ands	r3, r2
 8009386:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009388:	68fb      	ldr	r3, [r7, #12]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009396:	b480      	push	{r7}
 8009398:	b085      	sub	sp, #20
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093b2:	69db      	ldr	r3, [r3, #28]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	4013      	ands	r3, r2
 80093b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	0c1b      	lsrs	r3, r3, #16
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093e6:	69db      	ldr	r3, [r3, #28]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	4013      	ands	r3, r2
 80093ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80093ee:	68bb      	ldr	r3, [r7, #8]
 80093f0:	b29b      	uxth	r3, r3
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3714      	adds	r7, #20
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80093fe:	b480      	push	{r7}
 8009400:	b085      	sub	sp, #20
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	460b      	mov	r3, r1
 8009408:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800940e:	78fb      	ldrb	r3, [r7, #3]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4413      	add	r3, r2
 8009416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800941a:	689b      	ldr	r3, [r3, #8]
 800941c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009424:	695b      	ldr	r3, [r3, #20]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	4013      	ands	r3, r2
 800942a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800942c:	68bb      	ldr	r3, [r7, #8]
}
 800942e:	4618      	mov	r0, r3
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800943a:	b480      	push	{r7}
 800943c:	b087      	sub	sp, #28
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	460b      	mov	r3, r1
 8009444:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800945a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800945c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800945e:	78fb      	ldrb	r3, [r7, #3]
 8009460:	f003 030f 	and.w	r3, r3, #15
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	fa22 f303 	lsr.w	r3, r2, r3
 800946a:	01db      	lsls	r3, r3, #7
 800946c:	b2db      	uxtb	r3, r3
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	4313      	orrs	r3, r2
 8009472:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009474:	78fb      	ldrb	r3, [r7, #3]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	4013      	ands	r3, r2
 8009486:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009488:	68bb      	ldr	r3, [r7, #8]
}
 800948a:	4618      	mov	r0, r3
 800948c:	371c      	adds	r7, #28
 800948e:	46bd      	mov	sp, r7
 8009490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009494:	4770      	bx	lr

08009496 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009496:	b480      	push	{r7}
 8009498:	b083      	sub	sp, #12
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	695b      	ldr	r3, [r3, #20]
 80094a2:	f003 0301 	and.w	r3, r3, #1
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80094b2:	b480      	push	{r7}
 80094b4:	b085      	sub	sp, #20
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80094d0:	f023 0307 	bic.w	r3, r3, #7
 80094d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	68fa      	ldr	r2, [r7, #12]
 80094e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80094e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b087      	sub	sp, #28
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	60f8      	str	r0, [r7, #12]
 8009500:	460b      	mov	r3, r1
 8009502:	607a      	str	r2, [r7, #4]
 8009504:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	333c      	adds	r3, #60	@ 0x3c
 800950e:	3304      	adds	r3, #4
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	4a26      	ldr	r2, [pc, #152]	@ (80095b0 <USB_EP0_OutStart+0xb8>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d90a      	bls.n	8009532 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009528:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800952c:	d101      	bne.n	8009532 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	e037      	b.n	80095a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009538:	461a      	mov	r2, r3
 800953a:	2300      	movs	r3, #0
 800953c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009544:	691b      	ldr	r3, [r3, #16]
 8009546:	697a      	ldr	r2, [r7, #20]
 8009548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800954c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009560:	f043 0318 	orr.w	r3, r3, #24
 8009564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009574:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009578:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800957a:	7afb      	ldrb	r3, [r7, #11]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d10f      	bne.n	80095a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009586:	461a      	mov	r2, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	697a      	ldr	r2, [r7, #20]
 8009596:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800959a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800959e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	371c      	adds	r7, #28
 80095a6:	46bd      	mov	sp, r7
 80095a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ac:	4770      	bx	lr
 80095ae:	bf00      	nop
 80095b0:	4f54300a 	.word	0x4f54300a

080095b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095bc:	2300      	movs	r3, #0
 80095be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	3301      	adds	r3, #1
 80095c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095cc:	d901      	bls.n	80095d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e01b      	b.n	800960a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	daf2      	bge.n	80095c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	f043 0201 	orr.w	r2, r3, #1
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3301      	adds	r3, #1
 80095ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80095f6:	d901      	bls.n	80095fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e006      	b.n	800960a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	691b      	ldr	r3, [r3, #16]
 8009600:	f003 0301 	and.w	r3, r3, #1
 8009604:	2b01      	cmp	r3, #1
 8009606:	d0f0      	beq.n	80095ea <USB_CoreReset+0x36>

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr
	...

08009618 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8009624:	2024      	movs	r0, #36	@ 0x24
 8009626:	f002 faab 	bl	800bb80 <USBD_static_malloc>
 800962a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d109      	bne.n	8009646 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	32b0      	adds	r2, #176	@ 0xb0
 800963c:	2100      	movs	r1, #0
 800963e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009642:	2302      	movs	r3, #2
 8009644:	e08b      	b.n	800975e <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	32b0      	adds	r2, #176	@ 0xb0
 8009650:	68f9      	ldr	r1, [r7, #12]
 8009652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	32b0      	adds	r2, #176	@ 0xb0
 8009660:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	7c1b      	ldrb	r3, [r3, #16]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d11b      	bne.n	80096aa <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009672:	4b3d      	ldr	r3, [pc, #244]	@ (8009768 <USBD_CUSTOM_HID_Init+0x150>)
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	f003 020f 	and.w	r2, r3, #15
 800967a:	6879      	ldr	r1, [r7, #4]
 800967c:	4613      	mov	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	009b      	lsls	r3, r3, #2
 8009684:	440b      	add	r3, r1
 8009686:	3326      	adds	r3, #38	@ 0x26
 8009688:	2205      	movs	r2, #5
 800968a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800968c:	4b37      	ldr	r3, [pc, #220]	@ (800976c <USBD_CUSTOM_HID_Init+0x154>)
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	f003 020f 	and.w	r2, r3, #15
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4613      	mov	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	4413      	add	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80096a4:	2205      	movs	r2, #5
 80096a6:	801a      	strh	r2, [r3, #0]
 80096a8:	e01a      	b.n	80096e0 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80096aa:	4b2f      	ldr	r3, [pc, #188]	@ (8009768 <USBD_CUSTOM_HID_Init+0x150>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	f003 020f 	and.w	r2, r3, #15
 80096b2:	6879      	ldr	r1, [r7, #4]
 80096b4:	4613      	mov	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	440b      	add	r3, r1
 80096be:	3326      	adds	r3, #38	@ 0x26
 80096c0:	2205      	movs	r2, #5
 80096c2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80096c4:	4b29      	ldr	r3, [pc, #164]	@ (800976c <USBD_CUSTOM_HID_Init+0x154>)
 80096c6:	781b      	ldrb	r3, [r3, #0]
 80096c8:	f003 020f 	and.w	r2, r3, #15
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	4613      	mov	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	440b      	add	r3, r1
 80096d8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80096dc:	2205      	movs	r2, #5
 80096de:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80096e0:	4b21      	ldr	r3, [pc, #132]	@ (8009768 <USBD_CUSTOM_HID_Init+0x150>)
 80096e2:	7819      	ldrb	r1, [r3, #0]
 80096e4:	2304      	movs	r3, #4
 80096e6:	2203      	movs	r2, #3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f002 f938 	bl	800b95e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80096ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009768 <USBD_CUSTOM_HID_Init+0x150>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	f003 020f 	and.w	r2, r3, #15
 80096f6:	6879      	ldr	r1, [r7, #4]
 80096f8:	4613      	mov	r3, r2
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	4413      	add	r3, r2
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	3324      	adds	r3, #36	@ 0x24
 8009704:	2201      	movs	r2, #1
 8009706:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8009708:	4b18      	ldr	r3, [pc, #96]	@ (800976c <USBD_CUSTOM_HID_Init+0x154>)
 800970a:	7819      	ldrb	r1, [r3, #0]
 800970c:	2309      	movs	r3, #9
 800970e:	2203      	movs	r2, #3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f002 f924 	bl	800b95e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8009716:	4b15      	ldr	r3, [pc, #84]	@ (800976c <USBD_CUSTOM_HID_Init+0x154>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	f003 020f 	and.w	r2, r3, #15
 800971e:	6879      	ldr	r1, [r7, #4]
 8009720:	4613      	mov	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	440b      	add	r3, r1
 800972a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800972e:	2201      	movs	r2, #1
 8009730:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	33b0      	adds	r3, #176	@ 0xb0
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 800974e:	4b07      	ldr	r3, [pc, #28]	@ (800976c <USBD_CUSTOM_HID_Init+0x154>)
 8009750:	7819      	ldrb	r1, [r3, #0]
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	2310      	movs	r3, #16
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f002 f9f0 	bl	800bb3c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	20000086 	.word	0x20000086
 800976c:	20000087 	.word	0x20000087

08009770 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	460b      	mov	r3, r1
 800977a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800977c:	4b37      	ldr	r3, [pc, #220]	@ (800985c <USBD_CUSTOM_HID_DeInit+0xec>)
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	4619      	mov	r1, r3
 8009782:	6878      	ldr	r0, [r7, #4]
 8009784:	f002 f911 	bl	800b9aa <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8009788:	4b34      	ldr	r3, [pc, #208]	@ (800985c <USBD_CUSTOM_HID_DeInit+0xec>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	f003 020f 	and.w	r2, r3, #15
 8009790:	6879      	ldr	r1, [r7, #4]
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	440b      	add	r3, r1
 800979c:	3324      	adds	r3, #36	@ 0x24
 800979e:	2200      	movs	r2, #0
 80097a0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80097a2:	4b2e      	ldr	r3, [pc, #184]	@ (800985c <USBD_CUSTOM_HID_DeInit+0xec>)
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	f003 020f 	and.w	r2, r3, #15
 80097aa:	6879      	ldr	r1, [r7, #4]
 80097ac:	4613      	mov	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	4413      	add	r3, r2
 80097b2:	009b      	lsls	r3, r3, #2
 80097b4:	440b      	add	r3, r1
 80097b6:	3326      	adds	r3, #38	@ 0x26
 80097b8:	2200      	movs	r2, #0
 80097ba:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80097bc:	4b28      	ldr	r3, [pc, #160]	@ (8009860 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	4619      	mov	r1, r3
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f002 f8f1 	bl	800b9aa <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80097c8:	4b25      	ldr	r3, [pc, #148]	@ (8009860 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	f003 020f 	and.w	r2, r3, #15
 80097d0:	6879      	ldr	r1, [r7, #4]
 80097d2:	4613      	mov	r3, r2
 80097d4:	009b      	lsls	r3, r3, #2
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	440b      	add	r3, r1
 80097dc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097e0:	2200      	movs	r2, #0
 80097e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80097e4:	4b1e      	ldr	r3, [pc, #120]	@ (8009860 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	f003 020f 	and.w	r2, r3, #15
 80097ec:	6879      	ldr	r1, [r7, #4]
 80097ee:	4613      	mov	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	440b      	add	r3, r1
 80097f8:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80097fc:	2200      	movs	r2, #0
 80097fe:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	32b0      	adds	r2, #176	@ 0xb0
 800980a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01f      	beq.n	8009852 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	33b0      	adds	r3, #176	@ 0xb0
 800981c:	009b      	lsls	r3, r3, #2
 800981e:	4413      	add	r3, r2
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	32b0      	adds	r2, #176	@ 0xb0
 8009830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009834:	4618      	mov	r0, r3
 8009836:	f002 f9b1 	bl	800bb9c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	32b0      	adds	r2, #176	@ 0xb0
 8009844:	2100      	movs	r1, #0
 8009846:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009852:	2300      	movs	r3, #0
}
 8009854:	4618      	mov	r0, r3
 8009856:	3708      	adds	r7, #8
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	20000086 	.word	0x20000086
 8009860:	20000087 	.word	0x20000087

08009864 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b088      	sub	sp, #32
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	32b0      	adds	r2, #176	@ 0xb0
 8009878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800987c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800987e:	2300      	movs	r3, #0
 8009880:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8009882:	2300      	movs	r3, #0
 8009884:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8009886:	2300      	movs	r3, #0
 8009888:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d101      	bne.n	8009898 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8009894:	2303      	movs	r3, #3
 8009896:	e0f8      	b.n	8009a8a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d056      	beq.n	8009952 <USBD_CUSTOM_HID_Setup+0xee>
 80098a4:	2b20      	cmp	r3, #32
 80098a6:	f040 80e8 	bne.w	8009a7a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	785b      	ldrb	r3, [r3, #1]
 80098ae:	3b02      	subs	r3, #2
 80098b0:	2b09      	cmp	r3, #9
 80098b2:	d846      	bhi.n	8009942 <USBD_CUSTOM_HID_Setup+0xde>
 80098b4:	a201      	add	r2, pc, #4	@ (adr r2, 80098bc <USBD_CUSTOM_HID_Setup+0x58>)
 80098b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ba:	bf00      	nop
 80098bc:	08009915 	.word	0x08009915
 80098c0:	080098f3 	.word	0x080098f3
 80098c4:	08009943 	.word	0x08009943
 80098c8:	08009943 	.word	0x08009943
 80098cc:	08009943 	.word	0x08009943
 80098d0:	08009943 	.word	0x08009943
 80098d4:	08009943 	.word	0x08009943
 80098d8:	08009925 	.word	0x08009925
 80098dc:	08009903 	.word	0x08009903
 80098e0:	080098e5 	.word	0x080098e5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	885b      	ldrh	r3, [r3, #2]
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	461a      	mov	r2, r3
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	611a      	str	r2, [r3, #16]
          break;
 80098f0:	e02e      	b.n	8009950 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	3310      	adds	r3, #16
 80098f6:	2201      	movs	r2, #1
 80098f8:	4619      	mov	r1, r3
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f001 fc96 	bl	800b22c <USBD_CtlSendData>
          break;
 8009900:	e026      	b.n	8009950 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	885b      	ldrh	r3, [r3, #2]
 8009906:	0a1b      	lsrs	r3, r3, #8
 8009908:	b29b      	uxth	r3, r3
 800990a:	b2db      	uxtb	r3, r3
 800990c:	461a      	mov	r2, r3
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	615a      	str	r2, [r3, #20]
          break;
 8009912:	e01d      	b.n	8009950 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	3314      	adds	r3, #20
 8009918:	2201      	movs	r2, #1
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 fc85 	bl	800b22c <USBD_CtlSendData>
          break;
 8009922:	e015      	b.n	8009950 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	2201      	movs	r2, #1
 8009928:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800992a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	88db      	ldrh	r3, [r3, #6]
 8009930:	2b10      	cmp	r3, #16
 8009932:	bf28      	it	cs
 8009934:	2310      	movcs	r3, #16
 8009936:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8009938:	461a      	mov	r2, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f001 fca2 	bl	800b284 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8009940:	e006      	b.n	8009950 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8009942:	6839      	ldr	r1, [r7, #0]
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f001 fc00 	bl	800b14a <USBD_CtlError>
          ret = USBD_FAIL;
 800994a:	2303      	movs	r3, #3
 800994c:	75fb      	strb	r3, [r7, #23]
          break;
 800994e:	bf00      	nop
      }
      break;
 8009950:	e09a      	b.n	8009a88 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	785b      	ldrb	r3, [r3, #1]
 8009956:	2b0b      	cmp	r3, #11
 8009958:	f200 8086 	bhi.w	8009a68 <USBD_CUSTOM_HID_Setup+0x204>
 800995c:	a201      	add	r2, pc, #4	@ (adr r2, 8009964 <USBD_CUSTOM_HID_Setup+0x100>)
 800995e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009962:	bf00      	nop
 8009964:	08009995 	.word	0x08009995
 8009968:	08009a77 	.word	0x08009a77
 800996c:	08009a69 	.word	0x08009a69
 8009970:	08009a69 	.word	0x08009a69
 8009974:	08009a69 	.word	0x08009a69
 8009978:	08009a69 	.word	0x08009a69
 800997c:	080099bf 	.word	0x080099bf
 8009980:	08009a69 	.word	0x08009a69
 8009984:	08009a69 	.word	0x08009a69
 8009988:	08009a69 	.word	0x08009a69
 800998c:	08009a17 	.word	0x08009a17
 8009990:	08009a41 	.word	0x08009a41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800999a:	b2db      	uxtb	r3, r3
 800999c:	2b03      	cmp	r3, #3
 800999e:	d107      	bne.n	80099b0 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80099a0:	f107 030e 	add.w	r3, r7, #14
 80099a4:	2202      	movs	r2, #2
 80099a6:	4619      	mov	r1, r3
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f001 fc3f 	bl	800b22c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099ae:	e063      	b.n	8009a78 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80099b0:	6839      	ldr	r1, [r7, #0]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f001 fbc9 	bl	800b14a <USBD_CtlError>
            ret = USBD_FAIL;
 80099b8:	2303      	movs	r3, #3
 80099ba:	75fb      	strb	r3, [r7, #23]
          break;
 80099bc:	e05c      	b.n	8009a78 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	885b      	ldrh	r3, [r3, #2]
 80099c2:	0a1b      	lsrs	r3, r3, #8
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2b22      	cmp	r3, #34	@ 0x22
 80099c8:	d110      	bne.n	80099ec <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	88db      	ldrh	r3, [r3, #6]
 80099ce:	2b31      	cmp	r3, #49	@ 0x31
 80099d0:	bf28      	it	cs
 80099d2:	2331      	movcs	r3, #49	@ 0x31
 80099d4:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	33b0      	adds	r3, #176	@ 0xb0
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	61bb      	str	r3, [r7, #24]
 80099ea:	e00d      	b.n	8009a08 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	885b      	ldrh	r3, [r3, #2]
 80099f0:	0a1b      	lsrs	r3, r3, #8
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	2b21      	cmp	r3, #33	@ 0x21
 80099f6:	d107      	bne.n	8009a08 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80099f8:	4b26      	ldr	r3, [pc, #152]	@ (8009a94 <USBD_CUSTOM_HID_Setup+0x230>)
 80099fa:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	88db      	ldrh	r3, [r3, #6]
 8009a00:	2b09      	cmp	r3, #9
 8009a02:	bf28      	it	cs
 8009a04:	2309      	movcs	r3, #9
 8009a06:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a08:	8bfb      	ldrh	r3, [r7, #30]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	69b9      	ldr	r1, [r7, #24]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f001 fc0c 	bl	800b22c <USBD_CtlSendData>
          break;
 8009a14:	e030      	b.n	8009a78 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b03      	cmp	r3, #3
 8009a20:	d107      	bne.n	8009a32 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	3318      	adds	r3, #24
 8009a26:	2201      	movs	r2, #1
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f001 fbfe 	bl	800b22c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a30:	e022      	b.n	8009a78 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 fb88 	bl	800b14a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	75fb      	strb	r3, [r7, #23]
          break;
 8009a3e:	e01b      	b.n	8009a78 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d106      	bne.n	8009a5a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	885b      	ldrh	r3, [r3, #2]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	461a      	mov	r2, r3
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a58:	e00e      	b.n	8009a78 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009a5a:	6839      	ldr	r1, [r7, #0]
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f001 fb74 	bl	800b14a <USBD_CtlError>
            ret = USBD_FAIL;
 8009a62:	2303      	movs	r3, #3
 8009a64:	75fb      	strb	r3, [r7, #23]
          break;
 8009a66:	e007      	b.n	8009a78 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f001 fb6d 	bl	800b14a <USBD_CtlError>
          ret = USBD_FAIL;
 8009a70:	2303      	movs	r3, #3
 8009a72:	75fb      	strb	r3, [r7, #23]
          break;
 8009a74:	e000      	b.n	8009a78 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8009a76:	bf00      	nop
      }
      break;
 8009a78:	e006      	b.n	8009a88 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8009a7a:	6839      	ldr	r1, [r7, #0]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f001 fb64 	bl	800b14a <USBD_CtlError>
      ret = USBD_FAIL;
 8009a82:	2303      	movs	r3, #3
 8009a84:	75fb      	strb	r3, [r7, #23]
      break;
 8009a86:	bf00      	nop
  }
  return (uint8_t)ret;
 8009a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3720      	adds	r7, #32
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20000070 	.word	0x20000070

08009a98 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	32b0      	adds	r2, #176	@ 0xb0
 8009ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d101      	bne.n	8009ac0 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009abc:	2303      	movs	r3, #3
 8009abe:	e019      	b.n	8009af4 <USBD_CUSTOM_HID_SendReport+0x5c>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b03      	cmp	r3, #3
 8009aca:	d112      	bne.n	8009af2 <USBD_CUSTOM_HID_SendReport+0x5a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10b      	bne.n	8009aee <USBD_CUSTOM_HID_SendReport+0x56>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8009ade:	4b07      	ldr	r3, [pc, #28]	@ (8009afc <USBD_CUSTOM_HID_SendReport+0x64>)
 8009ae0:	7819      	ldrb	r1, [r3, #0]
 8009ae2:	88fb      	ldrh	r3, [r7, #6]
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f002 f807 	bl	800bafa <USBD_LL_Transmit>
 8009aec:	e001      	b.n	8009af2 <USBD_CUSTOM_HID_SendReport+0x5a>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8009aee:	2301      	movs	r3, #1
 8009af0:	e000      	b.n	8009af4 <USBD_CUSTOM_HID_SendReport+0x5c>
    }
  }
  return (uint8_t)USBD_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	20000086 	.word	0x20000086

08009b00 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b084      	sub	sp, #16
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8009b08:	2181      	movs	r1, #129	@ 0x81
 8009b0a:	4815      	ldr	r0, [pc, #84]	@ (8009b60 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8009b0c:	f000 fce7 	bl	800a4de <USBD_GetEpDesc>
 8009b10:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009b12:	2101      	movs	r1, #1
 8009b14:	4812      	ldr	r0, [pc, #72]	@ (8009b60 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8009b16:	f000 fce2 	bl	800a4de <USBD_GetEpDesc>
 8009b1a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d009      	beq.n	8009b36 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f042 0204 	orr.w	r2, r2, #4
 8009b2a:	711a      	strb	r2, [r3, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2205      	movs	r2, #5
 8009b34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d009      	beq.n	8009b50 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f042 0209 	orr.w	r2, r2, #9
 8009b44:	711a      	strb	r2, [r3, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2205      	movs	r2, #5
 8009b4e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2229      	movs	r2, #41	@ 0x29
 8009b54:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009b56:	4b02      	ldr	r3, [pc, #8]	@ (8009b60 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3710      	adds	r7, #16
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	20000044 	.word	0x20000044

08009b64 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8009b6c:	2181      	movs	r1, #129	@ 0x81
 8009b6e:	4815      	ldr	r0, [pc, #84]	@ (8009bc4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8009b70:	f000 fcb5 	bl	800a4de <USBD_GetEpDesc>
 8009b74:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009b76:	2101      	movs	r1, #1
 8009b78:	4812      	ldr	r0, [pc, #72]	@ (8009bc4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8009b7a:	f000 fcb0 	bl	800a4de <USBD_GetEpDesc>
 8009b7e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d009      	beq.n	8009b9a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f042 0204 	orr.w	r2, r2, #4
 8009b8e:	711a      	strb	r2, [r3, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2205      	movs	r2, #5
 8009b98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d009      	beq.n	8009bb4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f042 0209 	orr.w	r2, r2, #9
 8009ba8:	711a      	strb	r2, [r3, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2205      	movs	r2, #5
 8009bb2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2229      	movs	r2, #41	@ 0x29
 8009bb8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009bba:	4b02      	ldr	r3, [pc, #8]	@ (8009bc4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	20000044 	.word	0x20000044

08009bc8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8009bd0:	2181      	movs	r1, #129	@ 0x81
 8009bd2:	4815      	ldr	r0, [pc, #84]	@ (8009c28 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8009bd4:	f000 fc83 	bl	800a4de <USBD_GetEpDesc>
 8009bd8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009bda:	2101      	movs	r1, #1
 8009bdc:	4812      	ldr	r0, [pc, #72]	@ (8009c28 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8009bde:	f000 fc7e 	bl	800a4de <USBD_GetEpDesc>
 8009be2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d009      	beq.n	8009bfe <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f042 0204 	orr.w	r2, r2, #4
 8009bf2:	711a      	strb	r2, [r3, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2205      	movs	r2, #5
 8009bfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d009      	beq.n	8009c18 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f042 0209 	orr.w	r2, r2, #9
 8009c0c:	711a      	strb	r2, [r3, #4]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2205      	movs	r2, #5
 8009c16:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2229      	movs	r2, #41	@ 0x29
 8009c1c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009c1e:	4b02      	ldr	r3, [pc, #8]	@ (8009c28 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}
 8009c28:	20000044 	.word	0x20000044

08009c2c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	32b0      	adds	r2, #176	@ 0xb0
 8009c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr

08009c5a <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8009c5a:	b580      	push	{r7, lr}
 8009c5c:	b084      	sub	sp, #16
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
 8009c62:	460b      	mov	r3, r1
 8009c64:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	32b0      	adds	r2, #176	@ 0xb0
 8009c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c74:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	33b0      	adds	r3, #176	@ 0xb0
 8009c80:	009b      	lsls	r3, r3, #2
 8009c82:	4413      	add	r3, r2
 8009c84:	685b      	ldr	r3, [r3, #4]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	4610      	mov	r0, r2
 8009c8c:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	2310      	movs	r3, #16
 8009c92:	2101      	movs	r1, #1
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f001 ff51 	bl	800bb3c <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3710      	adds	r7, #16
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]

 USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	32b0      	adds	r2, #176	@ 0xb0
 8009cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cba:	60fb      	str	r3, [r7, #12]

 if (hhid->IsReportAvailable == 1U)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	69db      	ldr	r3, [r3, #28]
 8009cc0:	2b01      	cmp	r3, #1
 8009cc2:	d10e      	bne.n	8009ce2 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
 {
   ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	33b0      	adds	r3, #176	@ 0xb0
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4413      	add	r3, r2
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	4610      	mov	r0, r2
 8009cda:	4798      	blx	r3
   hhid->IsReportAvailable = 0U;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	61da      	str	r2, [r3, #28]

 }

 return (uint8_t)USBD_OK;
 8009ce2:	2300      	movs	r3, #0

}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	220a      	movs	r2, #10
 8009cf8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8009cfa:	4b03      	ldr	r3, [pc, #12]	@ (8009d08 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr
 8009d08:	2000007c 	.word	0x2000007c

08009d0c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	e009      	b.n	8009d34 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	33b0      	adds	r3, #176	@ 0xb0
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	683a      	ldr	r2, [r7, #0]
 8009d30:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	370c      	adds	r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3e:	4770      	bx	lr

08009d40 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b086      	sub	sp, #24
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d54:	2303      	movs	r3, #3
 8009d56:	e01f      	b.n	8009d98 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2201      	movs	r2, #1
 8009d82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	79fa      	ldrb	r2, [r7, #7]
 8009d8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f001 fd7f 	bl	800b890 <USBD_LL_Init>
 8009d92:	4603      	mov	r3, r0
 8009d94:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3718      	adds	r7, #24
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d101      	bne.n	8009db8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009db4:	2303      	movs	r3, #3
 8009db6:	e025      	b.n	8009e04 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	683a      	ldr	r2, [r7, #0]
 8009dbc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	32ae      	adds	r2, #174	@ 0xae
 8009dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d00f      	beq.n	8009df4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	32ae      	adds	r2, #174	@ 0xae
 8009dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de4:	f107 020e 	add.w	r2, r7, #14
 8009de8:	4610      	mov	r0, r2
 8009dea:	4798      	blx	r3
 8009dec:	4602      	mov	r2, r0
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b082      	sub	sp, #8
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 fd87 	bl	800b928 <USBD_LL_Start>
 8009e1a:	4603      	mov	r3, r0
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3708      	adds	r7, #8
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}

08009e24 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e2c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	370c      	adds	r7, #12
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d009      	beq.n	8009e68 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	78fa      	ldrb	r2, [r7, #3]
 8009e5e:	4611      	mov	r1, r2
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	4798      	blx	r3
 8009e64:	4603      	mov	r3, r0
 8009e66:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	78fa      	ldrb	r2, [r7, #3]
 8009e8c:	4611      	mov	r1, r2
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	4798      	blx	r3
 8009e92:	4603      	mov	r3, r0
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d001      	beq.n	8009e9c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009eb6:	6839      	ldr	r1, [r7, #0]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f001 f90c 	bl	800b0d6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009ecc:	461a      	mov	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009eda:	f003 031f 	and.w	r3, r3, #31
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d01a      	beq.n	8009f18 <USBD_LL_SetupStage+0x72>
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d822      	bhi.n	8009f2c <USBD_LL_SetupStage+0x86>
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <USBD_LL_SetupStage+0x4a>
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d00a      	beq.n	8009f04 <USBD_LL_SetupStage+0x5e>
 8009eee:	e01d      	b.n	8009f2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fb63 	bl	800a5c4 <USBD_StdDevReq>
 8009efe:	4603      	mov	r3, r0
 8009f00:	73fb      	strb	r3, [r7, #15]
      break;
 8009f02:	e020      	b.n	8009f46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fbcb 	bl	800a6a8 <USBD_StdItfReq>
 8009f12:	4603      	mov	r3, r0
 8009f14:	73fb      	strb	r3, [r7, #15]
      break;
 8009f16:	e016      	b.n	8009f46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f000 fc2d 	bl	800a780 <USBD_StdEPReq>
 8009f26:	4603      	mov	r3, r0
 8009f28:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2a:	e00c      	b.n	8009f46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f32:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009f36:	b2db      	uxtb	r3, r3
 8009f38:	4619      	mov	r1, r3
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f001 fd54 	bl	800b9e8 <USBD_LL_StallEP>
 8009f40:	4603      	mov	r3, r0
 8009f42:	73fb      	strb	r3, [r7, #15]
      break;
 8009f44:	bf00      	nop
  }

  return ret;
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3710      	adds	r7, #16
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b086      	sub	sp, #24
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	607a      	str	r2, [r7, #4]
 8009f5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009f62:	7afb      	ldrb	r3, [r7, #11]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d16e      	bne.n	800a046 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009f6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f76:	2b03      	cmp	r3, #3
 8009f78:	f040 8098 	bne.w	800a0ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d913      	bls.n	8009fb0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	689a      	ldr	r2, [r3, #8]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	1ad2      	subs	r2, r2, r3
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	68da      	ldr	r2, [r3, #12]
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	689b      	ldr	r3, [r3, #8]
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	bf28      	it	cs
 8009fa2:	4613      	movcs	r3, r2
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	6879      	ldr	r1, [r7, #4]
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f001 f988 	bl	800b2be <USBD_CtlContinueRx>
 8009fae:	e07d      	b.n	800a0ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009fb6:	f003 031f 	and.w	r3, r3, #31
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d014      	beq.n	8009fe8 <USBD_LL_DataOutStage+0x98>
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d81d      	bhi.n	8009ffe <USBD_LL_DataOutStage+0xae>
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d002      	beq.n	8009fcc <USBD_LL_DataOutStage+0x7c>
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d003      	beq.n	8009fd2 <USBD_LL_DataOutStage+0x82>
 8009fca:	e018      	b.n	8009ffe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	75bb      	strb	r3, [r7, #22]
            break;
 8009fd0:	e018      	b.n	800a004 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	4619      	mov	r1, r3
 8009fdc:	68f8      	ldr	r0, [r7, #12]
 8009fde:	f000 fa64 	bl	800a4aa <USBD_CoreFindIF>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	75bb      	strb	r3, [r7, #22]
            break;
 8009fe6:	e00d      	b.n	800a004 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	68f8      	ldr	r0, [r7, #12]
 8009ff4:	f000 fa66 	bl	800a4c4 <USBD_CoreFindEP>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	75bb      	strb	r3, [r7, #22]
            break;
 8009ffc:	e002      	b.n	800a004 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009ffe:	2300      	movs	r3, #0
 800a000:	75bb      	strb	r3, [r7, #22]
            break;
 800a002:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a004:	7dbb      	ldrb	r3, [r7, #22]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d119      	bne.n	800a03e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a010:	b2db      	uxtb	r3, r3
 800a012:	2b03      	cmp	r3, #3
 800a014:	d113      	bne.n	800a03e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a016:	7dba      	ldrb	r2, [r7, #22]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	32ae      	adds	r2, #174	@ 0xae
 800a01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00b      	beq.n	800a03e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a026:	7dba      	ldrb	r2, [r7, #22]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a02e:	7dba      	ldrb	r2, [r7, #22]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	32ae      	adds	r2, #174	@ 0xae
 800a034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f001 f94e 	bl	800b2e0 <USBD_CtlSendStatus>
 800a044:	e032      	b.n	800a0ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a046:	7afb      	ldrb	r3, [r7, #11]
 800a048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	4619      	mov	r1, r3
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 fa37 	bl	800a4c4 <USBD_CoreFindEP>
 800a056:	4603      	mov	r3, r0
 800a058:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a05a:	7dbb      	ldrb	r3, [r7, #22]
 800a05c:	2bff      	cmp	r3, #255	@ 0xff
 800a05e:	d025      	beq.n	800a0ac <USBD_LL_DataOutStage+0x15c>
 800a060:	7dbb      	ldrb	r3, [r7, #22]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d122      	bne.n	800a0ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a06c:	b2db      	uxtb	r3, r3
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d117      	bne.n	800a0a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a072:	7dba      	ldrb	r2, [r7, #22]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	32ae      	adds	r2, #174	@ 0xae
 800a078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00f      	beq.n	800a0a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a082:	7dba      	ldrb	r2, [r7, #22]
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a08a:	7dba      	ldrb	r2, [r7, #22]
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	32ae      	adds	r2, #174	@ 0xae
 800a090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	7afa      	ldrb	r2, [r7, #11]
 800a098:	4611      	mov	r1, r2
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	4798      	blx	r3
 800a09e:	4603      	mov	r3, r0
 800a0a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
 800a0aa:	e000      	b.n	800a0ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3718      	adds	r7, #24
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b086      	sub	sp, #24
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	60f8      	str	r0, [r7, #12]
 800a0be:	460b      	mov	r3, r1
 800a0c0:	607a      	str	r2, [r7, #4]
 800a0c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a0c4:	7afb      	ldrb	r3, [r7, #11]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d16f      	bne.n	800a1aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3314      	adds	r3, #20
 800a0ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d15a      	bne.n	800a190 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	689a      	ldr	r2, [r3, #8]
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d914      	bls.n	800a110 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	689a      	ldr	r2, [r3, #8]
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	68db      	ldr	r3, [r3, #12]
 800a0ee:	1ad2      	subs	r2, r2, r3
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	6879      	ldr	r1, [r7, #4]
 800a0fc:	68f8      	ldr	r0, [r7, #12]
 800a0fe:	f001 f8b0 	bl	800b262 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a102:	2300      	movs	r3, #0
 800a104:	2200      	movs	r2, #0
 800a106:	2100      	movs	r1, #0
 800a108:	68f8      	ldr	r0, [r7, #12]
 800a10a:	f001 fd17 	bl	800bb3c <USBD_LL_PrepareReceive>
 800a10e:	e03f      	b.n	800a190 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	68da      	ldr	r2, [r3, #12]
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d11c      	bne.n	800a156 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	685a      	ldr	r2, [r3, #4]
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a124:	429a      	cmp	r2, r3
 800a126:	d316      	bcc.n	800a156 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a132:	429a      	cmp	r2, r3
 800a134:	d20f      	bcs.n	800a156 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a136:	2200      	movs	r2, #0
 800a138:	2100      	movs	r1, #0
 800a13a:	68f8      	ldr	r0, [r7, #12]
 800a13c:	f001 f891 	bl	800b262 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a148:	2300      	movs	r3, #0
 800a14a:	2200      	movs	r2, #0
 800a14c:	2100      	movs	r1, #0
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f001 fcf4 	bl	800bb3c <USBD_LL_PrepareReceive>
 800a154:	e01c      	b.n	800a190 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d10f      	bne.n	800a182 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d009      	beq.n	800a182 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a182:	2180      	movs	r1, #128	@ 0x80
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f001 fc2f 	bl	800b9e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a18a:	68f8      	ldr	r0, [r7, #12]
 800a18c:	f001 f8bb 	bl	800b306 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d03a      	beq.n	800a210 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a19a:	68f8      	ldr	r0, [r7, #12]
 800a19c:	f7ff fe42 	bl	8009e24 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a1a8:	e032      	b.n	800a210 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a1aa:	7afb      	ldrb	r3, [r7, #11]
 800a1ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1b0:	b2db      	uxtb	r3, r3
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f000 f985 	bl	800a4c4 <USBD_CoreFindEP>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1be:	7dfb      	ldrb	r3, [r7, #23]
 800a1c0:	2bff      	cmp	r3, #255	@ 0xff
 800a1c2:	d025      	beq.n	800a210 <USBD_LL_DataInStage+0x15a>
 800a1c4:	7dfb      	ldrb	r3, [r7, #23]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d122      	bne.n	800a210 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	2b03      	cmp	r3, #3
 800a1d4:	d11c      	bne.n	800a210 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a1d6:	7dfa      	ldrb	r2, [r7, #23]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	32ae      	adds	r2, #174	@ 0xae
 800a1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d014      	beq.n	800a210 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a1e6:	7dfa      	ldrb	r2, [r7, #23]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a1ee:	7dfa      	ldrb	r2, [r7, #23]
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	32ae      	adds	r2, #174	@ 0xae
 800a1f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	7afa      	ldrb	r2, [r7, #11]
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	4798      	blx	r3
 800a202:	4603      	mov	r3, r0
 800a204:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a206:	7dbb      	ldrb	r3, [r7, #22]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d001      	beq.n	800a210 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a20c:	7dbb      	ldrb	r3, [r7, #22]
 800a20e:	e000      	b.n	800a212 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	3718      	adds	r7, #24
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}

0800a21a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b084      	sub	sp, #16
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a222:	2300      	movs	r3, #0
 800a224:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2201      	movs	r2, #1
 800a22a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a252:	2b00      	cmp	r3, #0
 800a254:	d014      	beq.n	800a280 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00e      	beq.n	800a280 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	6852      	ldr	r2, [r2, #4]
 800a26e:	b2d2      	uxtb	r2, r2
 800a270:	4611      	mov	r1, r2
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	4798      	blx	r3
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d001      	beq.n	800a280 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a27c:	2303      	movs	r3, #3
 800a27e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a280:	2340      	movs	r3, #64	@ 0x40
 800a282:	2200      	movs	r2, #0
 800a284:	2100      	movs	r1, #0
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f001 fb69 	bl	800b95e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2240      	movs	r2, #64	@ 0x40
 800a298:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a29c:	2340      	movs	r3, #64	@ 0x40
 800a29e:	2200      	movs	r2, #0
 800a2a0:	2180      	movs	r1, #128	@ 0x80
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f001 fb5b 	bl	800b95e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2240      	movs	r2, #64	@ 0x40
 800a2b2:	621a      	str	r2, [r3, #32]

  return ret;
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	b083      	sub	sp, #12
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	78fa      	ldrb	r2, [r7, #3]
 800a2ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	370c      	adds	r7, #12
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr

0800a2de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a2de:	b480      	push	{r7}
 800a2e0:	b083      	sub	sp, #12
 800a2e2:	af00      	add	r7, sp, #0
 800a2e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b04      	cmp	r3, #4
 800a2f0:	d006      	beq.n	800a300 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2f8:	b2da      	uxtb	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2204      	movs	r2, #4
 800a304:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a308:	2300      	movs	r3, #0
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a324:	b2db      	uxtb	r3, r3
 800a326:	2b04      	cmp	r3, #4
 800a328:	d106      	bne.n	800a338 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a330:	b2da      	uxtb	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr

0800a346 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a346:	b580      	push	{r7, lr}
 800a348:	b082      	sub	sp, #8
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a354:	b2db      	uxtb	r3, r3
 800a356:	2b03      	cmp	r3, #3
 800a358:	d110      	bne.n	800a37c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a360:	2b00      	cmp	r3, #0
 800a362:	d00b      	beq.n	800a37c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a36a:	69db      	ldr	r3, [r3, #28]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d005      	beq.n	800a37c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a376:	69db      	ldr	r3, [r3, #28]
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
 800a38e:	460b      	mov	r3, r1
 800a390:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	32ae      	adds	r2, #174	@ 0xae
 800a39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d101      	bne.n	800a3a8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	e01c      	b.n	800a3e2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d115      	bne.n	800a3e0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	32ae      	adds	r2, #174	@ 0xae
 800a3be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c2:	6a1b      	ldr	r3, [r3, #32]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d00b      	beq.n	800a3e0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	32ae      	adds	r2, #174	@ 0xae
 800a3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d6:	6a1b      	ldr	r3, [r3, #32]
 800a3d8:	78fa      	ldrb	r2, [r7, #3]
 800a3da:	4611      	mov	r1, r2
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	32ae      	adds	r2, #174	@ 0xae
 800a400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d101      	bne.n	800a40c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a408:	2303      	movs	r3, #3
 800a40a:	e01c      	b.n	800a446 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b03      	cmp	r3, #3
 800a416:	d115      	bne.n	800a444 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	32ae      	adds	r2, #174	@ 0xae
 800a422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00b      	beq.n	800a444 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	32ae      	adds	r2, #174	@ 0xae
 800a436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a43c:	78fa      	ldrb	r2, [r7, #3]
 800a43e:	4611      	mov	r1, r2
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}

0800a44e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a44e:	b480      	push	{r7}
 800a450:	b083      	sub	sp, #12
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a46c:	2300      	movs	r3, #0
 800a46e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d00e      	beq.n	800a4a0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6852      	ldr	r2, [r2, #4]
 800a48e:	b2d2      	uxtb	r2, r2
 800a490:	4611      	mov	r1, r2
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	4798      	blx	r3
 800a496:	4603      	mov	r3, r0
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d001      	beq.n	800a4a0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a49c:	2303      	movs	r3, #3
 800a49e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3710      	adds	r7, #16
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}

0800a4aa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b083      	sub	sp, #12
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
 800a4b2:	460b      	mov	r3, r1
 800a4b4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4b6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4d0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b086      	sub	sp, #24
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	885b      	ldrh	r3, [r3, #2]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	68fa      	ldr	r2, [r7, #12]
 800a4fe:	7812      	ldrb	r2, [r2, #0]
 800a500:	4293      	cmp	r3, r2
 800a502:	d91f      	bls.n	800a544 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a50a:	e013      	b.n	800a534 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a50c:	f107 030a 	add.w	r3, r7, #10
 800a510:	4619      	mov	r1, r3
 800a512:	6978      	ldr	r0, [r7, #20]
 800a514:	f000 f81b 	bl	800a54e <USBD_GetNextDesc>
 800a518:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	785b      	ldrb	r3, [r3, #1]
 800a51e:	2b05      	cmp	r3, #5
 800a520:	d108      	bne.n	800a534 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	789b      	ldrb	r3, [r3, #2]
 800a52a:	78fa      	ldrb	r2, [r7, #3]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d008      	beq.n	800a542 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a530:	2300      	movs	r3, #0
 800a532:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	885b      	ldrh	r3, [r3, #2]
 800a538:	b29a      	uxth	r2, r3
 800a53a:	897b      	ldrh	r3, [r7, #10]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d8e5      	bhi.n	800a50c <USBD_GetEpDesc+0x2e>
 800a540:	e000      	b.n	800a544 <USBD_GetEpDesc+0x66>
          break;
 800a542:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a544:	693b      	ldr	r3, [r7, #16]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a54e:	b480      	push	{r7}
 800a550:	b085      	sub	sp, #20
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
 800a556:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	68fa      	ldr	r2, [r7, #12]
 800a562:	7812      	ldrb	r2, [r2, #0]
 800a564:	4413      	add	r3, r2
 800a566:	b29a      	uxth	r2, r3
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	461a      	mov	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4413      	add	r3, r2
 800a576:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a578:	68fb      	ldr	r3, [r7, #12]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3714      	adds	r7, #20
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr

0800a586 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a586:	b480      	push	{r7}
 800a588:	b087      	sub	sp, #28
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	3301      	adds	r3, #1
 800a59c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5a4:	8a3b      	ldrh	r3, [r7, #16]
 800a5a6:	021b      	lsls	r3, r3, #8
 800a5a8:	b21a      	sxth	r2, r3
 800a5aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	b21b      	sxth	r3, r3
 800a5b2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a5b4:	89fb      	ldrh	r3, [r7, #14]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	371c      	adds	r7, #28
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
	...

0800a5c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a5da:	2b40      	cmp	r3, #64	@ 0x40
 800a5dc:	d005      	beq.n	800a5ea <USBD_StdDevReq+0x26>
 800a5de:	2b40      	cmp	r3, #64	@ 0x40
 800a5e0:	d857      	bhi.n	800a692 <USBD_StdDevReq+0xce>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d00f      	beq.n	800a606 <USBD_StdDevReq+0x42>
 800a5e6:	2b20      	cmp	r3, #32
 800a5e8:	d153      	bne.n	800a692 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	32ae      	adds	r2, #174	@ 0xae
 800a5f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	4798      	blx	r3
 800a600:	4603      	mov	r3, r0
 800a602:	73fb      	strb	r3, [r7, #15]
      break;
 800a604:	e04a      	b.n	800a69c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	785b      	ldrb	r3, [r3, #1]
 800a60a:	2b09      	cmp	r3, #9
 800a60c:	d83b      	bhi.n	800a686 <USBD_StdDevReq+0xc2>
 800a60e:	a201      	add	r2, pc, #4	@ (adr r2, 800a614 <USBD_StdDevReq+0x50>)
 800a610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a614:	0800a669 	.word	0x0800a669
 800a618:	0800a67d 	.word	0x0800a67d
 800a61c:	0800a687 	.word	0x0800a687
 800a620:	0800a673 	.word	0x0800a673
 800a624:	0800a687 	.word	0x0800a687
 800a628:	0800a647 	.word	0x0800a647
 800a62c:	0800a63d 	.word	0x0800a63d
 800a630:	0800a687 	.word	0x0800a687
 800a634:	0800a65f 	.word	0x0800a65f
 800a638:	0800a651 	.word	0x0800a651
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a63c:	6839      	ldr	r1, [r7, #0]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fa3c 	bl	800aabc <USBD_GetDescriptor>
          break;
 800a644:	e024      	b.n	800a690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fba1 	bl	800ad90 <USBD_SetAddress>
          break;
 800a64e:	e01f      	b.n	800a690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a650:	6839      	ldr	r1, [r7, #0]
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 fbe0 	bl	800ae18 <USBD_SetConfig>
 800a658:	4603      	mov	r3, r0
 800a65a:	73fb      	strb	r3, [r7, #15]
          break;
 800a65c:	e018      	b.n	800a690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fc83 	bl	800af6c <USBD_GetConfig>
          break;
 800a666:	e013      	b.n	800a690 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 fcb4 	bl	800afd8 <USBD_GetStatus>
          break;
 800a670:	e00e      	b.n	800a690 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	f000 fce3 	bl	800b040 <USBD_SetFeature>
          break;
 800a67a:	e009      	b.n	800a690 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a67c:	6839      	ldr	r1, [r7, #0]
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fd07 	bl	800b092 <USBD_ClrFeature>
          break;
 800a684:	e004      	b.n	800a690 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a686:	6839      	ldr	r1, [r7, #0]
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fd5e 	bl	800b14a <USBD_CtlError>
          break;
 800a68e:	bf00      	nop
      }
      break;
 800a690:	e004      	b.n	800a69c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fd58 	bl	800b14a <USBD_CtlError>
      break;
 800a69a:	bf00      	nop
  }

  return ret;
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop

0800a6a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a6be:	2b40      	cmp	r3, #64	@ 0x40
 800a6c0:	d005      	beq.n	800a6ce <USBD_StdItfReq+0x26>
 800a6c2:	2b40      	cmp	r3, #64	@ 0x40
 800a6c4:	d852      	bhi.n	800a76c <USBD_StdItfReq+0xc4>
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <USBD_StdItfReq+0x26>
 800a6ca:	2b20      	cmp	r3, #32
 800a6cc:	d14e      	bne.n	800a76c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d840      	bhi.n	800a75e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	889b      	ldrh	r3, [r3, #4]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d836      	bhi.n	800a754 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	889b      	ldrh	r3, [r3, #4]
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f7ff fedb 	bl	800a4aa <USBD_CoreFindIF>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6f8:	7bbb      	ldrb	r3, [r7, #14]
 800a6fa:	2bff      	cmp	r3, #255	@ 0xff
 800a6fc:	d01d      	beq.n	800a73a <USBD_StdItfReq+0x92>
 800a6fe:	7bbb      	ldrb	r3, [r7, #14]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d11a      	bne.n	800a73a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a704:	7bba      	ldrb	r2, [r7, #14]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	32ae      	adds	r2, #174	@ 0xae
 800a70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00f      	beq.n	800a734 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a714:	7bba      	ldrb	r2, [r7, #14]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a71c:	7bba      	ldrb	r2, [r7, #14]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	32ae      	adds	r2, #174	@ 0xae
 800a722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	4798      	blx	r3
 800a72e:	4603      	mov	r3, r0
 800a730:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a732:	e004      	b.n	800a73e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a734:	2303      	movs	r3, #3
 800a736:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a738:	e001      	b.n	800a73e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a73a:	2303      	movs	r3, #3
 800a73c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	88db      	ldrh	r3, [r3, #6]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d110      	bne.n	800a768 <USBD_StdItfReq+0xc0>
 800a746:	7bfb      	ldrb	r3, [r7, #15]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10d      	bne.n	800a768 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fdc7 	bl	800b2e0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a752:	e009      	b.n	800a768 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a754:	6839      	ldr	r1, [r7, #0]
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fcf7 	bl	800b14a <USBD_CtlError>
          break;
 800a75c:	e004      	b.n	800a768 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 fcf2 	bl	800b14a <USBD_CtlError>
          break;
 800a766:	e000      	b.n	800a76a <USBD_StdItfReq+0xc2>
          break;
 800a768:	bf00      	nop
      }
      break;
 800a76a:	e004      	b.n	800a776 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a76c:	6839      	ldr	r1, [r7, #0]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 fceb 	bl	800b14a <USBD_CtlError>
      break;
 800a774:	bf00      	nop
  }

  return ret;
 800a776:	7bfb      	ldrb	r3, [r7, #15]
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	889b      	ldrh	r3, [r3, #4]
 800a792:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a79c:	2b40      	cmp	r3, #64	@ 0x40
 800a79e:	d007      	beq.n	800a7b0 <USBD_StdEPReq+0x30>
 800a7a0:	2b40      	cmp	r3, #64	@ 0x40
 800a7a2:	f200 817f 	bhi.w	800aaa4 <USBD_StdEPReq+0x324>
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d02a      	beq.n	800a800 <USBD_StdEPReq+0x80>
 800a7aa:	2b20      	cmp	r3, #32
 800a7ac:	f040 817a 	bne.w	800aaa4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a7b0:	7bbb      	ldrb	r3, [r7, #14]
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f7ff fe85 	bl	800a4c4 <USBD_CoreFindEP>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7be:	7b7b      	ldrb	r3, [r7, #13]
 800a7c0:	2bff      	cmp	r3, #255	@ 0xff
 800a7c2:	f000 8174 	beq.w	800aaae <USBD_StdEPReq+0x32e>
 800a7c6:	7b7b      	ldrb	r3, [r7, #13]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f040 8170 	bne.w	800aaae <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a7ce:	7b7a      	ldrb	r2, [r7, #13]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a7d6:	7b7a      	ldrb	r2, [r7, #13]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	32ae      	adds	r2, #174	@ 0xae
 800a7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f000 8163 	beq.w	800aaae <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a7e8:	7b7a      	ldrb	r2, [r7, #13]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	32ae      	adds	r2, #174	@ 0xae
 800a7ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	6839      	ldr	r1, [r7, #0]
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	4798      	blx	r3
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a7fe:	e156      	b.n	800aaae <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	785b      	ldrb	r3, [r3, #1]
 800a804:	2b03      	cmp	r3, #3
 800a806:	d008      	beq.n	800a81a <USBD_StdEPReq+0x9a>
 800a808:	2b03      	cmp	r3, #3
 800a80a:	f300 8145 	bgt.w	800aa98 <USBD_StdEPReq+0x318>
 800a80e:	2b00      	cmp	r3, #0
 800a810:	f000 809b 	beq.w	800a94a <USBD_StdEPReq+0x1ca>
 800a814:	2b01      	cmp	r3, #1
 800a816:	d03c      	beq.n	800a892 <USBD_StdEPReq+0x112>
 800a818:	e13e      	b.n	800aa98 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a820:	b2db      	uxtb	r3, r3
 800a822:	2b02      	cmp	r3, #2
 800a824:	d002      	beq.n	800a82c <USBD_StdEPReq+0xac>
 800a826:	2b03      	cmp	r3, #3
 800a828:	d016      	beq.n	800a858 <USBD_StdEPReq+0xd8>
 800a82a:	e02c      	b.n	800a886 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d00d      	beq.n	800a84e <USBD_StdEPReq+0xce>
 800a832:	7bbb      	ldrb	r3, [r7, #14]
 800a834:	2b80      	cmp	r3, #128	@ 0x80
 800a836:	d00a      	beq.n	800a84e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a838:	7bbb      	ldrb	r3, [r7, #14]
 800a83a:	4619      	mov	r1, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f001 f8d3 	bl	800b9e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a842:	2180      	movs	r1, #128	@ 0x80
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f001 f8cf 	bl	800b9e8 <USBD_LL_StallEP>
 800a84a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a84c:	e020      	b.n	800a890 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fc7a 	bl	800b14a <USBD_CtlError>
              break;
 800a856:	e01b      	b.n	800a890 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	885b      	ldrh	r3, [r3, #2]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10e      	bne.n	800a87e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a860:	7bbb      	ldrb	r3, [r7, #14]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d00b      	beq.n	800a87e <USBD_StdEPReq+0xfe>
 800a866:	7bbb      	ldrb	r3, [r7, #14]
 800a868:	2b80      	cmp	r3, #128	@ 0x80
 800a86a:	d008      	beq.n	800a87e <USBD_StdEPReq+0xfe>
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	88db      	ldrh	r3, [r3, #6]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d104      	bne.n	800a87e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a874:	7bbb      	ldrb	r3, [r7, #14]
 800a876:	4619      	mov	r1, r3
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f001 f8b5 	bl	800b9e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fd2e 	bl	800b2e0 <USBD_CtlSendStatus>

              break;
 800a884:	e004      	b.n	800a890 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fc5e 	bl	800b14a <USBD_CtlError>
              break;
 800a88e:	bf00      	nop
          }
          break;
 800a890:	e107      	b.n	800aaa2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	2b02      	cmp	r3, #2
 800a89c:	d002      	beq.n	800a8a4 <USBD_StdEPReq+0x124>
 800a89e:	2b03      	cmp	r3, #3
 800a8a0:	d016      	beq.n	800a8d0 <USBD_StdEPReq+0x150>
 800a8a2:	e04b      	b.n	800a93c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d00d      	beq.n	800a8c6 <USBD_StdEPReq+0x146>
 800a8aa:	7bbb      	ldrb	r3, [r7, #14]
 800a8ac:	2b80      	cmp	r3, #128	@ 0x80
 800a8ae:	d00a      	beq.n	800a8c6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8b0:	7bbb      	ldrb	r3, [r7, #14]
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f001 f897 	bl	800b9e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8ba:	2180      	movs	r1, #128	@ 0x80
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f001 f893 	bl	800b9e8 <USBD_LL_StallEP>
 800a8c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8c4:	e040      	b.n	800a948 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fc3e 	bl	800b14a <USBD_CtlError>
              break;
 800a8ce:	e03b      	b.n	800a948 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	885b      	ldrh	r3, [r3, #2]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d136      	bne.n	800a946 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a8d8:	7bbb      	ldrb	r3, [r7, #14]
 800a8da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d004      	beq.n	800a8ec <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a8e2:	7bbb      	ldrb	r3, [r7, #14]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f001 f89d 	bl	800ba26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fcf7 	bl	800b2e0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7ff fde4 	bl	800a4c4 <USBD_CoreFindEP>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a900:	7b7b      	ldrb	r3, [r7, #13]
 800a902:	2bff      	cmp	r3, #255	@ 0xff
 800a904:	d01f      	beq.n	800a946 <USBD_StdEPReq+0x1c6>
 800a906:	7b7b      	ldrb	r3, [r7, #13]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d11c      	bne.n	800a946 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a90c:	7b7a      	ldrb	r2, [r7, #13]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a914:	7b7a      	ldrb	r2, [r7, #13]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	32ae      	adds	r2, #174	@ 0xae
 800a91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d010      	beq.n	800a946 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a924:	7b7a      	ldrb	r2, [r7, #13]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	32ae      	adds	r2, #174	@ 0xae
 800a92a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	4798      	blx	r3
 800a936:	4603      	mov	r3, r0
 800a938:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a93a:	e004      	b.n	800a946 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a93c:	6839      	ldr	r1, [r7, #0]
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f000 fc03 	bl	800b14a <USBD_CtlError>
              break;
 800a944:	e000      	b.n	800a948 <USBD_StdEPReq+0x1c8>
              break;
 800a946:	bf00      	nop
          }
          break;
 800a948:	e0ab      	b.n	800aaa2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b02      	cmp	r3, #2
 800a954:	d002      	beq.n	800a95c <USBD_StdEPReq+0x1dc>
 800a956:	2b03      	cmp	r3, #3
 800a958:	d032      	beq.n	800a9c0 <USBD_StdEPReq+0x240>
 800a95a:	e097      	b.n	800aa8c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a95c:	7bbb      	ldrb	r3, [r7, #14]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d007      	beq.n	800a972 <USBD_StdEPReq+0x1f2>
 800a962:	7bbb      	ldrb	r3, [r7, #14]
 800a964:	2b80      	cmp	r3, #128	@ 0x80
 800a966:	d004      	beq.n	800a972 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a968:	6839      	ldr	r1, [r7, #0]
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 fbed 	bl	800b14a <USBD_CtlError>
                break;
 800a970:	e091      	b.n	800aa96 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a972:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a976:	2b00      	cmp	r3, #0
 800a978:	da0b      	bge.n	800a992 <USBD_StdEPReq+0x212>
 800a97a:	7bbb      	ldrb	r3, [r7, #14]
 800a97c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a980:	4613      	mov	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	3310      	adds	r3, #16
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	4413      	add	r3, r2
 800a98e:	3304      	adds	r3, #4
 800a990:	e00b      	b.n	800a9aa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a992:	7bbb      	ldrb	r3, [r7, #14]
 800a994:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a998:	4613      	mov	r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4413      	add	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	3304      	adds	r3, #4
 800a9aa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	2202      	movs	r2, #2
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fc37 	bl	800b22c <USBD_CtlSendData>
              break;
 800a9be:	e06a      	b.n	800aa96 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a9c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	da11      	bge.n	800a9ec <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a9c8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ca:	f003 020f 	and.w	r2, r3, #15
 800a9ce:	6879      	ldr	r1, [r7, #4]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	440b      	add	r3, r1
 800a9da:	3324      	adds	r3, #36	@ 0x24
 800a9dc:	881b      	ldrh	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d117      	bne.n	800aa12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a9e2:	6839      	ldr	r1, [r7, #0]
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fbb0 	bl	800b14a <USBD_CtlError>
                  break;
 800a9ea:	e054      	b.n	800aa96 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	f003 020f 	and.w	r2, r3, #15
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	440b      	add	r3, r1
 800a9fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aa02:	881b      	ldrh	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d104      	bne.n	800aa12 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fb9d 	bl	800b14a <USBD_CtlError>
                  break;
 800aa10:	e041      	b.n	800aa96 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	da0b      	bge.n	800aa32 <USBD_StdEPReq+0x2b2>
 800aa1a:	7bbb      	ldrb	r3, [r7, #14]
 800aa1c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aa20:	4613      	mov	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4413      	add	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	3310      	adds	r3, #16
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	3304      	adds	r3, #4
 800aa30:	e00b      	b.n	800aa4a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa32:	7bbb      	ldrb	r3, [r7, #14]
 800aa34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa38:	4613      	mov	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	4413      	add	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	4413      	add	r3, r2
 800aa48:	3304      	adds	r3, #4
 800aa4a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d002      	beq.n	800aa58 <USBD_StdEPReq+0x2d8>
 800aa52:	7bbb      	ldrb	r3, [r7, #14]
 800aa54:	2b80      	cmp	r3, #128	@ 0x80
 800aa56:	d103      	bne.n	800aa60 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	601a      	str	r2, [r3, #0]
 800aa5e:	e00e      	b.n	800aa7e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	4619      	mov	r1, r3
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fffd 	bl	800ba64 <USBD_LL_IsStallEP>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d003      	beq.n	800aa78 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2201      	movs	r2, #1
 800aa74:	601a      	str	r2, [r3, #0]
 800aa76:	e002      	b.n	800aa7e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	2202      	movs	r2, #2
 800aa82:	4619      	mov	r1, r3
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fbd1 	bl	800b22c <USBD_CtlSendData>
              break;
 800aa8a:	e004      	b.n	800aa96 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fb5b 	bl	800b14a <USBD_CtlError>
              break;
 800aa94:	bf00      	nop
          }
          break;
 800aa96:	e004      	b.n	800aaa2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aa98:	6839      	ldr	r1, [r7, #0]
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 fb55 	bl	800b14a <USBD_CtlError>
          break;
 800aaa0:	bf00      	nop
      }
      break;
 800aaa2:	e005      	b.n	800aab0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fb4f 	bl	800b14a <USBD_CtlError>
      break;
 800aaac:	e000      	b.n	800aab0 <USBD_StdEPReq+0x330>
      break;
 800aaae:	bf00      	nop
  }

  return ret;
 800aab0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
	...

0800aabc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b084      	sub	sp, #16
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aac6:	2300      	movs	r3, #0
 800aac8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aaca:	2300      	movs	r3, #0
 800aacc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aace:	2300      	movs	r3, #0
 800aad0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	885b      	ldrh	r3, [r3, #2]
 800aad6:	0a1b      	lsrs	r3, r3, #8
 800aad8:	b29b      	uxth	r3, r3
 800aada:	3b01      	subs	r3, #1
 800aadc:	2b06      	cmp	r3, #6
 800aade:	f200 8128 	bhi.w	800ad32 <USBD_GetDescriptor+0x276>
 800aae2:	a201      	add	r2, pc, #4	@ (adr r2, 800aae8 <USBD_GetDescriptor+0x2c>)
 800aae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae8:	0800ab05 	.word	0x0800ab05
 800aaec:	0800ab1d 	.word	0x0800ab1d
 800aaf0:	0800ab5d 	.word	0x0800ab5d
 800aaf4:	0800ad33 	.word	0x0800ad33
 800aaf8:	0800ad33 	.word	0x0800ad33
 800aafc:	0800acd3 	.word	0x0800acd3
 800ab00:	0800acff 	.word	0x0800acff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	7c12      	ldrb	r2, [r2, #16]
 800ab10:	f107 0108 	add.w	r1, r7, #8
 800ab14:	4610      	mov	r0, r2
 800ab16:	4798      	blx	r3
 800ab18:	60f8      	str	r0, [r7, #12]
      break;
 800ab1a:	e112      	b.n	800ad42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	7c1b      	ldrb	r3, [r3, #16]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10d      	bne.n	800ab40 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2c:	f107 0208 	add.w	r2, r7, #8
 800ab30:	4610      	mov	r0, r2
 800ab32:	4798      	blx	r3
 800ab34:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ab3e:	e100      	b.n	800ad42 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab48:	f107 0208 	add.w	r2, r7, #8
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	4798      	blx	r3
 800ab50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	3301      	adds	r3, #1
 800ab56:	2202      	movs	r2, #2
 800ab58:	701a      	strb	r2, [r3, #0]
      break;
 800ab5a:	e0f2      	b.n	800ad42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	885b      	ldrh	r3, [r3, #2]
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	2b05      	cmp	r3, #5
 800ab64:	f200 80ac 	bhi.w	800acc0 <USBD_GetDescriptor+0x204>
 800ab68:	a201      	add	r2, pc, #4	@ (adr r2, 800ab70 <USBD_GetDescriptor+0xb4>)
 800ab6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6e:	bf00      	nop
 800ab70:	0800ab89 	.word	0x0800ab89
 800ab74:	0800abbd 	.word	0x0800abbd
 800ab78:	0800abf1 	.word	0x0800abf1
 800ab7c:	0800ac25 	.word	0x0800ac25
 800ab80:	0800ac59 	.word	0x0800ac59
 800ab84:	0800ac8d 	.word	0x0800ac8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	7c12      	ldrb	r2, [r2, #16]
 800aba0:	f107 0108 	add.w	r1, r7, #8
 800aba4:	4610      	mov	r0, r2
 800aba6:	4798      	blx	r3
 800aba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abaa:	e091      	b.n	800acd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 facb 	bl	800b14a <USBD_CtlError>
            err++;
 800abb4:	7afb      	ldrb	r3, [r7, #11]
 800abb6:	3301      	adds	r3, #1
 800abb8:	72fb      	strb	r3, [r7, #11]
          break;
 800abba:	e089      	b.n	800acd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00b      	beq.n	800abe0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	7c12      	ldrb	r2, [r2, #16]
 800abd4:	f107 0108 	add.w	r1, r7, #8
 800abd8:	4610      	mov	r0, r2
 800abda:	4798      	blx	r3
 800abdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abde:	e077      	b.n	800acd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fab1 	bl	800b14a <USBD_CtlError>
            err++;
 800abe8:	7afb      	ldrb	r3, [r7, #11]
 800abea:	3301      	adds	r3, #1
 800abec:	72fb      	strb	r3, [r7, #11]
          break;
 800abee:	e06f      	b.n	800acd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00b      	beq.n	800ac14 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	7c12      	ldrb	r2, [r2, #16]
 800ac08:	f107 0108 	add.w	r1, r7, #8
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
 800ac10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac12:	e05d      	b.n	800acd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa97 	bl	800b14a <USBD_CtlError>
            err++;
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	72fb      	strb	r3, [r7, #11]
          break;
 800ac22:	e055      	b.n	800acd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00b      	beq.n	800ac48 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	7c12      	ldrb	r2, [r2, #16]
 800ac3c:	f107 0108 	add.w	r1, r7, #8
 800ac40:	4610      	mov	r0, r2
 800ac42:	4798      	blx	r3
 800ac44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac46:	e043      	b.n	800acd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fa7d 	bl	800b14a <USBD_CtlError>
            err++;
 800ac50:	7afb      	ldrb	r3, [r7, #11]
 800ac52:	3301      	adds	r3, #1
 800ac54:	72fb      	strb	r3, [r7, #11]
          break;
 800ac56:	e03b      	b.n	800acd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac5e:	695b      	ldr	r3, [r3, #20]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d00b      	beq.n	800ac7c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	687a      	ldr	r2, [r7, #4]
 800ac6e:	7c12      	ldrb	r2, [r2, #16]
 800ac70:	f107 0108 	add.w	r1, r7, #8
 800ac74:	4610      	mov	r0, r2
 800ac76:	4798      	blx	r3
 800ac78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac7a:	e029      	b.n	800acd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac7c:	6839      	ldr	r1, [r7, #0]
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fa63 	bl	800b14a <USBD_CtlError>
            err++;
 800ac84:	7afb      	ldrb	r3, [r7, #11]
 800ac86:	3301      	adds	r3, #1
 800ac88:	72fb      	strb	r3, [r7, #11]
          break;
 800ac8a:	e021      	b.n	800acd0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac92:	699b      	ldr	r3, [r3, #24]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00b      	beq.n	800acb0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	7c12      	ldrb	r2, [r2, #16]
 800aca4:	f107 0108 	add.w	r1, r7, #8
 800aca8:	4610      	mov	r0, r2
 800acaa:	4798      	blx	r3
 800acac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acae:	e00f      	b.n	800acd0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800acb0:	6839      	ldr	r1, [r7, #0]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fa49 	bl	800b14a <USBD_CtlError>
            err++;
 800acb8:	7afb      	ldrb	r3, [r7, #11]
 800acba:	3301      	adds	r3, #1
 800acbc:	72fb      	strb	r3, [r7, #11]
          break;
 800acbe:	e007      	b.n	800acd0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fa41 	bl	800b14a <USBD_CtlError>
          err++;
 800acc8:	7afb      	ldrb	r3, [r7, #11]
 800acca:	3301      	adds	r3, #1
 800accc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800acce:	bf00      	nop
      }
      break;
 800acd0:	e037      	b.n	800ad42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	7c1b      	ldrb	r3, [r3, #16]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d109      	bne.n	800acee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ace0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ace2:	f107 0208 	add.w	r2, r7, #8
 800ace6:	4610      	mov	r0, r2
 800ace8:	4798      	blx	r3
 800acea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acec:	e029      	b.n	800ad42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800acee:	6839      	ldr	r1, [r7, #0]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fa2a 	bl	800b14a <USBD_CtlError>
        err++;
 800acf6:	7afb      	ldrb	r3, [r7, #11]
 800acf8:	3301      	adds	r3, #1
 800acfa:	72fb      	strb	r3, [r7, #11]
      break;
 800acfc:	e021      	b.n	800ad42 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	7c1b      	ldrb	r3, [r3, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10d      	bne.n	800ad22 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad0e:	f107 0208 	add.w	r2, r7, #8
 800ad12:	4610      	mov	r0, r2
 800ad14:	4798      	blx	r3
 800ad16:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	2207      	movs	r2, #7
 800ad1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad20:	e00f      	b.n	800ad42 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fa10 	bl	800b14a <USBD_CtlError>
        err++;
 800ad2a:	7afb      	ldrb	r3, [r7, #11]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	72fb      	strb	r3, [r7, #11]
      break;
 800ad30:	e007      	b.n	800ad42 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 fa08 	bl	800b14a <USBD_CtlError>
      err++;
 800ad3a:	7afb      	ldrb	r3, [r7, #11]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	72fb      	strb	r3, [r7, #11]
      break;
 800ad40:	bf00      	nop
  }

  if (err != 0U)
 800ad42:	7afb      	ldrb	r3, [r7, #11]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d11e      	bne.n	800ad86 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	88db      	ldrh	r3, [r3, #6]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d016      	beq.n	800ad7e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ad50:	893b      	ldrh	r3, [r7, #8]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00e      	beq.n	800ad74 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	88da      	ldrh	r2, [r3, #6]
 800ad5a:	893b      	ldrh	r3, [r7, #8]
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	bf28      	it	cs
 800ad60:	4613      	movcs	r3, r2
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad66:	893b      	ldrh	r3, [r7, #8]
 800ad68:	461a      	mov	r2, r3
 800ad6a:	68f9      	ldr	r1, [r7, #12]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fa5d 	bl	800b22c <USBD_CtlSendData>
 800ad72:	e009      	b.n	800ad88 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f9e7 	bl	800b14a <USBD_CtlError>
 800ad7c:	e004      	b.n	800ad88 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	f000 faae 	bl	800b2e0 <USBD_CtlSendStatus>
 800ad84:	e000      	b.n	800ad88 <USBD_GetDescriptor+0x2cc>
    return;
 800ad86:	bf00      	nop
  }
}
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop

0800ad90 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	889b      	ldrh	r3, [r3, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d131      	bne.n	800ae06 <USBD_SetAddress+0x76>
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	88db      	ldrh	r3, [r3, #6]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d12d      	bne.n	800ae06 <USBD_SetAddress+0x76>
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	885b      	ldrh	r3, [r3, #2]
 800adae:	2b7f      	cmp	r3, #127	@ 0x7f
 800adb0:	d829      	bhi.n	800ae06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	885b      	ldrh	r3, [r3, #2]
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adbc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adc4:	b2db      	uxtb	r3, r3
 800adc6:	2b03      	cmp	r3, #3
 800adc8:	d104      	bne.n	800add4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800adca:	6839      	ldr	r1, [r7, #0]
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 f9bc 	bl	800b14a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800add2:	e01d      	b.n	800ae10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	7bfa      	ldrb	r2, [r7, #15]
 800add8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fe6b 	bl	800babc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 fa7a 	bl	800b2e0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800adec:	7bfb      	ldrb	r3, [r7, #15]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d004      	beq.n	800adfc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2202      	movs	r2, #2
 800adf6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adfa:	e009      	b.n	800ae10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2201      	movs	r2, #1
 800ae00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae04:	e004      	b.n	800ae10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f99e 	bl	800b14a <USBD_CtlError>
  }
}
 800ae0e:	bf00      	nop
 800ae10:	bf00      	nop
 800ae12:	3710      	adds	r7, #16
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	885b      	ldrh	r3, [r3, #2]
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	4b4e      	ldr	r3, [pc, #312]	@ (800af68 <USBD_SetConfig+0x150>)
 800ae2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae30:	4b4d      	ldr	r3, [pc, #308]	@ (800af68 <USBD_SetConfig+0x150>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d905      	bls.n	800ae44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ae38:	6839      	ldr	r1, [r7, #0]
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f985 	bl	800b14a <USBD_CtlError>
    return USBD_FAIL;
 800ae40:	2303      	movs	r3, #3
 800ae42:	e08c      	b.n	800af5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	d002      	beq.n	800ae56 <USBD_SetConfig+0x3e>
 800ae50:	2b03      	cmp	r3, #3
 800ae52:	d029      	beq.n	800aea8 <USBD_SetConfig+0x90>
 800ae54:	e075      	b.n	800af42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae56:	4b44      	ldr	r3, [pc, #272]	@ (800af68 <USBD_SetConfig+0x150>)
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d020      	beq.n	800aea0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ae5e:	4b42      	ldr	r3, [pc, #264]	@ (800af68 <USBD_SetConfig+0x150>)
 800ae60:	781b      	ldrb	r3, [r3, #0]
 800ae62:	461a      	mov	r2, r3
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae68:	4b3f      	ldr	r3, [pc, #252]	@ (800af68 <USBD_SetConfig+0x150>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7fe ffe3 	bl	8009e3a <USBD_SetClassConfig>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d008      	beq.n	800ae90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f962 	bl	800b14a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2202      	movs	r2, #2
 800ae8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae8e:	e065      	b.n	800af5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fa25 	bl	800b2e0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2203      	movs	r2, #3
 800ae9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ae9e:	e05d      	b.n	800af5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fa1d 	bl	800b2e0 <USBD_CtlSendStatus>
      break;
 800aea6:	e059      	b.n	800af5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aea8:	4b2f      	ldr	r3, [pc, #188]	@ (800af68 <USBD_SetConfig+0x150>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d112      	bne.n	800aed6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800aeb8:	4b2b      	ldr	r3, [pc, #172]	@ (800af68 <USBD_SetConfig+0x150>)
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	461a      	mov	r2, r3
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aec2:	4b29      	ldr	r3, [pc, #164]	@ (800af68 <USBD_SetConfig+0x150>)
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	4619      	mov	r1, r3
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7fe ffd2 	bl	8009e72 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 fa06 	bl	800b2e0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aed4:	e042      	b.n	800af5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800aed6:	4b24      	ldr	r3, [pc, #144]	@ (800af68 <USBD_SetConfig+0x150>)
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	461a      	mov	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d02a      	beq.n	800af3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7fe ffc0 	bl	8009e72 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800aef2:	4b1d      	ldr	r3, [pc, #116]	@ (800af68 <USBD_SetConfig+0x150>)
 800aef4:	781b      	ldrb	r3, [r3, #0]
 800aef6:	461a      	mov	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aefc:	4b1a      	ldr	r3, [pc, #104]	@ (800af68 <USBD_SetConfig+0x150>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	4619      	mov	r1, r3
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f7fe ff99 	bl	8009e3a <USBD_SetClassConfig>
 800af08:	4603      	mov	r3, r0
 800af0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af0c:	7bfb      	ldrb	r3, [r7, #15]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d00f      	beq.n	800af32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800af12:	6839      	ldr	r1, [r7, #0]
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f918 	bl	800b14a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	b2db      	uxtb	r3, r3
 800af20:	4619      	mov	r1, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f7fe ffa5 	bl	8009e72 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2202      	movs	r2, #2
 800af2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800af30:	e014      	b.n	800af5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f9d4 	bl	800b2e0 <USBD_CtlSendStatus>
      break;
 800af38:	e010      	b.n	800af5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f9d0 	bl	800b2e0 <USBD_CtlSendStatus>
      break;
 800af40:	e00c      	b.n	800af5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800af42:	6839      	ldr	r1, [r7, #0]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f900 	bl	800b14a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af4a:	4b07      	ldr	r3, [pc, #28]	@ (800af68 <USBD_SetConfig+0x150>)
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7fe ff8e 	bl	8009e72 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af56:	2303      	movs	r3, #3
 800af58:	73fb      	strb	r3, [r7, #15]
      break;
 800af5a:	bf00      	nop
  }

  return ret;
 800af5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5e:	4618      	mov	r0, r3
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20000654 	.word	0x20000654

0800af6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	88db      	ldrh	r3, [r3, #6]
 800af7a:	2b01      	cmp	r3, #1
 800af7c:	d004      	beq.n	800af88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af7e:	6839      	ldr	r1, [r7, #0]
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f000 f8e2 	bl	800b14a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af86:	e023      	b.n	800afd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2b02      	cmp	r3, #2
 800af92:	dc02      	bgt.n	800af9a <USBD_GetConfig+0x2e>
 800af94:	2b00      	cmp	r3, #0
 800af96:	dc03      	bgt.n	800afa0 <USBD_GetConfig+0x34>
 800af98:	e015      	b.n	800afc6 <USBD_GetConfig+0x5a>
 800af9a:	2b03      	cmp	r3, #3
 800af9c:	d00b      	beq.n	800afb6 <USBD_GetConfig+0x4a>
 800af9e:	e012      	b.n	800afc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	3308      	adds	r3, #8
 800afaa:	2201      	movs	r2, #1
 800afac:	4619      	mov	r1, r3
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f000 f93c 	bl	800b22c <USBD_CtlSendData>
        break;
 800afb4:	e00c      	b.n	800afd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	3304      	adds	r3, #4
 800afba:	2201      	movs	r2, #1
 800afbc:	4619      	mov	r1, r3
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f934 	bl	800b22c <USBD_CtlSendData>
        break;
 800afc4:	e004      	b.n	800afd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 f8be 	bl	800b14a <USBD_CtlError>
        break;
 800afce:	bf00      	nop
}
 800afd0:	bf00      	nop
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	3b01      	subs	r3, #1
 800afec:	2b02      	cmp	r3, #2
 800afee:	d81e      	bhi.n	800b02e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	88db      	ldrh	r3, [r3, #6]
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d004      	beq.n	800b002 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800aff8:	6839      	ldr	r1, [r7, #0]
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 f8a5 	bl	800b14a <USBD_CtlError>
        break;
 800b000:	e01a      	b.n	800b038 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2201      	movs	r2, #1
 800b006:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	f043 0202 	orr.w	r2, r3, #2
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	330c      	adds	r3, #12
 800b022:	2202      	movs	r2, #2
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f900 	bl	800b22c <USBD_CtlSendData>
      break;
 800b02c:	e004      	b.n	800b038 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f88a 	bl	800b14a <USBD_CtlError>
      break;
 800b036:	bf00      	nop
  }
}
 800b038:	bf00      	nop
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	885b      	ldrh	r3, [r3, #2]
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d107      	bne.n	800b062 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2201      	movs	r2, #1
 800b056:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f000 f940 	bl	800b2e0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b060:	e013      	b.n	800b08a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	885b      	ldrh	r3, [r3, #2]
 800b066:	2b02      	cmp	r3, #2
 800b068:	d10b      	bne.n	800b082 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	889b      	ldrh	r3, [r3, #4]
 800b06e:	0a1b      	lsrs	r3, r3, #8
 800b070:	b29b      	uxth	r3, r3
 800b072:	b2da      	uxtb	r2, r3
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f930 	bl	800b2e0 <USBD_CtlSendStatus>
}
 800b080:	e003      	b.n	800b08a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b082:	6839      	ldr	r1, [r7, #0]
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f000 f860 	bl	800b14a <USBD_CtlError>
}
 800b08a:	bf00      	nop
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}

0800b092 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b082      	sub	sp, #8
 800b096:	af00      	add	r7, sp, #0
 800b098:	6078      	str	r0, [r7, #4]
 800b09a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	2b02      	cmp	r3, #2
 800b0a8:	d80b      	bhi.n	800b0c2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	885b      	ldrh	r3, [r3, #2]
 800b0ae:	2b01      	cmp	r3, #1
 800b0b0:	d10c      	bne.n	800b0cc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 f910 	bl	800b2e0 <USBD_CtlSendStatus>
      }
      break;
 800b0c0:	e004      	b.n	800b0cc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b0c2:	6839      	ldr	r1, [r7, #0]
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f840 	bl	800b14a <USBD_CtlError>
      break;
 800b0ca:	e000      	b.n	800b0ce <USBD_ClrFeature+0x3c>
      break;
 800b0cc:	bf00      	nop
  }
}
 800b0ce:	bf00      	nop
 800b0d0:	3708      	adds	r7, #8
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b084      	sub	sp, #16
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
 800b0de:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	781a      	ldrb	r2, [r3, #0]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	781a      	ldrb	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b100:	68f8      	ldr	r0, [r7, #12]
 800b102:	f7ff fa40 	bl	800a586 <SWAPBYTE>
 800b106:	4603      	mov	r3, r0
 800b108:	461a      	mov	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	3301      	adds	r3, #1
 800b112:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	3301      	adds	r3, #1
 800b118:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f7ff fa33 	bl	800a586 <SWAPBYTE>
 800b120:	4603      	mov	r3, r0
 800b122:	461a      	mov	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3301      	adds	r3, #1
 800b12c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	3301      	adds	r3, #1
 800b132:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b134:	68f8      	ldr	r0, [r7, #12]
 800b136:	f7ff fa26 	bl	800a586 <SWAPBYTE>
 800b13a:	4603      	mov	r3, r0
 800b13c:	461a      	mov	r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	80da      	strh	r2, [r3, #6]
}
 800b142:	bf00      	nop
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b14a:	b580      	push	{r7, lr}
 800b14c:	b082      	sub	sp, #8
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b154:	2180      	movs	r1, #128	@ 0x80
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 fc46 	bl	800b9e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b15c:	2100      	movs	r1, #0
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fc42 	bl	800b9e8 <USBD_LL_StallEP>
}
 800b164:	bf00      	nop
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	60f8      	str	r0, [r7, #12]
 800b174:	60b9      	str	r1, [r7, #8]
 800b176:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b178:	2300      	movs	r3, #0
 800b17a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d036      	beq.n	800b1f0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b186:	6938      	ldr	r0, [r7, #16]
 800b188:	f000 f836 	bl	800b1f8 <USBD_GetLen>
 800b18c:	4603      	mov	r3, r0
 800b18e:	3301      	adds	r3, #1
 800b190:	b29b      	uxth	r3, r3
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	b29a      	uxth	r2, r3
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b19a:	7dfb      	ldrb	r3, [r7, #23]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	4413      	add	r3, r2
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	7812      	ldrb	r2, [r2, #0]
 800b1a4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1a6:	7dfb      	ldrb	r3, [r7, #23]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b1ac:	7dfb      	ldrb	r3, [r7, #23]
 800b1ae:	68ba      	ldr	r2, [r7, #8]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	2203      	movs	r2, #3
 800b1b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800b1b6:	7dfb      	ldrb	r3, [r7, #23]
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b1bc:	e013      	b.n	800b1e6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
 800b1c0:	68ba      	ldr	r2, [r7, #8]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	693a      	ldr	r2, [r7, #16]
 800b1c6:	7812      	ldrb	r2, [r2, #0]
 800b1c8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	3301      	adds	r3, #1
 800b1ce:	613b      	str	r3, [r7, #16]
    idx++;
 800b1d0:	7dfb      	ldrb	r3, [r7, #23]
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b1d6:	7dfb      	ldrb	r3, [r7, #23]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	4413      	add	r3, r2
 800b1dc:	2200      	movs	r2, #0
 800b1de:	701a      	strb	r2, [r3, #0]
    idx++;
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1e7      	bne.n	800b1be <USBD_GetString+0x52>
 800b1ee:	e000      	b.n	800b1f2 <USBD_GetString+0x86>
    return;
 800b1f0:	bf00      	nop
  }
}
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b085      	sub	sp, #20
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b200:	2300      	movs	r3, #0
 800b202:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b208:	e005      	b.n	800b216 <USBD_GetLen+0x1e>
  {
    len++;
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
 800b20c:	3301      	adds	r3, #1
 800b20e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	3301      	adds	r3, #1
 800b214:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d1f5      	bne.n	800b20a <USBD_GetLen+0x12>
  }

  return len;
 800b21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3714      	adds	r7, #20
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b084      	sub	sp, #16
 800b230:	af00      	add	r7, sp, #0
 800b232:	60f8      	str	r0, [r7, #12]
 800b234:	60b9      	str	r1, [r7, #8]
 800b236:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	2202      	movs	r2, #2
 800b23c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	2100      	movs	r1, #0
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f000 fc51 	bl	800bafa <USBD_LL_Transmit>

  return USBD_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b084      	sub	sp, #16
 800b266:	af00      	add	r7, sp, #0
 800b268:	60f8      	str	r0, [r7, #12]
 800b26a:	60b9      	str	r1, [r7, #8]
 800b26c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	2100      	movs	r1, #0
 800b274:	68f8      	ldr	r0, [r7, #12]
 800b276:	f000 fc40 	bl	800bafa <USBD_LL_Transmit>

  return USBD_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2203      	movs	r2, #3
 800b294:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	2100      	movs	r1, #0
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f000 fc44 	bl	800bb3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}

0800b2be <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b2be:	b580      	push	{r7, lr}
 800b2c0:	b084      	sub	sp, #16
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	60f8      	str	r0, [r7, #12]
 800b2c6:	60b9      	str	r1, [r7, #8]
 800b2c8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	68ba      	ldr	r2, [r7, #8]
 800b2ce:	2100      	movs	r1, #0
 800b2d0:	68f8      	ldr	r0, [r7, #12]
 800b2d2:	f000 fc33 	bl	800bb3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2204      	movs	r2, #4
 800b2ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	2100      	movs	r1, #0
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fbff 	bl	800bafa <USBD_LL_Transmit>

  return USBD_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3708      	adds	r7, #8
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b082      	sub	sp, #8
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2205      	movs	r2, #5
 800b312:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b316:	2300      	movs	r3, #0
 800b318:	2200      	movs	r2, #0
 800b31a:	2100      	movs	r1, #0
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 fc0d 	bl	800bb3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3708      	adds	r7, #8
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b330:	2200      	movs	r2, #0
 800b332:	4912      	ldr	r1, [pc, #72]	@ (800b37c <MX_USB_DEVICE_Init+0x50>)
 800b334:	4812      	ldr	r0, [pc, #72]	@ (800b380 <MX_USB_DEVICE_Init+0x54>)
 800b336:	f7fe fd03 	bl	8009d40 <USBD_Init>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d001      	beq.n	800b344 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b340:	f7f7 fa52 	bl	80027e8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800b344:	490f      	ldr	r1, [pc, #60]	@ (800b384 <MX_USB_DEVICE_Init+0x58>)
 800b346:	480e      	ldr	r0, [pc, #56]	@ (800b380 <MX_USB_DEVICE_Init+0x54>)
 800b348:	f7fe fd2a 	bl	8009da0 <USBD_RegisterClass>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d001      	beq.n	800b356 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b352:	f7f7 fa49 	bl	80027e8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800b356:	490c      	ldr	r1, [pc, #48]	@ (800b388 <MX_USB_DEVICE_Init+0x5c>)
 800b358:	4809      	ldr	r0, [pc, #36]	@ (800b380 <MX_USB_DEVICE_Init+0x54>)
 800b35a:	f7fe fcd7 	bl	8009d0c <USBD_CUSTOM_HID_RegisterInterface>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d001      	beq.n	800b368 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b364:	f7f7 fa40 	bl	80027e8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b368:	4805      	ldr	r0, [pc, #20]	@ (800b380 <MX_USB_DEVICE_Init+0x54>)
 800b36a:	f7fe fd4f 	bl	8009e0c <USBD_Start>
 800b36e:	4603      	mov	r3, r0
 800b370:	2b00      	cmp	r3, #0
 800b372:	d001      	beq.n	800b378 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b374:	f7f7 fa38 	bl	80027e8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b378:	bf00      	nop
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	200000cc 	.word	0x200000cc
 800b380:	20000658 	.word	0x20000658
 800b384:	2000000c 	.word	0x2000000c
 800b388:	200000bc 	.word	0x200000bc

0800b38c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800b38c:	b480      	push	{r7}
 800b38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b390:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b392:	4618      	mov	r0, r3
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800b39c:	b480      	push	{r7}
 800b39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800b3a0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <CUSTOM_HID_OutEvent_FS>:
  * @brief  Manage the CUSTOM HID class events
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 800b3ac:	b4f0      	push	{r4, r5, r6, r7}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 6 */

	// Copy the reception buffer to report_buffer
	memcpy(report_buffer, state, 64);
 800b3b4:	4a0e      	ldr	r2, [pc, #56]	@ (800b3f0 <CUSTOM_HID_OutEvent_FS+0x44>)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 800b3be:	4602      	mov	r2, r0
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	f8d1 c000 	ldr.w	ip, [r1]
 800b3c6:	684e      	ldr	r6, [r1, #4]
 800b3c8:	688d      	ldr	r5, [r1, #8]
 800b3ca:	68c9      	ldr	r1, [r1, #12]
 800b3cc:	f8c2 c000 	str.w	ip, [r2]
 800b3d0:	6056      	str	r6, [r2, #4]
 800b3d2:	6095      	str	r5, [r2, #8]
 800b3d4:	60d1      	str	r1, [r2, #12]
 800b3d6:	3310      	adds	r3, #16
 800b3d8:	3010      	adds	r0, #16
 800b3da:	42a3      	cmp	r3, r4
 800b3dc:	d1ef      	bne.n	800b3be <CUSTOM_HID_OutEvent_FS+0x12>

	flag_rx = 1;
 800b3de:	4b05      	ldr	r3, [pc, #20]	@ (800b3f4 <CUSTOM_HID_OutEvent_FS+0x48>)
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	701a      	strb	r2, [r3, #0]

	return (USBD_OK);
 800b3e4:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bcf0      	pop	{r4, r5, r6, r7}
 800b3ee:	4770      	bx	lr
 800b3f0:	2000030c 	.word	0x2000030c
 800b3f4:	2000034c 	.word	0x2000034c

0800b3f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	4603      	mov	r3, r0
 800b400:	6039      	str	r1, [r7, #0]
 800b402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	2212      	movs	r2, #18
 800b408:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b40a:	4b03      	ldr	r3, [pc, #12]	@ (800b418 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr
 800b418:	200000e8 	.word	0x200000e8

0800b41c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b083      	sub	sp, #12
 800b420:	af00      	add	r7, sp, #0
 800b422:	4603      	mov	r3, r0
 800b424:	6039      	str	r1, [r7, #0]
 800b426:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	2204      	movs	r2, #4
 800b42c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b42e:	4b03      	ldr	r3, [pc, #12]	@ (800b43c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b430:	4618      	mov	r0, r3
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr
 800b43c:	200000fc 	.word	0x200000fc

0800b440 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	4603      	mov	r3, r0
 800b448:	6039      	str	r1, [r7, #0]
 800b44a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d105      	bne.n	800b45e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b452:	683a      	ldr	r2, [r7, #0]
 800b454:	4907      	ldr	r1, [pc, #28]	@ (800b474 <USBD_FS_ProductStrDescriptor+0x34>)
 800b456:	4808      	ldr	r0, [pc, #32]	@ (800b478 <USBD_FS_ProductStrDescriptor+0x38>)
 800b458:	f7ff fe88 	bl	800b16c <USBD_GetString>
 800b45c:	e004      	b.n	800b468 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	4904      	ldr	r1, [pc, #16]	@ (800b474 <USBD_FS_ProductStrDescriptor+0x34>)
 800b462:	4805      	ldr	r0, [pc, #20]	@ (800b478 <USBD_FS_ProductStrDescriptor+0x38>)
 800b464:	f7ff fe82 	bl	800b16c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b468:	4b02      	ldr	r3, [pc, #8]	@ (800b474 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3708      	adds	r7, #8
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	20000934 	.word	0x20000934
 800b478:	0800f710 	.word	0x0800f710

0800b47c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	4603      	mov	r3, r0
 800b484:	6039      	str	r1, [r7, #0]
 800b486:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b488:	683a      	ldr	r2, [r7, #0]
 800b48a:	4904      	ldr	r1, [pc, #16]	@ (800b49c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b48c:	4804      	ldr	r0, [pc, #16]	@ (800b4a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b48e:	f7ff fe6d 	bl	800b16c <USBD_GetString>
  return USBD_StrDesc;
 800b492:	4b02      	ldr	r3, [pc, #8]	@ (800b49c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b494:	4618      	mov	r0, r3
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}
 800b49c:	20000934 	.word	0x20000934
 800b4a0:	0800f730 	.word	0x0800f730

0800b4a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	6039      	str	r1, [r7, #0]
 800b4ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	221a      	movs	r2, #26
 800b4b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4b6:	f000 f843 	bl	800b540 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b4ba:	4b02      	ldr	r3, [pc, #8]	@ (800b4c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3708      	adds	r7, #8
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}
 800b4c4:	20000100 	.word	0x20000100

0800b4c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	6039      	str	r1, [r7, #0]
 800b4d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b4d4:	79fb      	ldrb	r3, [r7, #7]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d105      	bne.n	800b4e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4da:	683a      	ldr	r2, [r7, #0]
 800b4dc:	4907      	ldr	r1, [pc, #28]	@ (800b4fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4de:	4808      	ldr	r0, [pc, #32]	@ (800b500 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4e0:	f7ff fe44 	bl	800b16c <USBD_GetString>
 800b4e4:	e004      	b.n	800b4f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	4904      	ldr	r1, [pc, #16]	@ (800b4fc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b4ea:	4805      	ldr	r0, [pc, #20]	@ (800b500 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b4ec:	f7ff fe3e 	bl	800b16c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4f0:	4b02      	ldr	r3, [pc, #8]	@ (800b4fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3708      	adds	r7, #8
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop
 800b4fc:	20000934 	.word	0x20000934
 800b500:	0800f744 	.word	0x0800f744

0800b504 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b082      	sub	sp, #8
 800b508:	af00      	add	r7, sp, #0
 800b50a:	4603      	mov	r3, r0
 800b50c:	6039      	str	r1, [r7, #0]
 800b50e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b510:	79fb      	ldrb	r3, [r7, #7]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d105      	bne.n	800b522 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	4907      	ldr	r1, [pc, #28]	@ (800b538 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b51a:	4808      	ldr	r0, [pc, #32]	@ (800b53c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b51c:	f7ff fe26 	bl	800b16c <USBD_GetString>
 800b520:	e004      	b.n	800b52c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	4904      	ldr	r1, [pc, #16]	@ (800b538 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b526:	4805      	ldr	r0, [pc, #20]	@ (800b53c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b528:	f7ff fe20 	bl	800b16c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b52c:	4b02      	ldr	r3, [pc, #8]	@ (800b538 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b52e:	4618      	mov	r0, r3
 800b530:	3708      	adds	r7, #8
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	20000934 	.word	0x20000934
 800b53c:	0800f758 	.word	0x0800f758

0800b540 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b546:	4b0f      	ldr	r3, [pc, #60]	@ (800b584 <Get_SerialNum+0x44>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b54c:	4b0e      	ldr	r3, [pc, #56]	@ (800b588 <Get_SerialNum+0x48>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b552:	4b0e      	ldr	r3, [pc, #56]	@ (800b58c <Get_SerialNum+0x4c>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4413      	add	r3, r2
 800b55e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d009      	beq.n	800b57a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b566:	2208      	movs	r2, #8
 800b568:	4909      	ldr	r1, [pc, #36]	@ (800b590 <Get_SerialNum+0x50>)
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f000 f814 	bl	800b598 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b570:	2204      	movs	r2, #4
 800b572:	4908      	ldr	r1, [pc, #32]	@ (800b594 <Get_SerialNum+0x54>)
 800b574:	68b8      	ldr	r0, [r7, #8]
 800b576:	f000 f80f 	bl	800b598 <IntToUnicode>
  }
}
 800b57a:	bf00      	nop
 800b57c:	3710      	adds	r7, #16
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	1fff7a10 	.word	0x1fff7a10
 800b588:	1fff7a14 	.word	0x1fff7a14
 800b58c:	1fff7a18 	.word	0x1fff7a18
 800b590:	20000102 	.word	0x20000102
 800b594:	20000112 	.word	0x20000112

0800b598 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b598:	b480      	push	{r7}
 800b59a:	b087      	sub	sp, #28
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60f8      	str	r0, [r7, #12]
 800b5a0:	60b9      	str	r1, [r7, #8]
 800b5a2:	4613      	mov	r3, r2
 800b5a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	75fb      	strb	r3, [r7, #23]
 800b5ae:	e027      	b.n	800b600 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	0f1b      	lsrs	r3, r3, #28
 800b5b4:	2b09      	cmp	r3, #9
 800b5b6:	d80b      	bhi.n	800b5d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	0f1b      	lsrs	r3, r3, #28
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	7dfb      	ldrb	r3, [r7, #23]
 800b5c0:	005b      	lsls	r3, r3, #1
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	68bb      	ldr	r3, [r7, #8]
 800b5c6:	440b      	add	r3, r1
 800b5c8:	3230      	adds	r2, #48	@ 0x30
 800b5ca:	b2d2      	uxtb	r2, r2
 800b5cc:	701a      	strb	r2, [r3, #0]
 800b5ce:	e00a      	b.n	800b5e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	0f1b      	lsrs	r3, r3, #28
 800b5d4:	b2da      	uxtb	r2, r3
 800b5d6:	7dfb      	ldrb	r3, [r7, #23]
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	4619      	mov	r1, r3
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	440b      	add	r3, r1
 800b5e0:	3237      	adds	r2, #55	@ 0x37
 800b5e2:	b2d2      	uxtb	r2, r2
 800b5e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	011b      	lsls	r3, r3, #4
 800b5ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b5ec:	7dfb      	ldrb	r3, [r7, #23]
 800b5ee:	005b      	lsls	r3, r3, #1
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b5fa:	7dfb      	ldrb	r3, [r7, #23]
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	75fb      	strb	r3, [r7, #23]
 800b600:	7dfa      	ldrb	r2, [r7, #23]
 800b602:	79fb      	ldrb	r3, [r7, #7]
 800b604:	429a      	cmp	r2, r3
 800b606:	d3d3      	bcc.n	800b5b0 <IntToUnicode+0x18>
  }
}
 800b608:	bf00      	nop
 800b60a:	bf00      	nop
 800b60c:	371c      	adds	r7, #28
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
	...

0800b618 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b08a      	sub	sp, #40	@ 0x28
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b620:	f107 0314 	add.w	r3, r7, #20
 800b624:	2200      	movs	r2, #0
 800b626:	601a      	str	r2, [r3, #0]
 800b628:	605a      	str	r2, [r3, #4]
 800b62a:	609a      	str	r2, [r3, #8]
 800b62c:	60da      	str	r2, [r3, #12]
 800b62e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b638:	d13a      	bne.n	800b6b0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b63a:	2300      	movs	r3, #0
 800b63c:	613b      	str	r3, [r7, #16]
 800b63e:	4b1e      	ldr	r3, [pc, #120]	@ (800b6b8 <HAL_PCD_MspInit+0xa0>)
 800b640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b642:	4a1d      	ldr	r2, [pc, #116]	@ (800b6b8 <HAL_PCD_MspInit+0xa0>)
 800b644:	f043 0301 	orr.w	r3, r3, #1
 800b648:	6313      	str	r3, [r2, #48]	@ 0x30
 800b64a:	4b1b      	ldr	r3, [pc, #108]	@ (800b6b8 <HAL_PCD_MspInit+0xa0>)
 800b64c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b64e:	f003 0301 	and.w	r3, r3, #1
 800b652:	613b      	str	r3, [r7, #16]
 800b654:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b656:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b65a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b65c:	2302      	movs	r3, #2
 800b65e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b660:	2300      	movs	r3, #0
 800b662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b664:	2303      	movs	r3, #3
 800b666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b668:	230a      	movs	r3, #10
 800b66a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b66c:	f107 0314 	add.w	r3, r7, #20
 800b670:	4619      	mov	r1, r3
 800b672:	4812      	ldr	r0, [pc, #72]	@ (800b6bc <HAL_PCD_MspInit+0xa4>)
 800b674:	f7f7 fff4 	bl	8003660 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b678:	4b0f      	ldr	r3, [pc, #60]	@ (800b6b8 <HAL_PCD_MspInit+0xa0>)
 800b67a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b67c:	4a0e      	ldr	r2, [pc, #56]	@ (800b6b8 <HAL_PCD_MspInit+0xa0>)
 800b67e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b682:	6353      	str	r3, [r2, #52]	@ 0x34
 800b684:	2300      	movs	r3, #0
 800b686:	60fb      	str	r3, [r7, #12]
 800b688:	4b0b      	ldr	r3, [pc, #44]	@ (800b6b8 <HAL_PCD_MspInit+0xa0>)
 800b68a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b68c:	4a0a      	ldr	r2, [pc, #40]	@ (800b6b8 <HAL_PCD_MspInit+0xa0>)
 800b68e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b692:	6453      	str	r3, [r2, #68]	@ 0x44
 800b694:	4b08      	ldr	r3, [pc, #32]	@ (800b6b8 <HAL_PCD_MspInit+0xa0>)
 800b696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	2100      	movs	r1, #0
 800b6a4:	2043      	movs	r0, #67	@ 0x43
 800b6a6:	f7f7 ffa4 	bl	80035f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b6aa:	2043      	movs	r0, #67	@ 0x43
 800b6ac:	f7f7 ffbd 	bl	800362a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b6b0:	bf00      	nop
 800b6b2:	3728      	adds	r7, #40	@ 0x28
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	40023800 	.word	0x40023800
 800b6bc:	40020000 	.word	0x40020000

0800b6c0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	f7fe fbe5 	bl	8009ea6 <USBD_LL_SetupStage>
}
 800b6dc:	bf00      	nop
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}

0800b6e4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b6f6:	78fa      	ldrb	r2, [r7, #3]
 800b6f8:	6879      	ldr	r1, [r7, #4]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	00db      	lsls	r3, r3, #3
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	440b      	add	r3, r1
 800b704:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b708:	681a      	ldr	r2, [r3, #0]
 800b70a:	78fb      	ldrb	r3, [r7, #3]
 800b70c:	4619      	mov	r1, r3
 800b70e:	f7fe fc1f 	bl	8009f50 <USBD_LL_DataOutStage>
}
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b082      	sub	sp, #8
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	460b      	mov	r3, r1
 800b724:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b72c:	78fa      	ldrb	r2, [r7, #3]
 800b72e:	6879      	ldr	r1, [r7, #4]
 800b730:	4613      	mov	r3, r2
 800b732:	00db      	lsls	r3, r3, #3
 800b734:	4413      	add	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	440b      	add	r3, r1
 800b73a:	3320      	adds	r3, #32
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	78fb      	ldrb	r3, [r7, #3]
 800b740:	4619      	mov	r1, r3
 800b742:	f7fe fcb8 	bl	800a0b6 <USBD_LL_DataInStage>
}
 800b746:	bf00      	nop
 800b748:	3708      	adds	r7, #8
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}

0800b74e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b74e:	b580      	push	{r7, lr}
 800b750:	b082      	sub	sp, #8
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7fe fdf2 	bl	800a346 <USBD_LL_SOF>
}
 800b762:	bf00      	nop
 800b764:	3708      	adds	r7, #8
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}

0800b76a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b76a:	b580      	push	{r7, lr}
 800b76c:	b084      	sub	sp, #16
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b772:	2301      	movs	r3, #1
 800b774:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	79db      	ldrb	r3, [r3, #7]
 800b77a:	2b02      	cmp	r3, #2
 800b77c:	d001      	beq.n	800b782 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b77e:	f7f7 f833 	bl	80027e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b788:	7bfa      	ldrb	r2, [r7, #15]
 800b78a:	4611      	mov	r1, r2
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7fe fd96 	bl	800a2be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fe fd3e 	bl	800a21a <USBD_LL_Reset>
}
 800b79e:	bf00      	nop
 800b7a0:	3710      	adds	r7, #16
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
	...

0800b7a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe fd91 	bl	800a2de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	687a      	ldr	r2, [r7, #4]
 800b7c8:	6812      	ldr	r2, [r2, #0]
 800b7ca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b7ce:	f043 0301 	orr.w	r3, r3, #1
 800b7d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	7adb      	ldrb	r3, [r3, #11]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d005      	beq.n	800b7e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b7dc:	4b04      	ldr	r3, [pc, #16]	@ (800b7f0 <HAL_PCD_SuspendCallback+0x48>)
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	4a03      	ldr	r2, [pc, #12]	@ (800b7f0 <HAL_PCD_SuspendCallback+0x48>)
 800b7e2:	f043 0306 	orr.w	r3, r3, #6
 800b7e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b7e8:	bf00      	nop
 800b7ea:	3708      	adds	r7, #8
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	e000ed00 	.word	0xe000ed00

0800b7f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b802:	4618      	mov	r0, r3
 800b804:	f7fe fd87 	bl	800a316 <USBD_LL_Resume>
}
 800b808:	bf00      	nop
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b822:	78fa      	ldrb	r2, [r7, #3]
 800b824:	4611      	mov	r1, r2
 800b826:	4618      	mov	r0, r3
 800b828:	f7fe fddf 	bl	800a3ea <USBD_LL_IsoOUTIncomplete>
}
 800b82c:	bf00      	nop
 800b82e:	3708      	adds	r7, #8
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	460b      	mov	r3, r1
 800b83e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b846:	78fa      	ldrb	r2, [r7, #3]
 800b848:	4611      	mov	r1, r2
 800b84a:	4618      	mov	r0, r3
 800b84c:	f7fe fd9b 	bl	800a386 <USBD_LL_IsoINIncomplete>
}
 800b850:	bf00      	nop
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b866:	4618      	mov	r0, r3
 800b868:	f7fe fdf1 	bl	800a44e <USBD_LL_DevConnected>
}
 800b86c:	bf00      	nop
 800b86e:	3708      	adds	r7, #8
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b882:	4618      	mov	r0, r3
 800b884:	f7fe fdee 	bl	800a464 <USBD_LL_DevDisconnected>
}
 800b888:	bf00      	nop
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d13c      	bne.n	800b91a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b8a0:	4a20      	ldr	r2, [pc, #128]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a1e      	ldr	r2, [pc, #120]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8ac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b8b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8b2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b8b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b8b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b8be:	4b19      	ldr	r3, [pc, #100]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8c0:	2202      	movs	r2, #2
 800b8c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b8c4:	4b17      	ldr	r3, [pc, #92]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b8ca:	4b16      	ldr	r3, [pc, #88]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8cc:	2202      	movs	r2, #2
 800b8ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b8d0:	4b14      	ldr	r3, [pc, #80]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b8d6:	4b13      	ldr	r3, [pc, #76]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8d8:	2200      	movs	r2, #0
 800b8da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b8dc:	4b11      	ldr	r3, [pc, #68]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8de:	2200      	movs	r2, #0
 800b8e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b8e2:	4b10      	ldr	r3, [pc, #64]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b8e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b8ee:	480d      	ldr	r0, [pc, #52]	@ (800b924 <USBD_LL_Init+0x94>)
 800b8f0:	f7f9 f866 	bl	80049c0 <HAL_PCD_Init>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d001      	beq.n	800b8fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b8fa:	f7f6 ff75 	bl	80027e8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b8fe:	2180      	movs	r1, #128	@ 0x80
 800b900:	4808      	ldr	r0, [pc, #32]	@ (800b924 <USBD_LL_Init+0x94>)
 800b902:	f7fa fa78 	bl	8005df6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b906:	2240      	movs	r2, #64	@ 0x40
 800b908:	2100      	movs	r1, #0
 800b90a:	4806      	ldr	r0, [pc, #24]	@ (800b924 <USBD_LL_Init+0x94>)
 800b90c:	f7fa fa2c 	bl	8005d68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b910:	2280      	movs	r2, #128	@ 0x80
 800b912:	2101      	movs	r1, #1
 800b914:	4803      	ldr	r0, [pc, #12]	@ (800b924 <USBD_LL_Init+0x94>)
 800b916:	f7fa fa27 	bl	8005d68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	20000b34 	.word	0x20000b34

0800b928 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b930:	2300      	movs	r3, #0
 800b932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b93e:	4618      	mov	r0, r3
 800b940:	f7f9 f94d 	bl	8004bde <HAL_PCD_Start>
 800b944:	4603      	mov	r3, r0
 800b946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b948:	7bfb      	ldrb	r3, [r7, #15]
 800b94a:	4618      	mov	r0, r3
 800b94c:	f000 f930 	bl	800bbb0 <USBD_Get_USB_Status>
 800b950:	4603      	mov	r3, r0
 800b952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b954:	7bbb      	ldrb	r3, [r7, #14]
}
 800b956:	4618      	mov	r0, r3
 800b958:	3710      	adds	r7, #16
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}

0800b95e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b95e:	b580      	push	{r7, lr}
 800b960:	b084      	sub	sp, #16
 800b962:	af00      	add	r7, sp, #0
 800b964:	6078      	str	r0, [r7, #4]
 800b966:	4608      	mov	r0, r1
 800b968:	4611      	mov	r1, r2
 800b96a:	461a      	mov	r2, r3
 800b96c:	4603      	mov	r3, r0
 800b96e:	70fb      	strb	r3, [r7, #3]
 800b970:	460b      	mov	r3, r1
 800b972:	70bb      	strb	r3, [r7, #2]
 800b974:	4613      	mov	r3, r2
 800b976:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b986:	78bb      	ldrb	r3, [r7, #2]
 800b988:	883a      	ldrh	r2, [r7, #0]
 800b98a:	78f9      	ldrb	r1, [r7, #3]
 800b98c:	f7f9 fe21 	bl	80055d2 <HAL_PCD_EP_Open>
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b994:	7bfb      	ldrb	r3, [r7, #15]
 800b996:	4618      	mov	r0, r3
 800b998:	f000 f90a 	bl	800bbb0 <USBD_Get_USB_Status>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9c4:	78fa      	ldrb	r2, [r7, #3]
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7f9 fe6a 	bl	80056a2 <HAL_PCD_EP_Close>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f000 f8eb 	bl	800bbb0 <USBD_Get_USB_Status>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b084      	sub	sp, #16
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba02:	78fa      	ldrb	r2, [r7, #3]
 800ba04:	4611      	mov	r1, r2
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7f9 ff0a 	bl	8005820 <HAL_PCD_EP_SetStall>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba10:	7bfb      	ldrb	r3, [r7, #15]
 800ba12:	4618      	mov	r0, r3
 800ba14:	f000 f8cc 	bl	800bbb0 <USBD_Get_USB_Status>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b084      	sub	sp, #16
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
 800ba2e:	460b      	mov	r3, r1
 800ba30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba40:	78fa      	ldrb	r2, [r7, #3]
 800ba42:	4611      	mov	r1, r2
 800ba44:	4618      	mov	r0, r3
 800ba46:	f7f9 ff4e 	bl	80058e6 <HAL_PCD_EP_ClrStall>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba4e:	7bfb      	ldrb	r3, [r7, #15]
 800ba50:	4618      	mov	r0, r3
 800ba52:	f000 f8ad 	bl	800bbb0 <USBD_Get_USB_Status>
 800ba56:	4603      	mov	r3, r0
 800ba58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3710      	adds	r7, #16
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b085      	sub	sp, #20
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	460b      	mov	r3, r1
 800ba6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ba78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	da0b      	bge.n	800ba98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba80:	78fb      	ldrb	r3, [r7, #3]
 800ba82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba86:	68f9      	ldr	r1, [r7, #12]
 800ba88:	4613      	mov	r3, r2
 800ba8a:	00db      	lsls	r3, r3, #3
 800ba8c:	4413      	add	r3, r2
 800ba8e:	009b      	lsls	r3, r3, #2
 800ba90:	440b      	add	r3, r1
 800ba92:	3316      	adds	r3, #22
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	e00b      	b.n	800bab0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba98:	78fb      	ldrb	r3, [r7, #3]
 800ba9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ba9e:	68f9      	ldr	r1, [r7, #12]
 800baa0:	4613      	mov	r3, r2
 800baa2:	00db      	lsls	r3, r3, #3
 800baa4:	4413      	add	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	440b      	add	r3, r1
 800baaa:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800baae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	3714      	adds	r7, #20
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	460b      	mov	r3, r1
 800bac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bac8:	2300      	movs	r3, #0
 800baca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bacc:	2300      	movs	r3, #0
 800bace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bad6:	78fa      	ldrb	r2, [r7, #3]
 800bad8:	4611      	mov	r1, r2
 800bada:	4618      	mov	r0, r3
 800badc:	f7f9 fd55 	bl	800558a <HAL_PCD_SetAddress>
 800bae0:	4603      	mov	r3, r0
 800bae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bae4:	7bfb      	ldrb	r3, [r7, #15]
 800bae6:	4618      	mov	r0, r3
 800bae8:	f000 f862 	bl	800bbb0 <USBD_Get_USB_Status>
 800baec:	4603      	mov	r3, r0
 800baee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b086      	sub	sp, #24
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	60f8      	str	r0, [r7, #12]
 800bb02:	607a      	str	r2, [r7, #4]
 800bb04:	603b      	str	r3, [r7, #0]
 800bb06:	460b      	mov	r3, r1
 800bb08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb18:	7af9      	ldrb	r1, [r7, #11]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	f7f9 fe45 	bl	80057ac <HAL_PCD_EP_Transmit>
 800bb22:	4603      	mov	r3, r0
 800bb24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb26:	7dfb      	ldrb	r3, [r7, #23]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 f841 	bl	800bbb0 <USBD_Get_USB_Status>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb32:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3718      	adds	r7, #24
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}

0800bb3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	607a      	str	r2, [r7, #4]
 800bb46:	603b      	str	r3, [r7, #0]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bb5a:	7af9      	ldrb	r1, [r7, #11]
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	f7f9 fde9 	bl	8005736 <HAL_PCD_EP_Receive>
 800bb64:	4603      	mov	r3, r0
 800bb66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 f820 	bl	800bbb0 <USBD_Get_USB_Status>
 800bb70:	4603      	mov	r3, r0
 800bb72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb74:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3718      	adds	r7, #24
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
	...

0800bb80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800bb88:	4b03      	ldr	r3, [pc, #12]	@ (800bb98 <USBD_static_malloc+0x18>)
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	20001018 	.word	0x20001018

0800bb9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]

}
 800bba4:	bf00      	nop
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bbbe:	79fb      	ldrb	r3, [r7, #7]
 800bbc0:	2b03      	cmp	r3, #3
 800bbc2:	d817      	bhi.n	800bbf4 <USBD_Get_USB_Status+0x44>
 800bbc4:	a201      	add	r2, pc, #4	@ (adr r2, 800bbcc <USBD_Get_USB_Status+0x1c>)
 800bbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbca:	bf00      	nop
 800bbcc:	0800bbdd 	.word	0x0800bbdd
 800bbd0:	0800bbe3 	.word	0x0800bbe3
 800bbd4:	0800bbe9 	.word	0x0800bbe9
 800bbd8:	0800bbef 	.word	0x0800bbef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	73fb      	strb	r3, [r7, #15]
    break;
 800bbe0:	e00b      	b.n	800bbfa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbe2:	2303      	movs	r3, #3
 800bbe4:	73fb      	strb	r3, [r7, #15]
    break;
 800bbe6:	e008      	b.n	800bbfa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	73fb      	strb	r3, [r7, #15]
    break;
 800bbec:	e005      	b.n	800bbfa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbee:	2303      	movs	r3, #3
 800bbf0:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf2:	e002      	b.n	800bbfa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bbf4:	2303      	movs	r3, #3
 800bbf6:	73fb      	strb	r3, [r7, #15]
    break;
 800bbf8:	bf00      	nop
  }
  return usb_status;
 800bbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3714      	adds	r7, #20
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <powf>:
 800bc08:	b508      	push	{r3, lr}
 800bc0a:	ed2d 8b04 	vpush	{d8-d9}
 800bc0e:	eeb0 8a60 	vmov.f32	s16, s1
 800bc12:	eeb0 9a40 	vmov.f32	s18, s0
 800bc16:	f000 f93f 	bl	800be98 <__ieee754_powf>
 800bc1a:	eeb4 8a48 	vcmp.f32	s16, s16
 800bc1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc22:	eef0 8a40 	vmov.f32	s17, s0
 800bc26:	d63e      	bvs.n	800bca6 <powf+0x9e>
 800bc28:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc30:	d112      	bne.n	800bc58 <powf+0x50>
 800bc32:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bc36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3a:	d039      	beq.n	800bcb0 <powf+0xa8>
 800bc3c:	eeb0 0a48 	vmov.f32	s0, s16
 800bc40:	f000 f880 	bl	800bd44 <finitef>
 800bc44:	b378      	cbz	r0, 800bca6 <powf+0x9e>
 800bc46:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4e:	d52a      	bpl.n	800bca6 <powf+0x9e>
 800bc50:	f001 ff12 	bl	800da78 <__errno>
 800bc54:	2322      	movs	r3, #34	@ 0x22
 800bc56:	e014      	b.n	800bc82 <powf+0x7a>
 800bc58:	f000 f874 	bl	800bd44 <finitef>
 800bc5c:	b998      	cbnz	r0, 800bc86 <powf+0x7e>
 800bc5e:	eeb0 0a49 	vmov.f32	s0, s18
 800bc62:	f000 f86f 	bl	800bd44 <finitef>
 800bc66:	b170      	cbz	r0, 800bc86 <powf+0x7e>
 800bc68:	eeb0 0a48 	vmov.f32	s0, s16
 800bc6c:	f000 f86a 	bl	800bd44 <finitef>
 800bc70:	b148      	cbz	r0, 800bc86 <powf+0x7e>
 800bc72:	eef4 8a68 	vcmp.f32	s17, s17
 800bc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc7a:	d7e9      	bvc.n	800bc50 <powf+0x48>
 800bc7c:	f001 fefc 	bl	800da78 <__errno>
 800bc80:	2321      	movs	r3, #33	@ 0x21
 800bc82:	6003      	str	r3, [r0, #0]
 800bc84:	e00f      	b.n	800bca6 <powf+0x9e>
 800bc86:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bc8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc8e:	d10a      	bne.n	800bca6 <powf+0x9e>
 800bc90:	eeb0 0a49 	vmov.f32	s0, s18
 800bc94:	f000 f856 	bl	800bd44 <finitef>
 800bc98:	b128      	cbz	r0, 800bca6 <powf+0x9e>
 800bc9a:	eeb0 0a48 	vmov.f32	s0, s16
 800bc9e:	f000 f851 	bl	800bd44 <finitef>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d1d4      	bne.n	800bc50 <powf+0x48>
 800bca6:	eeb0 0a68 	vmov.f32	s0, s17
 800bcaa:	ecbd 8b04 	vpop	{d8-d9}
 800bcae:	bd08      	pop	{r3, pc}
 800bcb0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800bcb4:	e7f7      	b.n	800bca6 <powf+0x9e>
	...

0800bcb8 <sinf>:
 800bcb8:	ee10 3a10 	vmov	r3, s0
 800bcbc:	b507      	push	{r0, r1, r2, lr}
 800bcbe:	4a1f      	ldr	r2, [pc, #124]	@ (800bd3c <sinf+0x84>)
 800bcc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d807      	bhi.n	800bcd8 <sinf+0x20>
 800bcc8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800bd40 <sinf+0x88>
 800bccc:	2000      	movs	r0, #0
 800bcce:	b003      	add	sp, #12
 800bcd0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcd4:	f000 b898 	b.w	800be08 <__kernel_sinf>
 800bcd8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bcdc:	d304      	bcc.n	800bce8 <sinf+0x30>
 800bcde:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bce2:	b003      	add	sp, #12
 800bce4:	f85d fb04 	ldr.w	pc, [sp], #4
 800bce8:	4668      	mov	r0, sp
 800bcea:	f000 fba5 	bl	800c438 <__ieee754_rem_pio2f>
 800bcee:	f000 0003 	and.w	r0, r0, #3
 800bcf2:	2801      	cmp	r0, #1
 800bcf4:	d00a      	beq.n	800bd0c <sinf+0x54>
 800bcf6:	2802      	cmp	r0, #2
 800bcf8:	d00f      	beq.n	800bd1a <sinf+0x62>
 800bcfa:	b9c0      	cbnz	r0, 800bd2e <sinf+0x76>
 800bcfc:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd00:	ed9d 0a00 	vldr	s0, [sp]
 800bd04:	2001      	movs	r0, #1
 800bd06:	f000 f87f 	bl	800be08 <__kernel_sinf>
 800bd0a:	e7ea      	b.n	800bce2 <sinf+0x2a>
 800bd0c:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd10:	ed9d 0a00 	vldr	s0, [sp]
 800bd14:	f000 f820 	bl	800bd58 <__kernel_cosf>
 800bd18:	e7e3      	b.n	800bce2 <sinf+0x2a>
 800bd1a:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd1e:	ed9d 0a00 	vldr	s0, [sp]
 800bd22:	2001      	movs	r0, #1
 800bd24:	f000 f870 	bl	800be08 <__kernel_sinf>
 800bd28:	eeb1 0a40 	vneg.f32	s0, s0
 800bd2c:	e7d9      	b.n	800bce2 <sinf+0x2a>
 800bd2e:	eddd 0a01 	vldr	s1, [sp, #4]
 800bd32:	ed9d 0a00 	vldr	s0, [sp]
 800bd36:	f000 f80f 	bl	800bd58 <__kernel_cosf>
 800bd3a:	e7f5      	b.n	800bd28 <sinf+0x70>
 800bd3c:	3f490fd8 	.word	0x3f490fd8
 800bd40:	00000000 	.word	0x00000000

0800bd44 <finitef>:
 800bd44:	ee10 3a10 	vmov	r3, s0
 800bd48:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800bd4c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800bd50:	bfac      	ite	ge
 800bd52:	2000      	movge	r0, #0
 800bd54:	2001      	movlt	r0, #1
 800bd56:	4770      	bx	lr

0800bd58 <__kernel_cosf>:
 800bd58:	ee10 3a10 	vmov	r3, s0
 800bd5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd60:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bd64:	eef0 6a40 	vmov.f32	s13, s0
 800bd68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bd6c:	d204      	bcs.n	800bd78 <__kernel_cosf+0x20>
 800bd6e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800bd72:	ee17 2a90 	vmov	r2, s15
 800bd76:	b342      	cbz	r2, 800bdca <__kernel_cosf+0x72>
 800bd78:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bd7c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800bde8 <__kernel_cosf+0x90>
 800bd80:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800bdec <__kernel_cosf+0x94>
 800bd84:	4a1a      	ldr	r2, [pc, #104]	@ (800bdf0 <__kernel_cosf+0x98>)
 800bd86:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bdf4 <__kernel_cosf+0x9c>
 800bd90:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd94:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800bdf8 <__kernel_cosf+0xa0>
 800bd98:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bd9c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800bdfc <__kernel_cosf+0xa4>
 800bda0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bda4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800be00 <__kernel_cosf+0xa8>
 800bda8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bdac:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800bdb0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bdb4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bdb8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800bdbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdc0:	d804      	bhi.n	800bdcc <__kernel_cosf+0x74>
 800bdc2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bdc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bdca:	4770      	bx	lr
 800bdcc:	4a0d      	ldr	r2, [pc, #52]	@ (800be04 <__kernel_cosf+0xac>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	bf9a      	itte	ls
 800bdd2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800bdd6:	ee07 3a10 	vmovls	s14, r3
 800bdda:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800bdde:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bde2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bde6:	e7ec      	b.n	800bdc2 <__kernel_cosf+0x6a>
 800bde8:	ad47d74e 	.word	0xad47d74e
 800bdec:	310f74f6 	.word	0x310f74f6
 800bdf0:	3e999999 	.word	0x3e999999
 800bdf4:	b493f27c 	.word	0xb493f27c
 800bdf8:	37d00d01 	.word	0x37d00d01
 800bdfc:	bab60b61 	.word	0xbab60b61
 800be00:	3d2aaaab 	.word	0x3d2aaaab
 800be04:	3f480000 	.word	0x3f480000

0800be08 <__kernel_sinf>:
 800be08:	ee10 3a10 	vmov	r3, s0
 800be0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800be10:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800be14:	d204      	bcs.n	800be20 <__kernel_sinf+0x18>
 800be16:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800be1a:	ee17 3a90 	vmov	r3, s15
 800be1e:	b35b      	cbz	r3, 800be78 <__kernel_sinf+0x70>
 800be20:	ee20 7a00 	vmul.f32	s14, s0, s0
 800be24:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800be7c <__kernel_sinf+0x74>
 800be28:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800be80 <__kernel_sinf+0x78>
 800be2c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800be30:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800be84 <__kernel_sinf+0x7c>
 800be34:	eee6 7a07 	vfma.f32	s15, s12, s14
 800be38:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800be88 <__kernel_sinf+0x80>
 800be3c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800be40:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800be8c <__kernel_sinf+0x84>
 800be44:	ee60 6a07 	vmul.f32	s13, s0, s14
 800be48:	eee6 7a07 	vfma.f32	s15, s12, s14
 800be4c:	b930      	cbnz	r0, 800be5c <__kernel_sinf+0x54>
 800be4e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800be90 <__kernel_sinf+0x88>
 800be52:	eea7 6a27 	vfma.f32	s12, s14, s15
 800be56:	eea6 0a26 	vfma.f32	s0, s12, s13
 800be5a:	4770      	bx	lr
 800be5c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800be60:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800be64:	eee0 7a86 	vfma.f32	s15, s1, s12
 800be68:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800be6c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800be94 <__kernel_sinf+0x8c>
 800be70:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800be74:	ee30 0a60 	vsub.f32	s0, s0, s1
 800be78:	4770      	bx	lr
 800be7a:	bf00      	nop
 800be7c:	2f2ec9d3 	.word	0x2f2ec9d3
 800be80:	b2d72f34 	.word	0xb2d72f34
 800be84:	3638ef1b 	.word	0x3638ef1b
 800be88:	b9500d01 	.word	0xb9500d01
 800be8c:	3c088889 	.word	0x3c088889
 800be90:	be2aaaab 	.word	0xbe2aaaab
 800be94:	3e2aaaab 	.word	0x3e2aaaab

0800be98 <__ieee754_powf>:
 800be98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be9c:	ee10 4a90 	vmov	r4, s1
 800bea0:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800bea4:	ed2d 8b02 	vpush	{d8}
 800bea8:	ee10 6a10 	vmov	r6, s0
 800beac:	eeb0 8a40 	vmov.f32	s16, s0
 800beb0:	eef0 8a60 	vmov.f32	s17, s1
 800beb4:	d10c      	bne.n	800bed0 <__ieee754_powf+0x38>
 800beb6:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800beba:	0076      	lsls	r6, r6, #1
 800bebc:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800bec0:	f240 829c 	bls.w	800c3fc <__ieee754_powf+0x564>
 800bec4:	ee38 0a28 	vadd.f32	s0, s16, s17
 800bec8:	ecbd 8b02 	vpop	{d8}
 800becc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bed0:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800bed4:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800bed8:	d802      	bhi.n	800bee0 <__ieee754_powf+0x48>
 800beda:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800bede:	d908      	bls.n	800bef2 <__ieee754_powf+0x5a>
 800bee0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800bee4:	d1ee      	bne.n	800bec4 <__ieee754_powf+0x2c>
 800bee6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800beea:	0064      	lsls	r4, r4, #1
 800beec:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800bef0:	e7e6      	b.n	800bec0 <__ieee754_powf+0x28>
 800bef2:	2e00      	cmp	r6, #0
 800bef4:	da1e      	bge.n	800bf34 <__ieee754_powf+0x9c>
 800bef6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800befa:	d22b      	bcs.n	800bf54 <__ieee754_powf+0xbc>
 800befc:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800bf00:	d332      	bcc.n	800bf68 <__ieee754_powf+0xd0>
 800bf02:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800bf06:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800bf0a:	fa49 f503 	asr.w	r5, r9, r3
 800bf0e:	fa05 f303 	lsl.w	r3, r5, r3
 800bf12:	454b      	cmp	r3, r9
 800bf14:	d126      	bne.n	800bf64 <__ieee754_powf+0xcc>
 800bf16:	f005 0501 	and.w	r5, r5, #1
 800bf1a:	f1c5 0502 	rsb	r5, r5, #2
 800bf1e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800bf22:	d122      	bne.n	800bf6a <__ieee754_powf+0xd2>
 800bf24:	2c00      	cmp	r4, #0
 800bf26:	f280 826f 	bge.w	800c408 <__ieee754_powf+0x570>
 800bf2a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bf2e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800bf32:	e7c9      	b.n	800bec8 <__ieee754_powf+0x30>
 800bf34:	2500      	movs	r5, #0
 800bf36:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800bf3a:	d1f0      	bne.n	800bf1e <__ieee754_powf+0x86>
 800bf3c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800bf40:	f000 825c 	beq.w	800c3fc <__ieee754_powf+0x564>
 800bf44:	d908      	bls.n	800bf58 <__ieee754_powf+0xc0>
 800bf46:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800c2a8 <__ieee754_powf+0x410>
 800bf4a:	2c00      	cmp	r4, #0
 800bf4c:	bfa8      	it	ge
 800bf4e:	eeb0 0a68 	vmovge.f32	s0, s17
 800bf52:	e7b9      	b.n	800bec8 <__ieee754_powf+0x30>
 800bf54:	2502      	movs	r5, #2
 800bf56:	e7ee      	b.n	800bf36 <__ieee754_powf+0x9e>
 800bf58:	2c00      	cmp	r4, #0
 800bf5a:	f280 8252 	bge.w	800c402 <__ieee754_powf+0x56a>
 800bf5e:	eeb1 0a68 	vneg.f32	s0, s17
 800bf62:	e7b1      	b.n	800bec8 <__ieee754_powf+0x30>
 800bf64:	2500      	movs	r5, #0
 800bf66:	e7da      	b.n	800bf1e <__ieee754_powf+0x86>
 800bf68:	2500      	movs	r5, #0
 800bf6a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800bf6e:	d102      	bne.n	800bf76 <__ieee754_powf+0xde>
 800bf70:	ee28 0a08 	vmul.f32	s0, s16, s16
 800bf74:	e7a8      	b.n	800bec8 <__ieee754_powf+0x30>
 800bf76:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800bf7a:	d109      	bne.n	800bf90 <__ieee754_powf+0xf8>
 800bf7c:	2e00      	cmp	r6, #0
 800bf7e:	db07      	blt.n	800bf90 <__ieee754_powf+0xf8>
 800bf80:	eeb0 0a48 	vmov.f32	s0, s16
 800bf84:	ecbd 8b02 	vpop	{d8}
 800bf88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf8c:	f000 bc18 	b.w	800c7c0 <__ieee754_sqrtf>
 800bf90:	eeb0 0a48 	vmov.f32	s0, s16
 800bf94:	f000 fb80 	bl	800c698 <fabsf>
 800bf98:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800bf9c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800bfa0:	4647      	mov	r7, r8
 800bfa2:	d002      	beq.n	800bfaa <__ieee754_powf+0x112>
 800bfa4:	f1b8 0f00 	cmp.w	r8, #0
 800bfa8:	d117      	bne.n	800bfda <__ieee754_powf+0x142>
 800bfaa:	2c00      	cmp	r4, #0
 800bfac:	bfbc      	itt	lt
 800bfae:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800bfb2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800bfb6:	2e00      	cmp	r6, #0
 800bfb8:	da86      	bge.n	800bec8 <__ieee754_powf+0x30>
 800bfba:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800bfbe:	ea58 0805 	orrs.w	r8, r8, r5
 800bfc2:	d104      	bne.n	800bfce <__ieee754_powf+0x136>
 800bfc4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bfc8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bfcc:	e77c      	b.n	800bec8 <__ieee754_powf+0x30>
 800bfce:	2d01      	cmp	r5, #1
 800bfd0:	f47f af7a 	bne.w	800bec8 <__ieee754_powf+0x30>
 800bfd4:	eeb1 0a40 	vneg.f32	s0, s0
 800bfd8:	e776      	b.n	800bec8 <__ieee754_powf+0x30>
 800bfda:	0ff0      	lsrs	r0, r6, #31
 800bfdc:	3801      	subs	r0, #1
 800bfde:	ea55 0300 	orrs.w	r3, r5, r0
 800bfe2:	d104      	bne.n	800bfee <__ieee754_powf+0x156>
 800bfe4:	ee38 8a48 	vsub.f32	s16, s16, s16
 800bfe8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800bfec:	e76c      	b.n	800bec8 <__ieee754_powf+0x30>
 800bfee:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800bff2:	d973      	bls.n	800c0dc <__ieee754_powf+0x244>
 800bff4:	4bad      	ldr	r3, [pc, #692]	@ (800c2ac <__ieee754_powf+0x414>)
 800bff6:	4598      	cmp	r8, r3
 800bff8:	d808      	bhi.n	800c00c <__ieee754_powf+0x174>
 800bffa:	2c00      	cmp	r4, #0
 800bffc:	da0b      	bge.n	800c016 <__ieee754_powf+0x17e>
 800bffe:	2000      	movs	r0, #0
 800c000:	ecbd 8b02 	vpop	{d8}
 800c004:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c008:	f000 bbd4 	b.w	800c7b4 <__math_oflowf>
 800c00c:	4ba8      	ldr	r3, [pc, #672]	@ (800c2b0 <__ieee754_powf+0x418>)
 800c00e:	4598      	cmp	r8, r3
 800c010:	d908      	bls.n	800c024 <__ieee754_powf+0x18c>
 800c012:	2c00      	cmp	r4, #0
 800c014:	dcf3      	bgt.n	800bffe <__ieee754_powf+0x166>
 800c016:	2000      	movs	r0, #0
 800c018:	ecbd 8b02 	vpop	{d8}
 800c01c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c020:	f000 bbc2 	b.w	800c7a8 <__math_uflowf>
 800c024:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c028:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c02c:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800c2b4 <__ieee754_powf+0x41c>
 800c030:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800c034:	eee0 6a67 	vfms.f32	s13, s0, s15
 800c038:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c03c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800c040:	ee20 7a00 	vmul.f32	s14, s0, s0
 800c044:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c048:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800c2b8 <__ieee754_powf+0x420>
 800c04c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800c050:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800c2bc <__ieee754_powf+0x424>
 800c054:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c058:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800c2c0 <__ieee754_powf+0x428>
 800c05c:	eef0 6a67 	vmov.f32	s13, s15
 800c060:	eee0 6a07 	vfma.f32	s13, s0, s14
 800c064:	ee16 3a90 	vmov	r3, s13
 800c068:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c06c:	f023 030f 	bic.w	r3, r3, #15
 800c070:	ee06 3a90 	vmov	s13, r3
 800c074:	eee0 6a47 	vfms.f32	s13, s0, s14
 800c078:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c07c:	3d01      	subs	r5, #1
 800c07e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800c082:	4305      	orrs	r5, r0
 800c084:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c088:	f024 040f 	bic.w	r4, r4, #15
 800c08c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800c090:	bf18      	it	ne
 800c092:	eeb0 8a47 	vmovne.f32	s16, s14
 800c096:	ee07 4a10 	vmov	s14, r4
 800c09a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c09e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800c0a2:	ee07 3a90 	vmov	s15, r3
 800c0a6:	eee7 0a27 	vfma.f32	s1, s14, s15
 800c0aa:	ee07 4a10 	vmov	s14, r4
 800c0ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c0b2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c0b6:	ee17 1a10 	vmov	r1, s14
 800c0ba:	2900      	cmp	r1, #0
 800c0bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c0c0:	f340 80dd 	ble.w	800c27e <__ieee754_powf+0x3e6>
 800c0c4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800c0c8:	f240 80ca 	bls.w	800c260 <__ieee754_powf+0x3c8>
 800c0cc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c0d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d4:	bf4c      	ite	mi
 800c0d6:	2001      	movmi	r0, #1
 800c0d8:	2000      	movpl	r0, #0
 800c0da:	e791      	b.n	800c000 <__ieee754_powf+0x168>
 800c0dc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c0e0:	bf01      	itttt	eq
 800c0e2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800c2c4 <__ieee754_powf+0x42c>
 800c0e6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c0ea:	f06f 0317 	mvneq.w	r3, #23
 800c0ee:	ee17 7a90 	vmoveq	r7, s15
 800c0f2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800c0f6:	bf18      	it	ne
 800c0f8:	2300      	movne	r3, #0
 800c0fa:	3a7f      	subs	r2, #127	@ 0x7f
 800c0fc:	441a      	add	r2, r3
 800c0fe:	4b72      	ldr	r3, [pc, #456]	@ (800c2c8 <__ieee754_powf+0x430>)
 800c100:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800c104:	429f      	cmp	r7, r3
 800c106:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800c10a:	dd06      	ble.n	800c11a <__ieee754_powf+0x282>
 800c10c:	4b6f      	ldr	r3, [pc, #444]	@ (800c2cc <__ieee754_powf+0x434>)
 800c10e:	429f      	cmp	r7, r3
 800c110:	f340 80a4 	ble.w	800c25c <__ieee754_powf+0x3c4>
 800c114:	3201      	adds	r2, #1
 800c116:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800c11a:	2600      	movs	r6, #0
 800c11c:	4b6c      	ldr	r3, [pc, #432]	@ (800c2d0 <__ieee754_powf+0x438>)
 800c11e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c122:	ee07 1a10 	vmov	s14, r1
 800c126:	edd3 5a00 	vldr	s11, [r3]
 800c12a:	4b6a      	ldr	r3, [pc, #424]	@ (800c2d4 <__ieee754_powf+0x43c>)
 800c12c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c130:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c134:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c138:	1049      	asrs	r1, r1, #1
 800c13a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800c13e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800c142:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800c146:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c14a:	ee07 1a90 	vmov	s15, r1
 800c14e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c152:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c156:	ee15 7a10 	vmov	r7, s10
 800c15a:	401f      	ands	r7, r3
 800c15c:	ee06 7a90 	vmov	s13, r7
 800c160:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c164:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c168:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c16c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c170:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c2d8 <__ieee754_powf+0x440>
 800c174:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800c2dc <__ieee754_powf+0x444>
 800c178:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c17c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800c2e0 <__ieee754_powf+0x448>
 800c180:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c184:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800c2b4 <__ieee754_powf+0x41c>
 800c188:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c18c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800c2e4 <__ieee754_powf+0x44c>
 800c190:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c194:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800c2e8 <__ieee754_powf+0x450>
 800c198:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c19c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c1a0:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c1a4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c1a8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c1ac:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800c1b0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c1b4:	eef0 5a67 	vmov.f32	s11, s15
 800c1b8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c1bc:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c1c0:	ee15 1a90 	vmov	r1, s11
 800c1c4:	4019      	ands	r1, r3
 800c1c6:	ee05 1a90 	vmov	s11, r1
 800c1ca:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c1ce:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c1d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1d6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c1da:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c1de:	eeb0 6a67 	vmov.f32	s12, s15
 800c1e2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c1e6:	ee16 1a10 	vmov	r1, s12
 800c1ea:	4019      	ands	r1, r3
 800c1ec:	ee06 1a10 	vmov	s12, r1
 800c1f0:	eeb0 7a46 	vmov.f32	s14, s12
 800c1f4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c1f8:	493c      	ldr	r1, [pc, #240]	@ (800c2ec <__ieee754_powf+0x454>)
 800c1fa:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800c1fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c202:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800c2f0 <__ieee754_powf+0x458>
 800c206:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800c2f4 <__ieee754_powf+0x45c>
 800c20a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c20e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c2f8 <__ieee754_powf+0x460>
 800c212:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c216:	ed91 7a00 	vldr	s14, [r1]
 800c21a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c21e:	ee07 2a10 	vmov	s14, r2
 800c222:	eef0 6a67 	vmov.f32	s13, s15
 800c226:	4a35      	ldr	r2, [pc, #212]	@ (800c2fc <__ieee754_powf+0x464>)
 800c228:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c22c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800c230:	ed92 5a00 	vldr	s10, [r2]
 800c234:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c238:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c23c:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c240:	ee16 2a90 	vmov	r2, s13
 800c244:	4013      	ands	r3, r2
 800c246:	ee06 3a90 	vmov	s13, r3
 800c24a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c24e:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c252:	eea6 7a65 	vfms.f32	s14, s12, s11
 800c256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c25a:	e70f      	b.n	800c07c <__ieee754_powf+0x1e4>
 800c25c:	2601      	movs	r6, #1
 800c25e:	e75d      	b.n	800c11c <__ieee754_powf+0x284>
 800c260:	d152      	bne.n	800c308 <__ieee754_powf+0x470>
 800c262:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800c300 <__ieee754_powf+0x468>
 800c266:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c26a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c26e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c276:	f73f af29 	bgt.w	800c0cc <__ieee754_powf+0x234>
 800c27a:	2386      	movs	r3, #134	@ 0x86
 800c27c:	e048      	b.n	800c310 <__ieee754_powf+0x478>
 800c27e:	4a21      	ldr	r2, [pc, #132]	@ (800c304 <__ieee754_powf+0x46c>)
 800c280:	4293      	cmp	r3, r2
 800c282:	d907      	bls.n	800c294 <__ieee754_powf+0x3fc>
 800c284:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c28c:	bf4c      	ite	mi
 800c28e:	2001      	movmi	r0, #1
 800c290:	2000      	movpl	r0, #0
 800c292:	e6c1      	b.n	800c018 <__ieee754_powf+0x180>
 800c294:	d138      	bne.n	800c308 <__ieee754_powf+0x470>
 800c296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c29a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2a2:	dbea      	blt.n	800c27a <__ieee754_powf+0x3e2>
 800c2a4:	e7ee      	b.n	800c284 <__ieee754_powf+0x3ec>
 800c2a6:	bf00      	nop
 800c2a8:	00000000 	.word	0x00000000
 800c2ac:	3f7ffff3 	.word	0x3f7ffff3
 800c2b0:	3f800007 	.word	0x3f800007
 800c2b4:	3eaaaaab 	.word	0x3eaaaaab
 800c2b8:	3fb8aa3b 	.word	0x3fb8aa3b
 800c2bc:	36eca570 	.word	0x36eca570
 800c2c0:	3fb8aa00 	.word	0x3fb8aa00
 800c2c4:	4b800000 	.word	0x4b800000
 800c2c8:	001cc471 	.word	0x001cc471
 800c2cc:	005db3d6 	.word	0x005db3d6
 800c2d0:	0800f798 	.word	0x0800f798
 800c2d4:	fffff000 	.word	0xfffff000
 800c2d8:	3e6c3255 	.word	0x3e6c3255
 800c2dc:	3e53f142 	.word	0x3e53f142
 800c2e0:	3e8ba305 	.word	0x3e8ba305
 800c2e4:	3edb6db7 	.word	0x3edb6db7
 800c2e8:	3f19999a 	.word	0x3f19999a
 800c2ec:	0800f788 	.word	0x0800f788
 800c2f0:	3f76384f 	.word	0x3f76384f
 800c2f4:	3f763800 	.word	0x3f763800
 800c2f8:	369dc3a0 	.word	0x369dc3a0
 800c2fc:	0800f790 	.word	0x0800f790
 800c300:	3338aa3c 	.word	0x3338aa3c
 800c304:	43160000 	.word	0x43160000
 800c308:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800c30c:	d971      	bls.n	800c3f2 <__ieee754_powf+0x55a>
 800c30e:	15db      	asrs	r3, r3, #23
 800c310:	3b7e      	subs	r3, #126	@ 0x7e
 800c312:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800c316:	4118      	asrs	r0, r3
 800c318:	4408      	add	r0, r1
 800c31a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c31e:	4a3c      	ldr	r2, [pc, #240]	@ (800c410 <__ieee754_powf+0x578>)
 800c320:	3b7f      	subs	r3, #127	@ 0x7f
 800c322:	411a      	asrs	r2, r3
 800c324:	4002      	ands	r2, r0
 800c326:	ee07 2a10 	vmov	s14, r2
 800c32a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800c32e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800c332:	f1c3 0317 	rsb	r3, r3, #23
 800c336:	4118      	asrs	r0, r3
 800c338:	2900      	cmp	r1, #0
 800c33a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c33e:	bfb8      	it	lt
 800c340:	4240      	neglt	r0, r0
 800c342:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c346:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800c414 <__ieee754_powf+0x57c>
 800c34a:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800c418 <__ieee754_powf+0x580>
 800c34e:	ee17 3a10 	vmov	r3, s14
 800c352:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c356:	f023 030f 	bic.w	r3, r3, #15
 800c35a:	ee07 3a10 	vmov	s14, r3
 800c35e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c362:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c366:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c36a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800c41c <__ieee754_powf+0x584>
 800c36e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c372:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c376:	eef0 6a67 	vmov.f32	s13, s15
 800c37a:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c37e:	eef0 5a66 	vmov.f32	s11, s13
 800c382:	eee7 5a46 	vfms.f32	s11, s14, s12
 800c386:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c38a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c38e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800c420 <__ieee754_powf+0x588>
 800c392:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800c424 <__ieee754_powf+0x58c>
 800c396:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c39a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800c428 <__ieee754_powf+0x590>
 800c39e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c3a2:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800c42c <__ieee754_powf+0x594>
 800c3a6:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c3aa:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800c430 <__ieee754_powf+0x598>
 800c3ae:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c3b2:	eeb0 6a66 	vmov.f32	s12, s13
 800c3b6:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800c3ba:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800c3be:	ee66 5a86 	vmul.f32	s11, s13, s12
 800c3c2:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c3c6:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800c3ca:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800c3ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c3d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c3da:	ee10 3a10 	vmov	r3, s0
 800c3de:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c3e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c3e6:	da06      	bge.n	800c3f6 <__ieee754_powf+0x55e>
 800c3e8:	f000 f95e 	bl	800c6a8 <scalbnf>
 800c3ec:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c3f0:	e56a      	b.n	800bec8 <__ieee754_powf+0x30>
 800c3f2:	2000      	movs	r0, #0
 800c3f4:	e7a5      	b.n	800c342 <__ieee754_powf+0x4aa>
 800c3f6:	ee00 3a10 	vmov	s0, r3
 800c3fa:	e7f7      	b.n	800c3ec <__ieee754_powf+0x554>
 800c3fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c400:	e562      	b.n	800bec8 <__ieee754_powf+0x30>
 800c402:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800c434 <__ieee754_powf+0x59c>
 800c406:	e55f      	b.n	800bec8 <__ieee754_powf+0x30>
 800c408:	eeb0 0a48 	vmov.f32	s0, s16
 800c40c:	e55c      	b.n	800bec8 <__ieee754_powf+0x30>
 800c40e:	bf00      	nop
 800c410:	ff800000 	.word	0xff800000
 800c414:	3f317218 	.word	0x3f317218
 800c418:	3f317200 	.word	0x3f317200
 800c41c:	35bfbe8c 	.word	0x35bfbe8c
 800c420:	b5ddea0e 	.word	0xb5ddea0e
 800c424:	3331bb4c 	.word	0x3331bb4c
 800c428:	388ab355 	.word	0x388ab355
 800c42c:	bb360b61 	.word	0xbb360b61
 800c430:	3e2aaaab 	.word	0x3e2aaaab
 800c434:	00000000 	.word	0x00000000

0800c438 <__ieee754_rem_pio2f>:
 800c438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c43a:	ee10 6a10 	vmov	r6, s0
 800c43e:	4b88      	ldr	r3, [pc, #544]	@ (800c660 <__ieee754_rem_pio2f+0x228>)
 800c440:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800c444:	429d      	cmp	r5, r3
 800c446:	b087      	sub	sp, #28
 800c448:	4604      	mov	r4, r0
 800c44a:	d805      	bhi.n	800c458 <__ieee754_rem_pio2f+0x20>
 800c44c:	2300      	movs	r3, #0
 800c44e:	ed80 0a00 	vstr	s0, [r0]
 800c452:	6043      	str	r3, [r0, #4]
 800c454:	2000      	movs	r0, #0
 800c456:	e022      	b.n	800c49e <__ieee754_rem_pio2f+0x66>
 800c458:	4b82      	ldr	r3, [pc, #520]	@ (800c664 <__ieee754_rem_pio2f+0x22c>)
 800c45a:	429d      	cmp	r5, r3
 800c45c:	d83a      	bhi.n	800c4d4 <__ieee754_rem_pio2f+0x9c>
 800c45e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c462:	2e00      	cmp	r6, #0
 800c464:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c668 <__ieee754_rem_pio2f+0x230>
 800c468:	4a80      	ldr	r2, [pc, #512]	@ (800c66c <__ieee754_rem_pio2f+0x234>)
 800c46a:	f023 030f 	bic.w	r3, r3, #15
 800c46e:	dd18      	ble.n	800c4a2 <__ieee754_rem_pio2f+0x6a>
 800c470:	4293      	cmp	r3, r2
 800c472:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c476:	bf09      	itett	eq
 800c478:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c670 <__ieee754_rem_pio2f+0x238>
 800c47c:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c674 <__ieee754_rem_pio2f+0x23c>
 800c480:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c678 <__ieee754_rem_pio2f+0x240>
 800c484:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c488:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800c48c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c490:	ed80 7a00 	vstr	s14, [r0]
 800c494:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c498:	edc0 7a01 	vstr	s15, [r0, #4]
 800c49c:	2001      	movs	r0, #1
 800c49e:	b007      	add	sp, #28
 800c4a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c4a8:	bf09      	itett	eq
 800c4aa:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c670 <__ieee754_rem_pio2f+0x238>
 800c4ae:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c674 <__ieee754_rem_pio2f+0x23c>
 800c4b2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c678 <__ieee754_rem_pio2f+0x240>
 800c4b6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c4ba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c4be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4c2:	ed80 7a00 	vstr	s14, [r0]
 800c4c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4ca:	edc0 7a01 	vstr	s15, [r0, #4]
 800c4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d2:	e7e4      	b.n	800c49e <__ieee754_rem_pio2f+0x66>
 800c4d4:	4b69      	ldr	r3, [pc, #420]	@ (800c67c <__ieee754_rem_pio2f+0x244>)
 800c4d6:	429d      	cmp	r5, r3
 800c4d8:	d873      	bhi.n	800c5c2 <__ieee754_rem_pio2f+0x18a>
 800c4da:	f000 f8dd 	bl	800c698 <fabsf>
 800c4de:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c680 <__ieee754_rem_pio2f+0x248>
 800c4e2:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c4e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c4ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c4f2:	ee17 0a90 	vmov	r0, s15
 800c4f6:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c668 <__ieee754_rem_pio2f+0x230>
 800c4fa:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c4fe:	281f      	cmp	r0, #31
 800c500:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c674 <__ieee754_rem_pio2f+0x23c>
 800c504:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c508:	eeb1 6a47 	vneg.f32	s12, s14
 800c50c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c510:	ee16 1a90 	vmov	r1, s13
 800c514:	dc09      	bgt.n	800c52a <__ieee754_rem_pio2f+0xf2>
 800c516:	4a5b      	ldr	r2, [pc, #364]	@ (800c684 <__ieee754_rem_pio2f+0x24c>)
 800c518:	1e47      	subs	r7, r0, #1
 800c51a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c51e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c522:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c526:	4293      	cmp	r3, r2
 800c528:	d107      	bne.n	800c53a <__ieee754_rem_pio2f+0x102>
 800c52a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800c52e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c532:	2a08      	cmp	r2, #8
 800c534:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c538:	dc14      	bgt.n	800c564 <__ieee754_rem_pio2f+0x12c>
 800c53a:	6021      	str	r1, [r4, #0]
 800c53c:	ed94 7a00 	vldr	s14, [r4]
 800c540:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c544:	2e00      	cmp	r6, #0
 800c546:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c54a:	ed84 0a01 	vstr	s0, [r4, #4]
 800c54e:	daa6      	bge.n	800c49e <__ieee754_rem_pio2f+0x66>
 800c550:	eeb1 7a47 	vneg.f32	s14, s14
 800c554:	eeb1 0a40 	vneg.f32	s0, s0
 800c558:	ed84 7a00 	vstr	s14, [r4]
 800c55c:	ed84 0a01 	vstr	s0, [r4, #4]
 800c560:	4240      	negs	r0, r0
 800c562:	e79c      	b.n	800c49e <__ieee754_rem_pio2f+0x66>
 800c564:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c670 <__ieee754_rem_pio2f+0x238>
 800c568:	eef0 6a40 	vmov.f32	s13, s0
 800c56c:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c570:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c574:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c578:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c678 <__ieee754_rem_pio2f+0x240>
 800c57c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c580:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c584:	ee15 2a90 	vmov	r2, s11
 800c588:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c58c:	1a5b      	subs	r3, r3, r1
 800c58e:	2b19      	cmp	r3, #25
 800c590:	dc04      	bgt.n	800c59c <__ieee754_rem_pio2f+0x164>
 800c592:	edc4 5a00 	vstr	s11, [r4]
 800c596:	eeb0 0a66 	vmov.f32	s0, s13
 800c59a:	e7cf      	b.n	800c53c <__ieee754_rem_pio2f+0x104>
 800c59c:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c688 <__ieee754_rem_pio2f+0x250>
 800c5a0:	eeb0 0a66 	vmov.f32	s0, s13
 800c5a4:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c5a8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c5ac:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c68c <__ieee754_rem_pio2f+0x254>
 800c5b0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c5b4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c5b8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c5bc:	ed84 7a00 	vstr	s14, [r4]
 800c5c0:	e7bc      	b.n	800c53c <__ieee754_rem_pio2f+0x104>
 800c5c2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c5c6:	d306      	bcc.n	800c5d6 <__ieee754_rem_pio2f+0x19e>
 800c5c8:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c5cc:	edc0 7a01 	vstr	s15, [r0, #4]
 800c5d0:	edc0 7a00 	vstr	s15, [r0]
 800c5d4:	e73e      	b.n	800c454 <__ieee754_rem_pio2f+0x1c>
 800c5d6:	15ea      	asrs	r2, r5, #23
 800c5d8:	3a86      	subs	r2, #134	@ 0x86
 800c5da:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c5de:	ee07 3a90 	vmov	s15, r3
 800c5e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c5e6:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c690 <__ieee754_rem_pio2f+0x258>
 800c5ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c5ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5f2:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c5f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c5fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c5fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c602:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c606:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c60a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c60e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c616:	edcd 7a05 	vstr	s15, [sp, #20]
 800c61a:	d11e      	bne.n	800c65a <__ieee754_rem_pio2f+0x222>
 800c61c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c624:	bf0c      	ite	eq
 800c626:	2301      	moveq	r3, #1
 800c628:	2302      	movne	r3, #2
 800c62a:	491a      	ldr	r1, [pc, #104]	@ (800c694 <__ieee754_rem_pio2f+0x25c>)
 800c62c:	9101      	str	r1, [sp, #4]
 800c62e:	2102      	movs	r1, #2
 800c630:	9100      	str	r1, [sp, #0]
 800c632:	a803      	add	r0, sp, #12
 800c634:	4621      	mov	r1, r4
 800c636:	f000 f8c7 	bl	800c7c8 <__kernel_rem_pio2f>
 800c63a:	2e00      	cmp	r6, #0
 800c63c:	f6bf af2f 	bge.w	800c49e <__ieee754_rem_pio2f+0x66>
 800c640:	edd4 7a00 	vldr	s15, [r4]
 800c644:	eef1 7a67 	vneg.f32	s15, s15
 800c648:	edc4 7a00 	vstr	s15, [r4]
 800c64c:	edd4 7a01 	vldr	s15, [r4, #4]
 800c650:	eef1 7a67 	vneg.f32	s15, s15
 800c654:	edc4 7a01 	vstr	s15, [r4, #4]
 800c658:	e782      	b.n	800c560 <__ieee754_rem_pio2f+0x128>
 800c65a:	2303      	movs	r3, #3
 800c65c:	e7e5      	b.n	800c62a <__ieee754_rem_pio2f+0x1f2>
 800c65e:	bf00      	nop
 800c660:	3f490fd8 	.word	0x3f490fd8
 800c664:	4016cbe3 	.word	0x4016cbe3
 800c668:	3fc90f80 	.word	0x3fc90f80
 800c66c:	3fc90fd0 	.word	0x3fc90fd0
 800c670:	37354400 	.word	0x37354400
 800c674:	37354443 	.word	0x37354443
 800c678:	2e85a308 	.word	0x2e85a308
 800c67c:	43490f80 	.word	0x43490f80
 800c680:	3f22f984 	.word	0x3f22f984
 800c684:	0800f7a0 	.word	0x0800f7a0
 800c688:	2e85a300 	.word	0x2e85a300
 800c68c:	248d3132 	.word	0x248d3132
 800c690:	43800000 	.word	0x43800000
 800c694:	0800f820 	.word	0x0800f820

0800c698 <fabsf>:
 800c698:	ee10 3a10 	vmov	r3, s0
 800c69c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c6a0:	ee00 3a10 	vmov	s0, r3
 800c6a4:	4770      	bx	lr
	...

0800c6a8 <scalbnf>:
 800c6a8:	ee10 3a10 	vmov	r3, s0
 800c6ac:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c6b0:	d02b      	beq.n	800c70a <scalbnf+0x62>
 800c6b2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c6b6:	d302      	bcc.n	800c6be <scalbnf+0x16>
 800c6b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c6bc:	4770      	bx	lr
 800c6be:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c6c2:	d123      	bne.n	800c70c <scalbnf+0x64>
 800c6c4:	4b24      	ldr	r3, [pc, #144]	@ (800c758 <scalbnf+0xb0>)
 800c6c6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c75c <scalbnf+0xb4>
 800c6ca:	4298      	cmp	r0, r3
 800c6cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c6d0:	db17      	blt.n	800c702 <scalbnf+0x5a>
 800c6d2:	ee10 3a10 	vmov	r3, s0
 800c6d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c6da:	3a19      	subs	r2, #25
 800c6dc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c6e0:	4288      	cmp	r0, r1
 800c6e2:	dd15      	ble.n	800c710 <scalbnf+0x68>
 800c6e4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c760 <scalbnf+0xb8>
 800c6e8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c764 <scalbnf+0xbc>
 800c6ec:	ee10 3a10 	vmov	r3, s0
 800c6f0:	eeb0 7a67 	vmov.f32	s14, s15
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	bfb8      	it	lt
 800c6f8:	eef0 7a66 	vmovlt.f32	s15, s13
 800c6fc:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c700:	4770      	bx	lr
 800c702:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c768 <scalbnf+0xc0>
 800c706:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c70a:	4770      	bx	lr
 800c70c:	0dd2      	lsrs	r2, r2, #23
 800c70e:	e7e5      	b.n	800c6dc <scalbnf+0x34>
 800c710:	4410      	add	r0, r2
 800c712:	28fe      	cmp	r0, #254	@ 0xfe
 800c714:	dce6      	bgt.n	800c6e4 <scalbnf+0x3c>
 800c716:	2800      	cmp	r0, #0
 800c718:	dd06      	ble.n	800c728 <scalbnf+0x80>
 800c71a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c71e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c722:	ee00 3a10 	vmov	s0, r3
 800c726:	4770      	bx	lr
 800c728:	f110 0f16 	cmn.w	r0, #22
 800c72c:	da09      	bge.n	800c742 <scalbnf+0x9a>
 800c72e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c768 <scalbnf+0xc0>
 800c732:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c76c <scalbnf+0xc4>
 800c736:	ee10 3a10 	vmov	r3, s0
 800c73a:	eeb0 7a67 	vmov.f32	s14, s15
 800c73e:	2b00      	cmp	r3, #0
 800c740:	e7d9      	b.n	800c6f6 <scalbnf+0x4e>
 800c742:	3019      	adds	r0, #25
 800c744:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c748:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c74c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c770 <scalbnf+0xc8>
 800c750:	ee07 3a90 	vmov	s15, r3
 800c754:	e7d7      	b.n	800c706 <scalbnf+0x5e>
 800c756:	bf00      	nop
 800c758:	ffff3cb0 	.word	0xffff3cb0
 800c75c:	4c000000 	.word	0x4c000000
 800c760:	7149f2ca 	.word	0x7149f2ca
 800c764:	f149f2ca 	.word	0xf149f2ca
 800c768:	0da24260 	.word	0x0da24260
 800c76c:	8da24260 	.word	0x8da24260
 800c770:	33000000 	.word	0x33000000

0800c774 <with_errnof>:
 800c774:	b510      	push	{r4, lr}
 800c776:	ed2d 8b02 	vpush	{d8}
 800c77a:	eeb0 8a40 	vmov.f32	s16, s0
 800c77e:	4604      	mov	r4, r0
 800c780:	f001 f97a 	bl	800da78 <__errno>
 800c784:	eeb0 0a48 	vmov.f32	s0, s16
 800c788:	ecbd 8b02 	vpop	{d8}
 800c78c:	6004      	str	r4, [r0, #0]
 800c78e:	bd10      	pop	{r4, pc}

0800c790 <xflowf>:
 800c790:	b130      	cbz	r0, 800c7a0 <xflowf+0x10>
 800c792:	eef1 7a40 	vneg.f32	s15, s0
 800c796:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c79a:	2022      	movs	r0, #34	@ 0x22
 800c79c:	f7ff bfea 	b.w	800c774 <with_errnof>
 800c7a0:	eef0 7a40 	vmov.f32	s15, s0
 800c7a4:	e7f7      	b.n	800c796 <xflowf+0x6>
	...

0800c7a8 <__math_uflowf>:
 800c7a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c7b0 <__math_uflowf+0x8>
 800c7ac:	f7ff bff0 	b.w	800c790 <xflowf>
 800c7b0:	10000000 	.word	0x10000000

0800c7b4 <__math_oflowf>:
 800c7b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c7bc <__math_oflowf+0x8>
 800c7b8:	f7ff bfea 	b.w	800c790 <xflowf>
 800c7bc:	70000000 	.word	0x70000000

0800c7c0 <__ieee754_sqrtf>:
 800c7c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c7c4:	4770      	bx	lr
	...

0800c7c8 <__kernel_rem_pio2f>:
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	ed2d 8b04 	vpush	{d8-d9}
 800c7d0:	b0d9      	sub	sp, #356	@ 0x164
 800c7d2:	4690      	mov	r8, r2
 800c7d4:	9001      	str	r0, [sp, #4]
 800c7d6:	4ab9      	ldr	r2, [pc, #740]	@ (800cabc <__kernel_rem_pio2f+0x2f4>)
 800c7d8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c7da:	f118 0f04 	cmn.w	r8, #4
 800c7de:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c7e2:	460f      	mov	r7, r1
 800c7e4:	f103 3bff 	add.w	fp, r3, #4294967295
 800c7e8:	db27      	blt.n	800c83a <__kernel_rem_pio2f+0x72>
 800c7ea:	f1b8 0203 	subs.w	r2, r8, #3
 800c7ee:	bf48      	it	mi
 800c7f0:	f108 0204 	addmi.w	r2, r8, #4
 800c7f4:	10d2      	asrs	r2, r2, #3
 800c7f6:	1c55      	adds	r5, r2, #1
 800c7f8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c7fa:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800cacc <__kernel_rem_pio2f+0x304>
 800c7fe:	00e8      	lsls	r0, r5, #3
 800c800:	eba2 060b 	sub.w	r6, r2, fp
 800c804:	9002      	str	r0, [sp, #8]
 800c806:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c80a:	eb0a 0c0b 	add.w	ip, sl, fp
 800c80e:	ac1c      	add	r4, sp, #112	@ 0x70
 800c810:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c814:	2000      	movs	r0, #0
 800c816:	4560      	cmp	r0, ip
 800c818:	dd11      	ble.n	800c83e <__kernel_rem_pio2f+0x76>
 800c81a:	a91c      	add	r1, sp, #112	@ 0x70
 800c81c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c820:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c824:	f04f 0c00 	mov.w	ip, #0
 800c828:	45d4      	cmp	ip, sl
 800c82a:	dc27      	bgt.n	800c87c <__kernel_rem_pio2f+0xb4>
 800c82c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c830:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800cacc <__kernel_rem_pio2f+0x304>
 800c834:	4606      	mov	r6, r0
 800c836:	2400      	movs	r4, #0
 800c838:	e016      	b.n	800c868 <__kernel_rem_pio2f+0xa0>
 800c83a:	2200      	movs	r2, #0
 800c83c:	e7db      	b.n	800c7f6 <__kernel_rem_pio2f+0x2e>
 800c83e:	42c6      	cmn	r6, r0
 800c840:	bf5d      	ittte	pl
 800c842:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c846:	ee07 1a90 	vmovpl	s15, r1
 800c84a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c84e:	eef0 7a47 	vmovmi.f32	s15, s14
 800c852:	ece4 7a01 	vstmia	r4!, {s15}
 800c856:	3001      	adds	r0, #1
 800c858:	e7dd      	b.n	800c816 <__kernel_rem_pio2f+0x4e>
 800c85a:	ecfe 6a01 	vldmia	lr!, {s13}
 800c85e:	ed96 7a00 	vldr	s14, [r6]
 800c862:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c866:	3401      	adds	r4, #1
 800c868:	455c      	cmp	r4, fp
 800c86a:	f1a6 0604 	sub.w	r6, r6, #4
 800c86e:	ddf4      	ble.n	800c85a <__kernel_rem_pio2f+0x92>
 800c870:	ece9 7a01 	vstmia	r9!, {s15}
 800c874:	f10c 0c01 	add.w	ip, ip, #1
 800c878:	3004      	adds	r0, #4
 800c87a:	e7d5      	b.n	800c828 <__kernel_rem_pio2f+0x60>
 800c87c:	a908      	add	r1, sp, #32
 800c87e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c882:	9104      	str	r1, [sp, #16]
 800c884:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c886:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800cac8 <__kernel_rem_pio2f+0x300>
 800c88a:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800cac4 <__kernel_rem_pio2f+0x2fc>
 800c88e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c892:	9203      	str	r2, [sp, #12]
 800c894:	4654      	mov	r4, sl
 800c896:	00a2      	lsls	r2, r4, #2
 800c898:	9205      	str	r2, [sp, #20]
 800c89a:	aa58      	add	r2, sp, #352	@ 0x160
 800c89c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c8a0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c8a4:	a944      	add	r1, sp, #272	@ 0x110
 800c8a6:	aa08      	add	r2, sp, #32
 800c8a8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c8ac:	4694      	mov	ip, r2
 800c8ae:	4626      	mov	r6, r4
 800c8b0:	2e00      	cmp	r6, #0
 800c8b2:	f1a0 0004 	sub.w	r0, r0, #4
 800c8b6:	dc4c      	bgt.n	800c952 <__kernel_rem_pio2f+0x18a>
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c8be:	f7ff fef3 	bl	800c6a8 <scalbnf>
 800c8c2:	eeb0 8a40 	vmov.f32	s16, s0
 800c8c6:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c8ca:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c8ce:	f000 f9ed 	bl	800ccac <floorf>
 800c8d2:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c8d6:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c8da:	2d00      	cmp	r5, #0
 800c8dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8e0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c8e4:	ee17 9a90 	vmov	r9, s15
 800c8e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8ec:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c8f0:	dd41      	ble.n	800c976 <__kernel_rem_pio2f+0x1ae>
 800c8f2:	f104 3cff 	add.w	ip, r4, #4294967295
 800c8f6:	a908      	add	r1, sp, #32
 800c8f8:	f1c5 0e08 	rsb	lr, r5, #8
 800c8fc:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c900:	fa46 f00e 	asr.w	r0, r6, lr
 800c904:	4481      	add	r9, r0
 800c906:	fa00 f00e 	lsl.w	r0, r0, lr
 800c90a:	1a36      	subs	r6, r6, r0
 800c90c:	f1c5 0007 	rsb	r0, r5, #7
 800c910:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c914:	4106      	asrs	r6, r0
 800c916:	2e00      	cmp	r6, #0
 800c918:	dd3c      	ble.n	800c994 <__kernel_rem_pio2f+0x1cc>
 800c91a:	f04f 0e00 	mov.w	lr, #0
 800c91e:	f109 0901 	add.w	r9, r9, #1
 800c922:	4670      	mov	r0, lr
 800c924:	4574      	cmp	r4, lr
 800c926:	dc68      	bgt.n	800c9fa <__kernel_rem_pio2f+0x232>
 800c928:	2d00      	cmp	r5, #0
 800c92a:	dd03      	ble.n	800c934 <__kernel_rem_pio2f+0x16c>
 800c92c:	2d01      	cmp	r5, #1
 800c92e:	d074      	beq.n	800ca1a <__kernel_rem_pio2f+0x252>
 800c930:	2d02      	cmp	r5, #2
 800c932:	d07d      	beq.n	800ca30 <__kernel_rem_pio2f+0x268>
 800c934:	2e02      	cmp	r6, #2
 800c936:	d12d      	bne.n	800c994 <__kernel_rem_pio2f+0x1cc>
 800c938:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c93c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c940:	b340      	cbz	r0, 800c994 <__kernel_rem_pio2f+0x1cc>
 800c942:	4628      	mov	r0, r5
 800c944:	9306      	str	r3, [sp, #24]
 800c946:	f7ff feaf 	bl	800c6a8 <scalbnf>
 800c94a:	9b06      	ldr	r3, [sp, #24]
 800c94c:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c950:	e020      	b.n	800c994 <__kernel_rem_pio2f+0x1cc>
 800c952:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c956:	3e01      	subs	r6, #1
 800c958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c95c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c960:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c964:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c968:	ecac 0a01 	vstmia	ip!, {s0}
 800c96c:	ed90 0a00 	vldr	s0, [r0]
 800c970:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c974:	e79c      	b.n	800c8b0 <__kernel_rem_pio2f+0xe8>
 800c976:	d105      	bne.n	800c984 <__kernel_rem_pio2f+0x1bc>
 800c978:	1e60      	subs	r0, r4, #1
 800c97a:	a908      	add	r1, sp, #32
 800c97c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c980:	11f6      	asrs	r6, r6, #7
 800c982:	e7c8      	b.n	800c916 <__kernel_rem_pio2f+0x14e>
 800c984:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c988:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c990:	da31      	bge.n	800c9f6 <__kernel_rem_pio2f+0x22e>
 800c992:	2600      	movs	r6, #0
 800c994:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c99c:	f040 8098 	bne.w	800cad0 <__kernel_rem_pio2f+0x308>
 800c9a0:	1e60      	subs	r0, r4, #1
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	4550      	cmp	r0, sl
 800c9a6:	da4b      	bge.n	800ca40 <__kernel_rem_pio2f+0x278>
 800c9a8:	2a00      	cmp	r2, #0
 800c9aa:	d065      	beq.n	800ca78 <__kernel_rem_pio2f+0x2b0>
 800c9ac:	3c01      	subs	r4, #1
 800c9ae:	ab08      	add	r3, sp, #32
 800c9b0:	3d08      	subs	r5, #8
 800c9b2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d0f8      	beq.n	800c9ac <__kernel_rem_pio2f+0x1e4>
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c9c0:	f7ff fe72 	bl	800c6a8 <scalbnf>
 800c9c4:	1c63      	adds	r3, r4, #1
 800c9c6:	aa44      	add	r2, sp, #272	@ 0x110
 800c9c8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800cac8 <__kernel_rem_pio2f+0x300>
 800c9cc:	0099      	lsls	r1, r3, #2
 800c9ce:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c9d2:	4623      	mov	r3, r4
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	f280 80a9 	bge.w	800cb2c <__kernel_rem_pio2f+0x364>
 800c9da:	4623      	mov	r3, r4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	f2c0 80c7 	blt.w	800cb70 <__kernel_rem_pio2f+0x3a8>
 800c9e2:	aa44      	add	r2, sp, #272	@ 0x110
 800c9e4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c9e8:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800cac0 <__kernel_rem_pio2f+0x2f8>
 800c9ec:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800cacc <__kernel_rem_pio2f+0x304>
 800c9f0:	2000      	movs	r0, #0
 800c9f2:	1ae2      	subs	r2, r4, r3
 800c9f4:	e0b1      	b.n	800cb5a <__kernel_rem_pio2f+0x392>
 800c9f6:	2602      	movs	r6, #2
 800c9f8:	e78f      	b.n	800c91a <__kernel_rem_pio2f+0x152>
 800c9fa:	f852 1b04 	ldr.w	r1, [r2], #4
 800c9fe:	b948      	cbnz	r0, 800ca14 <__kernel_rem_pio2f+0x24c>
 800ca00:	b121      	cbz	r1, 800ca0c <__kernel_rem_pio2f+0x244>
 800ca02:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800ca06:	f842 1c04 	str.w	r1, [r2, #-4]
 800ca0a:	2101      	movs	r1, #1
 800ca0c:	f10e 0e01 	add.w	lr, lr, #1
 800ca10:	4608      	mov	r0, r1
 800ca12:	e787      	b.n	800c924 <__kernel_rem_pio2f+0x15c>
 800ca14:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800ca18:	e7f5      	b.n	800ca06 <__kernel_rem_pio2f+0x23e>
 800ca1a:	f104 3cff 	add.w	ip, r4, #4294967295
 800ca1e:	aa08      	add	r2, sp, #32
 800ca20:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ca24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ca28:	a908      	add	r1, sp, #32
 800ca2a:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800ca2e:	e781      	b.n	800c934 <__kernel_rem_pio2f+0x16c>
 800ca30:	f104 3cff 	add.w	ip, r4, #4294967295
 800ca34:	aa08      	add	r2, sp, #32
 800ca36:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ca3a:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ca3e:	e7f3      	b.n	800ca28 <__kernel_rem_pio2f+0x260>
 800ca40:	a908      	add	r1, sp, #32
 800ca42:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ca46:	3801      	subs	r0, #1
 800ca48:	430a      	orrs	r2, r1
 800ca4a:	e7ab      	b.n	800c9a4 <__kernel_rem_pio2f+0x1dc>
 800ca4c:	3201      	adds	r2, #1
 800ca4e:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800ca52:	2e00      	cmp	r6, #0
 800ca54:	d0fa      	beq.n	800ca4c <__kernel_rem_pio2f+0x284>
 800ca56:	9905      	ldr	r1, [sp, #20]
 800ca58:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800ca5c:	eb0d 0001 	add.w	r0, sp, r1
 800ca60:	18e6      	adds	r6, r4, r3
 800ca62:	a91c      	add	r1, sp, #112	@ 0x70
 800ca64:	f104 0c01 	add.w	ip, r4, #1
 800ca68:	384c      	subs	r0, #76	@ 0x4c
 800ca6a:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ca6e:	4422      	add	r2, r4
 800ca70:	4562      	cmp	r2, ip
 800ca72:	da04      	bge.n	800ca7e <__kernel_rem_pio2f+0x2b6>
 800ca74:	4614      	mov	r4, r2
 800ca76:	e70e      	b.n	800c896 <__kernel_rem_pio2f+0xce>
 800ca78:	9804      	ldr	r0, [sp, #16]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	e7e7      	b.n	800ca4e <__kernel_rem_pio2f+0x286>
 800ca7e:	9903      	ldr	r1, [sp, #12]
 800ca80:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ca84:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ca88:	9105      	str	r1, [sp, #20]
 800ca8a:	ee07 1a90 	vmov	s15, r1
 800ca8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca92:	2400      	movs	r4, #0
 800ca94:	ece6 7a01 	vstmia	r6!, {s15}
 800ca98:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800cacc <__kernel_rem_pio2f+0x304>
 800ca9c:	46b1      	mov	r9, r6
 800ca9e:	455c      	cmp	r4, fp
 800caa0:	dd04      	ble.n	800caac <__kernel_rem_pio2f+0x2e4>
 800caa2:	ece0 7a01 	vstmia	r0!, {s15}
 800caa6:	f10c 0c01 	add.w	ip, ip, #1
 800caaa:	e7e1      	b.n	800ca70 <__kernel_rem_pio2f+0x2a8>
 800caac:	ecfe 6a01 	vldmia	lr!, {s13}
 800cab0:	ed39 7a01 	vldmdb	r9!, {s14}
 800cab4:	3401      	adds	r4, #1
 800cab6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800caba:	e7f0      	b.n	800ca9e <__kernel_rem_pio2f+0x2d6>
 800cabc:	0800fb64 	.word	0x0800fb64
 800cac0:	0800fb38 	.word	0x0800fb38
 800cac4:	43800000 	.word	0x43800000
 800cac8:	3b800000 	.word	0x3b800000
 800cacc:	00000000 	.word	0x00000000
 800cad0:	9b02      	ldr	r3, [sp, #8]
 800cad2:	eeb0 0a48 	vmov.f32	s0, s16
 800cad6:	eba3 0008 	sub.w	r0, r3, r8
 800cada:	f7ff fde5 	bl	800c6a8 <scalbnf>
 800cade:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800cac4 <__kernel_rem_pio2f+0x2fc>
 800cae2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800cae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caea:	db19      	blt.n	800cb20 <__kernel_rem_pio2f+0x358>
 800caec:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800cac8 <__kernel_rem_pio2f+0x300>
 800caf0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800caf4:	aa08      	add	r2, sp, #32
 800caf6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cafa:	3508      	adds	r5, #8
 800cafc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb00:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cb04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cb08:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cb0c:	ee10 3a10 	vmov	r3, s0
 800cb10:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cb14:	ee17 3a90 	vmov	r3, s15
 800cb18:	3401      	adds	r4, #1
 800cb1a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cb1e:	e74c      	b.n	800c9ba <__kernel_rem_pio2f+0x1f2>
 800cb20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cb24:	aa08      	add	r2, sp, #32
 800cb26:	ee10 3a10 	vmov	r3, s0
 800cb2a:	e7f6      	b.n	800cb1a <__kernel_rem_pio2f+0x352>
 800cb2c:	a808      	add	r0, sp, #32
 800cb2e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800cb32:	9001      	str	r0, [sp, #4]
 800cb34:	ee07 0a90 	vmov	s15, r0
 800cb38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb3c:	3b01      	subs	r3, #1
 800cb3e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cb42:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cb46:	ed62 7a01 	vstmdb	r2!, {s15}
 800cb4a:	e743      	b.n	800c9d4 <__kernel_rem_pio2f+0x20c>
 800cb4c:	ecfc 6a01 	vldmia	ip!, {s13}
 800cb50:	ecb5 7a01 	vldmia	r5!, {s14}
 800cb54:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cb58:	3001      	adds	r0, #1
 800cb5a:	4550      	cmp	r0, sl
 800cb5c:	dc01      	bgt.n	800cb62 <__kernel_rem_pio2f+0x39a>
 800cb5e:	4282      	cmp	r2, r0
 800cb60:	daf4      	bge.n	800cb4c <__kernel_rem_pio2f+0x384>
 800cb62:	a858      	add	r0, sp, #352	@ 0x160
 800cb64:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cb68:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	e735      	b.n	800c9dc <__kernel_rem_pio2f+0x214>
 800cb70:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800cb72:	2b02      	cmp	r3, #2
 800cb74:	dc09      	bgt.n	800cb8a <__kernel_rem_pio2f+0x3c2>
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	dc2b      	bgt.n	800cbd2 <__kernel_rem_pio2f+0x40a>
 800cb7a:	d044      	beq.n	800cc06 <__kernel_rem_pio2f+0x43e>
 800cb7c:	f009 0007 	and.w	r0, r9, #7
 800cb80:	b059      	add	sp, #356	@ 0x164
 800cb82:	ecbd 8b04 	vpop	{d8-d9}
 800cb86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb8a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800cb8c:	2b03      	cmp	r3, #3
 800cb8e:	d1f5      	bne.n	800cb7c <__kernel_rem_pio2f+0x3b4>
 800cb90:	aa30      	add	r2, sp, #192	@ 0xc0
 800cb92:	1f0b      	subs	r3, r1, #4
 800cb94:	4413      	add	r3, r2
 800cb96:	461a      	mov	r2, r3
 800cb98:	4620      	mov	r0, r4
 800cb9a:	2800      	cmp	r0, #0
 800cb9c:	f1a2 0204 	sub.w	r2, r2, #4
 800cba0:	dc52      	bgt.n	800cc48 <__kernel_rem_pio2f+0x480>
 800cba2:	4622      	mov	r2, r4
 800cba4:	2a01      	cmp	r2, #1
 800cba6:	f1a3 0304 	sub.w	r3, r3, #4
 800cbaa:	dc5d      	bgt.n	800cc68 <__kernel_rem_pio2f+0x4a0>
 800cbac:	ab30      	add	r3, sp, #192	@ 0xc0
 800cbae:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800cacc <__kernel_rem_pio2f+0x304>
 800cbb2:	440b      	add	r3, r1
 800cbb4:	2c01      	cmp	r4, #1
 800cbb6:	dc67      	bgt.n	800cc88 <__kernel_rem_pio2f+0x4c0>
 800cbb8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800cbbc:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800cbc0:	2e00      	cmp	r6, #0
 800cbc2:	d167      	bne.n	800cc94 <__kernel_rem_pio2f+0x4cc>
 800cbc4:	edc7 6a00 	vstr	s13, [r7]
 800cbc8:	ed87 7a01 	vstr	s14, [r7, #4]
 800cbcc:	edc7 7a02 	vstr	s15, [r7, #8]
 800cbd0:	e7d4      	b.n	800cb7c <__kernel_rem_pio2f+0x3b4>
 800cbd2:	ab30      	add	r3, sp, #192	@ 0xc0
 800cbd4:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800cacc <__kernel_rem_pio2f+0x304>
 800cbd8:	440b      	add	r3, r1
 800cbda:	4622      	mov	r2, r4
 800cbdc:	2a00      	cmp	r2, #0
 800cbde:	da24      	bge.n	800cc2a <__kernel_rem_pio2f+0x462>
 800cbe0:	b34e      	cbz	r6, 800cc36 <__kernel_rem_pio2f+0x46e>
 800cbe2:	eef1 7a47 	vneg.f32	s15, s14
 800cbe6:	edc7 7a00 	vstr	s15, [r7]
 800cbea:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800cbee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbf2:	aa31      	add	r2, sp, #196	@ 0xc4
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	429c      	cmp	r4, r3
 800cbf8:	da20      	bge.n	800cc3c <__kernel_rem_pio2f+0x474>
 800cbfa:	b10e      	cbz	r6, 800cc00 <__kernel_rem_pio2f+0x438>
 800cbfc:	eef1 7a67 	vneg.f32	s15, s15
 800cc00:	edc7 7a01 	vstr	s15, [r7, #4]
 800cc04:	e7ba      	b.n	800cb7c <__kernel_rem_pio2f+0x3b4>
 800cc06:	ab30      	add	r3, sp, #192	@ 0xc0
 800cc08:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800cacc <__kernel_rem_pio2f+0x304>
 800cc0c:	440b      	add	r3, r1
 800cc0e:	2c00      	cmp	r4, #0
 800cc10:	da05      	bge.n	800cc1e <__kernel_rem_pio2f+0x456>
 800cc12:	b10e      	cbz	r6, 800cc18 <__kernel_rem_pio2f+0x450>
 800cc14:	eef1 7a67 	vneg.f32	s15, s15
 800cc18:	edc7 7a00 	vstr	s15, [r7]
 800cc1c:	e7ae      	b.n	800cb7c <__kernel_rem_pio2f+0x3b4>
 800cc1e:	ed33 7a01 	vldmdb	r3!, {s14}
 800cc22:	3c01      	subs	r4, #1
 800cc24:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc28:	e7f1      	b.n	800cc0e <__kernel_rem_pio2f+0x446>
 800cc2a:	ed73 7a01 	vldmdb	r3!, {s15}
 800cc2e:	3a01      	subs	r2, #1
 800cc30:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cc34:	e7d2      	b.n	800cbdc <__kernel_rem_pio2f+0x414>
 800cc36:	eef0 7a47 	vmov.f32	s15, s14
 800cc3a:	e7d4      	b.n	800cbe6 <__kernel_rem_pio2f+0x41e>
 800cc3c:	ecb2 7a01 	vldmia	r2!, {s14}
 800cc40:	3301      	adds	r3, #1
 800cc42:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc46:	e7d6      	b.n	800cbf6 <__kernel_rem_pio2f+0x42e>
 800cc48:	edd2 7a00 	vldr	s15, [r2]
 800cc4c:	edd2 6a01 	vldr	s13, [r2, #4]
 800cc50:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cc54:	3801      	subs	r0, #1
 800cc56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc5a:	ed82 7a00 	vstr	s14, [r2]
 800cc5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc62:	edc2 7a01 	vstr	s15, [r2, #4]
 800cc66:	e798      	b.n	800cb9a <__kernel_rem_pio2f+0x3d2>
 800cc68:	edd3 7a00 	vldr	s15, [r3]
 800cc6c:	edd3 6a01 	vldr	s13, [r3, #4]
 800cc70:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cc74:	3a01      	subs	r2, #1
 800cc76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc7a:	ed83 7a00 	vstr	s14, [r3]
 800cc7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc82:	edc3 7a01 	vstr	s15, [r3, #4]
 800cc86:	e78d      	b.n	800cba4 <__kernel_rem_pio2f+0x3dc>
 800cc88:	ed33 7a01 	vldmdb	r3!, {s14}
 800cc8c:	3c01      	subs	r4, #1
 800cc8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc92:	e78f      	b.n	800cbb4 <__kernel_rem_pio2f+0x3ec>
 800cc94:	eef1 6a66 	vneg.f32	s13, s13
 800cc98:	eeb1 7a47 	vneg.f32	s14, s14
 800cc9c:	edc7 6a00 	vstr	s13, [r7]
 800cca0:	ed87 7a01 	vstr	s14, [r7, #4]
 800cca4:	eef1 7a67 	vneg.f32	s15, s15
 800cca8:	e790      	b.n	800cbcc <__kernel_rem_pio2f+0x404>
 800ccaa:	bf00      	nop

0800ccac <floorf>:
 800ccac:	ee10 3a10 	vmov	r3, s0
 800ccb0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ccb4:	3a7f      	subs	r2, #127	@ 0x7f
 800ccb6:	2a16      	cmp	r2, #22
 800ccb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ccbc:	dc2b      	bgt.n	800cd16 <floorf+0x6a>
 800ccbe:	2a00      	cmp	r2, #0
 800ccc0:	da12      	bge.n	800cce8 <floorf+0x3c>
 800ccc2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cd28 <floorf+0x7c>
 800ccc6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ccca:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ccce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd2:	dd06      	ble.n	800cce2 <floorf+0x36>
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	da24      	bge.n	800cd22 <floorf+0x76>
 800ccd8:	2900      	cmp	r1, #0
 800ccda:	4b14      	ldr	r3, [pc, #80]	@ (800cd2c <floorf+0x80>)
 800ccdc:	bf08      	it	eq
 800ccde:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800cce2:	ee00 3a10 	vmov	s0, r3
 800cce6:	4770      	bx	lr
 800cce8:	4911      	ldr	r1, [pc, #68]	@ (800cd30 <floorf+0x84>)
 800ccea:	4111      	asrs	r1, r2
 800ccec:	420b      	tst	r3, r1
 800ccee:	d0fa      	beq.n	800cce6 <floorf+0x3a>
 800ccf0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800cd28 <floorf+0x7c>
 800ccf4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ccf8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ccfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd00:	ddef      	ble.n	800cce2 <floorf+0x36>
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	bfbe      	ittt	lt
 800cd06:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800cd0a:	fa40 f202 	asrlt.w	r2, r0, r2
 800cd0e:	189b      	addlt	r3, r3, r2
 800cd10:	ea23 0301 	bic.w	r3, r3, r1
 800cd14:	e7e5      	b.n	800cce2 <floorf+0x36>
 800cd16:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cd1a:	d3e4      	bcc.n	800cce6 <floorf+0x3a>
 800cd1c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cd20:	4770      	bx	lr
 800cd22:	2300      	movs	r3, #0
 800cd24:	e7dd      	b.n	800cce2 <floorf+0x36>
 800cd26:	bf00      	nop
 800cd28:	7149f2ca 	.word	0x7149f2ca
 800cd2c:	bf800000 	.word	0xbf800000
 800cd30:	007fffff 	.word	0x007fffff

0800cd34 <__cvt>:
 800cd34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd38:	ec57 6b10 	vmov	r6, r7, d0
 800cd3c:	2f00      	cmp	r7, #0
 800cd3e:	460c      	mov	r4, r1
 800cd40:	4619      	mov	r1, r3
 800cd42:	463b      	mov	r3, r7
 800cd44:	bfbb      	ittet	lt
 800cd46:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cd4a:	461f      	movlt	r7, r3
 800cd4c:	2300      	movge	r3, #0
 800cd4e:	232d      	movlt	r3, #45	@ 0x2d
 800cd50:	700b      	strb	r3, [r1, #0]
 800cd52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd54:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cd58:	4691      	mov	r9, r2
 800cd5a:	f023 0820 	bic.w	r8, r3, #32
 800cd5e:	bfbc      	itt	lt
 800cd60:	4632      	movlt	r2, r6
 800cd62:	4616      	movlt	r6, r2
 800cd64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cd68:	d005      	beq.n	800cd76 <__cvt+0x42>
 800cd6a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cd6e:	d100      	bne.n	800cd72 <__cvt+0x3e>
 800cd70:	3401      	adds	r4, #1
 800cd72:	2102      	movs	r1, #2
 800cd74:	e000      	b.n	800cd78 <__cvt+0x44>
 800cd76:	2103      	movs	r1, #3
 800cd78:	ab03      	add	r3, sp, #12
 800cd7a:	9301      	str	r3, [sp, #4]
 800cd7c:	ab02      	add	r3, sp, #8
 800cd7e:	9300      	str	r3, [sp, #0]
 800cd80:	ec47 6b10 	vmov	d0, r6, r7
 800cd84:	4653      	mov	r3, sl
 800cd86:	4622      	mov	r2, r4
 800cd88:	f000 ff3a 	bl	800dc00 <_dtoa_r>
 800cd8c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cd90:	4605      	mov	r5, r0
 800cd92:	d119      	bne.n	800cdc8 <__cvt+0x94>
 800cd94:	f019 0f01 	tst.w	r9, #1
 800cd98:	d00e      	beq.n	800cdb8 <__cvt+0x84>
 800cd9a:	eb00 0904 	add.w	r9, r0, r4
 800cd9e:	2200      	movs	r2, #0
 800cda0:	2300      	movs	r3, #0
 800cda2:	4630      	mov	r0, r6
 800cda4:	4639      	mov	r1, r7
 800cda6:	f7f3 fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 800cdaa:	b108      	cbz	r0, 800cdb0 <__cvt+0x7c>
 800cdac:	f8cd 900c 	str.w	r9, [sp, #12]
 800cdb0:	2230      	movs	r2, #48	@ 0x30
 800cdb2:	9b03      	ldr	r3, [sp, #12]
 800cdb4:	454b      	cmp	r3, r9
 800cdb6:	d31e      	bcc.n	800cdf6 <__cvt+0xc2>
 800cdb8:	9b03      	ldr	r3, [sp, #12]
 800cdba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cdbc:	1b5b      	subs	r3, r3, r5
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	6013      	str	r3, [r2, #0]
 800cdc2:	b004      	add	sp, #16
 800cdc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cdcc:	eb00 0904 	add.w	r9, r0, r4
 800cdd0:	d1e5      	bne.n	800cd9e <__cvt+0x6a>
 800cdd2:	7803      	ldrb	r3, [r0, #0]
 800cdd4:	2b30      	cmp	r3, #48	@ 0x30
 800cdd6:	d10a      	bne.n	800cdee <__cvt+0xba>
 800cdd8:	2200      	movs	r2, #0
 800cdda:	2300      	movs	r3, #0
 800cddc:	4630      	mov	r0, r6
 800cdde:	4639      	mov	r1, r7
 800cde0:	f7f3 fe7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800cde4:	b918      	cbnz	r0, 800cdee <__cvt+0xba>
 800cde6:	f1c4 0401 	rsb	r4, r4, #1
 800cdea:	f8ca 4000 	str.w	r4, [sl]
 800cdee:	f8da 3000 	ldr.w	r3, [sl]
 800cdf2:	4499      	add	r9, r3
 800cdf4:	e7d3      	b.n	800cd9e <__cvt+0x6a>
 800cdf6:	1c59      	adds	r1, r3, #1
 800cdf8:	9103      	str	r1, [sp, #12]
 800cdfa:	701a      	strb	r2, [r3, #0]
 800cdfc:	e7d9      	b.n	800cdb2 <__cvt+0x7e>

0800cdfe <__exponent>:
 800cdfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce00:	2900      	cmp	r1, #0
 800ce02:	bfba      	itte	lt
 800ce04:	4249      	neglt	r1, r1
 800ce06:	232d      	movlt	r3, #45	@ 0x2d
 800ce08:	232b      	movge	r3, #43	@ 0x2b
 800ce0a:	2909      	cmp	r1, #9
 800ce0c:	7002      	strb	r2, [r0, #0]
 800ce0e:	7043      	strb	r3, [r0, #1]
 800ce10:	dd29      	ble.n	800ce66 <__exponent+0x68>
 800ce12:	f10d 0307 	add.w	r3, sp, #7
 800ce16:	461d      	mov	r5, r3
 800ce18:	270a      	movs	r7, #10
 800ce1a:	461a      	mov	r2, r3
 800ce1c:	fbb1 f6f7 	udiv	r6, r1, r7
 800ce20:	fb07 1416 	mls	r4, r7, r6, r1
 800ce24:	3430      	adds	r4, #48	@ 0x30
 800ce26:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ce2a:	460c      	mov	r4, r1
 800ce2c:	2c63      	cmp	r4, #99	@ 0x63
 800ce2e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ce32:	4631      	mov	r1, r6
 800ce34:	dcf1      	bgt.n	800ce1a <__exponent+0x1c>
 800ce36:	3130      	adds	r1, #48	@ 0x30
 800ce38:	1e94      	subs	r4, r2, #2
 800ce3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ce3e:	1c41      	adds	r1, r0, #1
 800ce40:	4623      	mov	r3, r4
 800ce42:	42ab      	cmp	r3, r5
 800ce44:	d30a      	bcc.n	800ce5c <__exponent+0x5e>
 800ce46:	f10d 0309 	add.w	r3, sp, #9
 800ce4a:	1a9b      	subs	r3, r3, r2
 800ce4c:	42ac      	cmp	r4, r5
 800ce4e:	bf88      	it	hi
 800ce50:	2300      	movhi	r3, #0
 800ce52:	3302      	adds	r3, #2
 800ce54:	4403      	add	r3, r0
 800ce56:	1a18      	subs	r0, r3, r0
 800ce58:	b003      	add	sp, #12
 800ce5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ce60:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ce64:	e7ed      	b.n	800ce42 <__exponent+0x44>
 800ce66:	2330      	movs	r3, #48	@ 0x30
 800ce68:	3130      	adds	r1, #48	@ 0x30
 800ce6a:	7083      	strb	r3, [r0, #2]
 800ce6c:	70c1      	strb	r1, [r0, #3]
 800ce6e:	1d03      	adds	r3, r0, #4
 800ce70:	e7f1      	b.n	800ce56 <__exponent+0x58>
	...

0800ce74 <_printf_float>:
 800ce74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce78:	b08d      	sub	sp, #52	@ 0x34
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ce80:	4616      	mov	r6, r2
 800ce82:	461f      	mov	r7, r3
 800ce84:	4605      	mov	r5, r0
 800ce86:	f000 fdad 	bl	800d9e4 <_localeconv_r>
 800ce8a:	6803      	ldr	r3, [r0, #0]
 800ce8c:	9304      	str	r3, [sp, #16]
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f7f3 f9f6 	bl	8000280 <strlen>
 800ce94:	2300      	movs	r3, #0
 800ce96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ce98:	f8d8 3000 	ldr.w	r3, [r8]
 800ce9c:	9005      	str	r0, [sp, #20]
 800ce9e:	3307      	adds	r3, #7
 800cea0:	f023 0307 	bic.w	r3, r3, #7
 800cea4:	f103 0208 	add.w	r2, r3, #8
 800cea8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ceac:	f8d4 b000 	ldr.w	fp, [r4]
 800ceb0:	f8c8 2000 	str.w	r2, [r8]
 800ceb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ceb8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cebc:	9307      	str	r3, [sp, #28]
 800cebe:	f8cd 8018 	str.w	r8, [sp, #24]
 800cec2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cec6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ceca:	4b9c      	ldr	r3, [pc, #624]	@ (800d13c <_printf_float+0x2c8>)
 800cecc:	f04f 32ff 	mov.w	r2, #4294967295
 800ced0:	f7f3 fe34 	bl	8000b3c <__aeabi_dcmpun>
 800ced4:	bb70      	cbnz	r0, 800cf34 <_printf_float+0xc0>
 800ced6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ceda:	4b98      	ldr	r3, [pc, #608]	@ (800d13c <_printf_float+0x2c8>)
 800cedc:	f04f 32ff 	mov.w	r2, #4294967295
 800cee0:	f7f3 fe0e 	bl	8000b00 <__aeabi_dcmple>
 800cee4:	bb30      	cbnz	r0, 800cf34 <_printf_float+0xc0>
 800cee6:	2200      	movs	r2, #0
 800cee8:	2300      	movs	r3, #0
 800ceea:	4640      	mov	r0, r8
 800ceec:	4649      	mov	r1, r9
 800ceee:	f7f3 fdfd 	bl	8000aec <__aeabi_dcmplt>
 800cef2:	b110      	cbz	r0, 800cefa <_printf_float+0x86>
 800cef4:	232d      	movs	r3, #45	@ 0x2d
 800cef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cefa:	4a91      	ldr	r2, [pc, #580]	@ (800d140 <_printf_float+0x2cc>)
 800cefc:	4b91      	ldr	r3, [pc, #580]	@ (800d144 <_printf_float+0x2d0>)
 800cefe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cf02:	bf94      	ite	ls
 800cf04:	4690      	movls	r8, r2
 800cf06:	4698      	movhi	r8, r3
 800cf08:	2303      	movs	r3, #3
 800cf0a:	6123      	str	r3, [r4, #16]
 800cf0c:	f02b 0304 	bic.w	r3, fp, #4
 800cf10:	6023      	str	r3, [r4, #0]
 800cf12:	f04f 0900 	mov.w	r9, #0
 800cf16:	9700      	str	r7, [sp, #0]
 800cf18:	4633      	mov	r3, r6
 800cf1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cf1c:	4621      	mov	r1, r4
 800cf1e:	4628      	mov	r0, r5
 800cf20:	f000 f9d2 	bl	800d2c8 <_printf_common>
 800cf24:	3001      	adds	r0, #1
 800cf26:	f040 808d 	bne.w	800d044 <_printf_float+0x1d0>
 800cf2a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf2e:	b00d      	add	sp, #52	@ 0x34
 800cf30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf34:	4642      	mov	r2, r8
 800cf36:	464b      	mov	r3, r9
 800cf38:	4640      	mov	r0, r8
 800cf3a:	4649      	mov	r1, r9
 800cf3c:	f7f3 fdfe 	bl	8000b3c <__aeabi_dcmpun>
 800cf40:	b140      	cbz	r0, 800cf54 <_printf_float+0xe0>
 800cf42:	464b      	mov	r3, r9
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	bfbc      	itt	lt
 800cf48:	232d      	movlt	r3, #45	@ 0x2d
 800cf4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cf4e:	4a7e      	ldr	r2, [pc, #504]	@ (800d148 <_printf_float+0x2d4>)
 800cf50:	4b7e      	ldr	r3, [pc, #504]	@ (800d14c <_printf_float+0x2d8>)
 800cf52:	e7d4      	b.n	800cefe <_printf_float+0x8a>
 800cf54:	6863      	ldr	r3, [r4, #4]
 800cf56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cf5a:	9206      	str	r2, [sp, #24]
 800cf5c:	1c5a      	adds	r2, r3, #1
 800cf5e:	d13b      	bne.n	800cfd8 <_printf_float+0x164>
 800cf60:	2306      	movs	r3, #6
 800cf62:	6063      	str	r3, [r4, #4]
 800cf64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cf68:	2300      	movs	r3, #0
 800cf6a:	6022      	str	r2, [r4, #0]
 800cf6c:	9303      	str	r3, [sp, #12]
 800cf6e:	ab0a      	add	r3, sp, #40	@ 0x28
 800cf70:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cf74:	ab09      	add	r3, sp, #36	@ 0x24
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	6861      	ldr	r1, [r4, #4]
 800cf7a:	ec49 8b10 	vmov	d0, r8, r9
 800cf7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cf82:	4628      	mov	r0, r5
 800cf84:	f7ff fed6 	bl	800cd34 <__cvt>
 800cf88:	9b06      	ldr	r3, [sp, #24]
 800cf8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf8c:	2b47      	cmp	r3, #71	@ 0x47
 800cf8e:	4680      	mov	r8, r0
 800cf90:	d129      	bne.n	800cfe6 <_printf_float+0x172>
 800cf92:	1cc8      	adds	r0, r1, #3
 800cf94:	db02      	blt.n	800cf9c <_printf_float+0x128>
 800cf96:	6863      	ldr	r3, [r4, #4]
 800cf98:	4299      	cmp	r1, r3
 800cf9a:	dd41      	ble.n	800d020 <_printf_float+0x1ac>
 800cf9c:	f1aa 0a02 	sub.w	sl, sl, #2
 800cfa0:	fa5f fa8a 	uxtb.w	sl, sl
 800cfa4:	3901      	subs	r1, #1
 800cfa6:	4652      	mov	r2, sl
 800cfa8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cfac:	9109      	str	r1, [sp, #36]	@ 0x24
 800cfae:	f7ff ff26 	bl	800cdfe <__exponent>
 800cfb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cfb4:	1813      	adds	r3, r2, r0
 800cfb6:	2a01      	cmp	r2, #1
 800cfb8:	4681      	mov	r9, r0
 800cfba:	6123      	str	r3, [r4, #16]
 800cfbc:	dc02      	bgt.n	800cfc4 <_printf_float+0x150>
 800cfbe:	6822      	ldr	r2, [r4, #0]
 800cfc0:	07d2      	lsls	r2, r2, #31
 800cfc2:	d501      	bpl.n	800cfc8 <_printf_float+0x154>
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	6123      	str	r3, [r4, #16]
 800cfc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d0a2      	beq.n	800cf16 <_printf_float+0xa2>
 800cfd0:	232d      	movs	r3, #45	@ 0x2d
 800cfd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cfd6:	e79e      	b.n	800cf16 <_printf_float+0xa2>
 800cfd8:	9a06      	ldr	r2, [sp, #24]
 800cfda:	2a47      	cmp	r2, #71	@ 0x47
 800cfdc:	d1c2      	bne.n	800cf64 <_printf_float+0xf0>
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d1c0      	bne.n	800cf64 <_printf_float+0xf0>
 800cfe2:	2301      	movs	r3, #1
 800cfe4:	e7bd      	b.n	800cf62 <_printf_float+0xee>
 800cfe6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cfea:	d9db      	bls.n	800cfa4 <_printf_float+0x130>
 800cfec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cff0:	d118      	bne.n	800d024 <_printf_float+0x1b0>
 800cff2:	2900      	cmp	r1, #0
 800cff4:	6863      	ldr	r3, [r4, #4]
 800cff6:	dd0b      	ble.n	800d010 <_printf_float+0x19c>
 800cff8:	6121      	str	r1, [r4, #16]
 800cffa:	b913      	cbnz	r3, 800d002 <_printf_float+0x18e>
 800cffc:	6822      	ldr	r2, [r4, #0]
 800cffe:	07d0      	lsls	r0, r2, #31
 800d000:	d502      	bpl.n	800d008 <_printf_float+0x194>
 800d002:	3301      	adds	r3, #1
 800d004:	440b      	add	r3, r1
 800d006:	6123      	str	r3, [r4, #16]
 800d008:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d00a:	f04f 0900 	mov.w	r9, #0
 800d00e:	e7db      	b.n	800cfc8 <_printf_float+0x154>
 800d010:	b913      	cbnz	r3, 800d018 <_printf_float+0x1a4>
 800d012:	6822      	ldr	r2, [r4, #0]
 800d014:	07d2      	lsls	r2, r2, #31
 800d016:	d501      	bpl.n	800d01c <_printf_float+0x1a8>
 800d018:	3302      	adds	r3, #2
 800d01a:	e7f4      	b.n	800d006 <_printf_float+0x192>
 800d01c:	2301      	movs	r3, #1
 800d01e:	e7f2      	b.n	800d006 <_printf_float+0x192>
 800d020:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d026:	4299      	cmp	r1, r3
 800d028:	db05      	blt.n	800d036 <_printf_float+0x1c2>
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	6121      	str	r1, [r4, #16]
 800d02e:	07d8      	lsls	r0, r3, #31
 800d030:	d5ea      	bpl.n	800d008 <_printf_float+0x194>
 800d032:	1c4b      	adds	r3, r1, #1
 800d034:	e7e7      	b.n	800d006 <_printf_float+0x192>
 800d036:	2900      	cmp	r1, #0
 800d038:	bfd4      	ite	le
 800d03a:	f1c1 0202 	rsble	r2, r1, #2
 800d03e:	2201      	movgt	r2, #1
 800d040:	4413      	add	r3, r2
 800d042:	e7e0      	b.n	800d006 <_printf_float+0x192>
 800d044:	6823      	ldr	r3, [r4, #0]
 800d046:	055a      	lsls	r2, r3, #21
 800d048:	d407      	bmi.n	800d05a <_printf_float+0x1e6>
 800d04a:	6923      	ldr	r3, [r4, #16]
 800d04c:	4642      	mov	r2, r8
 800d04e:	4631      	mov	r1, r6
 800d050:	4628      	mov	r0, r5
 800d052:	47b8      	blx	r7
 800d054:	3001      	adds	r0, #1
 800d056:	d12b      	bne.n	800d0b0 <_printf_float+0x23c>
 800d058:	e767      	b.n	800cf2a <_printf_float+0xb6>
 800d05a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d05e:	f240 80dd 	bls.w	800d21c <_printf_float+0x3a8>
 800d062:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d066:	2200      	movs	r2, #0
 800d068:	2300      	movs	r3, #0
 800d06a:	f7f3 fd35 	bl	8000ad8 <__aeabi_dcmpeq>
 800d06e:	2800      	cmp	r0, #0
 800d070:	d033      	beq.n	800d0da <_printf_float+0x266>
 800d072:	4a37      	ldr	r2, [pc, #220]	@ (800d150 <_printf_float+0x2dc>)
 800d074:	2301      	movs	r3, #1
 800d076:	4631      	mov	r1, r6
 800d078:	4628      	mov	r0, r5
 800d07a:	47b8      	blx	r7
 800d07c:	3001      	adds	r0, #1
 800d07e:	f43f af54 	beq.w	800cf2a <_printf_float+0xb6>
 800d082:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d086:	4543      	cmp	r3, r8
 800d088:	db02      	blt.n	800d090 <_printf_float+0x21c>
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	07d8      	lsls	r0, r3, #31
 800d08e:	d50f      	bpl.n	800d0b0 <_printf_float+0x23c>
 800d090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d094:	4631      	mov	r1, r6
 800d096:	4628      	mov	r0, r5
 800d098:	47b8      	blx	r7
 800d09a:	3001      	adds	r0, #1
 800d09c:	f43f af45 	beq.w	800cf2a <_printf_float+0xb6>
 800d0a0:	f04f 0900 	mov.w	r9, #0
 800d0a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800d0a8:	f104 0a1a 	add.w	sl, r4, #26
 800d0ac:	45c8      	cmp	r8, r9
 800d0ae:	dc09      	bgt.n	800d0c4 <_printf_float+0x250>
 800d0b0:	6823      	ldr	r3, [r4, #0]
 800d0b2:	079b      	lsls	r3, r3, #30
 800d0b4:	f100 8103 	bmi.w	800d2be <_printf_float+0x44a>
 800d0b8:	68e0      	ldr	r0, [r4, #12]
 800d0ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0bc:	4298      	cmp	r0, r3
 800d0be:	bfb8      	it	lt
 800d0c0:	4618      	movlt	r0, r3
 800d0c2:	e734      	b.n	800cf2e <_printf_float+0xba>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	4652      	mov	r2, sl
 800d0c8:	4631      	mov	r1, r6
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	47b8      	blx	r7
 800d0ce:	3001      	adds	r0, #1
 800d0d0:	f43f af2b 	beq.w	800cf2a <_printf_float+0xb6>
 800d0d4:	f109 0901 	add.w	r9, r9, #1
 800d0d8:	e7e8      	b.n	800d0ac <_printf_float+0x238>
 800d0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	dc39      	bgt.n	800d154 <_printf_float+0x2e0>
 800d0e0:	4a1b      	ldr	r2, [pc, #108]	@ (800d150 <_printf_float+0x2dc>)
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	47b8      	blx	r7
 800d0ea:	3001      	adds	r0, #1
 800d0ec:	f43f af1d 	beq.w	800cf2a <_printf_float+0xb6>
 800d0f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d0f4:	ea59 0303 	orrs.w	r3, r9, r3
 800d0f8:	d102      	bne.n	800d100 <_printf_float+0x28c>
 800d0fa:	6823      	ldr	r3, [r4, #0]
 800d0fc:	07d9      	lsls	r1, r3, #31
 800d0fe:	d5d7      	bpl.n	800d0b0 <_printf_float+0x23c>
 800d100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d104:	4631      	mov	r1, r6
 800d106:	4628      	mov	r0, r5
 800d108:	47b8      	blx	r7
 800d10a:	3001      	adds	r0, #1
 800d10c:	f43f af0d 	beq.w	800cf2a <_printf_float+0xb6>
 800d110:	f04f 0a00 	mov.w	sl, #0
 800d114:	f104 0b1a 	add.w	fp, r4, #26
 800d118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d11a:	425b      	negs	r3, r3
 800d11c:	4553      	cmp	r3, sl
 800d11e:	dc01      	bgt.n	800d124 <_printf_float+0x2b0>
 800d120:	464b      	mov	r3, r9
 800d122:	e793      	b.n	800d04c <_printf_float+0x1d8>
 800d124:	2301      	movs	r3, #1
 800d126:	465a      	mov	r2, fp
 800d128:	4631      	mov	r1, r6
 800d12a:	4628      	mov	r0, r5
 800d12c:	47b8      	blx	r7
 800d12e:	3001      	adds	r0, #1
 800d130:	f43f aefb 	beq.w	800cf2a <_printf_float+0xb6>
 800d134:	f10a 0a01 	add.w	sl, sl, #1
 800d138:	e7ee      	b.n	800d118 <_printf_float+0x2a4>
 800d13a:	bf00      	nop
 800d13c:	7fefffff 	.word	0x7fefffff
 800d140:	0800fb70 	.word	0x0800fb70
 800d144:	0800fb74 	.word	0x0800fb74
 800d148:	0800fb78 	.word	0x0800fb78
 800d14c:	0800fb7c 	.word	0x0800fb7c
 800d150:	0800fb80 	.word	0x0800fb80
 800d154:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d156:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d15a:	4553      	cmp	r3, sl
 800d15c:	bfa8      	it	ge
 800d15e:	4653      	movge	r3, sl
 800d160:	2b00      	cmp	r3, #0
 800d162:	4699      	mov	r9, r3
 800d164:	dc36      	bgt.n	800d1d4 <_printf_float+0x360>
 800d166:	f04f 0b00 	mov.w	fp, #0
 800d16a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d16e:	f104 021a 	add.w	r2, r4, #26
 800d172:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d174:	9306      	str	r3, [sp, #24]
 800d176:	eba3 0309 	sub.w	r3, r3, r9
 800d17a:	455b      	cmp	r3, fp
 800d17c:	dc31      	bgt.n	800d1e2 <_printf_float+0x36e>
 800d17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d180:	459a      	cmp	sl, r3
 800d182:	dc3a      	bgt.n	800d1fa <_printf_float+0x386>
 800d184:	6823      	ldr	r3, [r4, #0]
 800d186:	07da      	lsls	r2, r3, #31
 800d188:	d437      	bmi.n	800d1fa <_printf_float+0x386>
 800d18a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d18c:	ebaa 0903 	sub.w	r9, sl, r3
 800d190:	9b06      	ldr	r3, [sp, #24]
 800d192:	ebaa 0303 	sub.w	r3, sl, r3
 800d196:	4599      	cmp	r9, r3
 800d198:	bfa8      	it	ge
 800d19a:	4699      	movge	r9, r3
 800d19c:	f1b9 0f00 	cmp.w	r9, #0
 800d1a0:	dc33      	bgt.n	800d20a <_printf_float+0x396>
 800d1a2:	f04f 0800 	mov.w	r8, #0
 800d1a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d1aa:	f104 0b1a 	add.w	fp, r4, #26
 800d1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1b0:	ebaa 0303 	sub.w	r3, sl, r3
 800d1b4:	eba3 0309 	sub.w	r3, r3, r9
 800d1b8:	4543      	cmp	r3, r8
 800d1ba:	f77f af79 	ble.w	800d0b0 <_printf_float+0x23c>
 800d1be:	2301      	movs	r3, #1
 800d1c0:	465a      	mov	r2, fp
 800d1c2:	4631      	mov	r1, r6
 800d1c4:	4628      	mov	r0, r5
 800d1c6:	47b8      	blx	r7
 800d1c8:	3001      	adds	r0, #1
 800d1ca:	f43f aeae 	beq.w	800cf2a <_printf_float+0xb6>
 800d1ce:	f108 0801 	add.w	r8, r8, #1
 800d1d2:	e7ec      	b.n	800d1ae <_printf_float+0x33a>
 800d1d4:	4642      	mov	r2, r8
 800d1d6:	4631      	mov	r1, r6
 800d1d8:	4628      	mov	r0, r5
 800d1da:	47b8      	blx	r7
 800d1dc:	3001      	adds	r0, #1
 800d1de:	d1c2      	bne.n	800d166 <_printf_float+0x2f2>
 800d1e0:	e6a3      	b.n	800cf2a <_printf_float+0xb6>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	4631      	mov	r1, r6
 800d1e6:	4628      	mov	r0, r5
 800d1e8:	9206      	str	r2, [sp, #24]
 800d1ea:	47b8      	blx	r7
 800d1ec:	3001      	adds	r0, #1
 800d1ee:	f43f ae9c 	beq.w	800cf2a <_printf_float+0xb6>
 800d1f2:	9a06      	ldr	r2, [sp, #24]
 800d1f4:	f10b 0b01 	add.w	fp, fp, #1
 800d1f8:	e7bb      	b.n	800d172 <_printf_float+0x2fe>
 800d1fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d1fe:	4631      	mov	r1, r6
 800d200:	4628      	mov	r0, r5
 800d202:	47b8      	blx	r7
 800d204:	3001      	adds	r0, #1
 800d206:	d1c0      	bne.n	800d18a <_printf_float+0x316>
 800d208:	e68f      	b.n	800cf2a <_printf_float+0xb6>
 800d20a:	9a06      	ldr	r2, [sp, #24]
 800d20c:	464b      	mov	r3, r9
 800d20e:	4442      	add	r2, r8
 800d210:	4631      	mov	r1, r6
 800d212:	4628      	mov	r0, r5
 800d214:	47b8      	blx	r7
 800d216:	3001      	adds	r0, #1
 800d218:	d1c3      	bne.n	800d1a2 <_printf_float+0x32e>
 800d21a:	e686      	b.n	800cf2a <_printf_float+0xb6>
 800d21c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d220:	f1ba 0f01 	cmp.w	sl, #1
 800d224:	dc01      	bgt.n	800d22a <_printf_float+0x3b6>
 800d226:	07db      	lsls	r3, r3, #31
 800d228:	d536      	bpl.n	800d298 <_printf_float+0x424>
 800d22a:	2301      	movs	r3, #1
 800d22c:	4642      	mov	r2, r8
 800d22e:	4631      	mov	r1, r6
 800d230:	4628      	mov	r0, r5
 800d232:	47b8      	blx	r7
 800d234:	3001      	adds	r0, #1
 800d236:	f43f ae78 	beq.w	800cf2a <_printf_float+0xb6>
 800d23a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d23e:	4631      	mov	r1, r6
 800d240:	4628      	mov	r0, r5
 800d242:	47b8      	blx	r7
 800d244:	3001      	adds	r0, #1
 800d246:	f43f ae70 	beq.w	800cf2a <_printf_float+0xb6>
 800d24a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d24e:	2200      	movs	r2, #0
 800d250:	2300      	movs	r3, #0
 800d252:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d256:	f7f3 fc3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d25a:	b9c0      	cbnz	r0, 800d28e <_printf_float+0x41a>
 800d25c:	4653      	mov	r3, sl
 800d25e:	f108 0201 	add.w	r2, r8, #1
 800d262:	4631      	mov	r1, r6
 800d264:	4628      	mov	r0, r5
 800d266:	47b8      	blx	r7
 800d268:	3001      	adds	r0, #1
 800d26a:	d10c      	bne.n	800d286 <_printf_float+0x412>
 800d26c:	e65d      	b.n	800cf2a <_printf_float+0xb6>
 800d26e:	2301      	movs	r3, #1
 800d270:	465a      	mov	r2, fp
 800d272:	4631      	mov	r1, r6
 800d274:	4628      	mov	r0, r5
 800d276:	47b8      	blx	r7
 800d278:	3001      	adds	r0, #1
 800d27a:	f43f ae56 	beq.w	800cf2a <_printf_float+0xb6>
 800d27e:	f108 0801 	add.w	r8, r8, #1
 800d282:	45d0      	cmp	r8, sl
 800d284:	dbf3      	blt.n	800d26e <_printf_float+0x3fa>
 800d286:	464b      	mov	r3, r9
 800d288:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d28c:	e6df      	b.n	800d04e <_printf_float+0x1da>
 800d28e:	f04f 0800 	mov.w	r8, #0
 800d292:	f104 0b1a 	add.w	fp, r4, #26
 800d296:	e7f4      	b.n	800d282 <_printf_float+0x40e>
 800d298:	2301      	movs	r3, #1
 800d29a:	4642      	mov	r2, r8
 800d29c:	e7e1      	b.n	800d262 <_printf_float+0x3ee>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	464a      	mov	r2, r9
 800d2a2:	4631      	mov	r1, r6
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	47b8      	blx	r7
 800d2a8:	3001      	adds	r0, #1
 800d2aa:	f43f ae3e 	beq.w	800cf2a <_printf_float+0xb6>
 800d2ae:	f108 0801 	add.w	r8, r8, #1
 800d2b2:	68e3      	ldr	r3, [r4, #12]
 800d2b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d2b6:	1a5b      	subs	r3, r3, r1
 800d2b8:	4543      	cmp	r3, r8
 800d2ba:	dcf0      	bgt.n	800d29e <_printf_float+0x42a>
 800d2bc:	e6fc      	b.n	800d0b8 <_printf_float+0x244>
 800d2be:	f04f 0800 	mov.w	r8, #0
 800d2c2:	f104 0919 	add.w	r9, r4, #25
 800d2c6:	e7f4      	b.n	800d2b2 <_printf_float+0x43e>

0800d2c8 <_printf_common>:
 800d2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2cc:	4616      	mov	r6, r2
 800d2ce:	4698      	mov	r8, r3
 800d2d0:	688a      	ldr	r2, [r1, #8]
 800d2d2:	690b      	ldr	r3, [r1, #16]
 800d2d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2d8:	4293      	cmp	r3, r2
 800d2da:	bfb8      	it	lt
 800d2dc:	4613      	movlt	r3, r2
 800d2de:	6033      	str	r3, [r6, #0]
 800d2e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d2e4:	4607      	mov	r7, r0
 800d2e6:	460c      	mov	r4, r1
 800d2e8:	b10a      	cbz	r2, 800d2ee <_printf_common+0x26>
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	6033      	str	r3, [r6, #0]
 800d2ee:	6823      	ldr	r3, [r4, #0]
 800d2f0:	0699      	lsls	r1, r3, #26
 800d2f2:	bf42      	ittt	mi
 800d2f4:	6833      	ldrmi	r3, [r6, #0]
 800d2f6:	3302      	addmi	r3, #2
 800d2f8:	6033      	strmi	r3, [r6, #0]
 800d2fa:	6825      	ldr	r5, [r4, #0]
 800d2fc:	f015 0506 	ands.w	r5, r5, #6
 800d300:	d106      	bne.n	800d310 <_printf_common+0x48>
 800d302:	f104 0a19 	add.w	sl, r4, #25
 800d306:	68e3      	ldr	r3, [r4, #12]
 800d308:	6832      	ldr	r2, [r6, #0]
 800d30a:	1a9b      	subs	r3, r3, r2
 800d30c:	42ab      	cmp	r3, r5
 800d30e:	dc26      	bgt.n	800d35e <_printf_common+0x96>
 800d310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d314:	6822      	ldr	r2, [r4, #0]
 800d316:	3b00      	subs	r3, #0
 800d318:	bf18      	it	ne
 800d31a:	2301      	movne	r3, #1
 800d31c:	0692      	lsls	r2, r2, #26
 800d31e:	d42b      	bmi.n	800d378 <_printf_common+0xb0>
 800d320:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d324:	4641      	mov	r1, r8
 800d326:	4638      	mov	r0, r7
 800d328:	47c8      	blx	r9
 800d32a:	3001      	adds	r0, #1
 800d32c:	d01e      	beq.n	800d36c <_printf_common+0xa4>
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	6922      	ldr	r2, [r4, #16]
 800d332:	f003 0306 	and.w	r3, r3, #6
 800d336:	2b04      	cmp	r3, #4
 800d338:	bf02      	ittt	eq
 800d33a:	68e5      	ldreq	r5, [r4, #12]
 800d33c:	6833      	ldreq	r3, [r6, #0]
 800d33e:	1aed      	subeq	r5, r5, r3
 800d340:	68a3      	ldr	r3, [r4, #8]
 800d342:	bf0c      	ite	eq
 800d344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d348:	2500      	movne	r5, #0
 800d34a:	4293      	cmp	r3, r2
 800d34c:	bfc4      	itt	gt
 800d34e:	1a9b      	subgt	r3, r3, r2
 800d350:	18ed      	addgt	r5, r5, r3
 800d352:	2600      	movs	r6, #0
 800d354:	341a      	adds	r4, #26
 800d356:	42b5      	cmp	r5, r6
 800d358:	d11a      	bne.n	800d390 <_printf_common+0xc8>
 800d35a:	2000      	movs	r0, #0
 800d35c:	e008      	b.n	800d370 <_printf_common+0xa8>
 800d35e:	2301      	movs	r3, #1
 800d360:	4652      	mov	r2, sl
 800d362:	4641      	mov	r1, r8
 800d364:	4638      	mov	r0, r7
 800d366:	47c8      	blx	r9
 800d368:	3001      	adds	r0, #1
 800d36a:	d103      	bne.n	800d374 <_printf_common+0xac>
 800d36c:	f04f 30ff 	mov.w	r0, #4294967295
 800d370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d374:	3501      	adds	r5, #1
 800d376:	e7c6      	b.n	800d306 <_printf_common+0x3e>
 800d378:	18e1      	adds	r1, r4, r3
 800d37a:	1c5a      	adds	r2, r3, #1
 800d37c:	2030      	movs	r0, #48	@ 0x30
 800d37e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d382:	4422      	add	r2, r4
 800d384:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d388:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d38c:	3302      	adds	r3, #2
 800d38e:	e7c7      	b.n	800d320 <_printf_common+0x58>
 800d390:	2301      	movs	r3, #1
 800d392:	4622      	mov	r2, r4
 800d394:	4641      	mov	r1, r8
 800d396:	4638      	mov	r0, r7
 800d398:	47c8      	blx	r9
 800d39a:	3001      	adds	r0, #1
 800d39c:	d0e6      	beq.n	800d36c <_printf_common+0xa4>
 800d39e:	3601      	adds	r6, #1
 800d3a0:	e7d9      	b.n	800d356 <_printf_common+0x8e>
	...

0800d3a4 <_printf_i>:
 800d3a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a8:	7e0f      	ldrb	r7, [r1, #24]
 800d3aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d3ac:	2f78      	cmp	r7, #120	@ 0x78
 800d3ae:	4691      	mov	r9, r2
 800d3b0:	4680      	mov	r8, r0
 800d3b2:	460c      	mov	r4, r1
 800d3b4:	469a      	mov	sl, r3
 800d3b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d3ba:	d807      	bhi.n	800d3cc <_printf_i+0x28>
 800d3bc:	2f62      	cmp	r7, #98	@ 0x62
 800d3be:	d80a      	bhi.n	800d3d6 <_printf_i+0x32>
 800d3c0:	2f00      	cmp	r7, #0
 800d3c2:	f000 80d2 	beq.w	800d56a <_printf_i+0x1c6>
 800d3c6:	2f58      	cmp	r7, #88	@ 0x58
 800d3c8:	f000 80b9 	beq.w	800d53e <_printf_i+0x19a>
 800d3cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d3d4:	e03a      	b.n	800d44c <_printf_i+0xa8>
 800d3d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d3da:	2b15      	cmp	r3, #21
 800d3dc:	d8f6      	bhi.n	800d3cc <_printf_i+0x28>
 800d3de:	a101      	add	r1, pc, #4	@ (adr r1, 800d3e4 <_printf_i+0x40>)
 800d3e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3e4:	0800d43d 	.word	0x0800d43d
 800d3e8:	0800d451 	.word	0x0800d451
 800d3ec:	0800d3cd 	.word	0x0800d3cd
 800d3f0:	0800d3cd 	.word	0x0800d3cd
 800d3f4:	0800d3cd 	.word	0x0800d3cd
 800d3f8:	0800d3cd 	.word	0x0800d3cd
 800d3fc:	0800d451 	.word	0x0800d451
 800d400:	0800d3cd 	.word	0x0800d3cd
 800d404:	0800d3cd 	.word	0x0800d3cd
 800d408:	0800d3cd 	.word	0x0800d3cd
 800d40c:	0800d3cd 	.word	0x0800d3cd
 800d410:	0800d551 	.word	0x0800d551
 800d414:	0800d47b 	.word	0x0800d47b
 800d418:	0800d50b 	.word	0x0800d50b
 800d41c:	0800d3cd 	.word	0x0800d3cd
 800d420:	0800d3cd 	.word	0x0800d3cd
 800d424:	0800d573 	.word	0x0800d573
 800d428:	0800d3cd 	.word	0x0800d3cd
 800d42c:	0800d47b 	.word	0x0800d47b
 800d430:	0800d3cd 	.word	0x0800d3cd
 800d434:	0800d3cd 	.word	0x0800d3cd
 800d438:	0800d513 	.word	0x0800d513
 800d43c:	6833      	ldr	r3, [r6, #0]
 800d43e:	1d1a      	adds	r2, r3, #4
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	6032      	str	r2, [r6, #0]
 800d444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d448:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d44c:	2301      	movs	r3, #1
 800d44e:	e09d      	b.n	800d58c <_printf_i+0x1e8>
 800d450:	6833      	ldr	r3, [r6, #0]
 800d452:	6820      	ldr	r0, [r4, #0]
 800d454:	1d19      	adds	r1, r3, #4
 800d456:	6031      	str	r1, [r6, #0]
 800d458:	0606      	lsls	r6, r0, #24
 800d45a:	d501      	bpl.n	800d460 <_printf_i+0xbc>
 800d45c:	681d      	ldr	r5, [r3, #0]
 800d45e:	e003      	b.n	800d468 <_printf_i+0xc4>
 800d460:	0645      	lsls	r5, r0, #25
 800d462:	d5fb      	bpl.n	800d45c <_printf_i+0xb8>
 800d464:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d468:	2d00      	cmp	r5, #0
 800d46a:	da03      	bge.n	800d474 <_printf_i+0xd0>
 800d46c:	232d      	movs	r3, #45	@ 0x2d
 800d46e:	426d      	negs	r5, r5
 800d470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d474:	4859      	ldr	r0, [pc, #356]	@ (800d5dc <_printf_i+0x238>)
 800d476:	230a      	movs	r3, #10
 800d478:	e011      	b.n	800d49e <_printf_i+0xfa>
 800d47a:	6821      	ldr	r1, [r4, #0]
 800d47c:	6833      	ldr	r3, [r6, #0]
 800d47e:	0608      	lsls	r0, r1, #24
 800d480:	f853 5b04 	ldr.w	r5, [r3], #4
 800d484:	d402      	bmi.n	800d48c <_printf_i+0xe8>
 800d486:	0649      	lsls	r1, r1, #25
 800d488:	bf48      	it	mi
 800d48a:	b2ad      	uxthmi	r5, r5
 800d48c:	2f6f      	cmp	r7, #111	@ 0x6f
 800d48e:	4853      	ldr	r0, [pc, #332]	@ (800d5dc <_printf_i+0x238>)
 800d490:	6033      	str	r3, [r6, #0]
 800d492:	bf14      	ite	ne
 800d494:	230a      	movne	r3, #10
 800d496:	2308      	moveq	r3, #8
 800d498:	2100      	movs	r1, #0
 800d49a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d49e:	6866      	ldr	r6, [r4, #4]
 800d4a0:	60a6      	str	r6, [r4, #8]
 800d4a2:	2e00      	cmp	r6, #0
 800d4a4:	bfa2      	ittt	ge
 800d4a6:	6821      	ldrge	r1, [r4, #0]
 800d4a8:	f021 0104 	bicge.w	r1, r1, #4
 800d4ac:	6021      	strge	r1, [r4, #0]
 800d4ae:	b90d      	cbnz	r5, 800d4b4 <_printf_i+0x110>
 800d4b0:	2e00      	cmp	r6, #0
 800d4b2:	d04b      	beq.n	800d54c <_printf_i+0x1a8>
 800d4b4:	4616      	mov	r6, r2
 800d4b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800d4ba:	fb03 5711 	mls	r7, r3, r1, r5
 800d4be:	5dc7      	ldrb	r7, [r0, r7]
 800d4c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4c4:	462f      	mov	r7, r5
 800d4c6:	42bb      	cmp	r3, r7
 800d4c8:	460d      	mov	r5, r1
 800d4ca:	d9f4      	bls.n	800d4b6 <_printf_i+0x112>
 800d4cc:	2b08      	cmp	r3, #8
 800d4ce:	d10b      	bne.n	800d4e8 <_printf_i+0x144>
 800d4d0:	6823      	ldr	r3, [r4, #0]
 800d4d2:	07df      	lsls	r7, r3, #31
 800d4d4:	d508      	bpl.n	800d4e8 <_printf_i+0x144>
 800d4d6:	6923      	ldr	r3, [r4, #16]
 800d4d8:	6861      	ldr	r1, [r4, #4]
 800d4da:	4299      	cmp	r1, r3
 800d4dc:	bfde      	ittt	le
 800d4de:	2330      	movle	r3, #48	@ 0x30
 800d4e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d4e8:	1b92      	subs	r2, r2, r6
 800d4ea:	6122      	str	r2, [r4, #16]
 800d4ec:	f8cd a000 	str.w	sl, [sp]
 800d4f0:	464b      	mov	r3, r9
 800d4f2:	aa03      	add	r2, sp, #12
 800d4f4:	4621      	mov	r1, r4
 800d4f6:	4640      	mov	r0, r8
 800d4f8:	f7ff fee6 	bl	800d2c8 <_printf_common>
 800d4fc:	3001      	adds	r0, #1
 800d4fe:	d14a      	bne.n	800d596 <_printf_i+0x1f2>
 800d500:	f04f 30ff 	mov.w	r0, #4294967295
 800d504:	b004      	add	sp, #16
 800d506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	f043 0320 	orr.w	r3, r3, #32
 800d510:	6023      	str	r3, [r4, #0]
 800d512:	4833      	ldr	r0, [pc, #204]	@ (800d5e0 <_printf_i+0x23c>)
 800d514:	2778      	movs	r7, #120	@ 0x78
 800d516:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d51a:	6823      	ldr	r3, [r4, #0]
 800d51c:	6831      	ldr	r1, [r6, #0]
 800d51e:	061f      	lsls	r7, r3, #24
 800d520:	f851 5b04 	ldr.w	r5, [r1], #4
 800d524:	d402      	bmi.n	800d52c <_printf_i+0x188>
 800d526:	065f      	lsls	r7, r3, #25
 800d528:	bf48      	it	mi
 800d52a:	b2ad      	uxthmi	r5, r5
 800d52c:	6031      	str	r1, [r6, #0]
 800d52e:	07d9      	lsls	r1, r3, #31
 800d530:	bf44      	itt	mi
 800d532:	f043 0320 	orrmi.w	r3, r3, #32
 800d536:	6023      	strmi	r3, [r4, #0]
 800d538:	b11d      	cbz	r5, 800d542 <_printf_i+0x19e>
 800d53a:	2310      	movs	r3, #16
 800d53c:	e7ac      	b.n	800d498 <_printf_i+0xf4>
 800d53e:	4827      	ldr	r0, [pc, #156]	@ (800d5dc <_printf_i+0x238>)
 800d540:	e7e9      	b.n	800d516 <_printf_i+0x172>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	f023 0320 	bic.w	r3, r3, #32
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	e7f6      	b.n	800d53a <_printf_i+0x196>
 800d54c:	4616      	mov	r6, r2
 800d54e:	e7bd      	b.n	800d4cc <_printf_i+0x128>
 800d550:	6833      	ldr	r3, [r6, #0]
 800d552:	6825      	ldr	r5, [r4, #0]
 800d554:	6961      	ldr	r1, [r4, #20]
 800d556:	1d18      	adds	r0, r3, #4
 800d558:	6030      	str	r0, [r6, #0]
 800d55a:	062e      	lsls	r6, r5, #24
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	d501      	bpl.n	800d564 <_printf_i+0x1c0>
 800d560:	6019      	str	r1, [r3, #0]
 800d562:	e002      	b.n	800d56a <_printf_i+0x1c6>
 800d564:	0668      	lsls	r0, r5, #25
 800d566:	d5fb      	bpl.n	800d560 <_printf_i+0x1bc>
 800d568:	8019      	strh	r1, [r3, #0]
 800d56a:	2300      	movs	r3, #0
 800d56c:	6123      	str	r3, [r4, #16]
 800d56e:	4616      	mov	r6, r2
 800d570:	e7bc      	b.n	800d4ec <_printf_i+0x148>
 800d572:	6833      	ldr	r3, [r6, #0]
 800d574:	1d1a      	adds	r2, r3, #4
 800d576:	6032      	str	r2, [r6, #0]
 800d578:	681e      	ldr	r6, [r3, #0]
 800d57a:	6862      	ldr	r2, [r4, #4]
 800d57c:	2100      	movs	r1, #0
 800d57e:	4630      	mov	r0, r6
 800d580:	f7f2 fe2e 	bl	80001e0 <memchr>
 800d584:	b108      	cbz	r0, 800d58a <_printf_i+0x1e6>
 800d586:	1b80      	subs	r0, r0, r6
 800d588:	6060      	str	r0, [r4, #4]
 800d58a:	6863      	ldr	r3, [r4, #4]
 800d58c:	6123      	str	r3, [r4, #16]
 800d58e:	2300      	movs	r3, #0
 800d590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d594:	e7aa      	b.n	800d4ec <_printf_i+0x148>
 800d596:	6923      	ldr	r3, [r4, #16]
 800d598:	4632      	mov	r2, r6
 800d59a:	4649      	mov	r1, r9
 800d59c:	4640      	mov	r0, r8
 800d59e:	47d0      	blx	sl
 800d5a0:	3001      	adds	r0, #1
 800d5a2:	d0ad      	beq.n	800d500 <_printf_i+0x15c>
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	079b      	lsls	r3, r3, #30
 800d5a8:	d413      	bmi.n	800d5d2 <_printf_i+0x22e>
 800d5aa:	68e0      	ldr	r0, [r4, #12]
 800d5ac:	9b03      	ldr	r3, [sp, #12]
 800d5ae:	4298      	cmp	r0, r3
 800d5b0:	bfb8      	it	lt
 800d5b2:	4618      	movlt	r0, r3
 800d5b4:	e7a6      	b.n	800d504 <_printf_i+0x160>
 800d5b6:	2301      	movs	r3, #1
 800d5b8:	4632      	mov	r2, r6
 800d5ba:	4649      	mov	r1, r9
 800d5bc:	4640      	mov	r0, r8
 800d5be:	47d0      	blx	sl
 800d5c0:	3001      	adds	r0, #1
 800d5c2:	d09d      	beq.n	800d500 <_printf_i+0x15c>
 800d5c4:	3501      	adds	r5, #1
 800d5c6:	68e3      	ldr	r3, [r4, #12]
 800d5c8:	9903      	ldr	r1, [sp, #12]
 800d5ca:	1a5b      	subs	r3, r3, r1
 800d5cc:	42ab      	cmp	r3, r5
 800d5ce:	dcf2      	bgt.n	800d5b6 <_printf_i+0x212>
 800d5d0:	e7eb      	b.n	800d5aa <_printf_i+0x206>
 800d5d2:	2500      	movs	r5, #0
 800d5d4:	f104 0619 	add.w	r6, r4, #25
 800d5d8:	e7f5      	b.n	800d5c6 <_printf_i+0x222>
 800d5da:	bf00      	nop
 800d5dc:	0800fb82 	.word	0x0800fb82
 800d5e0:	0800fb93 	.word	0x0800fb93

0800d5e4 <std>:
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	b510      	push	{r4, lr}
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	e9c0 3300 	strd	r3, r3, [r0]
 800d5ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d5f2:	6083      	str	r3, [r0, #8]
 800d5f4:	8181      	strh	r1, [r0, #12]
 800d5f6:	6643      	str	r3, [r0, #100]	@ 0x64
 800d5f8:	81c2      	strh	r2, [r0, #14]
 800d5fa:	6183      	str	r3, [r0, #24]
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	2208      	movs	r2, #8
 800d600:	305c      	adds	r0, #92	@ 0x5c
 800d602:	f000 f9e7 	bl	800d9d4 <memset>
 800d606:	4b0d      	ldr	r3, [pc, #52]	@ (800d63c <std+0x58>)
 800d608:	6263      	str	r3, [r4, #36]	@ 0x24
 800d60a:	4b0d      	ldr	r3, [pc, #52]	@ (800d640 <std+0x5c>)
 800d60c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d60e:	4b0d      	ldr	r3, [pc, #52]	@ (800d644 <std+0x60>)
 800d610:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d612:	4b0d      	ldr	r3, [pc, #52]	@ (800d648 <std+0x64>)
 800d614:	6323      	str	r3, [r4, #48]	@ 0x30
 800d616:	4b0d      	ldr	r3, [pc, #52]	@ (800d64c <std+0x68>)
 800d618:	6224      	str	r4, [r4, #32]
 800d61a:	429c      	cmp	r4, r3
 800d61c:	d006      	beq.n	800d62c <std+0x48>
 800d61e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d622:	4294      	cmp	r4, r2
 800d624:	d002      	beq.n	800d62c <std+0x48>
 800d626:	33d0      	adds	r3, #208	@ 0xd0
 800d628:	429c      	cmp	r4, r3
 800d62a:	d105      	bne.n	800d638 <std+0x54>
 800d62c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d634:	f000 ba4a 	b.w	800dacc <__retarget_lock_init_recursive>
 800d638:	bd10      	pop	{r4, pc}
 800d63a:	bf00      	nop
 800d63c:	0800d825 	.word	0x0800d825
 800d640:	0800d847 	.word	0x0800d847
 800d644:	0800d87f 	.word	0x0800d87f
 800d648:	0800d8a3 	.word	0x0800d8a3
 800d64c:	20001040 	.word	0x20001040

0800d650 <stdio_exit_handler>:
 800d650:	4a02      	ldr	r2, [pc, #8]	@ (800d65c <stdio_exit_handler+0xc>)
 800d652:	4903      	ldr	r1, [pc, #12]	@ (800d660 <stdio_exit_handler+0x10>)
 800d654:	4803      	ldr	r0, [pc, #12]	@ (800d664 <stdio_exit_handler+0x14>)
 800d656:	f000 b869 	b.w	800d72c <_fwalk_sglue>
 800d65a:	bf00      	nop
 800d65c:	2000011c 	.word	0x2000011c
 800d660:	0800f195 	.word	0x0800f195
 800d664:	2000012c 	.word	0x2000012c

0800d668 <cleanup_stdio>:
 800d668:	6841      	ldr	r1, [r0, #4]
 800d66a:	4b0c      	ldr	r3, [pc, #48]	@ (800d69c <cleanup_stdio+0x34>)
 800d66c:	4299      	cmp	r1, r3
 800d66e:	b510      	push	{r4, lr}
 800d670:	4604      	mov	r4, r0
 800d672:	d001      	beq.n	800d678 <cleanup_stdio+0x10>
 800d674:	f001 fd8e 	bl	800f194 <_fflush_r>
 800d678:	68a1      	ldr	r1, [r4, #8]
 800d67a:	4b09      	ldr	r3, [pc, #36]	@ (800d6a0 <cleanup_stdio+0x38>)
 800d67c:	4299      	cmp	r1, r3
 800d67e:	d002      	beq.n	800d686 <cleanup_stdio+0x1e>
 800d680:	4620      	mov	r0, r4
 800d682:	f001 fd87 	bl	800f194 <_fflush_r>
 800d686:	68e1      	ldr	r1, [r4, #12]
 800d688:	4b06      	ldr	r3, [pc, #24]	@ (800d6a4 <cleanup_stdio+0x3c>)
 800d68a:	4299      	cmp	r1, r3
 800d68c:	d004      	beq.n	800d698 <cleanup_stdio+0x30>
 800d68e:	4620      	mov	r0, r4
 800d690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d694:	f001 bd7e 	b.w	800f194 <_fflush_r>
 800d698:	bd10      	pop	{r4, pc}
 800d69a:	bf00      	nop
 800d69c:	20001040 	.word	0x20001040
 800d6a0:	200010a8 	.word	0x200010a8
 800d6a4:	20001110 	.word	0x20001110

0800d6a8 <global_stdio_init.part.0>:
 800d6a8:	b510      	push	{r4, lr}
 800d6aa:	4b0b      	ldr	r3, [pc, #44]	@ (800d6d8 <global_stdio_init.part.0+0x30>)
 800d6ac:	4c0b      	ldr	r4, [pc, #44]	@ (800d6dc <global_stdio_init.part.0+0x34>)
 800d6ae:	4a0c      	ldr	r2, [pc, #48]	@ (800d6e0 <global_stdio_init.part.0+0x38>)
 800d6b0:	601a      	str	r2, [r3, #0]
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	2200      	movs	r2, #0
 800d6b6:	2104      	movs	r1, #4
 800d6b8:	f7ff ff94 	bl	800d5e4 <std>
 800d6bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d6c0:	2201      	movs	r2, #1
 800d6c2:	2109      	movs	r1, #9
 800d6c4:	f7ff ff8e 	bl	800d5e4 <std>
 800d6c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d6cc:	2202      	movs	r2, #2
 800d6ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6d2:	2112      	movs	r1, #18
 800d6d4:	f7ff bf86 	b.w	800d5e4 <std>
 800d6d8:	20001178 	.word	0x20001178
 800d6dc:	20001040 	.word	0x20001040
 800d6e0:	0800d651 	.word	0x0800d651

0800d6e4 <__sfp_lock_acquire>:
 800d6e4:	4801      	ldr	r0, [pc, #4]	@ (800d6ec <__sfp_lock_acquire+0x8>)
 800d6e6:	f000 b9f2 	b.w	800dace <__retarget_lock_acquire_recursive>
 800d6ea:	bf00      	nop
 800d6ec:	20001181 	.word	0x20001181

0800d6f0 <__sfp_lock_release>:
 800d6f0:	4801      	ldr	r0, [pc, #4]	@ (800d6f8 <__sfp_lock_release+0x8>)
 800d6f2:	f000 b9ed 	b.w	800dad0 <__retarget_lock_release_recursive>
 800d6f6:	bf00      	nop
 800d6f8:	20001181 	.word	0x20001181

0800d6fc <__sinit>:
 800d6fc:	b510      	push	{r4, lr}
 800d6fe:	4604      	mov	r4, r0
 800d700:	f7ff fff0 	bl	800d6e4 <__sfp_lock_acquire>
 800d704:	6a23      	ldr	r3, [r4, #32]
 800d706:	b11b      	cbz	r3, 800d710 <__sinit+0x14>
 800d708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d70c:	f7ff bff0 	b.w	800d6f0 <__sfp_lock_release>
 800d710:	4b04      	ldr	r3, [pc, #16]	@ (800d724 <__sinit+0x28>)
 800d712:	6223      	str	r3, [r4, #32]
 800d714:	4b04      	ldr	r3, [pc, #16]	@ (800d728 <__sinit+0x2c>)
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1f5      	bne.n	800d708 <__sinit+0xc>
 800d71c:	f7ff ffc4 	bl	800d6a8 <global_stdio_init.part.0>
 800d720:	e7f2      	b.n	800d708 <__sinit+0xc>
 800d722:	bf00      	nop
 800d724:	0800d669 	.word	0x0800d669
 800d728:	20001178 	.word	0x20001178

0800d72c <_fwalk_sglue>:
 800d72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d730:	4607      	mov	r7, r0
 800d732:	4688      	mov	r8, r1
 800d734:	4614      	mov	r4, r2
 800d736:	2600      	movs	r6, #0
 800d738:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d73c:	f1b9 0901 	subs.w	r9, r9, #1
 800d740:	d505      	bpl.n	800d74e <_fwalk_sglue+0x22>
 800d742:	6824      	ldr	r4, [r4, #0]
 800d744:	2c00      	cmp	r4, #0
 800d746:	d1f7      	bne.n	800d738 <_fwalk_sglue+0xc>
 800d748:	4630      	mov	r0, r6
 800d74a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d74e:	89ab      	ldrh	r3, [r5, #12]
 800d750:	2b01      	cmp	r3, #1
 800d752:	d907      	bls.n	800d764 <_fwalk_sglue+0x38>
 800d754:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d758:	3301      	adds	r3, #1
 800d75a:	d003      	beq.n	800d764 <_fwalk_sglue+0x38>
 800d75c:	4629      	mov	r1, r5
 800d75e:	4638      	mov	r0, r7
 800d760:	47c0      	blx	r8
 800d762:	4306      	orrs	r6, r0
 800d764:	3568      	adds	r5, #104	@ 0x68
 800d766:	e7e9      	b.n	800d73c <_fwalk_sglue+0x10>

0800d768 <_puts_r>:
 800d768:	6a03      	ldr	r3, [r0, #32]
 800d76a:	b570      	push	{r4, r5, r6, lr}
 800d76c:	6884      	ldr	r4, [r0, #8]
 800d76e:	4605      	mov	r5, r0
 800d770:	460e      	mov	r6, r1
 800d772:	b90b      	cbnz	r3, 800d778 <_puts_r+0x10>
 800d774:	f7ff ffc2 	bl	800d6fc <__sinit>
 800d778:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d77a:	07db      	lsls	r3, r3, #31
 800d77c:	d405      	bmi.n	800d78a <_puts_r+0x22>
 800d77e:	89a3      	ldrh	r3, [r4, #12]
 800d780:	0598      	lsls	r0, r3, #22
 800d782:	d402      	bmi.n	800d78a <_puts_r+0x22>
 800d784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d786:	f000 f9a2 	bl	800dace <__retarget_lock_acquire_recursive>
 800d78a:	89a3      	ldrh	r3, [r4, #12]
 800d78c:	0719      	lsls	r1, r3, #28
 800d78e:	d502      	bpl.n	800d796 <_puts_r+0x2e>
 800d790:	6923      	ldr	r3, [r4, #16]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d135      	bne.n	800d802 <_puts_r+0x9a>
 800d796:	4621      	mov	r1, r4
 800d798:	4628      	mov	r0, r5
 800d79a:	f000 f8c5 	bl	800d928 <__swsetup_r>
 800d79e:	b380      	cbz	r0, 800d802 <_puts_r+0x9a>
 800d7a0:	f04f 35ff 	mov.w	r5, #4294967295
 800d7a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7a6:	07da      	lsls	r2, r3, #31
 800d7a8:	d405      	bmi.n	800d7b6 <_puts_r+0x4e>
 800d7aa:	89a3      	ldrh	r3, [r4, #12]
 800d7ac:	059b      	lsls	r3, r3, #22
 800d7ae:	d402      	bmi.n	800d7b6 <_puts_r+0x4e>
 800d7b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7b2:	f000 f98d 	bl	800dad0 <__retarget_lock_release_recursive>
 800d7b6:	4628      	mov	r0, r5
 800d7b8:	bd70      	pop	{r4, r5, r6, pc}
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	da04      	bge.n	800d7c8 <_puts_r+0x60>
 800d7be:	69a2      	ldr	r2, [r4, #24]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	dc17      	bgt.n	800d7f4 <_puts_r+0x8c>
 800d7c4:	290a      	cmp	r1, #10
 800d7c6:	d015      	beq.n	800d7f4 <_puts_r+0x8c>
 800d7c8:	6823      	ldr	r3, [r4, #0]
 800d7ca:	1c5a      	adds	r2, r3, #1
 800d7cc:	6022      	str	r2, [r4, #0]
 800d7ce:	7019      	strb	r1, [r3, #0]
 800d7d0:	68a3      	ldr	r3, [r4, #8]
 800d7d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	60a3      	str	r3, [r4, #8]
 800d7da:	2900      	cmp	r1, #0
 800d7dc:	d1ed      	bne.n	800d7ba <_puts_r+0x52>
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	da11      	bge.n	800d806 <_puts_r+0x9e>
 800d7e2:	4622      	mov	r2, r4
 800d7e4:	210a      	movs	r1, #10
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	f000 f85f 	bl	800d8aa <__swbuf_r>
 800d7ec:	3001      	adds	r0, #1
 800d7ee:	d0d7      	beq.n	800d7a0 <_puts_r+0x38>
 800d7f0:	250a      	movs	r5, #10
 800d7f2:	e7d7      	b.n	800d7a4 <_puts_r+0x3c>
 800d7f4:	4622      	mov	r2, r4
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f000 f857 	bl	800d8aa <__swbuf_r>
 800d7fc:	3001      	adds	r0, #1
 800d7fe:	d1e7      	bne.n	800d7d0 <_puts_r+0x68>
 800d800:	e7ce      	b.n	800d7a0 <_puts_r+0x38>
 800d802:	3e01      	subs	r6, #1
 800d804:	e7e4      	b.n	800d7d0 <_puts_r+0x68>
 800d806:	6823      	ldr	r3, [r4, #0]
 800d808:	1c5a      	adds	r2, r3, #1
 800d80a:	6022      	str	r2, [r4, #0]
 800d80c:	220a      	movs	r2, #10
 800d80e:	701a      	strb	r2, [r3, #0]
 800d810:	e7ee      	b.n	800d7f0 <_puts_r+0x88>
	...

0800d814 <puts>:
 800d814:	4b02      	ldr	r3, [pc, #8]	@ (800d820 <puts+0xc>)
 800d816:	4601      	mov	r1, r0
 800d818:	6818      	ldr	r0, [r3, #0]
 800d81a:	f7ff bfa5 	b.w	800d768 <_puts_r>
 800d81e:	bf00      	nop
 800d820:	20000128 	.word	0x20000128

0800d824 <__sread>:
 800d824:	b510      	push	{r4, lr}
 800d826:	460c      	mov	r4, r1
 800d828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d82c:	f000 f900 	bl	800da30 <_read_r>
 800d830:	2800      	cmp	r0, #0
 800d832:	bfab      	itete	ge
 800d834:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d836:	89a3      	ldrhlt	r3, [r4, #12]
 800d838:	181b      	addge	r3, r3, r0
 800d83a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d83e:	bfac      	ite	ge
 800d840:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d842:	81a3      	strhlt	r3, [r4, #12]
 800d844:	bd10      	pop	{r4, pc}

0800d846 <__swrite>:
 800d846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d84a:	461f      	mov	r7, r3
 800d84c:	898b      	ldrh	r3, [r1, #12]
 800d84e:	05db      	lsls	r3, r3, #23
 800d850:	4605      	mov	r5, r0
 800d852:	460c      	mov	r4, r1
 800d854:	4616      	mov	r6, r2
 800d856:	d505      	bpl.n	800d864 <__swrite+0x1e>
 800d858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d85c:	2302      	movs	r3, #2
 800d85e:	2200      	movs	r2, #0
 800d860:	f000 f8d4 	bl	800da0c <_lseek_r>
 800d864:	89a3      	ldrh	r3, [r4, #12]
 800d866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d86a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d86e:	81a3      	strh	r3, [r4, #12]
 800d870:	4632      	mov	r2, r6
 800d872:	463b      	mov	r3, r7
 800d874:	4628      	mov	r0, r5
 800d876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d87a:	f000 b8eb 	b.w	800da54 <_write_r>

0800d87e <__sseek>:
 800d87e:	b510      	push	{r4, lr}
 800d880:	460c      	mov	r4, r1
 800d882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d886:	f000 f8c1 	bl	800da0c <_lseek_r>
 800d88a:	1c43      	adds	r3, r0, #1
 800d88c:	89a3      	ldrh	r3, [r4, #12]
 800d88e:	bf15      	itete	ne
 800d890:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d892:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d896:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d89a:	81a3      	strheq	r3, [r4, #12]
 800d89c:	bf18      	it	ne
 800d89e:	81a3      	strhne	r3, [r4, #12]
 800d8a0:	bd10      	pop	{r4, pc}

0800d8a2 <__sclose>:
 800d8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8a6:	f000 b8a1 	b.w	800d9ec <_close_r>

0800d8aa <__swbuf_r>:
 800d8aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ac:	460e      	mov	r6, r1
 800d8ae:	4614      	mov	r4, r2
 800d8b0:	4605      	mov	r5, r0
 800d8b2:	b118      	cbz	r0, 800d8bc <__swbuf_r+0x12>
 800d8b4:	6a03      	ldr	r3, [r0, #32]
 800d8b6:	b90b      	cbnz	r3, 800d8bc <__swbuf_r+0x12>
 800d8b8:	f7ff ff20 	bl	800d6fc <__sinit>
 800d8bc:	69a3      	ldr	r3, [r4, #24]
 800d8be:	60a3      	str	r3, [r4, #8]
 800d8c0:	89a3      	ldrh	r3, [r4, #12]
 800d8c2:	071a      	lsls	r2, r3, #28
 800d8c4:	d501      	bpl.n	800d8ca <__swbuf_r+0x20>
 800d8c6:	6923      	ldr	r3, [r4, #16]
 800d8c8:	b943      	cbnz	r3, 800d8dc <__swbuf_r+0x32>
 800d8ca:	4621      	mov	r1, r4
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	f000 f82b 	bl	800d928 <__swsetup_r>
 800d8d2:	b118      	cbz	r0, 800d8dc <__swbuf_r+0x32>
 800d8d4:	f04f 37ff 	mov.w	r7, #4294967295
 800d8d8:	4638      	mov	r0, r7
 800d8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8dc:	6823      	ldr	r3, [r4, #0]
 800d8de:	6922      	ldr	r2, [r4, #16]
 800d8e0:	1a98      	subs	r0, r3, r2
 800d8e2:	6963      	ldr	r3, [r4, #20]
 800d8e4:	b2f6      	uxtb	r6, r6
 800d8e6:	4283      	cmp	r3, r0
 800d8e8:	4637      	mov	r7, r6
 800d8ea:	dc05      	bgt.n	800d8f8 <__swbuf_r+0x4e>
 800d8ec:	4621      	mov	r1, r4
 800d8ee:	4628      	mov	r0, r5
 800d8f0:	f001 fc50 	bl	800f194 <_fflush_r>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	d1ed      	bne.n	800d8d4 <__swbuf_r+0x2a>
 800d8f8:	68a3      	ldr	r3, [r4, #8]
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	60a3      	str	r3, [r4, #8]
 800d8fe:	6823      	ldr	r3, [r4, #0]
 800d900:	1c5a      	adds	r2, r3, #1
 800d902:	6022      	str	r2, [r4, #0]
 800d904:	701e      	strb	r6, [r3, #0]
 800d906:	6962      	ldr	r2, [r4, #20]
 800d908:	1c43      	adds	r3, r0, #1
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d004      	beq.n	800d918 <__swbuf_r+0x6e>
 800d90e:	89a3      	ldrh	r3, [r4, #12]
 800d910:	07db      	lsls	r3, r3, #31
 800d912:	d5e1      	bpl.n	800d8d8 <__swbuf_r+0x2e>
 800d914:	2e0a      	cmp	r6, #10
 800d916:	d1df      	bne.n	800d8d8 <__swbuf_r+0x2e>
 800d918:	4621      	mov	r1, r4
 800d91a:	4628      	mov	r0, r5
 800d91c:	f001 fc3a 	bl	800f194 <_fflush_r>
 800d920:	2800      	cmp	r0, #0
 800d922:	d0d9      	beq.n	800d8d8 <__swbuf_r+0x2e>
 800d924:	e7d6      	b.n	800d8d4 <__swbuf_r+0x2a>
	...

0800d928 <__swsetup_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4b29      	ldr	r3, [pc, #164]	@ (800d9d0 <__swsetup_r+0xa8>)
 800d92c:	4605      	mov	r5, r0
 800d92e:	6818      	ldr	r0, [r3, #0]
 800d930:	460c      	mov	r4, r1
 800d932:	b118      	cbz	r0, 800d93c <__swsetup_r+0x14>
 800d934:	6a03      	ldr	r3, [r0, #32]
 800d936:	b90b      	cbnz	r3, 800d93c <__swsetup_r+0x14>
 800d938:	f7ff fee0 	bl	800d6fc <__sinit>
 800d93c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d940:	0719      	lsls	r1, r3, #28
 800d942:	d422      	bmi.n	800d98a <__swsetup_r+0x62>
 800d944:	06da      	lsls	r2, r3, #27
 800d946:	d407      	bmi.n	800d958 <__swsetup_r+0x30>
 800d948:	2209      	movs	r2, #9
 800d94a:	602a      	str	r2, [r5, #0]
 800d94c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d950:	81a3      	strh	r3, [r4, #12]
 800d952:	f04f 30ff 	mov.w	r0, #4294967295
 800d956:	e033      	b.n	800d9c0 <__swsetup_r+0x98>
 800d958:	0758      	lsls	r0, r3, #29
 800d95a:	d512      	bpl.n	800d982 <__swsetup_r+0x5a>
 800d95c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d95e:	b141      	cbz	r1, 800d972 <__swsetup_r+0x4a>
 800d960:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d964:	4299      	cmp	r1, r3
 800d966:	d002      	beq.n	800d96e <__swsetup_r+0x46>
 800d968:	4628      	mov	r0, r5
 800d96a:	f000 ff0d 	bl	800e788 <_free_r>
 800d96e:	2300      	movs	r3, #0
 800d970:	6363      	str	r3, [r4, #52]	@ 0x34
 800d972:	89a3      	ldrh	r3, [r4, #12]
 800d974:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d978:	81a3      	strh	r3, [r4, #12]
 800d97a:	2300      	movs	r3, #0
 800d97c:	6063      	str	r3, [r4, #4]
 800d97e:	6923      	ldr	r3, [r4, #16]
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	89a3      	ldrh	r3, [r4, #12]
 800d984:	f043 0308 	orr.w	r3, r3, #8
 800d988:	81a3      	strh	r3, [r4, #12]
 800d98a:	6923      	ldr	r3, [r4, #16]
 800d98c:	b94b      	cbnz	r3, 800d9a2 <__swsetup_r+0x7a>
 800d98e:	89a3      	ldrh	r3, [r4, #12]
 800d990:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d994:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d998:	d003      	beq.n	800d9a2 <__swsetup_r+0x7a>
 800d99a:	4621      	mov	r1, r4
 800d99c:	4628      	mov	r0, r5
 800d99e:	f001 fc47 	bl	800f230 <__smakebuf_r>
 800d9a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9a6:	f013 0201 	ands.w	r2, r3, #1
 800d9aa:	d00a      	beq.n	800d9c2 <__swsetup_r+0x9a>
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	60a2      	str	r2, [r4, #8]
 800d9b0:	6962      	ldr	r2, [r4, #20]
 800d9b2:	4252      	negs	r2, r2
 800d9b4:	61a2      	str	r2, [r4, #24]
 800d9b6:	6922      	ldr	r2, [r4, #16]
 800d9b8:	b942      	cbnz	r2, 800d9cc <__swsetup_r+0xa4>
 800d9ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d9be:	d1c5      	bne.n	800d94c <__swsetup_r+0x24>
 800d9c0:	bd38      	pop	{r3, r4, r5, pc}
 800d9c2:	0799      	lsls	r1, r3, #30
 800d9c4:	bf58      	it	pl
 800d9c6:	6962      	ldrpl	r2, [r4, #20]
 800d9c8:	60a2      	str	r2, [r4, #8]
 800d9ca:	e7f4      	b.n	800d9b6 <__swsetup_r+0x8e>
 800d9cc:	2000      	movs	r0, #0
 800d9ce:	e7f7      	b.n	800d9c0 <__swsetup_r+0x98>
 800d9d0:	20000128 	.word	0x20000128

0800d9d4 <memset>:
 800d9d4:	4402      	add	r2, r0
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	4293      	cmp	r3, r2
 800d9da:	d100      	bne.n	800d9de <memset+0xa>
 800d9dc:	4770      	bx	lr
 800d9de:	f803 1b01 	strb.w	r1, [r3], #1
 800d9e2:	e7f9      	b.n	800d9d8 <memset+0x4>

0800d9e4 <_localeconv_r>:
 800d9e4:	4800      	ldr	r0, [pc, #0]	@ (800d9e8 <_localeconv_r+0x4>)
 800d9e6:	4770      	bx	lr
 800d9e8:	20000268 	.word	0x20000268

0800d9ec <_close_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	4d06      	ldr	r5, [pc, #24]	@ (800da08 <_close_r+0x1c>)
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	602b      	str	r3, [r5, #0]
 800d9f8:	f7f5 f940 	bl	8002c7c <_close>
 800d9fc:	1c43      	adds	r3, r0, #1
 800d9fe:	d102      	bne.n	800da06 <_close_r+0x1a>
 800da00:	682b      	ldr	r3, [r5, #0]
 800da02:	b103      	cbz	r3, 800da06 <_close_r+0x1a>
 800da04:	6023      	str	r3, [r4, #0]
 800da06:	bd38      	pop	{r3, r4, r5, pc}
 800da08:	2000117c 	.word	0x2000117c

0800da0c <_lseek_r>:
 800da0c:	b538      	push	{r3, r4, r5, lr}
 800da0e:	4d07      	ldr	r5, [pc, #28]	@ (800da2c <_lseek_r+0x20>)
 800da10:	4604      	mov	r4, r0
 800da12:	4608      	mov	r0, r1
 800da14:	4611      	mov	r1, r2
 800da16:	2200      	movs	r2, #0
 800da18:	602a      	str	r2, [r5, #0]
 800da1a:	461a      	mov	r2, r3
 800da1c:	f7f5 f955 	bl	8002cca <_lseek>
 800da20:	1c43      	adds	r3, r0, #1
 800da22:	d102      	bne.n	800da2a <_lseek_r+0x1e>
 800da24:	682b      	ldr	r3, [r5, #0]
 800da26:	b103      	cbz	r3, 800da2a <_lseek_r+0x1e>
 800da28:	6023      	str	r3, [r4, #0]
 800da2a:	bd38      	pop	{r3, r4, r5, pc}
 800da2c:	2000117c 	.word	0x2000117c

0800da30 <_read_r>:
 800da30:	b538      	push	{r3, r4, r5, lr}
 800da32:	4d07      	ldr	r5, [pc, #28]	@ (800da50 <_read_r+0x20>)
 800da34:	4604      	mov	r4, r0
 800da36:	4608      	mov	r0, r1
 800da38:	4611      	mov	r1, r2
 800da3a:	2200      	movs	r2, #0
 800da3c:	602a      	str	r2, [r5, #0]
 800da3e:	461a      	mov	r2, r3
 800da40:	f7f5 f8e3 	bl	8002c0a <_read>
 800da44:	1c43      	adds	r3, r0, #1
 800da46:	d102      	bne.n	800da4e <_read_r+0x1e>
 800da48:	682b      	ldr	r3, [r5, #0]
 800da4a:	b103      	cbz	r3, 800da4e <_read_r+0x1e>
 800da4c:	6023      	str	r3, [r4, #0]
 800da4e:	bd38      	pop	{r3, r4, r5, pc}
 800da50:	2000117c 	.word	0x2000117c

0800da54 <_write_r>:
 800da54:	b538      	push	{r3, r4, r5, lr}
 800da56:	4d07      	ldr	r5, [pc, #28]	@ (800da74 <_write_r+0x20>)
 800da58:	4604      	mov	r4, r0
 800da5a:	4608      	mov	r0, r1
 800da5c:	4611      	mov	r1, r2
 800da5e:	2200      	movs	r2, #0
 800da60:	602a      	str	r2, [r5, #0]
 800da62:	461a      	mov	r2, r3
 800da64:	f7f5 f8ee 	bl	8002c44 <_write>
 800da68:	1c43      	adds	r3, r0, #1
 800da6a:	d102      	bne.n	800da72 <_write_r+0x1e>
 800da6c:	682b      	ldr	r3, [r5, #0]
 800da6e:	b103      	cbz	r3, 800da72 <_write_r+0x1e>
 800da70:	6023      	str	r3, [r4, #0]
 800da72:	bd38      	pop	{r3, r4, r5, pc}
 800da74:	2000117c 	.word	0x2000117c

0800da78 <__errno>:
 800da78:	4b01      	ldr	r3, [pc, #4]	@ (800da80 <__errno+0x8>)
 800da7a:	6818      	ldr	r0, [r3, #0]
 800da7c:	4770      	bx	lr
 800da7e:	bf00      	nop
 800da80:	20000128 	.word	0x20000128

0800da84 <__libc_init_array>:
 800da84:	b570      	push	{r4, r5, r6, lr}
 800da86:	4d0d      	ldr	r5, [pc, #52]	@ (800dabc <__libc_init_array+0x38>)
 800da88:	4c0d      	ldr	r4, [pc, #52]	@ (800dac0 <__libc_init_array+0x3c>)
 800da8a:	1b64      	subs	r4, r4, r5
 800da8c:	10a4      	asrs	r4, r4, #2
 800da8e:	2600      	movs	r6, #0
 800da90:	42a6      	cmp	r6, r4
 800da92:	d109      	bne.n	800daa8 <__libc_init_array+0x24>
 800da94:	4d0b      	ldr	r5, [pc, #44]	@ (800dac4 <__libc_init_array+0x40>)
 800da96:	4c0c      	ldr	r4, [pc, #48]	@ (800dac8 <__libc_init_array+0x44>)
 800da98:	f001 fe28 	bl	800f6ec <_init>
 800da9c:	1b64      	subs	r4, r4, r5
 800da9e:	10a4      	asrs	r4, r4, #2
 800daa0:	2600      	movs	r6, #0
 800daa2:	42a6      	cmp	r6, r4
 800daa4:	d105      	bne.n	800dab2 <__libc_init_array+0x2e>
 800daa6:	bd70      	pop	{r4, r5, r6, pc}
 800daa8:	f855 3b04 	ldr.w	r3, [r5], #4
 800daac:	4798      	blx	r3
 800daae:	3601      	adds	r6, #1
 800dab0:	e7ee      	b.n	800da90 <__libc_init_array+0xc>
 800dab2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dab6:	4798      	blx	r3
 800dab8:	3601      	adds	r6, #1
 800daba:	e7f2      	b.n	800daa2 <__libc_init_array+0x1e>
 800dabc:	0800fee8 	.word	0x0800fee8
 800dac0:	0800fee8 	.word	0x0800fee8
 800dac4:	0800fee8 	.word	0x0800fee8
 800dac8:	0800feec 	.word	0x0800feec

0800dacc <__retarget_lock_init_recursive>:
 800dacc:	4770      	bx	lr

0800dace <__retarget_lock_acquire_recursive>:
 800dace:	4770      	bx	lr

0800dad0 <__retarget_lock_release_recursive>:
 800dad0:	4770      	bx	lr

0800dad2 <memcpy>:
 800dad2:	440a      	add	r2, r1
 800dad4:	4291      	cmp	r1, r2
 800dad6:	f100 33ff 	add.w	r3, r0, #4294967295
 800dada:	d100      	bne.n	800dade <memcpy+0xc>
 800dadc:	4770      	bx	lr
 800dade:	b510      	push	{r4, lr}
 800dae0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dae4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dae8:	4291      	cmp	r1, r2
 800daea:	d1f9      	bne.n	800dae0 <memcpy+0xe>
 800daec:	bd10      	pop	{r4, pc}

0800daee <quorem>:
 800daee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daf2:	6903      	ldr	r3, [r0, #16]
 800daf4:	690c      	ldr	r4, [r1, #16]
 800daf6:	42a3      	cmp	r3, r4
 800daf8:	4607      	mov	r7, r0
 800dafa:	db7e      	blt.n	800dbfa <quorem+0x10c>
 800dafc:	3c01      	subs	r4, #1
 800dafe:	f101 0814 	add.w	r8, r1, #20
 800db02:	00a3      	lsls	r3, r4, #2
 800db04:	f100 0514 	add.w	r5, r0, #20
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db0e:	9301      	str	r3, [sp, #4]
 800db10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db18:	3301      	adds	r3, #1
 800db1a:	429a      	cmp	r2, r3
 800db1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db20:	fbb2 f6f3 	udiv	r6, r2, r3
 800db24:	d32e      	bcc.n	800db84 <quorem+0x96>
 800db26:	f04f 0a00 	mov.w	sl, #0
 800db2a:	46c4      	mov	ip, r8
 800db2c:	46ae      	mov	lr, r5
 800db2e:	46d3      	mov	fp, sl
 800db30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800db34:	b298      	uxth	r0, r3
 800db36:	fb06 a000 	mla	r0, r6, r0, sl
 800db3a:	0c02      	lsrs	r2, r0, #16
 800db3c:	0c1b      	lsrs	r3, r3, #16
 800db3e:	fb06 2303 	mla	r3, r6, r3, r2
 800db42:	f8de 2000 	ldr.w	r2, [lr]
 800db46:	b280      	uxth	r0, r0
 800db48:	b292      	uxth	r2, r2
 800db4a:	1a12      	subs	r2, r2, r0
 800db4c:	445a      	add	r2, fp
 800db4e:	f8de 0000 	ldr.w	r0, [lr]
 800db52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db56:	b29b      	uxth	r3, r3
 800db58:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800db5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800db60:	b292      	uxth	r2, r2
 800db62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800db66:	45e1      	cmp	r9, ip
 800db68:	f84e 2b04 	str.w	r2, [lr], #4
 800db6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800db70:	d2de      	bcs.n	800db30 <quorem+0x42>
 800db72:	9b00      	ldr	r3, [sp, #0]
 800db74:	58eb      	ldr	r3, [r5, r3]
 800db76:	b92b      	cbnz	r3, 800db84 <quorem+0x96>
 800db78:	9b01      	ldr	r3, [sp, #4]
 800db7a:	3b04      	subs	r3, #4
 800db7c:	429d      	cmp	r5, r3
 800db7e:	461a      	mov	r2, r3
 800db80:	d32f      	bcc.n	800dbe2 <quorem+0xf4>
 800db82:	613c      	str	r4, [r7, #16]
 800db84:	4638      	mov	r0, r7
 800db86:	f001 f979 	bl	800ee7c <__mcmp>
 800db8a:	2800      	cmp	r0, #0
 800db8c:	db25      	blt.n	800dbda <quorem+0xec>
 800db8e:	4629      	mov	r1, r5
 800db90:	2000      	movs	r0, #0
 800db92:	f858 2b04 	ldr.w	r2, [r8], #4
 800db96:	f8d1 c000 	ldr.w	ip, [r1]
 800db9a:	fa1f fe82 	uxth.w	lr, r2
 800db9e:	fa1f f38c 	uxth.w	r3, ip
 800dba2:	eba3 030e 	sub.w	r3, r3, lr
 800dba6:	4403      	add	r3, r0
 800dba8:	0c12      	lsrs	r2, r2, #16
 800dbaa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dbae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbb8:	45c1      	cmp	r9, r8
 800dbba:	f841 3b04 	str.w	r3, [r1], #4
 800dbbe:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dbc2:	d2e6      	bcs.n	800db92 <quorem+0xa4>
 800dbc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbcc:	b922      	cbnz	r2, 800dbd8 <quorem+0xea>
 800dbce:	3b04      	subs	r3, #4
 800dbd0:	429d      	cmp	r5, r3
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	d30b      	bcc.n	800dbee <quorem+0x100>
 800dbd6:	613c      	str	r4, [r7, #16]
 800dbd8:	3601      	adds	r6, #1
 800dbda:	4630      	mov	r0, r6
 800dbdc:	b003      	add	sp, #12
 800dbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbe2:	6812      	ldr	r2, [r2, #0]
 800dbe4:	3b04      	subs	r3, #4
 800dbe6:	2a00      	cmp	r2, #0
 800dbe8:	d1cb      	bne.n	800db82 <quorem+0x94>
 800dbea:	3c01      	subs	r4, #1
 800dbec:	e7c6      	b.n	800db7c <quorem+0x8e>
 800dbee:	6812      	ldr	r2, [r2, #0]
 800dbf0:	3b04      	subs	r3, #4
 800dbf2:	2a00      	cmp	r2, #0
 800dbf4:	d1ef      	bne.n	800dbd6 <quorem+0xe8>
 800dbf6:	3c01      	subs	r4, #1
 800dbf8:	e7ea      	b.n	800dbd0 <quorem+0xe2>
 800dbfa:	2000      	movs	r0, #0
 800dbfc:	e7ee      	b.n	800dbdc <quorem+0xee>
	...

0800dc00 <_dtoa_r>:
 800dc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc04:	69c7      	ldr	r7, [r0, #28]
 800dc06:	b099      	sub	sp, #100	@ 0x64
 800dc08:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dc0c:	ec55 4b10 	vmov	r4, r5, d0
 800dc10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dc12:	9109      	str	r1, [sp, #36]	@ 0x24
 800dc14:	4683      	mov	fp, r0
 800dc16:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc18:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc1a:	b97f      	cbnz	r7, 800dc3c <_dtoa_r+0x3c>
 800dc1c:	2010      	movs	r0, #16
 800dc1e:	f000 fdfd 	bl	800e81c <malloc>
 800dc22:	4602      	mov	r2, r0
 800dc24:	f8cb 001c 	str.w	r0, [fp, #28]
 800dc28:	b920      	cbnz	r0, 800dc34 <_dtoa_r+0x34>
 800dc2a:	4ba7      	ldr	r3, [pc, #668]	@ (800dec8 <_dtoa_r+0x2c8>)
 800dc2c:	21ef      	movs	r1, #239	@ 0xef
 800dc2e:	48a7      	ldr	r0, [pc, #668]	@ (800decc <_dtoa_r+0x2cc>)
 800dc30:	f001 fb6c 	bl	800f30c <__assert_func>
 800dc34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dc38:	6007      	str	r7, [r0, #0]
 800dc3a:	60c7      	str	r7, [r0, #12]
 800dc3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc40:	6819      	ldr	r1, [r3, #0]
 800dc42:	b159      	cbz	r1, 800dc5c <_dtoa_r+0x5c>
 800dc44:	685a      	ldr	r2, [r3, #4]
 800dc46:	604a      	str	r2, [r1, #4]
 800dc48:	2301      	movs	r3, #1
 800dc4a:	4093      	lsls	r3, r2
 800dc4c:	608b      	str	r3, [r1, #8]
 800dc4e:	4658      	mov	r0, fp
 800dc50:	f000 feda 	bl	800ea08 <_Bfree>
 800dc54:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc58:	2200      	movs	r2, #0
 800dc5a:	601a      	str	r2, [r3, #0]
 800dc5c:	1e2b      	subs	r3, r5, #0
 800dc5e:	bfb9      	ittee	lt
 800dc60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dc64:	9303      	strlt	r3, [sp, #12]
 800dc66:	2300      	movge	r3, #0
 800dc68:	6033      	strge	r3, [r6, #0]
 800dc6a:	9f03      	ldr	r7, [sp, #12]
 800dc6c:	4b98      	ldr	r3, [pc, #608]	@ (800ded0 <_dtoa_r+0x2d0>)
 800dc6e:	bfbc      	itt	lt
 800dc70:	2201      	movlt	r2, #1
 800dc72:	6032      	strlt	r2, [r6, #0]
 800dc74:	43bb      	bics	r3, r7
 800dc76:	d112      	bne.n	800dc9e <_dtoa_r+0x9e>
 800dc78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dc7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dc7e:	6013      	str	r3, [r2, #0]
 800dc80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dc84:	4323      	orrs	r3, r4
 800dc86:	f000 854d 	beq.w	800e724 <_dtoa_r+0xb24>
 800dc8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800dee4 <_dtoa_r+0x2e4>
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f000 854f 	beq.w	800e734 <_dtoa_r+0xb34>
 800dc96:	f10a 0303 	add.w	r3, sl, #3
 800dc9a:	f000 bd49 	b.w	800e730 <_dtoa_r+0xb30>
 800dc9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dca2:	2200      	movs	r2, #0
 800dca4:	ec51 0b17 	vmov	r0, r1, d7
 800dca8:	2300      	movs	r3, #0
 800dcaa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dcae:	f7f2 ff13 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcb2:	4680      	mov	r8, r0
 800dcb4:	b158      	cbz	r0, 800dcce <_dtoa_r+0xce>
 800dcb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dcb8:	2301      	movs	r3, #1
 800dcba:	6013      	str	r3, [r2, #0]
 800dcbc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dcbe:	b113      	cbz	r3, 800dcc6 <_dtoa_r+0xc6>
 800dcc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dcc2:	4b84      	ldr	r3, [pc, #528]	@ (800ded4 <_dtoa_r+0x2d4>)
 800dcc4:	6013      	str	r3, [r2, #0]
 800dcc6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800dee8 <_dtoa_r+0x2e8>
 800dcca:	f000 bd33 	b.w	800e734 <_dtoa_r+0xb34>
 800dcce:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dcd2:	aa16      	add	r2, sp, #88	@ 0x58
 800dcd4:	a917      	add	r1, sp, #92	@ 0x5c
 800dcd6:	4658      	mov	r0, fp
 800dcd8:	f001 f980 	bl	800efdc <__d2b>
 800dcdc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dce0:	4681      	mov	r9, r0
 800dce2:	2e00      	cmp	r6, #0
 800dce4:	d077      	beq.n	800ddd6 <_dtoa_r+0x1d6>
 800dce6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dce8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dcec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dcf4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dcf8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dcfc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dd00:	4619      	mov	r1, r3
 800dd02:	2200      	movs	r2, #0
 800dd04:	4b74      	ldr	r3, [pc, #464]	@ (800ded8 <_dtoa_r+0x2d8>)
 800dd06:	f7f2 fac7 	bl	8000298 <__aeabi_dsub>
 800dd0a:	a369      	add	r3, pc, #420	@ (adr r3, 800deb0 <_dtoa_r+0x2b0>)
 800dd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd10:	f7f2 fc7a 	bl	8000608 <__aeabi_dmul>
 800dd14:	a368      	add	r3, pc, #416	@ (adr r3, 800deb8 <_dtoa_r+0x2b8>)
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	f7f2 fabf 	bl	800029c <__adddf3>
 800dd1e:	4604      	mov	r4, r0
 800dd20:	4630      	mov	r0, r6
 800dd22:	460d      	mov	r5, r1
 800dd24:	f7f2 fc06 	bl	8000534 <__aeabi_i2d>
 800dd28:	a365      	add	r3, pc, #404	@ (adr r3, 800dec0 <_dtoa_r+0x2c0>)
 800dd2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2e:	f7f2 fc6b 	bl	8000608 <__aeabi_dmul>
 800dd32:	4602      	mov	r2, r0
 800dd34:	460b      	mov	r3, r1
 800dd36:	4620      	mov	r0, r4
 800dd38:	4629      	mov	r1, r5
 800dd3a:	f7f2 faaf 	bl	800029c <__adddf3>
 800dd3e:	4604      	mov	r4, r0
 800dd40:	460d      	mov	r5, r1
 800dd42:	f7f2 ff11 	bl	8000b68 <__aeabi_d2iz>
 800dd46:	2200      	movs	r2, #0
 800dd48:	4607      	mov	r7, r0
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	4620      	mov	r0, r4
 800dd4e:	4629      	mov	r1, r5
 800dd50:	f7f2 fecc 	bl	8000aec <__aeabi_dcmplt>
 800dd54:	b140      	cbz	r0, 800dd68 <_dtoa_r+0x168>
 800dd56:	4638      	mov	r0, r7
 800dd58:	f7f2 fbec 	bl	8000534 <__aeabi_i2d>
 800dd5c:	4622      	mov	r2, r4
 800dd5e:	462b      	mov	r3, r5
 800dd60:	f7f2 feba 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd64:	b900      	cbnz	r0, 800dd68 <_dtoa_r+0x168>
 800dd66:	3f01      	subs	r7, #1
 800dd68:	2f16      	cmp	r7, #22
 800dd6a:	d851      	bhi.n	800de10 <_dtoa_r+0x210>
 800dd6c:	4b5b      	ldr	r3, [pc, #364]	@ (800dedc <_dtoa_r+0x2dc>)
 800dd6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd7a:	f7f2 feb7 	bl	8000aec <__aeabi_dcmplt>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	d048      	beq.n	800de14 <_dtoa_r+0x214>
 800dd82:	3f01      	subs	r7, #1
 800dd84:	2300      	movs	r3, #0
 800dd86:	9312      	str	r3, [sp, #72]	@ 0x48
 800dd88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dd8a:	1b9b      	subs	r3, r3, r6
 800dd8c:	1e5a      	subs	r2, r3, #1
 800dd8e:	bf44      	itt	mi
 800dd90:	f1c3 0801 	rsbmi	r8, r3, #1
 800dd94:	2300      	movmi	r3, #0
 800dd96:	9208      	str	r2, [sp, #32]
 800dd98:	bf54      	ite	pl
 800dd9a:	f04f 0800 	movpl.w	r8, #0
 800dd9e:	9308      	strmi	r3, [sp, #32]
 800dda0:	2f00      	cmp	r7, #0
 800dda2:	db39      	blt.n	800de18 <_dtoa_r+0x218>
 800dda4:	9b08      	ldr	r3, [sp, #32]
 800dda6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800dda8:	443b      	add	r3, r7
 800ddaa:	9308      	str	r3, [sp, #32]
 800ddac:	2300      	movs	r3, #0
 800ddae:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddb2:	2b09      	cmp	r3, #9
 800ddb4:	d864      	bhi.n	800de80 <_dtoa_r+0x280>
 800ddb6:	2b05      	cmp	r3, #5
 800ddb8:	bfc4      	itt	gt
 800ddba:	3b04      	subgt	r3, #4
 800ddbc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ddbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddc0:	f1a3 0302 	sub.w	r3, r3, #2
 800ddc4:	bfcc      	ite	gt
 800ddc6:	2400      	movgt	r4, #0
 800ddc8:	2401      	movle	r4, #1
 800ddca:	2b03      	cmp	r3, #3
 800ddcc:	d863      	bhi.n	800de96 <_dtoa_r+0x296>
 800ddce:	e8df f003 	tbb	[pc, r3]
 800ddd2:	372a      	.short	0x372a
 800ddd4:	5535      	.short	0x5535
 800ddd6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ddda:	441e      	add	r6, r3
 800dddc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800dde0:	2b20      	cmp	r3, #32
 800dde2:	bfc1      	itttt	gt
 800dde4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800dde8:	409f      	lslgt	r7, r3
 800ddea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ddee:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ddf2:	bfd6      	itet	le
 800ddf4:	f1c3 0320 	rsble	r3, r3, #32
 800ddf8:	ea47 0003 	orrgt.w	r0, r7, r3
 800ddfc:	fa04 f003 	lslle.w	r0, r4, r3
 800de00:	f7f2 fb88 	bl	8000514 <__aeabi_ui2d>
 800de04:	2201      	movs	r2, #1
 800de06:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800de0a:	3e01      	subs	r6, #1
 800de0c:	9214      	str	r2, [sp, #80]	@ 0x50
 800de0e:	e777      	b.n	800dd00 <_dtoa_r+0x100>
 800de10:	2301      	movs	r3, #1
 800de12:	e7b8      	b.n	800dd86 <_dtoa_r+0x186>
 800de14:	9012      	str	r0, [sp, #72]	@ 0x48
 800de16:	e7b7      	b.n	800dd88 <_dtoa_r+0x188>
 800de18:	427b      	negs	r3, r7
 800de1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800de1c:	2300      	movs	r3, #0
 800de1e:	eba8 0807 	sub.w	r8, r8, r7
 800de22:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de24:	e7c4      	b.n	800ddb0 <_dtoa_r+0x1b0>
 800de26:	2300      	movs	r3, #0
 800de28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	dc35      	bgt.n	800de9c <_dtoa_r+0x29c>
 800de30:	2301      	movs	r3, #1
 800de32:	9300      	str	r3, [sp, #0]
 800de34:	9307      	str	r3, [sp, #28]
 800de36:	461a      	mov	r2, r3
 800de38:	920e      	str	r2, [sp, #56]	@ 0x38
 800de3a:	e00b      	b.n	800de54 <_dtoa_r+0x254>
 800de3c:	2301      	movs	r3, #1
 800de3e:	e7f3      	b.n	800de28 <_dtoa_r+0x228>
 800de40:	2300      	movs	r3, #0
 800de42:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de46:	18fb      	adds	r3, r7, r3
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	3301      	adds	r3, #1
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	9307      	str	r3, [sp, #28]
 800de50:	bfb8      	it	lt
 800de52:	2301      	movlt	r3, #1
 800de54:	f8db 001c 	ldr.w	r0, [fp, #28]
 800de58:	2100      	movs	r1, #0
 800de5a:	2204      	movs	r2, #4
 800de5c:	f102 0514 	add.w	r5, r2, #20
 800de60:	429d      	cmp	r5, r3
 800de62:	d91f      	bls.n	800dea4 <_dtoa_r+0x2a4>
 800de64:	6041      	str	r1, [r0, #4]
 800de66:	4658      	mov	r0, fp
 800de68:	f000 fd8e 	bl	800e988 <_Balloc>
 800de6c:	4682      	mov	sl, r0
 800de6e:	2800      	cmp	r0, #0
 800de70:	d13c      	bne.n	800deec <_dtoa_r+0x2ec>
 800de72:	4b1b      	ldr	r3, [pc, #108]	@ (800dee0 <_dtoa_r+0x2e0>)
 800de74:	4602      	mov	r2, r0
 800de76:	f240 11af 	movw	r1, #431	@ 0x1af
 800de7a:	e6d8      	b.n	800dc2e <_dtoa_r+0x2e>
 800de7c:	2301      	movs	r3, #1
 800de7e:	e7e0      	b.n	800de42 <_dtoa_r+0x242>
 800de80:	2401      	movs	r4, #1
 800de82:	2300      	movs	r3, #0
 800de84:	9309      	str	r3, [sp, #36]	@ 0x24
 800de86:	940b      	str	r4, [sp, #44]	@ 0x2c
 800de88:	f04f 33ff 	mov.w	r3, #4294967295
 800de8c:	9300      	str	r3, [sp, #0]
 800de8e:	9307      	str	r3, [sp, #28]
 800de90:	2200      	movs	r2, #0
 800de92:	2312      	movs	r3, #18
 800de94:	e7d0      	b.n	800de38 <_dtoa_r+0x238>
 800de96:	2301      	movs	r3, #1
 800de98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de9a:	e7f5      	b.n	800de88 <_dtoa_r+0x288>
 800de9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de9e:	9300      	str	r3, [sp, #0]
 800dea0:	9307      	str	r3, [sp, #28]
 800dea2:	e7d7      	b.n	800de54 <_dtoa_r+0x254>
 800dea4:	3101      	adds	r1, #1
 800dea6:	0052      	lsls	r2, r2, #1
 800dea8:	e7d8      	b.n	800de5c <_dtoa_r+0x25c>
 800deaa:	bf00      	nop
 800deac:	f3af 8000 	nop.w
 800deb0:	636f4361 	.word	0x636f4361
 800deb4:	3fd287a7 	.word	0x3fd287a7
 800deb8:	8b60c8b3 	.word	0x8b60c8b3
 800debc:	3fc68a28 	.word	0x3fc68a28
 800dec0:	509f79fb 	.word	0x509f79fb
 800dec4:	3fd34413 	.word	0x3fd34413
 800dec8:	0800fbb1 	.word	0x0800fbb1
 800decc:	0800fbc8 	.word	0x0800fbc8
 800ded0:	7ff00000 	.word	0x7ff00000
 800ded4:	0800fb81 	.word	0x0800fb81
 800ded8:	3ff80000 	.word	0x3ff80000
 800dedc:	0800fcc0 	.word	0x0800fcc0
 800dee0:	0800fc20 	.word	0x0800fc20
 800dee4:	0800fbad 	.word	0x0800fbad
 800dee8:	0800fb80 	.word	0x0800fb80
 800deec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800def0:	6018      	str	r0, [r3, #0]
 800def2:	9b07      	ldr	r3, [sp, #28]
 800def4:	2b0e      	cmp	r3, #14
 800def6:	f200 80a4 	bhi.w	800e042 <_dtoa_r+0x442>
 800defa:	2c00      	cmp	r4, #0
 800defc:	f000 80a1 	beq.w	800e042 <_dtoa_r+0x442>
 800df00:	2f00      	cmp	r7, #0
 800df02:	dd33      	ble.n	800df6c <_dtoa_r+0x36c>
 800df04:	4bad      	ldr	r3, [pc, #692]	@ (800e1bc <_dtoa_r+0x5bc>)
 800df06:	f007 020f 	and.w	r2, r7, #15
 800df0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df0e:	ed93 7b00 	vldr	d7, [r3]
 800df12:	05f8      	lsls	r0, r7, #23
 800df14:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df18:	ea4f 1427 	mov.w	r4, r7, asr #4
 800df1c:	d516      	bpl.n	800df4c <_dtoa_r+0x34c>
 800df1e:	4ba8      	ldr	r3, [pc, #672]	@ (800e1c0 <_dtoa_r+0x5c0>)
 800df20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df28:	f7f2 fc98 	bl	800085c <__aeabi_ddiv>
 800df2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df30:	f004 040f 	and.w	r4, r4, #15
 800df34:	2603      	movs	r6, #3
 800df36:	4da2      	ldr	r5, [pc, #648]	@ (800e1c0 <_dtoa_r+0x5c0>)
 800df38:	b954      	cbnz	r4, 800df50 <_dtoa_r+0x350>
 800df3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df42:	f7f2 fc8b 	bl	800085c <__aeabi_ddiv>
 800df46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df4a:	e028      	b.n	800df9e <_dtoa_r+0x39e>
 800df4c:	2602      	movs	r6, #2
 800df4e:	e7f2      	b.n	800df36 <_dtoa_r+0x336>
 800df50:	07e1      	lsls	r1, r4, #31
 800df52:	d508      	bpl.n	800df66 <_dtoa_r+0x366>
 800df54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df58:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df5c:	f7f2 fb54 	bl	8000608 <__aeabi_dmul>
 800df60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df64:	3601      	adds	r6, #1
 800df66:	1064      	asrs	r4, r4, #1
 800df68:	3508      	adds	r5, #8
 800df6a:	e7e5      	b.n	800df38 <_dtoa_r+0x338>
 800df6c:	f000 80d2 	beq.w	800e114 <_dtoa_r+0x514>
 800df70:	427c      	negs	r4, r7
 800df72:	4b92      	ldr	r3, [pc, #584]	@ (800e1bc <_dtoa_r+0x5bc>)
 800df74:	4d92      	ldr	r5, [pc, #584]	@ (800e1c0 <_dtoa_r+0x5c0>)
 800df76:	f004 020f 	and.w	r2, r4, #15
 800df7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df86:	f7f2 fb3f 	bl	8000608 <__aeabi_dmul>
 800df8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df8e:	1124      	asrs	r4, r4, #4
 800df90:	2300      	movs	r3, #0
 800df92:	2602      	movs	r6, #2
 800df94:	2c00      	cmp	r4, #0
 800df96:	f040 80b2 	bne.w	800e0fe <_dtoa_r+0x4fe>
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d1d3      	bne.n	800df46 <_dtoa_r+0x346>
 800df9e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dfa0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 80b7 	beq.w	800e118 <_dtoa_r+0x518>
 800dfaa:	4b86      	ldr	r3, [pc, #536]	@ (800e1c4 <_dtoa_r+0x5c4>)
 800dfac:	2200      	movs	r2, #0
 800dfae:	4620      	mov	r0, r4
 800dfb0:	4629      	mov	r1, r5
 800dfb2:	f7f2 fd9b 	bl	8000aec <__aeabi_dcmplt>
 800dfb6:	2800      	cmp	r0, #0
 800dfb8:	f000 80ae 	beq.w	800e118 <_dtoa_r+0x518>
 800dfbc:	9b07      	ldr	r3, [sp, #28]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f000 80aa 	beq.w	800e118 <_dtoa_r+0x518>
 800dfc4:	9b00      	ldr	r3, [sp, #0]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	dd37      	ble.n	800e03a <_dtoa_r+0x43a>
 800dfca:	1e7b      	subs	r3, r7, #1
 800dfcc:	9304      	str	r3, [sp, #16]
 800dfce:	4620      	mov	r0, r4
 800dfd0:	4b7d      	ldr	r3, [pc, #500]	@ (800e1c8 <_dtoa_r+0x5c8>)
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	f7f2 fb17 	bl	8000608 <__aeabi_dmul>
 800dfda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfde:	9c00      	ldr	r4, [sp, #0]
 800dfe0:	3601      	adds	r6, #1
 800dfe2:	4630      	mov	r0, r6
 800dfe4:	f7f2 faa6 	bl	8000534 <__aeabi_i2d>
 800dfe8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dfec:	f7f2 fb0c 	bl	8000608 <__aeabi_dmul>
 800dff0:	4b76      	ldr	r3, [pc, #472]	@ (800e1cc <_dtoa_r+0x5cc>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	f7f2 f952 	bl	800029c <__adddf3>
 800dff8:	4605      	mov	r5, r0
 800dffa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800dffe:	2c00      	cmp	r4, #0
 800e000:	f040 808d 	bne.w	800e11e <_dtoa_r+0x51e>
 800e004:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e008:	4b71      	ldr	r3, [pc, #452]	@ (800e1d0 <_dtoa_r+0x5d0>)
 800e00a:	2200      	movs	r2, #0
 800e00c:	f7f2 f944 	bl	8000298 <__aeabi_dsub>
 800e010:	4602      	mov	r2, r0
 800e012:	460b      	mov	r3, r1
 800e014:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e018:	462a      	mov	r2, r5
 800e01a:	4633      	mov	r3, r6
 800e01c:	f7f2 fd84 	bl	8000b28 <__aeabi_dcmpgt>
 800e020:	2800      	cmp	r0, #0
 800e022:	f040 828b 	bne.w	800e53c <_dtoa_r+0x93c>
 800e026:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e02a:	462a      	mov	r2, r5
 800e02c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e030:	f7f2 fd5c 	bl	8000aec <__aeabi_dcmplt>
 800e034:	2800      	cmp	r0, #0
 800e036:	f040 8128 	bne.w	800e28a <_dtoa_r+0x68a>
 800e03a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e03e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e042:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e044:	2b00      	cmp	r3, #0
 800e046:	f2c0 815a 	blt.w	800e2fe <_dtoa_r+0x6fe>
 800e04a:	2f0e      	cmp	r7, #14
 800e04c:	f300 8157 	bgt.w	800e2fe <_dtoa_r+0x6fe>
 800e050:	4b5a      	ldr	r3, [pc, #360]	@ (800e1bc <_dtoa_r+0x5bc>)
 800e052:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e056:	ed93 7b00 	vldr	d7, [r3]
 800e05a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	ed8d 7b00 	vstr	d7, [sp]
 800e062:	da03      	bge.n	800e06c <_dtoa_r+0x46c>
 800e064:	9b07      	ldr	r3, [sp, #28]
 800e066:	2b00      	cmp	r3, #0
 800e068:	f340 8101 	ble.w	800e26e <_dtoa_r+0x66e>
 800e06c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e070:	4656      	mov	r6, sl
 800e072:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e076:	4620      	mov	r0, r4
 800e078:	4629      	mov	r1, r5
 800e07a:	f7f2 fbef 	bl	800085c <__aeabi_ddiv>
 800e07e:	f7f2 fd73 	bl	8000b68 <__aeabi_d2iz>
 800e082:	4680      	mov	r8, r0
 800e084:	f7f2 fa56 	bl	8000534 <__aeabi_i2d>
 800e088:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e08c:	f7f2 fabc 	bl	8000608 <__aeabi_dmul>
 800e090:	4602      	mov	r2, r0
 800e092:	460b      	mov	r3, r1
 800e094:	4620      	mov	r0, r4
 800e096:	4629      	mov	r1, r5
 800e098:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e09c:	f7f2 f8fc 	bl	8000298 <__aeabi_dsub>
 800e0a0:	f806 4b01 	strb.w	r4, [r6], #1
 800e0a4:	9d07      	ldr	r5, [sp, #28]
 800e0a6:	eba6 040a 	sub.w	r4, r6, sl
 800e0aa:	42a5      	cmp	r5, r4
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	f040 8117 	bne.w	800e2e2 <_dtoa_r+0x6e2>
 800e0b4:	f7f2 f8f2 	bl	800029c <__adddf3>
 800e0b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0bc:	4604      	mov	r4, r0
 800e0be:	460d      	mov	r5, r1
 800e0c0:	f7f2 fd32 	bl	8000b28 <__aeabi_dcmpgt>
 800e0c4:	2800      	cmp	r0, #0
 800e0c6:	f040 80f9 	bne.w	800e2bc <_dtoa_r+0x6bc>
 800e0ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0ce:	4620      	mov	r0, r4
 800e0d0:	4629      	mov	r1, r5
 800e0d2:	f7f2 fd01 	bl	8000ad8 <__aeabi_dcmpeq>
 800e0d6:	b118      	cbz	r0, 800e0e0 <_dtoa_r+0x4e0>
 800e0d8:	f018 0f01 	tst.w	r8, #1
 800e0dc:	f040 80ee 	bne.w	800e2bc <_dtoa_r+0x6bc>
 800e0e0:	4649      	mov	r1, r9
 800e0e2:	4658      	mov	r0, fp
 800e0e4:	f000 fc90 	bl	800ea08 <_Bfree>
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	7033      	strb	r3, [r6, #0]
 800e0ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e0ee:	3701      	adds	r7, #1
 800e0f0:	601f      	str	r7, [r3, #0]
 800e0f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f000 831d 	beq.w	800e734 <_dtoa_r+0xb34>
 800e0fa:	601e      	str	r6, [r3, #0]
 800e0fc:	e31a      	b.n	800e734 <_dtoa_r+0xb34>
 800e0fe:	07e2      	lsls	r2, r4, #31
 800e100:	d505      	bpl.n	800e10e <_dtoa_r+0x50e>
 800e102:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e106:	f7f2 fa7f 	bl	8000608 <__aeabi_dmul>
 800e10a:	3601      	adds	r6, #1
 800e10c:	2301      	movs	r3, #1
 800e10e:	1064      	asrs	r4, r4, #1
 800e110:	3508      	adds	r5, #8
 800e112:	e73f      	b.n	800df94 <_dtoa_r+0x394>
 800e114:	2602      	movs	r6, #2
 800e116:	e742      	b.n	800df9e <_dtoa_r+0x39e>
 800e118:	9c07      	ldr	r4, [sp, #28]
 800e11a:	9704      	str	r7, [sp, #16]
 800e11c:	e761      	b.n	800dfe2 <_dtoa_r+0x3e2>
 800e11e:	4b27      	ldr	r3, [pc, #156]	@ (800e1bc <_dtoa_r+0x5bc>)
 800e120:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e122:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e126:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e12a:	4454      	add	r4, sl
 800e12c:	2900      	cmp	r1, #0
 800e12e:	d053      	beq.n	800e1d8 <_dtoa_r+0x5d8>
 800e130:	4928      	ldr	r1, [pc, #160]	@ (800e1d4 <_dtoa_r+0x5d4>)
 800e132:	2000      	movs	r0, #0
 800e134:	f7f2 fb92 	bl	800085c <__aeabi_ddiv>
 800e138:	4633      	mov	r3, r6
 800e13a:	462a      	mov	r2, r5
 800e13c:	f7f2 f8ac 	bl	8000298 <__aeabi_dsub>
 800e140:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e144:	4656      	mov	r6, sl
 800e146:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e14a:	f7f2 fd0d 	bl	8000b68 <__aeabi_d2iz>
 800e14e:	4605      	mov	r5, r0
 800e150:	f7f2 f9f0 	bl	8000534 <__aeabi_i2d>
 800e154:	4602      	mov	r2, r0
 800e156:	460b      	mov	r3, r1
 800e158:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e15c:	f7f2 f89c 	bl	8000298 <__aeabi_dsub>
 800e160:	3530      	adds	r5, #48	@ 0x30
 800e162:	4602      	mov	r2, r0
 800e164:	460b      	mov	r3, r1
 800e166:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e16a:	f806 5b01 	strb.w	r5, [r6], #1
 800e16e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e172:	f7f2 fcbb 	bl	8000aec <__aeabi_dcmplt>
 800e176:	2800      	cmp	r0, #0
 800e178:	d171      	bne.n	800e25e <_dtoa_r+0x65e>
 800e17a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e17e:	4911      	ldr	r1, [pc, #68]	@ (800e1c4 <_dtoa_r+0x5c4>)
 800e180:	2000      	movs	r0, #0
 800e182:	f7f2 f889 	bl	8000298 <__aeabi_dsub>
 800e186:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e18a:	f7f2 fcaf 	bl	8000aec <__aeabi_dcmplt>
 800e18e:	2800      	cmp	r0, #0
 800e190:	f040 8095 	bne.w	800e2be <_dtoa_r+0x6be>
 800e194:	42a6      	cmp	r6, r4
 800e196:	f43f af50 	beq.w	800e03a <_dtoa_r+0x43a>
 800e19a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e19e:	4b0a      	ldr	r3, [pc, #40]	@ (800e1c8 <_dtoa_r+0x5c8>)
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	f7f2 fa31 	bl	8000608 <__aeabi_dmul>
 800e1a6:	4b08      	ldr	r3, [pc, #32]	@ (800e1c8 <_dtoa_r+0x5c8>)
 800e1a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1b2:	f7f2 fa29 	bl	8000608 <__aeabi_dmul>
 800e1b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1ba:	e7c4      	b.n	800e146 <_dtoa_r+0x546>
 800e1bc:	0800fcc0 	.word	0x0800fcc0
 800e1c0:	0800fc98 	.word	0x0800fc98
 800e1c4:	3ff00000 	.word	0x3ff00000
 800e1c8:	40240000 	.word	0x40240000
 800e1cc:	401c0000 	.word	0x401c0000
 800e1d0:	40140000 	.word	0x40140000
 800e1d4:	3fe00000 	.word	0x3fe00000
 800e1d8:	4631      	mov	r1, r6
 800e1da:	4628      	mov	r0, r5
 800e1dc:	f7f2 fa14 	bl	8000608 <__aeabi_dmul>
 800e1e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e1e4:	9415      	str	r4, [sp, #84]	@ 0x54
 800e1e6:	4656      	mov	r6, sl
 800e1e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1ec:	f7f2 fcbc 	bl	8000b68 <__aeabi_d2iz>
 800e1f0:	4605      	mov	r5, r0
 800e1f2:	f7f2 f99f 	bl	8000534 <__aeabi_i2d>
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	460b      	mov	r3, r1
 800e1fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1fe:	f7f2 f84b 	bl	8000298 <__aeabi_dsub>
 800e202:	3530      	adds	r5, #48	@ 0x30
 800e204:	f806 5b01 	strb.w	r5, [r6], #1
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	42a6      	cmp	r6, r4
 800e20e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e212:	f04f 0200 	mov.w	r2, #0
 800e216:	d124      	bne.n	800e262 <_dtoa_r+0x662>
 800e218:	4bac      	ldr	r3, [pc, #688]	@ (800e4cc <_dtoa_r+0x8cc>)
 800e21a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e21e:	f7f2 f83d 	bl	800029c <__adddf3>
 800e222:	4602      	mov	r2, r0
 800e224:	460b      	mov	r3, r1
 800e226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e22a:	f7f2 fc7d 	bl	8000b28 <__aeabi_dcmpgt>
 800e22e:	2800      	cmp	r0, #0
 800e230:	d145      	bne.n	800e2be <_dtoa_r+0x6be>
 800e232:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e236:	49a5      	ldr	r1, [pc, #660]	@ (800e4cc <_dtoa_r+0x8cc>)
 800e238:	2000      	movs	r0, #0
 800e23a:	f7f2 f82d 	bl	8000298 <__aeabi_dsub>
 800e23e:	4602      	mov	r2, r0
 800e240:	460b      	mov	r3, r1
 800e242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e246:	f7f2 fc51 	bl	8000aec <__aeabi_dcmplt>
 800e24a:	2800      	cmp	r0, #0
 800e24c:	f43f aef5 	beq.w	800e03a <_dtoa_r+0x43a>
 800e250:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e252:	1e73      	subs	r3, r6, #1
 800e254:	9315      	str	r3, [sp, #84]	@ 0x54
 800e256:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e25a:	2b30      	cmp	r3, #48	@ 0x30
 800e25c:	d0f8      	beq.n	800e250 <_dtoa_r+0x650>
 800e25e:	9f04      	ldr	r7, [sp, #16]
 800e260:	e73e      	b.n	800e0e0 <_dtoa_r+0x4e0>
 800e262:	4b9b      	ldr	r3, [pc, #620]	@ (800e4d0 <_dtoa_r+0x8d0>)
 800e264:	f7f2 f9d0 	bl	8000608 <__aeabi_dmul>
 800e268:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e26c:	e7bc      	b.n	800e1e8 <_dtoa_r+0x5e8>
 800e26e:	d10c      	bne.n	800e28a <_dtoa_r+0x68a>
 800e270:	4b98      	ldr	r3, [pc, #608]	@ (800e4d4 <_dtoa_r+0x8d4>)
 800e272:	2200      	movs	r2, #0
 800e274:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e278:	f7f2 f9c6 	bl	8000608 <__aeabi_dmul>
 800e27c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e280:	f7f2 fc48 	bl	8000b14 <__aeabi_dcmpge>
 800e284:	2800      	cmp	r0, #0
 800e286:	f000 8157 	beq.w	800e538 <_dtoa_r+0x938>
 800e28a:	2400      	movs	r4, #0
 800e28c:	4625      	mov	r5, r4
 800e28e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e290:	43db      	mvns	r3, r3
 800e292:	9304      	str	r3, [sp, #16]
 800e294:	4656      	mov	r6, sl
 800e296:	2700      	movs	r7, #0
 800e298:	4621      	mov	r1, r4
 800e29a:	4658      	mov	r0, fp
 800e29c:	f000 fbb4 	bl	800ea08 <_Bfree>
 800e2a0:	2d00      	cmp	r5, #0
 800e2a2:	d0dc      	beq.n	800e25e <_dtoa_r+0x65e>
 800e2a4:	b12f      	cbz	r7, 800e2b2 <_dtoa_r+0x6b2>
 800e2a6:	42af      	cmp	r7, r5
 800e2a8:	d003      	beq.n	800e2b2 <_dtoa_r+0x6b2>
 800e2aa:	4639      	mov	r1, r7
 800e2ac:	4658      	mov	r0, fp
 800e2ae:	f000 fbab 	bl	800ea08 <_Bfree>
 800e2b2:	4629      	mov	r1, r5
 800e2b4:	4658      	mov	r0, fp
 800e2b6:	f000 fba7 	bl	800ea08 <_Bfree>
 800e2ba:	e7d0      	b.n	800e25e <_dtoa_r+0x65e>
 800e2bc:	9704      	str	r7, [sp, #16]
 800e2be:	4633      	mov	r3, r6
 800e2c0:	461e      	mov	r6, r3
 800e2c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2c6:	2a39      	cmp	r2, #57	@ 0x39
 800e2c8:	d107      	bne.n	800e2da <_dtoa_r+0x6da>
 800e2ca:	459a      	cmp	sl, r3
 800e2cc:	d1f8      	bne.n	800e2c0 <_dtoa_r+0x6c0>
 800e2ce:	9a04      	ldr	r2, [sp, #16]
 800e2d0:	3201      	adds	r2, #1
 800e2d2:	9204      	str	r2, [sp, #16]
 800e2d4:	2230      	movs	r2, #48	@ 0x30
 800e2d6:	f88a 2000 	strb.w	r2, [sl]
 800e2da:	781a      	ldrb	r2, [r3, #0]
 800e2dc:	3201      	adds	r2, #1
 800e2de:	701a      	strb	r2, [r3, #0]
 800e2e0:	e7bd      	b.n	800e25e <_dtoa_r+0x65e>
 800e2e2:	4b7b      	ldr	r3, [pc, #492]	@ (800e4d0 <_dtoa_r+0x8d0>)
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	f7f2 f98f 	bl	8000608 <__aeabi_dmul>
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	460d      	mov	r5, r1
 800e2f2:	f7f2 fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 800e2f6:	2800      	cmp	r0, #0
 800e2f8:	f43f aebb 	beq.w	800e072 <_dtoa_r+0x472>
 800e2fc:	e6f0      	b.n	800e0e0 <_dtoa_r+0x4e0>
 800e2fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e300:	2a00      	cmp	r2, #0
 800e302:	f000 80db 	beq.w	800e4bc <_dtoa_r+0x8bc>
 800e306:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e308:	2a01      	cmp	r2, #1
 800e30a:	f300 80bf 	bgt.w	800e48c <_dtoa_r+0x88c>
 800e30e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e310:	2a00      	cmp	r2, #0
 800e312:	f000 80b7 	beq.w	800e484 <_dtoa_r+0x884>
 800e316:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e31a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e31c:	4646      	mov	r6, r8
 800e31e:	9a08      	ldr	r2, [sp, #32]
 800e320:	2101      	movs	r1, #1
 800e322:	441a      	add	r2, r3
 800e324:	4658      	mov	r0, fp
 800e326:	4498      	add	r8, r3
 800e328:	9208      	str	r2, [sp, #32]
 800e32a:	f000 fc21 	bl	800eb70 <__i2b>
 800e32e:	4605      	mov	r5, r0
 800e330:	b15e      	cbz	r6, 800e34a <_dtoa_r+0x74a>
 800e332:	9b08      	ldr	r3, [sp, #32]
 800e334:	2b00      	cmp	r3, #0
 800e336:	dd08      	ble.n	800e34a <_dtoa_r+0x74a>
 800e338:	42b3      	cmp	r3, r6
 800e33a:	9a08      	ldr	r2, [sp, #32]
 800e33c:	bfa8      	it	ge
 800e33e:	4633      	movge	r3, r6
 800e340:	eba8 0803 	sub.w	r8, r8, r3
 800e344:	1af6      	subs	r6, r6, r3
 800e346:	1ad3      	subs	r3, r2, r3
 800e348:	9308      	str	r3, [sp, #32]
 800e34a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e34c:	b1f3      	cbz	r3, 800e38c <_dtoa_r+0x78c>
 800e34e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e350:	2b00      	cmp	r3, #0
 800e352:	f000 80b7 	beq.w	800e4c4 <_dtoa_r+0x8c4>
 800e356:	b18c      	cbz	r4, 800e37c <_dtoa_r+0x77c>
 800e358:	4629      	mov	r1, r5
 800e35a:	4622      	mov	r2, r4
 800e35c:	4658      	mov	r0, fp
 800e35e:	f000 fcc7 	bl	800ecf0 <__pow5mult>
 800e362:	464a      	mov	r2, r9
 800e364:	4601      	mov	r1, r0
 800e366:	4605      	mov	r5, r0
 800e368:	4658      	mov	r0, fp
 800e36a:	f000 fc17 	bl	800eb9c <__multiply>
 800e36e:	4649      	mov	r1, r9
 800e370:	9004      	str	r0, [sp, #16]
 800e372:	4658      	mov	r0, fp
 800e374:	f000 fb48 	bl	800ea08 <_Bfree>
 800e378:	9b04      	ldr	r3, [sp, #16]
 800e37a:	4699      	mov	r9, r3
 800e37c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e37e:	1b1a      	subs	r2, r3, r4
 800e380:	d004      	beq.n	800e38c <_dtoa_r+0x78c>
 800e382:	4649      	mov	r1, r9
 800e384:	4658      	mov	r0, fp
 800e386:	f000 fcb3 	bl	800ecf0 <__pow5mult>
 800e38a:	4681      	mov	r9, r0
 800e38c:	2101      	movs	r1, #1
 800e38e:	4658      	mov	r0, fp
 800e390:	f000 fbee 	bl	800eb70 <__i2b>
 800e394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e396:	4604      	mov	r4, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f000 81cf 	beq.w	800e73c <_dtoa_r+0xb3c>
 800e39e:	461a      	mov	r2, r3
 800e3a0:	4601      	mov	r1, r0
 800e3a2:	4658      	mov	r0, fp
 800e3a4:	f000 fca4 	bl	800ecf0 <__pow5mult>
 800e3a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	f300 8095 	bgt.w	800e4dc <_dtoa_r+0x8dc>
 800e3b2:	9b02      	ldr	r3, [sp, #8]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	f040 8087 	bne.w	800e4c8 <_dtoa_r+0x8c8>
 800e3ba:	9b03      	ldr	r3, [sp, #12]
 800e3bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f040 8089 	bne.w	800e4d8 <_dtoa_r+0x8d8>
 800e3c6:	9b03      	ldr	r3, [sp, #12]
 800e3c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e3cc:	0d1b      	lsrs	r3, r3, #20
 800e3ce:	051b      	lsls	r3, r3, #20
 800e3d0:	b12b      	cbz	r3, 800e3de <_dtoa_r+0x7de>
 800e3d2:	9b08      	ldr	r3, [sp, #32]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	9308      	str	r3, [sp, #32]
 800e3d8:	f108 0801 	add.w	r8, r8, #1
 800e3dc:	2301      	movs	r3, #1
 800e3de:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f000 81b0 	beq.w	800e748 <_dtoa_r+0xb48>
 800e3e8:	6923      	ldr	r3, [r4, #16]
 800e3ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e3ee:	6918      	ldr	r0, [r3, #16]
 800e3f0:	f000 fb72 	bl	800ead8 <__hi0bits>
 800e3f4:	f1c0 0020 	rsb	r0, r0, #32
 800e3f8:	9b08      	ldr	r3, [sp, #32]
 800e3fa:	4418      	add	r0, r3
 800e3fc:	f010 001f 	ands.w	r0, r0, #31
 800e400:	d077      	beq.n	800e4f2 <_dtoa_r+0x8f2>
 800e402:	f1c0 0320 	rsb	r3, r0, #32
 800e406:	2b04      	cmp	r3, #4
 800e408:	dd6b      	ble.n	800e4e2 <_dtoa_r+0x8e2>
 800e40a:	9b08      	ldr	r3, [sp, #32]
 800e40c:	f1c0 001c 	rsb	r0, r0, #28
 800e410:	4403      	add	r3, r0
 800e412:	4480      	add	r8, r0
 800e414:	4406      	add	r6, r0
 800e416:	9308      	str	r3, [sp, #32]
 800e418:	f1b8 0f00 	cmp.w	r8, #0
 800e41c:	dd05      	ble.n	800e42a <_dtoa_r+0x82a>
 800e41e:	4649      	mov	r1, r9
 800e420:	4642      	mov	r2, r8
 800e422:	4658      	mov	r0, fp
 800e424:	f000 fcbe 	bl	800eda4 <__lshift>
 800e428:	4681      	mov	r9, r0
 800e42a:	9b08      	ldr	r3, [sp, #32]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	dd05      	ble.n	800e43c <_dtoa_r+0x83c>
 800e430:	4621      	mov	r1, r4
 800e432:	461a      	mov	r2, r3
 800e434:	4658      	mov	r0, fp
 800e436:	f000 fcb5 	bl	800eda4 <__lshift>
 800e43a:	4604      	mov	r4, r0
 800e43c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d059      	beq.n	800e4f6 <_dtoa_r+0x8f6>
 800e442:	4621      	mov	r1, r4
 800e444:	4648      	mov	r0, r9
 800e446:	f000 fd19 	bl	800ee7c <__mcmp>
 800e44a:	2800      	cmp	r0, #0
 800e44c:	da53      	bge.n	800e4f6 <_dtoa_r+0x8f6>
 800e44e:	1e7b      	subs	r3, r7, #1
 800e450:	9304      	str	r3, [sp, #16]
 800e452:	4649      	mov	r1, r9
 800e454:	2300      	movs	r3, #0
 800e456:	220a      	movs	r2, #10
 800e458:	4658      	mov	r0, fp
 800e45a:	f000 faf7 	bl	800ea4c <__multadd>
 800e45e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e460:	4681      	mov	r9, r0
 800e462:	2b00      	cmp	r3, #0
 800e464:	f000 8172 	beq.w	800e74c <_dtoa_r+0xb4c>
 800e468:	2300      	movs	r3, #0
 800e46a:	4629      	mov	r1, r5
 800e46c:	220a      	movs	r2, #10
 800e46e:	4658      	mov	r0, fp
 800e470:	f000 faec 	bl	800ea4c <__multadd>
 800e474:	9b00      	ldr	r3, [sp, #0]
 800e476:	2b00      	cmp	r3, #0
 800e478:	4605      	mov	r5, r0
 800e47a:	dc67      	bgt.n	800e54c <_dtoa_r+0x94c>
 800e47c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e47e:	2b02      	cmp	r3, #2
 800e480:	dc41      	bgt.n	800e506 <_dtoa_r+0x906>
 800e482:	e063      	b.n	800e54c <_dtoa_r+0x94c>
 800e484:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e486:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e48a:	e746      	b.n	800e31a <_dtoa_r+0x71a>
 800e48c:	9b07      	ldr	r3, [sp, #28]
 800e48e:	1e5c      	subs	r4, r3, #1
 800e490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e492:	42a3      	cmp	r3, r4
 800e494:	bfbf      	itttt	lt
 800e496:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e498:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e49a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e49c:	1ae3      	sublt	r3, r4, r3
 800e49e:	bfb4      	ite	lt
 800e4a0:	18d2      	addlt	r2, r2, r3
 800e4a2:	1b1c      	subge	r4, r3, r4
 800e4a4:	9b07      	ldr	r3, [sp, #28]
 800e4a6:	bfbc      	itt	lt
 800e4a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e4aa:	2400      	movlt	r4, #0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	bfb5      	itete	lt
 800e4b0:	eba8 0603 	sublt.w	r6, r8, r3
 800e4b4:	9b07      	ldrge	r3, [sp, #28]
 800e4b6:	2300      	movlt	r3, #0
 800e4b8:	4646      	movge	r6, r8
 800e4ba:	e730      	b.n	800e31e <_dtoa_r+0x71e>
 800e4bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e4be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e4c0:	4646      	mov	r6, r8
 800e4c2:	e735      	b.n	800e330 <_dtoa_r+0x730>
 800e4c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4c6:	e75c      	b.n	800e382 <_dtoa_r+0x782>
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	e788      	b.n	800e3de <_dtoa_r+0x7de>
 800e4cc:	3fe00000 	.word	0x3fe00000
 800e4d0:	40240000 	.word	0x40240000
 800e4d4:	40140000 	.word	0x40140000
 800e4d8:	9b02      	ldr	r3, [sp, #8]
 800e4da:	e780      	b.n	800e3de <_dtoa_r+0x7de>
 800e4dc:	2300      	movs	r3, #0
 800e4de:	930a      	str	r3, [sp, #40]	@ 0x28
 800e4e0:	e782      	b.n	800e3e8 <_dtoa_r+0x7e8>
 800e4e2:	d099      	beq.n	800e418 <_dtoa_r+0x818>
 800e4e4:	9a08      	ldr	r2, [sp, #32]
 800e4e6:	331c      	adds	r3, #28
 800e4e8:	441a      	add	r2, r3
 800e4ea:	4498      	add	r8, r3
 800e4ec:	441e      	add	r6, r3
 800e4ee:	9208      	str	r2, [sp, #32]
 800e4f0:	e792      	b.n	800e418 <_dtoa_r+0x818>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	e7f6      	b.n	800e4e4 <_dtoa_r+0x8e4>
 800e4f6:	9b07      	ldr	r3, [sp, #28]
 800e4f8:	9704      	str	r7, [sp, #16]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	dc20      	bgt.n	800e540 <_dtoa_r+0x940>
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e502:	2b02      	cmp	r3, #2
 800e504:	dd1e      	ble.n	800e544 <_dtoa_r+0x944>
 800e506:	9b00      	ldr	r3, [sp, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	f47f aec0 	bne.w	800e28e <_dtoa_r+0x68e>
 800e50e:	4621      	mov	r1, r4
 800e510:	2205      	movs	r2, #5
 800e512:	4658      	mov	r0, fp
 800e514:	f000 fa9a 	bl	800ea4c <__multadd>
 800e518:	4601      	mov	r1, r0
 800e51a:	4604      	mov	r4, r0
 800e51c:	4648      	mov	r0, r9
 800e51e:	f000 fcad 	bl	800ee7c <__mcmp>
 800e522:	2800      	cmp	r0, #0
 800e524:	f77f aeb3 	ble.w	800e28e <_dtoa_r+0x68e>
 800e528:	4656      	mov	r6, sl
 800e52a:	2331      	movs	r3, #49	@ 0x31
 800e52c:	f806 3b01 	strb.w	r3, [r6], #1
 800e530:	9b04      	ldr	r3, [sp, #16]
 800e532:	3301      	adds	r3, #1
 800e534:	9304      	str	r3, [sp, #16]
 800e536:	e6ae      	b.n	800e296 <_dtoa_r+0x696>
 800e538:	9c07      	ldr	r4, [sp, #28]
 800e53a:	9704      	str	r7, [sp, #16]
 800e53c:	4625      	mov	r5, r4
 800e53e:	e7f3      	b.n	800e528 <_dtoa_r+0x928>
 800e540:	9b07      	ldr	r3, [sp, #28]
 800e542:	9300      	str	r3, [sp, #0]
 800e544:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e546:	2b00      	cmp	r3, #0
 800e548:	f000 8104 	beq.w	800e754 <_dtoa_r+0xb54>
 800e54c:	2e00      	cmp	r6, #0
 800e54e:	dd05      	ble.n	800e55c <_dtoa_r+0x95c>
 800e550:	4629      	mov	r1, r5
 800e552:	4632      	mov	r2, r6
 800e554:	4658      	mov	r0, fp
 800e556:	f000 fc25 	bl	800eda4 <__lshift>
 800e55a:	4605      	mov	r5, r0
 800e55c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d05a      	beq.n	800e618 <_dtoa_r+0xa18>
 800e562:	6869      	ldr	r1, [r5, #4]
 800e564:	4658      	mov	r0, fp
 800e566:	f000 fa0f 	bl	800e988 <_Balloc>
 800e56a:	4606      	mov	r6, r0
 800e56c:	b928      	cbnz	r0, 800e57a <_dtoa_r+0x97a>
 800e56e:	4b84      	ldr	r3, [pc, #528]	@ (800e780 <_dtoa_r+0xb80>)
 800e570:	4602      	mov	r2, r0
 800e572:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e576:	f7ff bb5a 	b.w	800dc2e <_dtoa_r+0x2e>
 800e57a:	692a      	ldr	r2, [r5, #16]
 800e57c:	3202      	adds	r2, #2
 800e57e:	0092      	lsls	r2, r2, #2
 800e580:	f105 010c 	add.w	r1, r5, #12
 800e584:	300c      	adds	r0, #12
 800e586:	f7ff faa4 	bl	800dad2 <memcpy>
 800e58a:	2201      	movs	r2, #1
 800e58c:	4631      	mov	r1, r6
 800e58e:	4658      	mov	r0, fp
 800e590:	f000 fc08 	bl	800eda4 <__lshift>
 800e594:	f10a 0301 	add.w	r3, sl, #1
 800e598:	9307      	str	r3, [sp, #28]
 800e59a:	9b00      	ldr	r3, [sp, #0]
 800e59c:	4453      	add	r3, sl
 800e59e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5a0:	9b02      	ldr	r3, [sp, #8]
 800e5a2:	f003 0301 	and.w	r3, r3, #1
 800e5a6:	462f      	mov	r7, r5
 800e5a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	9b07      	ldr	r3, [sp, #28]
 800e5ae:	4621      	mov	r1, r4
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	4648      	mov	r0, r9
 800e5b4:	9300      	str	r3, [sp, #0]
 800e5b6:	f7ff fa9a 	bl	800daee <quorem>
 800e5ba:	4639      	mov	r1, r7
 800e5bc:	9002      	str	r0, [sp, #8]
 800e5be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e5c2:	4648      	mov	r0, r9
 800e5c4:	f000 fc5a 	bl	800ee7c <__mcmp>
 800e5c8:	462a      	mov	r2, r5
 800e5ca:	9008      	str	r0, [sp, #32]
 800e5cc:	4621      	mov	r1, r4
 800e5ce:	4658      	mov	r0, fp
 800e5d0:	f000 fc70 	bl	800eeb4 <__mdiff>
 800e5d4:	68c2      	ldr	r2, [r0, #12]
 800e5d6:	4606      	mov	r6, r0
 800e5d8:	bb02      	cbnz	r2, 800e61c <_dtoa_r+0xa1c>
 800e5da:	4601      	mov	r1, r0
 800e5dc:	4648      	mov	r0, r9
 800e5de:	f000 fc4d 	bl	800ee7c <__mcmp>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	4631      	mov	r1, r6
 800e5e6:	4658      	mov	r0, fp
 800e5e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800e5ea:	f000 fa0d 	bl	800ea08 <_Bfree>
 800e5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e5f2:	9e07      	ldr	r6, [sp, #28]
 800e5f4:	ea43 0102 	orr.w	r1, r3, r2
 800e5f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5fa:	4319      	orrs	r1, r3
 800e5fc:	d110      	bne.n	800e620 <_dtoa_r+0xa20>
 800e5fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e602:	d029      	beq.n	800e658 <_dtoa_r+0xa58>
 800e604:	9b08      	ldr	r3, [sp, #32]
 800e606:	2b00      	cmp	r3, #0
 800e608:	dd02      	ble.n	800e610 <_dtoa_r+0xa10>
 800e60a:	9b02      	ldr	r3, [sp, #8]
 800e60c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e610:	9b00      	ldr	r3, [sp, #0]
 800e612:	f883 8000 	strb.w	r8, [r3]
 800e616:	e63f      	b.n	800e298 <_dtoa_r+0x698>
 800e618:	4628      	mov	r0, r5
 800e61a:	e7bb      	b.n	800e594 <_dtoa_r+0x994>
 800e61c:	2201      	movs	r2, #1
 800e61e:	e7e1      	b.n	800e5e4 <_dtoa_r+0x9e4>
 800e620:	9b08      	ldr	r3, [sp, #32]
 800e622:	2b00      	cmp	r3, #0
 800e624:	db04      	blt.n	800e630 <_dtoa_r+0xa30>
 800e626:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e628:	430b      	orrs	r3, r1
 800e62a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e62c:	430b      	orrs	r3, r1
 800e62e:	d120      	bne.n	800e672 <_dtoa_r+0xa72>
 800e630:	2a00      	cmp	r2, #0
 800e632:	dded      	ble.n	800e610 <_dtoa_r+0xa10>
 800e634:	4649      	mov	r1, r9
 800e636:	2201      	movs	r2, #1
 800e638:	4658      	mov	r0, fp
 800e63a:	f000 fbb3 	bl	800eda4 <__lshift>
 800e63e:	4621      	mov	r1, r4
 800e640:	4681      	mov	r9, r0
 800e642:	f000 fc1b 	bl	800ee7c <__mcmp>
 800e646:	2800      	cmp	r0, #0
 800e648:	dc03      	bgt.n	800e652 <_dtoa_r+0xa52>
 800e64a:	d1e1      	bne.n	800e610 <_dtoa_r+0xa10>
 800e64c:	f018 0f01 	tst.w	r8, #1
 800e650:	d0de      	beq.n	800e610 <_dtoa_r+0xa10>
 800e652:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e656:	d1d8      	bne.n	800e60a <_dtoa_r+0xa0a>
 800e658:	9a00      	ldr	r2, [sp, #0]
 800e65a:	2339      	movs	r3, #57	@ 0x39
 800e65c:	7013      	strb	r3, [r2, #0]
 800e65e:	4633      	mov	r3, r6
 800e660:	461e      	mov	r6, r3
 800e662:	3b01      	subs	r3, #1
 800e664:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e668:	2a39      	cmp	r2, #57	@ 0x39
 800e66a:	d052      	beq.n	800e712 <_dtoa_r+0xb12>
 800e66c:	3201      	adds	r2, #1
 800e66e:	701a      	strb	r2, [r3, #0]
 800e670:	e612      	b.n	800e298 <_dtoa_r+0x698>
 800e672:	2a00      	cmp	r2, #0
 800e674:	dd07      	ble.n	800e686 <_dtoa_r+0xa86>
 800e676:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e67a:	d0ed      	beq.n	800e658 <_dtoa_r+0xa58>
 800e67c:	9a00      	ldr	r2, [sp, #0]
 800e67e:	f108 0301 	add.w	r3, r8, #1
 800e682:	7013      	strb	r3, [r2, #0]
 800e684:	e608      	b.n	800e298 <_dtoa_r+0x698>
 800e686:	9b07      	ldr	r3, [sp, #28]
 800e688:	9a07      	ldr	r2, [sp, #28]
 800e68a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e68e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e690:	4293      	cmp	r3, r2
 800e692:	d028      	beq.n	800e6e6 <_dtoa_r+0xae6>
 800e694:	4649      	mov	r1, r9
 800e696:	2300      	movs	r3, #0
 800e698:	220a      	movs	r2, #10
 800e69a:	4658      	mov	r0, fp
 800e69c:	f000 f9d6 	bl	800ea4c <__multadd>
 800e6a0:	42af      	cmp	r7, r5
 800e6a2:	4681      	mov	r9, r0
 800e6a4:	f04f 0300 	mov.w	r3, #0
 800e6a8:	f04f 020a 	mov.w	r2, #10
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	4658      	mov	r0, fp
 800e6b0:	d107      	bne.n	800e6c2 <_dtoa_r+0xac2>
 800e6b2:	f000 f9cb 	bl	800ea4c <__multadd>
 800e6b6:	4607      	mov	r7, r0
 800e6b8:	4605      	mov	r5, r0
 800e6ba:	9b07      	ldr	r3, [sp, #28]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	9307      	str	r3, [sp, #28]
 800e6c0:	e774      	b.n	800e5ac <_dtoa_r+0x9ac>
 800e6c2:	f000 f9c3 	bl	800ea4c <__multadd>
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	4607      	mov	r7, r0
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	220a      	movs	r2, #10
 800e6ce:	4658      	mov	r0, fp
 800e6d0:	f000 f9bc 	bl	800ea4c <__multadd>
 800e6d4:	4605      	mov	r5, r0
 800e6d6:	e7f0      	b.n	800e6ba <_dtoa_r+0xaba>
 800e6d8:	9b00      	ldr	r3, [sp, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	bfcc      	ite	gt
 800e6de:	461e      	movgt	r6, r3
 800e6e0:	2601      	movle	r6, #1
 800e6e2:	4456      	add	r6, sl
 800e6e4:	2700      	movs	r7, #0
 800e6e6:	4649      	mov	r1, r9
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	4658      	mov	r0, fp
 800e6ec:	f000 fb5a 	bl	800eda4 <__lshift>
 800e6f0:	4621      	mov	r1, r4
 800e6f2:	4681      	mov	r9, r0
 800e6f4:	f000 fbc2 	bl	800ee7c <__mcmp>
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	dcb0      	bgt.n	800e65e <_dtoa_r+0xa5e>
 800e6fc:	d102      	bne.n	800e704 <_dtoa_r+0xb04>
 800e6fe:	f018 0f01 	tst.w	r8, #1
 800e702:	d1ac      	bne.n	800e65e <_dtoa_r+0xa5e>
 800e704:	4633      	mov	r3, r6
 800e706:	461e      	mov	r6, r3
 800e708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e70c:	2a30      	cmp	r2, #48	@ 0x30
 800e70e:	d0fa      	beq.n	800e706 <_dtoa_r+0xb06>
 800e710:	e5c2      	b.n	800e298 <_dtoa_r+0x698>
 800e712:	459a      	cmp	sl, r3
 800e714:	d1a4      	bne.n	800e660 <_dtoa_r+0xa60>
 800e716:	9b04      	ldr	r3, [sp, #16]
 800e718:	3301      	adds	r3, #1
 800e71a:	9304      	str	r3, [sp, #16]
 800e71c:	2331      	movs	r3, #49	@ 0x31
 800e71e:	f88a 3000 	strb.w	r3, [sl]
 800e722:	e5b9      	b.n	800e298 <_dtoa_r+0x698>
 800e724:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e726:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e784 <_dtoa_r+0xb84>
 800e72a:	b11b      	cbz	r3, 800e734 <_dtoa_r+0xb34>
 800e72c:	f10a 0308 	add.w	r3, sl, #8
 800e730:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e732:	6013      	str	r3, [r2, #0]
 800e734:	4650      	mov	r0, sl
 800e736:	b019      	add	sp, #100	@ 0x64
 800e738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e73e:	2b01      	cmp	r3, #1
 800e740:	f77f ae37 	ble.w	800e3b2 <_dtoa_r+0x7b2>
 800e744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e746:	930a      	str	r3, [sp, #40]	@ 0x28
 800e748:	2001      	movs	r0, #1
 800e74a:	e655      	b.n	800e3f8 <_dtoa_r+0x7f8>
 800e74c:	9b00      	ldr	r3, [sp, #0]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	f77f aed6 	ble.w	800e500 <_dtoa_r+0x900>
 800e754:	4656      	mov	r6, sl
 800e756:	4621      	mov	r1, r4
 800e758:	4648      	mov	r0, r9
 800e75a:	f7ff f9c8 	bl	800daee <quorem>
 800e75e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e762:	f806 8b01 	strb.w	r8, [r6], #1
 800e766:	9b00      	ldr	r3, [sp, #0]
 800e768:	eba6 020a 	sub.w	r2, r6, sl
 800e76c:	4293      	cmp	r3, r2
 800e76e:	ddb3      	ble.n	800e6d8 <_dtoa_r+0xad8>
 800e770:	4649      	mov	r1, r9
 800e772:	2300      	movs	r3, #0
 800e774:	220a      	movs	r2, #10
 800e776:	4658      	mov	r0, fp
 800e778:	f000 f968 	bl	800ea4c <__multadd>
 800e77c:	4681      	mov	r9, r0
 800e77e:	e7ea      	b.n	800e756 <_dtoa_r+0xb56>
 800e780:	0800fc20 	.word	0x0800fc20
 800e784:	0800fba4 	.word	0x0800fba4

0800e788 <_free_r>:
 800e788:	b538      	push	{r3, r4, r5, lr}
 800e78a:	4605      	mov	r5, r0
 800e78c:	2900      	cmp	r1, #0
 800e78e:	d041      	beq.n	800e814 <_free_r+0x8c>
 800e790:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e794:	1f0c      	subs	r4, r1, #4
 800e796:	2b00      	cmp	r3, #0
 800e798:	bfb8      	it	lt
 800e79a:	18e4      	addlt	r4, r4, r3
 800e79c:	f000 f8e8 	bl	800e970 <__malloc_lock>
 800e7a0:	4a1d      	ldr	r2, [pc, #116]	@ (800e818 <_free_r+0x90>)
 800e7a2:	6813      	ldr	r3, [r2, #0]
 800e7a4:	b933      	cbnz	r3, 800e7b4 <_free_r+0x2c>
 800e7a6:	6063      	str	r3, [r4, #4]
 800e7a8:	6014      	str	r4, [r2, #0]
 800e7aa:	4628      	mov	r0, r5
 800e7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7b0:	f000 b8e4 	b.w	800e97c <__malloc_unlock>
 800e7b4:	42a3      	cmp	r3, r4
 800e7b6:	d908      	bls.n	800e7ca <_free_r+0x42>
 800e7b8:	6820      	ldr	r0, [r4, #0]
 800e7ba:	1821      	adds	r1, r4, r0
 800e7bc:	428b      	cmp	r3, r1
 800e7be:	bf01      	itttt	eq
 800e7c0:	6819      	ldreq	r1, [r3, #0]
 800e7c2:	685b      	ldreq	r3, [r3, #4]
 800e7c4:	1809      	addeq	r1, r1, r0
 800e7c6:	6021      	streq	r1, [r4, #0]
 800e7c8:	e7ed      	b.n	800e7a6 <_free_r+0x1e>
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	b10b      	cbz	r3, 800e7d4 <_free_r+0x4c>
 800e7d0:	42a3      	cmp	r3, r4
 800e7d2:	d9fa      	bls.n	800e7ca <_free_r+0x42>
 800e7d4:	6811      	ldr	r1, [r2, #0]
 800e7d6:	1850      	adds	r0, r2, r1
 800e7d8:	42a0      	cmp	r0, r4
 800e7da:	d10b      	bne.n	800e7f4 <_free_r+0x6c>
 800e7dc:	6820      	ldr	r0, [r4, #0]
 800e7de:	4401      	add	r1, r0
 800e7e0:	1850      	adds	r0, r2, r1
 800e7e2:	4283      	cmp	r3, r0
 800e7e4:	6011      	str	r1, [r2, #0]
 800e7e6:	d1e0      	bne.n	800e7aa <_free_r+0x22>
 800e7e8:	6818      	ldr	r0, [r3, #0]
 800e7ea:	685b      	ldr	r3, [r3, #4]
 800e7ec:	6053      	str	r3, [r2, #4]
 800e7ee:	4408      	add	r0, r1
 800e7f0:	6010      	str	r0, [r2, #0]
 800e7f2:	e7da      	b.n	800e7aa <_free_r+0x22>
 800e7f4:	d902      	bls.n	800e7fc <_free_r+0x74>
 800e7f6:	230c      	movs	r3, #12
 800e7f8:	602b      	str	r3, [r5, #0]
 800e7fa:	e7d6      	b.n	800e7aa <_free_r+0x22>
 800e7fc:	6820      	ldr	r0, [r4, #0]
 800e7fe:	1821      	adds	r1, r4, r0
 800e800:	428b      	cmp	r3, r1
 800e802:	bf04      	itt	eq
 800e804:	6819      	ldreq	r1, [r3, #0]
 800e806:	685b      	ldreq	r3, [r3, #4]
 800e808:	6063      	str	r3, [r4, #4]
 800e80a:	bf04      	itt	eq
 800e80c:	1809      	addeq	r1, r1, r0
 800e80e:	6021      	streq	r1, [r4, #0]
 800e810:	6054      	str	r4, [r2, #4]
 800e812:	e7ca      	b.n	800e7aa <_free_r+0x22>
 800e814:	bd38      	pop	{r3, r4, r5, pc}
 800e816:	bf00      	nop
 800e818:	20001188 	.word	0x20001188

0800e81c <malloc>:
 800e81c:	4b02      	ldr	r3, [pc, #8]	@ (800e828 <malloc+0xc>)
 800e81e:	4601      	mov	r1, r0
 800e820:	6818      	ldr	r0, [r3, #0]
 800e822:	f000 b825 	b.w	800e870 <_malloc_r>
 800e826:	bf00      	nop
 800e828:	20000128 	.word	0x20000128

0800e82c <sbrk_aligned>:
 800e82c:	b570      	push	{r4, r5, r6, lr}
 800e82e:	4e0f      	ldr	r6, [pc, #60]	@ (800e86c <sbrk_aligned+0x40>)
 800e830:	460c      	mov	r4, r1
 800e832:	6831      	ldr	r1, [r6, #0]
 800e834:	4605      	mov	r5, r0
 800e836:	b911      	cbnz	r1, 800e83e <sbrk_aligned+0x12>
 800e838:	f000 fd58 	bl	800f2ec <_sbrk_r>
 800e83c:	6030      	str	r0, [r6, #0]
 800e83e:	4621      	mov	r1, r4
 800e840:	4628      	mov	r0, r5
 800e842:	f000 fd53 	bl	800f2ec <_sbrk_r>
 800e846:	1c43      	adds	r3, r0, #1
 800e848:	d103      	bne.n	800e852 <sbrk_aligned+0x26>
 800e84a:	f04f 34ff 	mov.w	r4, #4294967295
 800e84e:	4620      	mov	r0, r4
 800e850:	bd70      	pop	{r4, r5, r6, pc}
 800e852:	1cc4      	adds	r4, r0, #3
 800e854:	f024 0403 	bic.w	r4, r4, #3
 800e858:	42a0      	cmp	r0, r4
 800e85a:	d0f8      	beq.n	800e84e <sbrk_aligned+0x22>
 800e85c:	1a21      	subs	r1, r4, r0
 800e85e:	4628      	mov	r0, r5
 800e860:	f000 fd44 	bl	800f2ec <_sbrk_r>
 800e864:	3001      	adds	r0, #1
 800e866:	d1f2      	bne.n	800e84e <sbrk_aligned+0x22>
 800e868:	e7ef      	b.n	800e84a <sbrk_aligned+0x1e>
 800e86a:	bf00      	nop
 800e86c:	20001184 	.word	0x20001184

0800e870 <_malloc_r>:
 800e870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e874:	1ccd      	adds	r5, r1, #3
 800e876:	f025 0503 	bic.w	r5, r5, #3
 800e87a:	3508      	adds	r5, #8
 800e87c:	2d0c      	cmp	r5, #12
 800e87e:	bf38      	it	cc
 800e880:	250c      	movcc	r5, #12
 800e882:	2d00      	cmp	r5, #0
 800e884:	4606      	mov	r6, r0
 800e886:	db01      	blt.n	800e88c <_malloc_r+0x1c>
 800e888:	42a9      	cmp	r1, r5
 800e88a:	d904      	bls.n	800e896 <_malloc_r+0x26>
 800e88c:	230c      	movs	r3, #12
 800e88e:	6033      	str	r3, [r6, #0]
 800e890:	2000      	movs	r0, #0
 800e892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e96c <_malloc_r+0xfc>
 800e89a:	f000 f869 	bl	800e970 <__malloc_lock>
 800e89e:	f8d8 3000 	ldr.w	r3, [r8]
 800e8a2:	461c      	mov	r4, r3
 800e8a4:	bb44      	cbnz	r4, 800e8f8 <_malloc_r+0x88>
 800e8a6:	4629      	mov	r1, r5
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f7ff ffbf 	bl	800e82c <sbrk_aligned>
 800e8ae:	1c43      	adds	r3, r0, #1
 800e8b0:	4604      	mov	r4, r0
 800e8b2:	d158      	bne.n	800e966 <_malloc_r+0xf6>
 800e8b4:	f8d8 4000 	ldr.w	r4, [r8]
 800e8b8:	4627      	mov	r7, r4
 800e8ba:	2f00      	cmp	r7, #0
 800e8bc:	d143      	bne.n	800e946 <_malloc_r+0xd6>
 800e8be:	2c00      	cmp	r4, #0
 800e8c0:	d04b      	beq.n	800e95a <_malloc_r+0xea>
 800e8c2:	6823      	ldr	r3, [r4, #0]
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	4630      	mov	r0, r6
 800e8c8:	eb04 0903 	add.w	r9, r4, r3
 800e8cc:	f000 fd0e 	bl	800f2ec <_sbrk_r>
 800e8d0:	4581      	cmp	r9, r0
 800e8d2:	d142      	bne.n	800e95a <_malloc_r+0xea>
 800e8d4:	6821      	ldr	r1, [r4, #0]
 800e8d6:	1a6d      	subs	r5, r5, r1
 800e8d8:	4629      	mov	r1, r5
 800e8da:	4630      	mov	r0, r6
 800e8dc:	f7ff ffa6 	bl	800e82c <sbrk_aligned>
 800e8e0:	3001      	adds	r0, #1
 800e8e2:	d03a      	beq.n	800e95a <_malloc_r+0xea>
 800e8e4:	6823      	ldr	r3, [r4, #0]
 800e8e6:	442b      	add	r3, r5
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	f8d8 3000 	ldr.w	r3, [r8]
 800e8ee:	685a      	ldr	r2, [r3, #4]
 800e8f0:	bb62      	cbnz	r2, 800e94c <_malloc_r+0xdc>
 800e8f2:	f8c8 7000 	str.w	r7, [r8]
 800e8f6:	e00f      	b.n	800e918 <_malloc_r+0xa8>
 800e8f8:	6822      	ldr	r2, [r4, #0]
 800e8fa:	1b52      	subs	r2, r2, r5
 800e8fc:	d420      	bmi.n	800e940 <_malloc_r+0xd0>
 800e8fe:	2a0b      	cmp	r2, #11
 800e900:	d917      	bls.n	800e932 <_malloc_r+0xc2>
 800e902:	1961      	adds	r1, r4, r5
 800e904:	42a3      	cmp	r3, r4
 800e906:	6025      	str	r5, [r4, #0]
 800e908:	bf18      	it	ne
 800e90a:	6059      	strne	r1, [r3, #4]
 800e90c:	6863      	ldr	r3, [r4, #4]
 800e90e:	bf08      	it	eq
 800e910:	f8c8 1000 	streq.w	r1, [r8]
 800e914:	5162      	str	r2, [r4, r5]
 800e916:	604b      	str	r3, [r1, #4]
 800e918:	4630      	mov	r0, r6
 800e91a:	f000 f82f 	bl	800e97c <__malloc_unlock>
 800e91e:	f104 000b 	add.w	r0, r4, #11
 800e922:	1d23      	adds	r3, r4, #4
 800e924:	f020 0007 	bic.w	r0, r0, #7
 800e928:	1ac2      	subs	r2, r0, r3
 800e92a:	bf1c      	itt	ne
 800e92c:	1a1b      	subne	r3, r3, r0
 800e92e:	50a3      	strne	r3, [r4, r2]
 800e930:	e7af      	b.n	800e892 <_malloc_r+0x22>
 800e932:	6862      	ldr	r2, [r4, #4]
 800e934:	42a3      	cmp	r3, r4
 800e936:	bf0c      	ite	eq
 800e938:	f8c8 2000 	streq.w	r2, [r8]
 800e93c:	605a      	strne	r2, [r3, #4]
 800e93e:	e7eb      	b.n	800e918 <_malloc_r+0xa8>
 800e940:	4623      	mov	r3, r4
 800e942:	6864      	ldr	r4, [r4, #4]
 800e944:	e7ae      	b.n	800e8a4 <_malloc_r+0x34>
 800e946:	463c      	mov	r4, r7
 800e948:	687f      	ldr	r7, [r7, #4]
 800e94a:	e7b6      	b.n	800e8ba <_malloc_r+0x4a>
 800e94c:	461a      	mov	r2, r3
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	42a3      	cmp	r3, r4
 800e952:	d1fb      	bne.n	800e94c <_malloc_r+0xdc>
 800e954:	2300      	movs	r3, #0
 800e956:	6053      	str	r3, [r2, #4]
 800e958:	e7de      	b.n	800e918 <_malloc_r+0xa8>
 800e95a:	230c      	movs	r3, #12
 800e95c:	6033      	str	r3, [r6, #0]
 800e95e:	4630      	mov	r0, r6
 800e960:	f000 f80c 	bl	800e97c <__malloc_unlock>
 800e964:	e794      	b.n	800e890 <_malloc_r+0x20>
 800e966:	6005      	str	r5, [r0, #0]
 800e968:	e7d6      	b.n	800e918 <_malloc_r+0xa8>
 800e96a:	bf00      	nop
 800e96c:	20001188 	.word	0x20001188

0800e970 <__malloc_lock>:
 800e970:	4801      	ldr	r0, [pc, #4]	@ (800e978 <__malloc_lock+0x8>)
 800e972:	f7ff b8ac 	b.w	800dace <__retarget_lock_acquire_recursive>
 800e976:	bf00      	nop
 800e978:	20001180 	.word	0x20001180

0800e97c <__malloc_unlock>:
 800e97c:	4801      	ldr	r0, [pc, #4]	@ (800e984 <__malloc_unlock+0x8>)
 800e97e:	f7ff b8a7 	b.w	800dad0 <__retarget_lock_release_recursive>
 800e982:	bf00      	nop
 800e984:	20001180 	.word	0x20001180

0800e988 <_Balloc>:
 800e988:	b570      	push	{r4, r5, r6, lr}
 800e98a:	69c6      	ldr	r6, [r0, #28]
 800e98c:	4604      	mov	r4, r0
 800e98e:	460d      	mov	r5, r1
 800e990:	b976      	cbnz	r6, 800e9b0 <_Balloc+0x28>
 800e992:	2010      	movs	r0, #16
 800e994:	f7ff ff42 	bl	800e81c <malloc>
 800e998:	4602      	mov	r2, r0
 800e99a:	61e0      	str	r0, [r4, #28]
 800e99c:	b920      	cbnz	r0, 800e9a8 <_Balloc+0x20>
 800e99e:	4b18      	ldr	r3, [pc, #96]	@ (800ea00 <_Balloc+0x78>)
 800e9a0:	4818      	ldr	r0, [pc, #96]	@ (800ea04 <_Balloc+0x7c>)
 800e9a2:	216b      	movs	r1, #107	@ 0x6b
 800e9a4:	f000 fcb2 	bl	800f30c <__assert_func>
 800e9a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9ac:	6006      	str	r6, [r0, #0]
 800e9ae:	60c6      	str	r6, [r0, #12]
 800e9b0:	69e6      	ldr	r6, [r4, #28]
 800e9b2:	68f3      	ldr	r3, [r6, #12]
 800e9b4:	b183      	cbz	r3, 800e9d8 <_Balloc+0x50>
 800e9b6:	69e3      	ldr	r3, [r4, #28]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e9be:	b9b8      	cbnz	r0, 800e9f0 <_Balloc+0x68>
 800e9c0:	2101      	movs	r1, #1
 800e9c2:	fa01 f605 	lsl.w	r6, r1, r5
 800e9c6:	1d72      	adds	r2, r6, #5
 800e9c8:	0092      	lsls	r2, r2, #2
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	f000 fcbc 	bl	800f348 <_calloc_r>
 800e9d0:	b160      	cbz	r0, 800e9ec <_Balloc+0x64>
 800e9d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e9d6:	e00e      	b.n	800e9f6 <_Balloc+0x6e>
 800e9d8:	2221      	movs	r2, #33	@ 0x21
 800e9da:	2104      	movs	r1, #4
 800e9dc:	4620      	mov	r0, r4
 800e9de:	f000 fcb3 	bl	800f348 <_calloc_r>
 800e9e2:	69e3      	ldr	r3, [r4, #28]
 800e9e4:	60f0      	str	r0, [r6, #12]
 800e9e6:	68db      	ldr	r3, [r3, #12]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1e4      	bne.n	800e9b6 <_Balloc+0x2e>
 800e9ec:	2000      	movs	r0, #0
 800e9ee:	bd70      	pop	{r4, r5, r6, pc}
 800e9f0:	6802      	ldr	r2, [r0, #0]
 800e9f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e9fc:	e7f7      	b.n	800e9ee <_Balloc+0x66>
 800e9fe:	bf00      	nop
 800ea00:	0800fbb1 	.word	0x0800fbb1
 800ea04:	0800fc31 	.word	0x0800fc31

0800ea08 <_Bfree>:
 800ea08:	b570      	push	{r4, r5, r6, lr}
 800ea0a:	69c6      	ldr	r6, [r0, #28]
 800ea0c:	4605      	mov	r5, r0
 800ea0e:	460c      	mov	r4, r1
 800ea10:	b976      	cbnz	r6, 800ea30 <_Bfree+0x28>
 800ea12:	2010      	movs	r0, #16
 800ea14:	f7ff ff02 	bl	800e81c <malloc>
 800ea18:	4602      	mov	r2, r0
 800ea1a:	61e8      	str	r0, [r5, #28]
 800ea1c:	b920      	cbnz	r0, 800ea28 <_Bfree+0x20>
 800ea1e:	4b09      	ldr	r3, [pc, #36]	@ (800ea44 <_Bfree+0x3c>)
 800ea20:	4809      	ldr	r0, [pc, #36]	@ (800ea48 <_Bfree+0x40>)
 800ea22:	218f      	movs	r1, #143	@ 0x8f
 800ea24:	f000 fc72 	bl	800f30c <__assert_func>
 800ea28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea2c:	6006      	str	r6, [r0, #0]
 800ea2e:	60c6      	str	r6, [r0, #12]
 800ea30:	b13c      	cbz	r4, 800ea42 <_Bfree+0x3a>
 800ea32:	69eb      	ldr	r3, [r5, #28]
 800ea34:	6862      	ldr	r2, [r4, #4]
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea3c:	6021      	str	r1, [r4, #0]
 800ea3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea42:	bd70      	pop	{r4, r5, r6, pc}
 800ea44:	0800fbb1 	.word	0x0800fbb1
 800ea48:	0800fc31 	.word	0x0800fc31

0800ea4c <__multadd>:
 800ea4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea50:	690d      	ldr	r5, [r1, #16]
 800ea52:	4607      	mov	r7, r0
 800ea54:	460c      	mov	r4, r1
 800ea56:	461e      	mov	r6, r3
 800ea58:	f101 0c14 	add.w	ip, r1, #20
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	f8dc 3000 	ldr.w	r3, [ip]
 800ea62:	b299      	uxth	r1, r3
 800ea64:	fb02 6101 	mla	r1, r2, r1, r6
 800ea68:	0c1e      	lsrs	r6, r3, #16
 800ea6a:	0c0b      	lsrs	r3, r1, #16
 800ea6c:	fb02 3306 	mla	r3, r2, r6, r3
 800ea70:	b289      	uxth	r1, r1
 800ea72:	3001      	adds	r0, #1
 800ea74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea78:	4285      	cmp	r5, r0
 800ea7a:	f84c 1b04 	str.w	r1, [ip], #4
 800ea7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ea82:	dcec      	bgt.n	800ea5e <__multadd+0x12>
 800ea84:	b30e      	cbz	r6, 800eaca <__multadd+0x7e>
 800ea86:	68a3      	ldr	r3, [r4, #8]
 800ea88:	42ab      	cmp	r3, r5
 800ea8a:	dc19      	bgt.n	800eac0 <__multadd+0x74>
 800ea8c:	6861      	ldr	r1, [r4, #4]
 800ea8e:	4638      	mov	r0, r7
 800ea90:	3101      	adds	r1, #1
 800ea92:	f7ff ff79 	bl	800e988 <_Balloc>
 800ea96:	4680      	mov	r8, r0
 800ea98:	b928      	cbnz	r0, 800eaa6 <__multadd+0x5a>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	4b0c      	ldr	r3, [pc, #48]	@ (800ead0 <__multadd+0x84>)
 800ea9e:	480d      	ldr	r0, [pc, #52]	@ (800ead4 <__multadd+0x88>)
 800eaa0:	21ba      	movs	r1, #186	@ 0xba
 800eaa2:	f000 fc33 	bl	800f30c <__assert_func>
 800eaa6:	6922      	ldr	r2, [r4, #16]
 800eaa8:	3202      	adds	r2, #2
 800eaaa:	f104 010c 	add.w	r1, r4, #12
 800eaae:	0092      	lsls	r2, r2, #2
 800eab0:	300c      	adds	r0, #12
 800eab2:	f7ff f80e 	bl	800dad2 <memcpy>
 800eab6:	4621      	mov	r1, r4
 800eab8:	4638      	mov	r0, r7
 800eaba:	f7ff ffa5 	bl	800ea08 <_Bfree>
 800eabe:	4644      	mov	r4, r8
 800eac0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eac4:	3501      	adds	r5, #1
 800eac6:	615e      	str	r6, [r3, #20]
 800eac8:	6125      	str	r5, [r4, #16]
 800eaca:	4620      	mov	r0, r4
 800eacc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ead0:	0800fc20 	.word	0x0800fc20
 800ead4:	0800fc31 	.word	0x0800fc31

0800ead8 <__hi0bits>:
 800ead8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eadc:	4603      	mov	r3, r0
 800eade:	bf36      	itet	cc
 800eae0:	0403      	lslcc	r3, r0, #16
 800eae2:	2000      	movcs	r0, #0
 800eae4:	2010      	movcc	r0, #16
 800eae6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eaea:	bf3c      	itt	cc
 800eaec:	021b      	lslcc	r3, r3, #8
 800eaee:	3008      	addcc	r0, #8
 800eaf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eaf4:	bf3c      	itt	cc
 800eaf6:	011b      	lslcc	r3, r3, #4
 800eaf8:	3004      	addcc	r0, #4
 800eafa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eafe:	bf3c      	itt	cc
 800eb00:	009b      	lslcc	r3, r3, #2
 800eb02:	3002      	addcc	r0, #2
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	db05      	blt.n	800eb14 <__hi0bits+0x3c>
 800eb08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eb0c:	f100 0001 	add.w	r0, r0, #1
 800eb10:	bf08      	it	eq
 800eb12:	2020      	moveq	r0, #32
 800eb14:	4770      	bx	lr

0800eb16 <__lo0bits>:
 800eb16:	6803      	ldr	r3, [r0, #0]
 800eb18:	4602      	mov	r2, r0
 800eb1a:	f013 0007 	ands.w	r0, r3, #7
 800eb1e:	d00b      	beq.n	800eb38 <__lo0bits+0x22>
 800eb20:	07d9      	lsls	r1, r3, #31
 800eb22:	d421      	bmi.n	800eb68 <__lo0bits+0x52>
 800eb24:	0798      	lsls	r0, r3, #30
 800eb26:	bf49      	itett	mi
 800eb28:	085b      	lsrmi	r3, r3, #1
 800eb2a:	089b      	lsrpl	r3, r3, #2
 800eb2c:	2001      	movmi	r0, #1
 800eb2e:	6013      	strmi	r3, [r2, #0]
 800eb30:	bf5c      	itt	pl
 800eb32:	6013      	strpl	r3, [r2, #0]
 800eb34:	2002      	movpl	r0, #2
 800eb36:	4770      	bx	lr
 800eb38:	b299      	uxth	r1, r3
 800eb3a:	b909      	cbnz	r1, 800eb40 <__lo0bits+0x2a>
 800eb3c:	0c1b      	lsrs	r3, r3, #16
 800eb3e:	2010      	movs	r0, #16
 800eb40:	b2d9      	uxtb	r1, r3
 800eb42:	b909      	cbnz	r1, 800eb48 <__lo0bits+0x32>
 800eb44:	3008      	adds	r0, #8
 800eb46:	0a1b      	lsrs	r3, r3, #8
 800eb48:	0719      	lsls	r1, r3, #28
 800eb4a:	bf04      	itt	eq
 800eb4c:	091b      	lsreq	r3, r3, #4
 800eb4e:	3004      	addeq	r0, #4
 800eb50:	0799      	lsls	r1, r3, #30
 800eb52:	bf04      	itt	eq
 800eb54:	089b      	lsreq	r3, r3, #2
 800eb56:	3002      	addeq	r0, #2
 800eb58:	07d9      	lsls	r1, r3, #31
 800eb5a:	d403      	bmi.n	800eb64 <__lo0bits+0x4e>
 800eb5c:	085b      	lsrs	r3, r3, #1
 800eb5e:	f100 0001 	add.w	r0, r0, #1
 800eb62:	d003      	beq.n	800eb6c <__lo0bits+0x56>
 800eb64:	6013      	str	r3, [r2, #0]
 800eb66:	4770      	bx	lr
 800eb68:	2000      	movs	r0, #0
 800eb6a:	4770      	bx	lr
 800eb6c:	2020      	movs	r0, #32
 800eb6e:	4770      	bx	lr

0800eb70 <__i2b>:
 800eb70:	b510      	push	{r4, lr}
 800eb72:	460c      	mov	r4, r1
 800eb74:	2101      	movs	r1, #1
 800eb76:	f7ff ff07 	bl	800e988 <_Balloc>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	b928      	cbnz	r0, 800eb8a <__i2b+0x1a>
 800eb7e:	4b05      	ldr	r3, [pc, #20]	@ (800eb94 <__i2b+0x24>)
 800eb80:	4805      	ldr	r0, [pc, #20]	@ (800eb98 <__i2b+0x28>)
 800eb82:	f240 1145 	movw	r1, #325	@ 0x145
 800eb86:	f000 fbc1 	bl	800f30c <__assert_func>
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	6144      	str	r4, [r0, #20]
 800eb8e:	6103      	str	r3, [r0, #16]
 800eb90:	bd10      	pop	{r4, pc}
 800eb92:	bf00      	nop
 800eb94:	0800fc20 	.word	0x0800fc20
 800eb98:	0800fc31 	.word	0x0800fc31

0800eb9c <__multiply>:
 800eb9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eba0:	4614      	mov	r4, r2
 800eba2:	690a      	ldr	r2, [r1, #16]
 800eba4:	6923      	ldr	r3, [r4, #16]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	bfa8      	it	ge
 800ebaa:	4623      	movge	r3, r4
 800ebac:	460f      	mov	r7, r1
 800ebae:	bfa4      	itt	ge
 800ebb0:	460c      	movge	r4, r1
 800ebb2:	461f      	movge	r7, r3
 800ebb4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ebb8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ebbc:	68a3      	ldr	r3, [r4, #8]
 800ebbe:	6861      	ldr	r1, [r4, #4]
 800ebc0:	eb0a 0609 	add.w	r6, sl, r9
 800ebc4:	42b3      	cmp	r3, r6
 800ebc6:	b085      	sub	sp, #20
 800ebc8:	bfb8      	it	lt
 800ebca:	3101      	addlt	r1, #1
 800ebcc:	f7ff fedc 	bl	800e988 <_Balloc>
 800ebd0:	b930      	cbnz	r0, 800ebe0 <__multiply+0x44>
 800ebd2:	4602      	mov	r2, r0
 800ebd4:	4b44      	ldr	r3, [pc, #272]	@ (800ece8 <__multiply+0x14c>)
 800ebd6:	4845      	ldr	r0, [pc, #276]	@ (800ecec <__multiply+0x150>)
 800ebd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ebdc:	f000 fb96 	bl	800f30c <__assert_func>
 800ebe0:	f100 0514 	add.w	r5, r0, #20
 800ebe4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ebe8:	462b      	mov	r3, r5
 800ebea:	2200      	movs	r2, #0
 800ebec:	4543      	cmp	r3, r8
 800ebee:	d321      	bcc.n	800ec34 <__multiply+0x98>
 800ebf0:	f107 0114 	add.w	r1, r7, #20
 800ebf4:	f104 0214 	add.w	r2, r4, #20
 800ebf8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ebfc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ec00:	9302      	str	r3, [sp, #8]
 800ec02:	1b13      	subs	r3, r2, r4
 800ec04:	3b15      	subs	r3, #21
 800ec06:	f023 0303 	bic.w	r3, r3, #3
 800ec0a:	3304      	adds	r3, #4
 800ec0c:	f104 0715 	add.w	r7, r4, #21
 800ec10:	42ba      	cmp	r2, r7
 800ec12:	bf38      	it	cc
 800ec14:	2304      	movcc	r3, #4
 800ec16:	9301      	str	r3, [sp, #4]
 800ec18:	9b02      	ldr	r3, [sp, #8]
 800ec1a:	9103      	str	r1, [sp, #12]
 800ec1c:	428b      	cmp	r3, r1
 800ec1e:	d80c      	bhi.n	800ec3a <__multiply+0x9e>
 800ec20:	2e00      	cmp	r6, #0
 800ec22:	dd03      	ble.n	800ec2c <__multiply+0x90>
 800ec24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d05b      	beq.n	800ece4 <__multiply+0x148>
 800ec2c:	6106      	str	r6, [r0, #16]
 800ec2e:	b005      	add	sp, #20
 800ec30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec34:	f843 2b04 	str.w	r2, [r3], #4
 800ec38:	e7d8      	b.n	800ebec <__multiply+0x50>
 800ec3a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ec3e:	f1ba 0f00 	cmp.w	sl, #0
 800ec42:	d024      	beq.n	800ec8e <__multiply+0xf2>
 800ec44:	f104 0e14 	add.w	lr, r4, #20
 800ec48:	46a9      	mov	r9, r5
 800ec4a:	f04f 0c00 	mov.w	ip, #0
 800ec4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec52:	f8d9 3000 	ldr.w	r3, [r9]
 800ec56:	fa1f fb87 	uxth.w	fp, r7
 800ec5a:	b29b      	uxth	r3, r3
 800ec5c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ec60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ec64:	f8d9 7000 	ldr.w	r7, [r9]
 800ec68:	4463      	add	r3, ip
 800ec6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec6e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ec72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec7c:	4572      	cmp	r2, lr
 800ec7e:	f849 3b04 	str.w	r3, [r9], #4
 800ec82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec86:	d8e2      	bhi.n	800ec4e <__multiply+0xb2>
 800ec88:	9b01      	ldr	r3, [sp, #4]
 800ec8a:	f845 c003 	str.w	ip, [r5, r3]
 800ec8e:	9b03      	ldr	r3, [sp, #12]
 800ec90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ec94:	3104      	adds	r1, #4
 800ec96:	f1b9 0f00 	cmp.w	r9, #0
 800ec9a:	d021      	beq.n	800ece0 <__multiply+0x144>
 800ec9c:	682b      	ldr	r3, [r5, #0]
 800ec9e:	f104 0c14 	add.w	ip, r4, #20
 800eca2:	46ae      	mov	lr, r5
 800eca4:	f04f 0a00 	mov.w	sl, #0
 800eca8:	f8bc b000 	ldrh.w	fp, [ip]
 800ecac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ecb0:	fb09 770b 	mla	r7, r9, fp, r7
 800ecb4:	4457      	add	r7, sl
 800ecb6:	b29b      	uxth	r3, r3
 800ecb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ecbc:	f84e 3b04 	str.w	r3, [lr], #4
 800ecc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ecc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecc8:	f8be 3000 	ldrh.w	r3, [lr]
 800eccc:	fb09 330a 	mla	r3, r9, sl, r3
 800ecd0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ecd4:	4562      	cmp	r2, ip
 800ecd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecda:	d8e5      	bhi.n	800eca8 <__multiply+0x10c>
 800ecdc:	9f01      	ldr	r7, [sp, #4]
 800ecde:	51eb      	str	r3, [r5, r7]
 800ece0:	3504      	adds	r5, #4
 800ece2:	e799      	b.n	800ec18 <__multiply+0x7c>
 800ece4:	3e01      	subs	r6, #1
 800ece6:	e79b      	b.n	800ec20 <__multiply+0x84>
 800ece8:	0800fc20 	.word	0x0800fc20
 800ecec:	0800fc31 	.word	0x0800fc31

0800ecf0 <__pow5mult>:
 800ecf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecf4:	4615      	mov	r5, r2
 800ecf6:	f012 0203 	ands.w	r2, r2, #3
 800ecfa:	4607      	mov	r7, r0
 800ecfc:	460e      	mov	r6, r1
 800ecfe:	d007      	beq.n	800ed10 <__pow5mult+0x20>
 800ed00:	4c25      	ldr	r4, [pc, #148]	@ (800ed98 <__pow5mult+0xa8>)
 800ed02:	3a01      	subs	r2, #1
 800ed04:	2300      	movs	r3, #0
 800ed06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed0a:	f7ff fe9f 	bl	800ea4c <__multadd>
 800ed0e:	4606      	mov	r6, r0
 800ed10:	10ad      	asrs	r5, r5, #2
 800ed12:	d03d      	beq.n	800ed90 <__pow5mult+0xa0>
 800ed14:	69fc      	ldr	r4, [r7, #28]
 800ed16:	b97c      	cbnz	r4, 800ed38 <__pow5mult+0x48>
 800ed18:	2010      	movs	r0, #16
 800ed1a:	f7ff fd7f 	bl	800e81c <malloc>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	61f8      	str	r0, [r7, #28]
 800ed22:	b928      	cbnz	r0, 800ed30 <__pow5mult+0x40>
 800ed24:	4b1d      	ldr	r3, [pc, #116]	@ (800ed9c <__pow5mult+0xac>)
 800ed26:	481e      	ldr	r0, [pc, #120]	@ (800eda0 <__pow5mult+0xb0>)
 800ed28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ed2c:	f000 faee 	bl	800f30c <__assert_func>
 800ed30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed34:	6004      	str	r4, [r0, #0]
 800ed36:	60c4      	str	r4, [r0, #12]
 800ed38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ed3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed40:	b94c      	cbnz	r4, 800ed56 <__pow5mult+0x66>
 800ed42:	f240 2171 	movw	r1, #625	@ 0x271
 800ed46:	4638      	mov	r0, r7
 800ed48:	f7ff ff12 	bl	800eb70 <__i2b>
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed52:	4604      	mov	r4, r0
 800ed54:	6003      	str	r3, [r0, #0]
 800ed56:	f04f 0900 	mov.w	r9, #0
 800ed5a:	07eb      	lsls	r3, r5, #31
 800ed5c:	d50a      	bpl.n	800ed74 <__pow5mult+0x84>
 800ed5e:	4631      	mov	r1, r6
 800ed60:	4622      	mov	r2, r4
 800ed62:	4638      	mov	r0, r7
 800ed64:	f7ff ff1a 	bl	800eb9c <__multiply>
 800ed68:	4631      	mov	r1, r6
 800ed6a:	4680      	mov	r8, r0
 800ed6c:	4638      	mov	r0, r7
 800ed6e:	f7ff fe4b 	bl	800ea08 <_Bfree>
 800ed72:	4646      	mov	r6, r8
 800ed74:	106d      	asrs	r5, r5, #1
 800ed76:	d00b      	beq.n	800ed90 <__pow5mult+0xa0>
 800ed78:	6820      	ldr	r0, [r4, #0]
 800ed7a:	b938      	cbnz	r0, 800ed8c <__pow5mult+0x9c>
 800ed7c:	4622      	mov	r2, r4
 800ed7e:	4621      	mov	r1, r4
 800ed80:	4638      	mov	r0, r7
 800ed82:	f7ff ff0b 	bl	800eb9c <__multiply>
 800ed86:	6020      	str	r0, [r4, #0]
 800ed88:	f8c0 9000 	str.w	r9, [r0]
 800ed8c:	4604      	mov	r4, r0
 800ed8e:	e7e4      	b.n	800ed5a <__pow5mult+0x6a>
 800ed90:	4630      	mov	r0, r6
 800ed92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed96:	bf00      	nop
 800ed98:	0800fc8c 	.word	0x0800fc8c
 800ed9c:	0800fbb1 	.word	0x0800fbb1
 800eda0:	0800fc31 	.word	0x0800fc31

0800eda4 <__lshift>:
 800eda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eda8:	460c      	mov	r4, r1
 800edaa:	6849      	ldr	r1, [r1, #4]
 800edac:	6923      	ldr	r3, [r4, #16]
 800edae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800edb2:	68a3      	ldr	r3, [r4, #8]
 800edb4:	4607      	mov	r7, r0
 800edb6:	4691      	mov	r9, r2
 800edb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800edbc:	f108 0601 	add.w	r6, r8, #1
 800edc0:	42b3      	cmp	r3, r6
 800edc2:	db0b      	blt.n	800eddc <__lshift+0x38>
 800edc4:	4638      	mov	r0, r7
 800edc6:	f7ff fddf 	bl	800e988 <_Balloc>
 800edca:	4605      	mov	r5, r0
 800edcc:	b948      	cbnz	r0, 800ede2 <__lshift+0x3e>
 800edce:	4602      	mov	r2, r0
 800edd0:	4b28      	ldr	r3, [pc, #160]	@ (800ee74 <__lshift+0xd0>)
 800edd2:	4829      	ldr	r0, [pc, #164]	@ (800ee78 <__lshift+0xd4>)
 800edd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800edd8:	f000 fa98 	bl	800f30c <__assert_func>
 800eddc:	3101      	adds	r1, #1
 800edde:	005b      	lsls	r3, r3, #1
 800ede0:	e7ee      	b.n	800edc0 <__lshift+0x1c>
 800ede2:	2300      	movs	r3, #0
 800ede4:	f100 0114 	add.w	r1, r0, #20
 800ede8:	f100 0210 	add.w	r2, r0, #16
 800edec:	4618      	mov	r0, r3
 800edee:	4553      	cmp	r3, sl
 800edf0:	db33      	blt.n	800ee5a <__lshift+0xb6>
 800edf2:	6920      	ldr	r0, [r4, #16]
 800edf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800edf8:	f104 0314 	add.w	r3, r4, #20
 800edfc:	f019 091f 	ands.w	r9, r9, #31
 800ee00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee08:	d02b      	beq.n	800ee62 <__lshift+0xbe>
 800ee0a:	f1c9 0e20 	rsb	lr, r9, #32
 800ee0e:	468a      	mov	sl, r1
 800ee10:	2200      	movs	r2, #0
 800ee12:	6818      	ldr	r0, [r3, #0]
 800ee14:	fa00 f009 	lsl.w	r0, r0, r9
 800ee18:	4310      	orrs	r0, r2
 800ee1a:	f84a 0b04 	str.w	r0, [sl], #4
 800ee1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee22:	459c      	cmp	ip, r3
 800ee24:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee28:	d8f3      	bhi.n	800ee12 <__lshift+0x6e>
 800ee2a:	ebac 0304 	sub.w	r3, ip, r4
 800ee2e:	3b15      	subs	r3, #21
 800ee30:	f023 0303 	bic.w	r3, r3, #3
 800ee34:	3304      	adds	r3, #4
 800ee36:	f104 0015 	add.w	r0, r4, #21
 800ee3a:	4584      	cmp	ip, r0
 800ee3c:	bf38      	it	cc
 800ee3e:	2304      	movcc	r3, #4
 800ee40:	50ca      	str	r2, [r1, r3]
 800ee42:	b10a      	cbz	r2, 800ee48 <__lshift+0xa4>
 800ee44:	f108 0602 	add.w	r6, r8, #2
 800ee48:	3e01      	subs	r6, #1
 800ee4a:	4638      	mov	r0, r7
 800ee4c:	612e      	str	r6, [r5, #16]
 800ee4e:	4621      	mov	r1, r4
 800ee50:	f7ff fdda 	bl	800ea08 <_Bfree>
 800ee54:	4628      	mov	r0, r5
 800ee56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee5e:	3301      	adds	r3, #1
 800ee60:	e7c5      	b.n	800edee <__lshift+0x4a>
 800ee62:	3904      	subs	r1, #4
 800ee64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee68:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee6c:	459c      	cmp	ip, r3
 800ee6e:	d8f9      	bhi.n	800ee64 <__lshift+0xc0>
 800ee70:	e7ea      	b.n	800ee48 <__lshift+0xa4>
 800ee72:	bf00      	nop
 800ee74:	0800fc20 	.word	0x0800fc20
 800ee78:	0800fc31 	.word	0x0800fc31

0800ee7c <__mcmp>:
 800ee7c:	690a      	ldr	r2, [r1, #16]
 800ee7e:	4603      	mov	r3, r0
 800ee80:	6900      	ldr	r0, [r0, #16]
 800ee82:	1a80      	subs	r0, r0, r2
 800ee84:	b530      	push	{r4, r5, lr}
 800ee86:	d10e      	bne.n	800eea6 <__mcmp+0x2a>
 800ee88:	3314      	adds	r3, #20
 800ee8a:	3114      	adds	r1, #20
 800ee8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ee90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ee94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ee98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ee9c:	4295      	cmp	r5, r2
 800ee9e:	d003      	beq.n	800eea8 <__mcmp+0x2c>
 800eea0:	d205      	bcs.n	800eeae <__mcmp+0x32>
 800eea2:	f04f 30ff 	mov.w	r0, #4294967295
 800eea6:	bd30      	pop	{r4, r5, pc}
 800eea8:	42a3      	cmp	r3, r4
 800eeaa:	d3f3      	bcc.n	800ee94 <__mcmp+0x18>
 800eeac:	e7fb      	b.n	800eea6 <__mcmp+0x2a>
 800eeae:	2001      	movs	r0, #1
 800eeb0:	e7f9      	b.n	800eea6 <__mcmp+0x2a>
	...

0800eeb4 <__mdiff>:
 800eeb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb8:	4689      	mov	r9, r1
 800eeba:	4606      	mov	r6, r0
 800eebc:	4611      	mov	r1, r2
 800eebe:	4648      	mov	r0, r9
 800eec0:	4614      	mov	r4, r2
 800eec2:	f7ff ffdb 	bl	800ee7c <__mcmp>
 800eec6:	1e05      	subs	r5, r0, #0
 800eec8:	d112      	bne.n	800eef0 <__mdiff+0x3c>
 800eeca:	4629      	mov	r1, r5
 800eecc:	4630      	mov	r0, r6
 800eece:	f7ff fd5b 	bl	800e988 <_Balloc>
 800eed2:	4602      	mov	r2, r0
 800eed4:	b928      	cbnz	r0, 800eee2 <__mdiff+0x2e>
 800eed6:	4b3f      	ldr	r3, [pc, #252]	@ (800efd4 <__mdiff+0x120>)
 800eed8:	f240 2137 	movw	r1, #567	@ 0x237
 800eedc:	483e      	ldr	r0, [pc, #248]	@ (800efd8 <__mdiff+0x124>)
 800eede:	f000 fa15 	bl	800f30c <__assert_func>
 800eee2:	2301      	movs	r3, #1
 800eee4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eee8:	4610      	mov	r0, r2
 800eeea:	b003      	add	sp, #12
 800eeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eef0:	bfbc      	itt	lt
 800eef2:	464b      	movlt	r3, r9
 800eef4:	46a1      	movlt	r9, r4
 800eef6:	4630      	mov	r0, r6
 800eef8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eefc:	bfba      	itte	lt
 800eefe:	461c      	movlt	r4, r3
 800ef00:	2501      	movlt	r5, #1
 800ef02:	2500      	movge	r5, #0
 800ef04:	f7ff fd40 	bl	800e988 <_Balloc>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	b918      	cbnz	r0, 800ef14 <__mdiff+0x60>
 800ef0c:	4b31      	ldr	r3, [pc, #196]	@ (800efd4 <__mdiff+0x120>)
 800ef0e:	f240 2145 	movw	r1, #581	@ 0x245
 800ef12:	e7e3      	b.n	800eedc <__mdiff+0x28>
 800ef14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ef18:	6926      	ldr	r6, [r4, #16]
 800ef1a:	60c5      	str	r5, [r0, #12]
 800ef1c:	f109 0310 	add.w	r3, r9, #16
 800ef20:	f109 0514 	add.w	r5, r9, #20
 800ef24:	f104 0e14 	add.w	lr, r4, #20
 800ef28:	f100 0b14 	add.w	fp, r0, #20
 800ef2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ef30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ef34:	9301      	str	r3, [sp, #4]
 800ef36:	46d9      	mov	r9, fp
 800ef38:	f04f 0c00 	mov.w	ip, #0
 800ef3c:	9b01      	ldr	r3, [sp, #4]
 800ef3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ef42:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ef46:	9301      	str	r3, [sp, #4]
 800ef48:	fa1f f38a 	uxth.w	r3, sl
 800ef4c:	4619      	mov	r1, r3
 800ef4e:	b283      	uxth	r3, r0
 800ef50:	1acb      	subs	r3, r1, r3
 800ef52:	0c00      	lsrs	r0, r0, #16
 800ef54:	4463      	add	r3, ip
 800ef56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ef5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ef5e:	b29b      	uxth	r3, r3
 800ef60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ef64:	4576      	cmp	r6, lr
 800ef66:	f849 3b04 	str.w	r3, [r9], #4
 800ef6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef6e:	d8e5      	bhi.n	800ef3c <__mdiff+0x88>
 800ef70:	1b33      	subs	r3, r6, r4
 800ef72:	3b15      	subs	r3, #21
 800ef74:	f023 0303 	bic.w	r3, r3, #3
 800ef78:	3415      	adds	r4, #21
 800ef7a:	3304      	adds	r3, #4
 800ef7c:	42a6      	cmp	r6, r4
 800ef7e:	bf38      	it	cc
 800ef80:	2304      	movcc	r3, #4
 800ef82:	441d      	add	r5, r3
 800ef84:	445b      	add	r3, fp
 800ef86:	461e      	mov	r6, r3
 800ef88:	462c      	mov	r4, r5
 800ef8a:	4544      	cmp	r4, r8
 800ef8c:	d30e      	bcc.n	800efac <__mdiff+0xf8>
 800ef8e:	f108 0103 	add.w	r1, r8, #3
 800ef92:	1b49      	subs	r1, r1, r5
 800ef94:	f021 0103 	bic.w	r1, r1, #3
 800ef98:	3d03      	subs	r5, #3
 800ef9a:	45a8      	cmp	r8, r5
 800ef9c:	bf38      	it	cc
 800ef9e:	2100      	movcc	r1, #0
 800efa0:	440b      	add	r3, r1
 800efa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800efa6:	b191      	cbz	r1, 800efce <__mdiff+0x11a>
 800efa8:	6117      	str	r7, [r2, #16]
 800efaa:	e79d      	b.n	800eee8 <__mdiff+0x34>
 800efac:	f854 1b04 	ldr.w	r1, [r4], #4
 800efb0:	46e6      	mov	lr, ip
 800efb2:	0c08      	lsrs	r0, r1, #16
 800efb4:	fa1c fc81 	uxtah	ip, ip, r1
 800efb8:	4471      	add	r1, lr
 800efba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800efbe:	b289      	uxth	r1, r1
 800efc0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800efc4:	f846 1b04 	str.w	r1, [r6], #4
 800efc8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800efcc:	e7dd      	b.n	800ef8a <__mdiff+0xd6>
 800efce:	3f01      	subs	r7, #1
 800efd0:	e7e7      	b.n	800efa2 <__mdiff+0xee>
 800efd2:	bf00      	nop
 800efd4:	0800fc20 	.word	0x0800fc20
 800efd8:	0800fc31 	.word	0x0800fc31

0800efdc <__d2b>:
 800efdc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800efe0:	460f      	mov	r7, r1
 800efe2:	2101      	movs	r1, #1
 800efe4:	ec59 8b10 	vmov	r8, r9, d0
 800efe8:	4616      	mov	r6, r2
 800efea:	f7ff fccd 	bl	800e988 <_Balloc>
 800efee:	4604      	mov	r4, r0
 800eff0:	b930      	cbnz	r0, 800f000 <__d2b+0x24>
 800eff2:	4602      	mov	r2, r0
 800eff4:	4b23      	ldr	r3, [pc, #140]	@ (800f084 <__d2b+0xa8>)
 800eff6:	4824      	ldr	r0, [pc, #144]	@ (800f088 <__d2b+0xac>)
 800eff8:	f240 310f 	movw	r1, #783	@ 0x30f
 800effc:	f000 f986 	bl	800f30c <__assert_func>
 800f000:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f004:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f008:	b10d      	cbz	r5, 800f00e <__d2b+0x32>
 800f00a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f00e:	9301      	str	r3, [sp, #4]
 800f010:	f1b8 0300 	subs.w	r3, r8, #0
 800f014:	d023      	beq.n	800f05e <__d2b+0x82>
 800f016:	4668      	mov	r0, sp
 800f018:	9300      	str	r3, [sp, #0]
 800f01a:	f7ff fd7c 	bl	800eb16 <__lo0bits>
 800f01e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f022:	b1d0      	cbz	r0, 800f05a <__d2b+0x7e>
 800f024:	f1c0 0320 	rsb	r3, r0, #32
 800f028:	fa02 f303 	lsl.w	r3, r2, r3
 800f02c:	430b      	orrs	r3, r1
 800f02e:	40c2      	lsrs	r2, r0
 800f030:	6163      	str	r3, [r4, #20]
 800f032:	9201      	str	r2, [sp, #4]
 800f034:	9b01      	ldr	r3, [sp, #4]
 800f036:	61a3      	str	r3, [r4, #24]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	bf0c      	ite	eq
 800f03c:	2201      	moveq	r2, #1
 800f03e:	2202      	movne	r2, #2
 800f040:	6122      	str	r2, [r4, #16]
 800f042:	b1a5      	cbz	r5, 800f06e <__d2b+0x92>
 800f044:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f048:	4405      	add	r5, r0
 800f04a:	603d      	str	r5, [r7, #0]
 800f04c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f050:	6030      	str	r0, [r6, #0]
 800f052:	4620      	mov	r0, r4
 800f054:	b003      	add	sp, #12
 800f056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f05a:	6161      	str	r1, [r4, #20]
 800f05c:	e7ea      	b.n	800f034 <__d2b+0x58>
 800f05e:	a801      	add	r0, sp, #4
 800f060:	f7ff fd59 	bl	800eb16 <__lo0bits>
 800f064:	9b01      	ldr	r3, [sp, #4]
 800f066:	6163      	str	r3, [r4, #20]
 800f068:	3020      	adds	r0, #32
 800f06a:	2201      	movs	r2, #1
 800f06c:	e7e8      	b.n	800f040 <__d2b+0x64>
 800f06e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f072:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f076:	6038      	str	r0, [r7, #0]
 800f078:	6918      	ldr	r0, [r3, #16]
 800f07a:	f7ff fd2d 	bl	800ead8 <__hi0bits>
 800f07e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f082:	e7e5      	b.n	800f050 <__d2b+0x74>
 800f084:	0800fc20 	.word	0x0800fc20
 800f088:	0800fc31 	.word	0x0800fc31

0800f08c <__sflush_r>:
 800f08c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f094:	0716      	lsls	r6, r2, #28
 800f096:	4605      	mov	r5, r0
 800f098:	460c      	mov	r4, r1
 800f09a:	d454      	bmi.n	800f146 <__sflush_r+0xba>
 800f09c:	684b      	ldr	r3, [r1, #4]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	dc02      	bgt.n	800f0a8 <__sflush_r+0x1c>
 800f0a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	dd48      	ble.n	800f13a <__sflush_r+0xae>
 800f0a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0aa:	2e00      	cmp	r6, #0
 800f0ac:	d045      	beq.n	800f13a <__sflush_r+0xae>
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f0b4:	682f      	ldr	r7, [r5, #0]
 800f0b6:	6a21      	ldr	r1, [r4, #32]
 800f0b8:	602b      	str	r3, [r5, #0]
 800f0ba:	d030      	beq.n	800f11e <__sflush_r+0x92>
 800f0bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	0759      	lsls	r1, r3, #29
 800f0c2:	d505      	bpl.n	800f0d0 <__sflush_r+0x44>
 800f0c4:	6863      	ldr	r3, [r4, #4]
 800f0c6:	1ad2      	subs	r2, r2, r3
 800f0c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f0ca:	b10b      	cbz	r3, 800f0d0 <__sflush_r+0x44>
 800f0cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f0ce:	1ad2      	subs	r2, r2, r3
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f0d4:	6a21      	ldr	r1, [r4, #32]
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	47b0      	blx	r6
 800f0da:	1c43      	adds	r3, r0, #1
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	d106      	bne.n	800f0ee <__sflush_r+0x62>
 800f0e0:	6829      	ldr	r1, [r5, #0]
 800f0e2:	291d      	cmp	r1, #29
 800f0e4:	d82b      	bhi.n	800f13e <__sflush_r+0xb2>
 800f0e6:	4a2a      	ldr	r2, [pc, #168]	@ (800f190 <__sflush_r+0x104>)
 800f0e8:	410a      	asrs	r2, r1
 800f0ea:	07d6      	lsls	r6, r2, #31
 800f0ec:	d427      	bmi.n	800f13e <__sflush_r+0xb2>
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	6062      	str	r2, [r4, #4]
 800f0f2:	04d9      	lsls	r1, r3, #19
 800f0f4:	6922      	ldr	r2, [r4, #16]
 800f0f6:	6022      	str	r2, [r4, #0]
 800f0f8:	d504      	bpl.n	800f104 <__sflush_r+0x78>
 800f0fa:	1c42      	adds	r2, r0, #1
 800f0fc:	d101      	bne.n	800f102 <__sflush_r+0x76>
 800f0fe:	682b      	ldr	r3, [r5, #0]
 800f100:	b903      	cbnz	r3, 800f104 <__sflush_r+0x78>
 800f102:	6560      	str	r0, [r4, #84]	@ 0x54
 800f104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f106:	602f      	str	r7, [r5, #0]
 800f108:	b1b9      	cbz	r1, 800f13a <__sflush_r+0xae>
 800f10a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f10e:	4299      	cmp	r1, r3
 800f110:	d002      	beq.n	800f118 <__sflush_r+0x8c>
 800f112:	4628      	mov	r0, r5
 800f114:	f7ff fb38 	bl	800e788 <_free_r>
 800f118:	2300      	movs	r3, #0
 800f11a:	6363      	str	r3, [r4, #52]	@ 0x34
 800f11c:	e00d      	b.n	800f13a <__sflush_r+0xae>
 800f11e:	2301      	movs	r3, #1
 800f120:	4628      	mov	r0, r5
 800f122:	47b0      	blx	r6
 800f124:	4602      	mov	r2, r0
 800f126:	1c50      	adds	r0, r2, #1
 800f128:	d1c9      	bne.n	800f0be <__sflush_r+0x32>
 800f12a:	682b      	ldr	r3, [r5, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d0c6      	beq.n	800f0be <__sflush_r+0x32>
 800f130:	2b1d      	cmp	r3, #29
 800f132:	d001      	beq.n	800f138 <__sflush_r+0xac>
 800f134:	2b16      	cmp	r3, #22
 800f136:	d11e      	bne.n	800f176 <__sflush_r+0xea>
 800f138:	602f      	str	r7, [r5, #0]
 800f13a:	2000      	movs	r0, #0
 800f13c:	e022      	b.n	800f184 <__sflush_r+0xf8>
 800f13e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f142:	b21b      	sxth	r3, r3
 800f144:	e01b      	b.n	800f17e <__sflush_r+0xf2>
 800f146:	690f      	ldr	r7, [r1, #16]
 800f148:	2f00      	cmp	r7, #0
 800f14a:	d0f6      	beq.n	800f13a <__sflush_r+0xae>
 800f14c:	0793      	lsls	r3, r2, #30
 800f14e:	680e      	ldr	r6, [r1, #0]
 800f150:	bf08      	it	eq
 800f152:	694b      	ldreq	r3, [r1, #20]
 800f154:	600f      	str	r7, [r1, #0]
 800f156:	bf18      	it	ne
 800f158:	2300      	movne	r3, #0
 800f15a:	eba6 0807 	sub.w	r8, r6, r7
 800f15e:	608b      	str	r3, [r1, #8]
 800f160:	f1b8 0f00 	cmp.w	r8, #0
 800f164:	dde9      	ble.n	800f13a <__sflush_r+0xae>
 800f166:	6a21      	ldr	r1, [r4, #32]
 800f168:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f16a:	4643      	mov	r3, r8
 800f16c:	463a      	mov	r2, r7
 800f16e:	4628      	mov	r0, r5
 800f170:	47b0      	blx	r6
 800f172:	2800      	cmp	r0, #0
 800f174:	dc08      	bgt.n	800f188 <__sflush_r+0xfc>
 800f176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f17a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f17e:	81a3      	strh	r3, [r4, #12]
 800f180:	f04f 30ff 	mov.w	r0, #4294967295
 800f184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f188:	4407      	add	r7, r0
 800f18a:	eba8 0800 	sub.w	r8, r8, r0
 800f18e:	e7e7      	b.n	800f160 <__sflush_r+0xd4>
 800f190:	dfbffffe 	.word	0xdfbffffe

0800f194 <_fflush_r>:
 800f194:	b538      	push	{r3, r4, r5, lr}
 800f196:	690b      	ldr	r3, [r1, #16]
 800f198:	4605      	mov	r5, r0
 800f19a:	460c      	mov	r4, r1
 800f19c:	b913      	cbnz	r3, 800f1a4 <_fflush_r+0x10>
 800f19e:	2500      	movs	r5, #0
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	bd38      	pop	{r3, r4, r5, pc}
 800f1a4:	b118      	cbz	r0, 800f1ae <_fflush_r+0x1a>
 800f1a6:	6a03      	ldr	r3, [r0, #32]
 800f1a8:	b90b      	cbnz	r3, 800f1ae <_fflush_r+0x1a>
 800f1aa:	f7fe faa7 	bl	800d6fc <__sinit>
 800f1ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d0f3      	beq.n	800f19e <_fflush_r+0xa>
 800f1b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f1b8:	07d0      	lsls	r0, r2, #31
 800f1ba:	d404      	bmi.n	800f1c6 <_fflush_r+0x32>
 800f1bc:	0599      	lsls	r1, r3, #22
 800f1be:	d402      	bmi.n	800f1c6 <_fflush_r+0x32>
 800f1c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1c2:	f7fe fc84 	bl	800dace <__retarget_lock_acquire_recursive>
 800f1c6:	4628      	mov	r0, r5
 800f1c8:	4621      	mov	r1, r4
 800f1ca:	f7ff ff5f 	bl	800f08c <__sflush_r>
 800f1ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f1d0:	07da      	lsls	r2, r3, #31
 800f1d2:	4605      	mov	r5, r0
 800f1d4:	d4e4      	bmi.n	800f1a0 <_fflush_r+0xc>
 800f1d6:	89a3      	ldrh	r3, [r4, #12]
 800f1d8:	059b      	lsls	r3, r3, #22
 800f1da:	d4e1      	bmi.n	800f1a0 <_fflush_r+0xc>
 800f1dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f1de:	f7fe fc77 	bl	800dad0 <__retarget_lock_release_recursive>
 800f1e2:	e7dd      	b.n	800f1a0 <_fflush_r+0xc>

0800f1e4 <__swhatbuf_r>:
 800f1e4:	b570      	push	{r4, r5, r6, lr}
 800f1e6:	460c      	mov	r4, r1
 800f1e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ec:	2900      	cmp	r1, #0
 800f1ee:	b096      	sub	sp, #88	@ 0x58
 800f1f0:	4615      	mov	r5, r2
 800f1f2:	461e      	mov	r6, r3
 800f1f4:	da0d      	bge.n	800f212 <__swhatbuf_r+0x2e>
 800f1f6:	89a3      	ldrh	r3, [r4, #12]
 800f1f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f1fc:	f04f 0100 	mov.w	r1, #0
 800f200:	bf14      	ite	ne
 800f202:	2340      	movne	r3, #64	@ 0x40
 800f204:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f208:	2000      	movs	r0, #0
 800f20a:	6031      	str	r1, [r6, #0]
 800f20c:	602b      	str	r3, [r5, #0]
 800f20e:	b016      	add	sp, #88	@ 0x58
 800f210:	bd70      	pop	{r4, r5, r6, pc}
 800f212:	466a      	mov	r2, sp
 800f214:	f000 f848 	bl	800f2a8 <_fstat_r>
 800f218:	2800      	cmp	r0, #0
 800f21a:	dbec      	blt.n	800f1f6 <__swhatbuf_r+0x12>
 800f21c:	9901      	ldr	r1, [sp, #4]
 800f21e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f222:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f226:	4259      	negs	r1, r3
 800f228:	4159      	adcs	r1, r3
 800f22a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f22e:	e7eb      	b.n	800f208 <__swhatbuf_r+0x24>

0800f230 <__smakebuf_r>:
 800f230:	898b      	ldrh	r3, [r1, #12]
 800f232:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f234:	079d      	lsls	r5, r3, #30
 800f236:	4606      	mov	r6, r0
 800f238:	460c      	mov	r4, r1
 800f23a:	d507      	bpl.n	800f24c <__smakebuf_r+0x1c>
 800f23c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f240:	6023      	str	r3, [r4, #0]
 800f242:	6123      	str	r3, [r4, #16]
 800f244:	2301      	movs	r3, #1
 800f246:	6163      	str	r3, [r4, #20]
 800f248:	b003      	add	sp, #12
 800f24a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f24c:	ab01      	add	r3, sp, #4
 800f24e:	466a      	mov	r2, sp
 800f250:	f7ff ffc8 	bl	800f1e4 <__swhatbuf_r>
 800f254:	9f00      	ldr	r7, [sp, #0]
 800f256:	4605      	mov	r5, r0
 800f258:	4639      	mov	r1, r7
 800f25a:	4630      	mov	r0, r6
 800f25c:	f7ff fb08 	bl	800e870 <_malloc_r>
 800f260:	b948      	cbnz	r0, 800f276 <__smakebuf_r+0x46>
 800f262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f266:	059a      	lsls	r2, r3, #22
 800f268:	d4ee      	bmi.n	800f248 <__smakebuf_r+0x18>
 800f26a:	f023 0303 	bic.w	r3, r3, #3
 800f26e:	f043 0302 	orr.w	r3, r3, #2
 800f272:	81a3      	strh	r3, [r4, #12]
 800f274:	e7e2      	b.n	800f23c <__smakebuf_r+0xc>
 800f276:	89a3      	ldrh	r3, [r4, #12]
 800f278:	6020      	str	r0, [r4, #0]
 800f27a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f27e:	81a3      	strh	r3, [r4, #12]
 800f280:	9b01      	ldr	r3, [sp, #4]
 800f282:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f286:	b15b      	cbz	r3, 800f2a0 <__smakebuf_r+0x70>
 800f288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f28c:	4630      	mov	r0, r6
 800f28e:	f000 f81d 	bl	800f2cc <_isatty_r>
 800f292:	b128      	cbz	r0, 800f2a0 <__smakebuf_r+0x70>
 800f294:	89a3      	ldrh	r3, [r4, #12]
 800f296:	f023 0303 	bic.w	r3, r3, #3
 800f29a:	f043 0301 	orr.w	r3, r3, #1
 800f29e:	81a3      	strh	r3, [r4, #12]
 800f2a0:	89a3      	ldrh	r3, [r4, #12]
 800f2a2:	431d      	orrs	r5, r3
 800f2a4:	81a5      	strh	r5, [r4, #12]
 800f2a6:	e7cf      	b.n	800f248 <__smakebuf_r+0x18>

0800f2a8 <_fstat_r>:
 800f2a8:	b538      	push	{r3, r4, r5, lr}
 800f2aa:	4d07      	ldr	r5, [pc, #28]	@ (800f2c8 <_fstat_r+0x20>)
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	4604      	mov	r4, r0
 800f2b0:	4608      	mov	r0, r1
 800f2b2:	4611      	mov	r1, r2
 800f2b4:	602b      	str	r3, [r5, #0]
 800f2b6:	f7f3 fced 	bl	8002c94 <_fstat>
 800f2ba:	1c43      	adds	r3, r0, #1
 800f2bc:	d102      	bne.n	800f2c4 <_fstat_r+0x1c>
 800f2be:	682b      	ldr	r3, [r5, #0]
 800f2c0:	b103      	cbz	r3, 800f2c4 <_fstat_r+0x1c>
 800f2c2:	6023      	str	r3, [r4, #0]
 800f2c4:	bd38      	pop	{r3, r4, r5, pc}
 800f2c6:	bf00      	nop
 800f2c8:	2000117c 	.word	0x2000117c

0800f2cc <_isatty_r>:
 800f2cc:	b538      	push	{r3, r4, r5, lr}
 800f2ce:	4d06      	ldr	r5, [pc, #24]	@ (800f2e8 <_isatty_r+0x1c>)
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	4604      	mov	r4, r0
 800f2d4:	4608      	mov	r0, r1
 800f2d6:	602b      	str	r3, [r5, #0]
 800f2d8:	f7f3 fcec 	bl	8002cb4 <_isatty>
 800f2dc:	1c43      	adds	r3, r0, #1
 800f2de:	d102      	bne.n	800f2e6 <_isatty_r+0x1a>
 800f2e0:	682b      	ldr	r3, [r5, #0]
 800f2e2:	b103      	cbz	r3, 800f2e6 <_isatty_r+0x1a>
 800f2e4:	6023      	str	r3, [r4, #0]
 800f2e6:	bd38      	pop	{r3, r4, r5, pc}
 800f2e8:	2000117c 	.word	0x2000117c

0800f2ec <_sbrk_r>:
 800f2ec:	b538      	push	{r3, r4, r5, lr}
 800f2ee:	4d06      	ldr	r5, [pc, #24]	@ (800f308 <_sbrk_r+0x1c>)
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	4604      	mov	r4, r0
 800f2f4:	4608      	mov	r0, r1
 800f2f6:	602b      	str	r3, [r5, #0]
 800f2f8:	f7f3 fcf4 	bl	8002ce4 <_sbrk>
 800f2fc:	1c43      	adds	r3, r0, #1
 800f2fe:	d102      	bne.n	800f306 <_sbrk_r+0x1a>
 800f300:	682b      	ldr	r3, [r5, #0]
 800f302:	b103      	cbz	r3, 800f306 <_sbrk_r+0x1a>
 800f304:	6023      	str	r3, [r4, #0]
 800f306:	bd38      	pop	{r3, r4, r5, pc}
 800f308:	2000117c 	.word	0x2000117c

0800f30c <__assert_func>:
 800f30c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f30e:	4614      	mov	r4, r2
 800f310:	461a      	mov	r2, r3
 800f312:	4b09      	ldr	r3, [pc, #36]	@ (800f338 <__assert_func+0x2c>)
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	4605      	mov	r5, r0
 800f318:	68d8      	ldr	r0, [r3, #12]
 800f31a:	b954      	cbnz	r4, 800f332 <__assert_func+0x26>
 800f31c:	4b07      	ldr	r3, [pc, #28]	@ (800f33c <__assert_func+0x30>)
 800f31e:	461c      	mov	r4, r3
 800f320:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f324:	9100      	str	r1, [sp, #0]
 800f326:	462b      	mov	r3, r5
 800f328:	4905      	ldr	r1, [pc, #20]	@ (800f340 <__assert_func+0x34>)
 800f32a:	f000 f841 	bl	800f3b0 <fiprintf>
 800f32e:	f000 f851 	bl	800f3d4 <abort>
 800f332:	4b04      	ldr	r3, [pc, #16]	@ (800f344 <__assert_func+0x38>)
 800f334:	e7f4      	b.n	800f320 <__assert_func+0x14>
 800f336:	bf00      	nop
 800f338:	20000128 	.word	0x20000128
 800f33c:	0800fdcd 	.word	0x0800fdcd
 800f340:	0800fd9f 	.word	0x0800fd9f
 800f344:	0800fd92 	.word	0x0800fd92

0800f348 <_calloc_r>:
 800f348:	b570      	push	{r4, r5, r6, lr}
 800f34a:	fba1 5402 	umull	r5, r4, r1, r2
 800f34e:	b93c      	cbnz	r4, 800f360 <_calloc_r+0x18>
 800f350:	4629      	mov	r1, r5
 800f352:	f7ff fa8d 	bl	800e870 <_malloc_r>
 800f356:	4606      	mov	r6, r0
 800f358:	b928      	cbnz	r0, 800f366 <_calloc_r+0x1e>
 800f35a:	2600      	movs	r6, #0
 800f35c:	4630      	mov	r0, r6
 800f35e:	bd70      	pop	{r4, r5, r6, pc}
 800f360:	220c      	movs	r2, #12
 800f362:	6002      	str	r2, [r0, #0]
 800f364:	e7f9      	b.n	800f35a <_calloc_r+0x12>
 800f366:	462a      	mov	r2, r5
 800f368:	4621      	mov	r1, r4
 800f36a:	f7fe fb33 	bl	800d9d4 <memset>
 800f36e:	e7f5      	b.n	800f35c <_calloc_r+0x14>

0800f370 <__ascii_mbtowc>:
 800f370:	b082      	sub	sp, #8
 800f372:	b901      	cbnz	r1, 800f376 <__ascii_mbtowc+0x6>
 800f374:	a901      	add	r1, sp, #4
 800f376:	b142      	cbz	r2, 800f38a <__ascii_mbtowc+0x1a>
 800f378:	b14b      	cbz	r3, 800f38e <__ascii_mbtowc+0x1e>
 800f37a:	7813      	ldrb	r3, [r2, #0]
 800f37c:	600b      	str	r3, [r1, #0]
 800f37e:	7812      	ldrb	r2, [r2, #0]
 800f380:	1e10      	subs	r0, r2, #0
 800f382:	bf18      	it	ne
 800f384:	2001      	movne	r0, #1
 800f386:	b002      	add	sp, #8
 800f388:	4770      	bx	lr
 800f38a:	4610      	mov	r0, r2
 800f38c:	e7fb      	b.n	800f386 <__ascii_mbtowc+0x16>
 800f38e:	f06f 0001 	mvn.w	r0, #1
 800f392:	e7f8      	b.n	800f386 <__ascii_mbtowc+0x16>

0800f394 <__ascii_wctomb>:
 800f394:	4603      	mov	r3, r0
 800f396:	4608      	mov	r0, r1
 800f398:	b141      	cbz	r1, 800f3ac <__ascii_wctomb+0x18>
 800f39a:	2aff      	cmp	r2, #255	@ 0xff
 800f39c:	d904      	bls.n	800f3a8 <__ascii_wctomb+0x14>
 800f39e:	228a      	movs	r2, #138	@ 0x8a
 800f3a0:	601a      	str	r2, [r3, #0]
 800f3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a6:	4770      	bx	lr
 800f3a8:	700a      	strb	r2, [r1, #0]
 800f3aa:	2001      	movs	r0, #1
 800f3ac:	4770      	bx	lr
	...

0800f3b0 <fiprintf>:
 800f3b0:	b40e      	push	{r1, r2, r3}
 800f3b2:	b503      	push	{r0, r1, lr}
 800f3b4:	4601      	mov	r1, r0
 800f3b6:	ab03      	add	r3, sp, #12
 800f3b8:	4805      	ldr	r0, [pc, #20]	@ (800f3d0 <fiprintf+0x20>)
 800f3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3be:	6800      	ldr	r0, [r0, #0]
 800f3c0:	9301      	str	r3, [sp, #4]
 800f3c2:	f000 f837 	bl	800f434 <_vfiprintf_r>
 800f3c6:	b002      	add	sp, #8
 800f3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3cc:	b003      	add	sp, #12
 800f3ce:	4770      	bx	lr
 800f3d0:	20000128 	.word	0x20000128

0800f3d4 <abort>:
 800f3d4:	b508      	push	{r3, lr}
 800f3d6:	2006      	movs	r0, #6
 800f3d8:	f000 f96c 	bl	800f6b4 <raise>
 800f3dc:	2001      	movs	r0, #1
 800f3de:	f7f3 fc09 	bl	8002bf4 <_exit>

0800f3e2 <__sfputc_r>:
 800f3e2:	6893      	ldr	r3, [r2, #8]
 800f3e4:	3b01      	subs	r3, #1
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	b410      	push	{r4}
 800f3ea:	6093      	str	r3, [r2, #8]
 800f3ec:	da08      	bge.n	800f400 <__sfputc_r+0x1e>
 800f3ee:	6994      	ldr	r4, [r2, #24]
 800f3f0:	42a3      	cmp	r3, r4
 800f3f2:	db01      	blt.n	800f3f8 <__sfputc_r+0x16>
 800f3f4:	290a      	cmp	r1, #10
 800f3f6:	d103      	bne.n	800f400 <__sfputc_r+0x1e>
 800f3f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f3fc:	f7fe ba55 	b.w	800d8aa <__swbuf_r>
 800f400:	6813      	ldr	r3, [r2, #0]
 800f402:	1c58      	adds	r0, r3, #1
 800f404:	6010      	str	r0, [r2, #0]
 800f406:	7019      	strb	r1, [r3, #0]
 800f408:	4608      	mov	r0, r1
 800f40a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <__sfputs_r>:
 800f410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f412:	4606      	mov	r6, r0
 800f414:	460f      	mov	r7, r1
 800f416:	4614      	mov	r4, r2
 800f418:	18d5      	adds	r5, r2, r3
 800f41a:	42ac      	cmp	r4, r5
 800f41c:	d101      	bne.n	800f422 <__sfputs_r+0x12>
 800f41e:	2000      	movs	r0, #0
 800f420:	e007      	b.n	800f432 <__sfputs_r+0x22>
 800f422:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f426:	463a      	mov	r2, r7
 800f428:	4630      	mov	r0, r6
 800f42a:	f7ff ffda 	bl	800f3e2 <__sfputc_r>
 800f42e:	1c43      	adds	r3, r0, #1
 800f430:	d1f3      	bne.n	800f41a <__sfputs_r+0xa>
 800f432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f434 <_vfiprintf_r>:
 800f434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f438:	460d      	mov	r5, r1
 800f43a:	b09d      	sub	sp, #116	@ 0x74
 800f43c:	4614      	mov	r4, r2
 800f43e:	4698      	mov	r8, r3
 800f440:	4606      	mov	r6, r0
 800f442:	b118      	cbz	r0, 800f44c <_vfiprintf_r+0x18>
 800f444:	6a03      	ldr	r3, [r0, #32]
 800f446:	b90b      	cbnz	r3, 800f44c <_vfiprintf_r+0x18>
 800f448:	f7fe f958 	bl	800d6fc <__sinit>
 800f44c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f44e:	07d9      	lsls	r1, r3, #31
 800f450:	d405      	bmi.n	800f45e <_vfiprintf_r+0x2a>
 800f452:	89ab      	ldrh	r3, [r5, #12]
 800f454:	059a      	lsls	r2, r3, #22
 800f456:	d402      	bmi.n	800f45e <_vfiprintf_r+0x2a>
 800f458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f45a:	f7fe fb38 	bl	800dace <__retarget_lock_acquire_recursive>
 800f45e:	89ab      	ldrh	r3, [r5, #12]
 800f460:	071b      	lsls	r3, r3, #28
 800f462:	d501      	bpl.n	800f468 <_vfiprintf_r+0x34>
 800f464:	692b      	ldr	r3, [r5, #16]
 800f466:	b99b      	cbnz	r3, 800f490 <_vfiprintf_r+0x5c>
 800f468:	4629      	mov	r1, r5
 800f46a:	4630      	mov	r0, r6
 800f46c:	f7fe fa5c 	bl	800d928 <__swsetup_r>
 800f470:	b170      	cbz	r0, 800f490 <_vfiprintf_r+0x5c>
 800f472:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f474:	07dc      	lsls	r4, r3, #31
 800f476:	d504      	bpl.n	800f482 <_vfiprintf_r+0x4e>
 800f478:	f04f 30ff 	mov.w	r0, #4294967295
 800f47c:	b01d      	add	sp, #116	@ 0x74
 800f47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f482:	89ab      	ldrh	r3, [r5, #12]
 800f484:	0598      	lsls	r0, r3, #22
 800f486:	d4f7      	bmi.n	800f478 <_vfiprintf_r+0x44>
 800f488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f48a:	f7fe fb21 	bl	800dad0 <__retarget_lock_release_recursive>
 800f48e:	e7f3      	b.n	800f478 <_vfiprintf_r+0x44>
 800f490:	2300      	movs	r3, #0
 800f492:	9309      	str	r3, [sp, #36]	@ 0x24
 800f494:	2320      	movs	r3, #32
 800f496:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f49a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f49e:	2330      	movs	r3, #48	@ 0x30
 800f4a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f650 <_vfiprintf_r+0x21c>
 800f4a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f4a8:	f04f 0901 	mov.w	r9, #1
 800f4ac:	4623      	mov	r3, r4
 800f4ae:	469a      	mov	sl, r3
 800f4b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4b4:	b10a      	cbz	r2, 800f4ba <_vfiprintf_r+0x86>
 800f4b6:	2a25      	cmp	r2, #37	@ 0x25
 800f4b8:	d1f9      	bne.n	800f4ae <_vfiprintf_r+0x7a>
 800f4ba:	ebba 0b04 	subs.w	fp, sl, r4
 800f4be:	d00b      	beq.n	800f4d8 <_vfiprintf_r+0xa4>
 800f4c0:	465b      	mov	r3, fp
 800f4c2:	4622      	mov	r2, r4
 800f4c4:	4629      	mov	r1, r5
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	f7ff ffa2 	bl	800f410 <__sfputs_r>
 800f4cc:	3001      	adds	r0, #1
 800f4ce:	f000 80a7 	beq.w	800f620 <_vfiprintf_r+0x1ec>
 800f4d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4d4:	445a      	add	r2, fp
 800f4d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	f000 809f 	beq.w	800f620 <_vfiprintf_r+0x1ec>
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800f4e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4ec:	f10a 0a01 	add.w	sl, sl, #1
 800f4f0:	9304      	str	r3, [sp, #16]
 800f4f2:	9307      	str	r3, [sp, #28]
 800f4f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4fa:	4654      	mov	r4, sl
 800f4fc:	2205      	movs	r2, #5
 800f4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f502:	4853      	ldr	r0, [pc, #332]	@ (800f650 <_vfiprintf_r+0x21c>)
 800f504:	f7f0 fe6c 	bl	80001e0 <memchr>
 800f508:	9a04      	ldr	r2, [sp, #16]
 800f50a:	b9d8      	cbnz	r0, 800f544 <_vfiprintf_r+0x110>
 800f50c:	06d1      	lsls	r1, r2, #27
 800f50e:	bf44      	itt	mi
 800f510:	2320      	movmi	r3, #32
 800f512:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f516:	0713      	lsls	r3, r2, #28
 800f518:	bf44      	itt	mi
 800f51a:	232b      	movmi	r3, #43	@ 0x2b
 800f51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f520:	f89a 3000 	ldrb.w	r3, [sl]
 800f524:	2b2a      	cmp	r3, #42	@ 0x2a
 800f526:	d015      	beq.n	800f554 <_vfiprintf_r+0x120>
 800f528:	9a07      	ldr	r2, [sp, #28]
 800f52a:	4654      	mov	r4, sl
 800f52c:	2000      	movs	r0, #0
 800f52e:	f04f 0c0a 	mov.w	ip, #10
 800f532:	4621      	mov	r1, r4
 800f534:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f538:	3b30      	subs	r3, #48	@ 0x30
 800f53a:	2b09      	cmp	r3, #9
 800f53c:	d94b      	bls.n	800f5d6 <_vfiprintf_r+0x1a2>
 800f53e:	b1b0      	cbz	r0, 800f56e <_vfiprintf_r+0x13a>
 800f540:	9207      	str	r2, [sp, #28]
 800f542:	e014      	b.n	800f56e <_vfiprintf_r+0x13a>
 800f544:	eba0 0308 	sub.w	r3, r0, r8
 800f548:	fa09 f303 	lsl.w	r3, r9, r3
 800f54c:	4313      	orrs	r3, r2
 800f54e:	9304      	str	r3, [sp, #16]
 800f550:	46a2      	mov	sl, r4
 800f552:	e7d2      	b.n	800f4fa <_vfiprintf_r+0xc6>
 800f554:	9b03      	ldr	r3, [sp, #12]
 800f556:	1d19      	adds	r1, r3, #4
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	9103      	str	r1, [sp, #12]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	bfbb      	ittet	lt
 800f560:	425b      	neglt	r3, r3
 800f562:	f042 0202 	orrlt.w	r2, r2, #2
 800f566:	9307      	strge	r3, [sp, #28]
 800f568:	9307      	strlt	r3, [sp, #28]
 800f56a:	bfb8      	it	lt
 800f56c:	9204      	strlt	r2, [sp, #16]
 800f56e:	7823      	ldrb	r3, [r4, #0]
 800f570:	2b2e      	cmp	r3, #46	@ 0x2e
 800f572:	d10a      	bne.n	800f58a <_vfiprintf_r+0x156>
 800f574:	7863      	ldrb	r3, [r4, #1]
 800f576:	2b2a      	cmp	r3, #42	@ 0x2a
 800f578:	d132      	bne.n	800f5e0 <_vfiprintf_r+0x1ac>
 800f57a:	9b03      	ldr	r3, [sp, #12]
 800f57c:	1d1a      	adds	r2, r3, #4
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	9203      	str	r2, [sp, #12]
 800f582:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f586:	3402      	adds	r4, #2
 800f588:	9305      	str	r3, [sp, #20]
 800f58a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f660 <_vfiprintf_r+0x22c>
 800f58e:	7821      	ldrb	r1, [r4, #0]
 800f590:	2203      	movs	r2, #3
 800f592:	4650      	mov	r0, sl
 800f594:	f7f0 fe24 	bl	80001e0 <memchr>
 800f598:	b138      	cbz	r0, 800f5aa <_vfiprintf_r+0x176>
 800f59a:	9b04      	ldr	r3, [sp, #16]
 800f59c:	eba0 000a 	sub.w	r0, r0, sl
 800f5a0:	2240      	movs	r2, #64	@ 0x40
 800f5a2:	4082      	lsls	r2, r0
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	3401      	adds	r4, #1
 800f5a8:	9304      	str	r3, [sp, #16]
 800f5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5ae:	4829      	ldr	r0, [pc, #164]	@ (800f654 <_vfiprintf_r+0x220>)
 800f5b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f5b4:	2206      	movs	r2, #6
 800f5b6:	f7f0 fe13 	bl	80001e0 <memchr>
 800f5ba:	2800      	cmp	r0, #0
 800f5bc:	d03f      	beq.n	800f63e <_vfiprintf_r+0x20a>
 800f5be:	4b26      	ldr	r3, [pc, #152]	@ (800f658 <_vfiprintf_r+0x224>)
 800f5c0:	bb1b      	cbnz	r3, 800f60a <_vfiprintf_r+0x1d6>
 800f5c2:	9b03      	ldr	r3, [sp, #12]
 800f5c4:	3307      	adds	r3, #7
 800f5c6:	f023 0307 	bic.w	r3, r3, #7
 800f5ca:	3308      	adds	r3, #8
 800f5cc:	9303      	str	r3, [sp, #12]
 800f5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5d0:	443b      	add	r3, r7
 800f5d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5d4:	e76a      	b.n	800f4ac <_vfiprintf_r+0x78>
 800f5d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5da:	460c      	mov	r4, r1
 800f5dc:	2001      	movs	r0, #1
 800f5de:	e7a8      	b.n	800f532 <_vfiprintf_r+0xfe>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	3401      	adds	r4, #1
 800f5e4:	9305      	str	r3, [sp, #20]
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	f04f 0c0a 	mov.w	ip, #10
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5f2:	3a30      	subs	r2, #48	@ 0x30
 800f5f4:	2a09      	cmp	r2, #9
 800f5f6:	d903      	bls.n	800f600 <_vfiprintf_r+0x1cc>
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d0c6      	beq.n	800f58a <_vfiprintf_r+0x156>
 800f5fc:	9105      	str	r1, [sp, #20]
 800f5fe:	e7c4      	b.n	800f58a <_vfiprintf_r+0x156>
 800f600:	fb0c 2101 	mla	r1, ip, r1, r2
 800f604:	4604      	mov	r4, r0
 800f606:	2301      	movs	r3, #1
 800f608:	e7f0      	b.n	800f5ec <_vfiprintf_r+0x1b8>
 800f60a:	ab03      	add	r3, sp, #12
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	462a      	mov	r2, r5
 800f610:	4b12      	ldr	r3, [pc, #72]	@ (800f65c <_vfiprintf_r+0x228>)
 800f612:	a904      	add	r1, sp, #16
 800f614:	4630      	mov	r0, r6
 800f616:	f7fd fc2d 	bl	800ce74 <_printf_float>
 800f61a:	4607      	mov	r7, r0
 800f61c:	1c78      	adds	r0, r7, #1
 800f61e:	d1d6      	bne.n	800f5ce <_vfiprintf_r+0x19a>
 800f620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f622:	07d9      	lsls	r1, r3, #31
 800f624:	d405      	bmi.n	800f632 <_vfiprintf_r+0x1fe>
 800f626:	89ab      	ldrh	r3, [r5, #12]
 800f628:	059a      	lsls	r2, r3, #22
 800f62a:	d402      	bmi.n	800f632 <_vfiprintf_r+0x1fe>
 800f62c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f62e:	f7fe fa4f 	bl	800dad0 <__retarget_lock_release_recursive>
 800f632:	89ab      	ldrh	r3, [r5, #12]
 800f634:	065b      	lsls	r3, r3, #25
 800f636:	f53f af1f 	bmi.w	800f478 <_vfiprintf_r+0x44>
 800f63a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f63c:	e71e      	b.n	800f47c <_vfiprintf_r+0x48>
 800f63e:	ab03      	add	r3, sp, #12
 800f640:	9300      	str	r3, [sp, #0]
 800f642:	462a      	mov	r2, r5
 800f644:	4b05      	ldr	r3, [pc, #20]	@ (800f65c <_vfiprintf_r+0x228>)
 800f646:	a904      	add	r1, sp, #16
 800f648:	4630      	mov	r0, r6
 800f64a:	f7fd feab 	bl	800d3a4 <_printf_i>
 800f64e:	e7e4      	b.n	800f61a <_vfiprintf_r+0x1e6>
 800f650:	0800fecf 	.word	0x0800fecf
 800f654:	0800fed9 	.word	0x0800fed9
 800f658:	0800ce75 	.word	0x0800ce75
 800f65c:	0800f411 	.word	0x0800f411
 800f660:	0800fed5 	.word	0x0800fed5

0800f664 <_raise_r>:
 800f664:	291f      	cmp	r1, #31
 800f666:	b538      	push	{r3, r4, r5, lr}
 800f668:	4605      	mov	r5, r0
 800f66a:	460c      	mov	r4, r1
 800f66c:	d904      	bls.n	800f678 <_raise_r+0x14>
 800f66e:	2316      	movs	r3, #22
 800f670:	6003      	str	r3, [r0, #0]
 800f672:	f04f 30ff 	mov.w	r0, #4294967295
 800f676:	bd38      	pop	{r3, r4, r5, pc}
 800f678:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f67a:	b112      	cbz	r2, 800f682 <_raise_r+0x1e>
 800f67c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f680:	b94b      	cbnz	r3, 800f696 <_raise_r+0x32>
 800f682:	4628      	mov	r0, r5
 800f684:	f000 f830 	bl	800f6e8 <_getpid_r>
 800f688:	4622      	mov	r2, r4
 800f68a:	4601      	mov	r1, r0
 800f68c:	4628      	mov	r0, r5
 800f68e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f692:	f000 b817 	b.w	800f6c4 <_kill_r>
 800f696:	2b01      	cmp	r3, #1
 800f698:	d00a      	beq.n	800f6b0 <_raise_r+0x4c>
 800f69a:	1c59      	adds	r1, r3, #1
 800f69c:	d103      	bne.n	800f6a6 <_raise_r+0x42>
 800f69e:	2316      	movs	r3, #22
 800f6a0:	6003      	str	r3, [r0, #0]
 800f6a2:	2001      	movs	r0, #1
 800f6a4:	e7e7      	b.n	800f676 <_raise_r+0x12>
 800f6a6:	2100      	movs	r1, #0
 800f6a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	4798      	blx	r3
 800f6b0:	2000      	movs	r0, #0
 800f6b2:	e7e0      	b.n	800f676 <_raise_r+0x12>

0800f6b4 <raise>:
 800f6b4:	4b02      	ldr	r3, [pc, #8]	@ (800f6c0 <raise+0xc>)
 800f6b6:	4601      	mov	r1, r0
 800f6b8:	6818      	ldr	r0, [r3, #0]
 800f6ba:	f7ff bfd3 	b.w	800f664 <_raise_r>
 800f6be:	bf00      	nop
 800f6c0:	20000128 	.word	0x20000128

0800f6c4 <_kill_r>:
 800f6c4:	b538      	push	{r3, r4, r5, lr}
 800f6c6:	4d07      	ldr	r5, [pc, #28]	@ (800f6e4 <_kill_r+0x20>)
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	4604      	mov	r4, r0
 800f6cc:	4608      	mov	r0, r1
 800f6ce:	4611      	mov	r1, r2
 800f6d0:	602b      	str	r3, [r5, #0]
 800f6d2:	f7f3 fa7f 	bl	8002bd4 <_kill>
 800f6d6:	1c43      	adds	r3, r0, #1
 800f6d8:	d102      	bne.n	800f6e0 <_kill_r+0x1c>
 800f6da:	682b      	ldr	r3, [r5, #0]
 800f6dc:	b103      	cbz	r3, 800f6e0 <_kill_r+0x1c>
 800f6de:	6023      	str	r3, [r4, #0]
 800f6e0:	bd38      	pop	{r3, r4, r5, pc}
 800f6e2:	bf00      	nop
 800f6e4:	2000117c 	.word	0x2000117c

0800f6e8 <_getpid_r>:
 800f6e8:	f7f3 ba6c 	b.w	8002bc4 <_getpid>

0800f6ec <_init>:
 800f6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ee:	bf00      	nop
 800f6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6f2:	bc08      	pop	{r3}
 800f6f4:	469e      	mov	lr, r3
 800f6f6:	4770      	bx	lr

0800f6f8 <_fini>:
 800f6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fa:	bf00      	nop
 800f6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6fe:	bc08      	pop	{r3}
 800f700:	469e      	mov	lr, r3
 800f702:	4770      	bx	lr
